{"\nFor the project `koperasi`:\n\nCodebase Context:\n--- File: 818 # web/frontend/src/boilerplate/init/framework/nothing.json ---\n{\n  \"name\": \"Nothing, I am fine\",\n  \"value\": {}\n}\n\n\n--- File: 836 # web/koperasi-dashboard/src/boilerplate/init/framework/nothing.json ---\n{\n  \"name\": \"Nothing, I am fine\",\n  \"value\": {}\n}\n\n\n--- File: 821 # web/frontend/src/boilerplate/init/language/nothing.json ---\n{\n  \"name\": \"Good ol' JS\",\n  \"value\": {\n    \"extension\": \"js\"\n  }\n}\n\n\n--- File: 839 # web/koperasi-dashboard/src/boilerplate/init/language/nothing.json ---\n{\n  \"name\": \"Good ol' JS\",\n  \"value\": {\n    \"extension\": \"js\"\n  }\n}\n\n\n--- File: 814 # web/frontend/src/boilerplate/init/framework/03-backbone.json ---\n{\n  \"name\": \"Backbone.js\",\n  \"value\": {\n    \"dependencies\": [\"backbone\"]\n  }\n}\n\n\n--- File: 815 # web/frontend/src/boilerplate/init/framework/04-angular2.json ---\n{\n  \"name\": \"Angular 2\",\n  \"value\": {\n    \"dependencies\": [\"angular2\"]\n  }\n}\n\n\n--- File: 825 # web/frontend/src/boilerplate/init/preprocessor/nothing.json ---\n{\n  \"name\": \"Nothing, I am fine\",\n  \"value\": {\n    \"extension\": \"css\"\n  }\n}\n\n\n--- File: 832 # web/koperasi-dashboard/src/boilerplate/init/framework/03-backbone.json ---\n{\n  \"name\": \"Backbone.js\",\n  \"value\": {\n    \"dependencies\": [\"backbone\"]\n  }\n}\n\n\n--- File: 833 # web/koperasi-dashboard/src/boilerplate/init/framework/04-angular2.json ---\n{\n  \"name\": \"Angular 2\",\n  \"value\": {\n    \"dependencies\": [\"angular2\"]\n  }\n}\n\n\n--- File: 843 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/nothing.json ---\n{\n  \"name\": \"Nothing, I am fine\",\n  \"value\": {\n    \"extension\": \"css\"\n  }\n}\n\n\n--- File: 816 # web/frontend/src/boilerplate/init/framework/05-aurelia.json ---\n{\n  \"name\": \"Aurelia\",\n  \"value\": {\n    \"dependencies\": [\"aurelia-framework\"]\n  }\n}\n\n\n--- File: 834 # web/koperasi-dashboard/src/boilerplate/init/framework/05-aurelia.json ---\n{\n  \"name\": \"Aurelia\",\n  \"value\": {\n    \"dependencies\": [\"aurelia-framework\"]\n  }\n}\n\n\n--- File: 813 # web/frontend/src/boilerplate/init/framework/02-backboneMarionette.json ---\n{\n  \"name\": \"Backbone.js + Marionette.js\",\n  \"value\": {\n    \"dependencies\": [\"backbone\", \"backbone.marionette\"]\n  }\n}\n\n\n--- File: 831 # web/koperasi-dashboard/src/boilerplate/init/framework/02-backboneMarionette.json ---\n{\n  \"name\": \"Backbone.js + Marionette.js\",\n  \"value\": {\n    \"dependencies\": [\"backbone\", \"backbone.marionette\"]\n  }\n}\n\n\n--- File: 819 # web/frontend/src/boilerplate/init/language/01-babel.json ---\n{\n  \"name\": \"ECMAScript 6 (ES6 using Babel transpiler)\",\n  \"value\": {\n    \"devDependencies\": [\"babelify\"],\n    \"transform\": [\"babelify\"]\n  }\n}\n\n\n--- File: 820 # web/frontend/src/boilerplate/init/language/02-coffeescript.json ---\n{\n  \"name\": \"Coffeescript\",\n  \"value\": {\n    \"extension\": \"coffee\",\n    \"devDependencies\": [\"coffeeify\"],\n    \"transform\": [\"coffeeify\"]\n  }\n}\n\n\n--- File: 837 # web/koperasi-dashboard/src/boilerplate/init/language/01-babel.json ---\n{\n  \"name\": \"ECMAScript 6 (ES6 using Babel transpiler)\",\n  \"value\": {\n    \"devDependencies\": [\"babelify\"],\n    \"transform\": [\"babelify\"]\n  }\n}\n\n\n--- File: 838 # web/koperasi-dashboard/src/boilerplate/init/language/02-coffeescript.json ---\n{\n  \"name\": \"Coffeescript\",\n  \"value\": {\n    \"extension\": \"coffee\",\n    \"devDependencies\": [\"coffeeify\"],\n    \"transform\": [\"coffeeify\"]\n  }\n}\n\n\n--- File: 676 # modules/Api/Api.php ---\n<?php \nnamespace app\\modules\\Api;\n\nuse yii\\base\\Module;\n\nclass Api extends Module {\n\n    public function init() {\n        parent::init();\n    }\n}\n?>\n\n--- File: 823 # web/frontend/src/boilerplate/init/preprocessor/02-stylus.json ---\n{\n  \"name\": \"Stylus\",\n  \"value\": {\n    \"extension\": \"styl\",\n    \"dependencies\": [\"styl-easing\", \"styl-font-face\"],\n    \"devDependencies\": [\"gulp-stylus\"]\n  }\n}\n\n\n--- File: 841 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/02-stylus.json ---\n{\n  \"name\": \"Stylus\",\n  \"value\": {\n    \"extension\": \"styl\",\n    \"dependencies\": [\"styl-easing\", \"styl-font-face\"],\n    \"devDependencies\": [\"gulp-stylus\"]\n  }\n}\n\n\n--- File: 822 # web/frontend/src/boilerplate/init/preprocessor/01-sass.json ---\n{\n  \"name\": \"Sass\",\n  \"value\": {\n    \"extension\": \"scss\",\n    \"dependencies\": [\"sass-easing\", \"sass-font-face\"],\n    \"devDependencies\": [\"gulp-sass\", \"gulp-sass-glob\"]\n  }\n}\n\n\n--- File: 840 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/01-sass.json ---\n{\n  \"name\": \"Sass\",\n  \"value\": {\n    \"extension\": \"scss\",\n    \"dependencies\": [\"sass-easing\", \"sass-font-face\"],\n    \"devDependencies\": [\"gulp-sass\", \"gulp-sass-glob\"]\n  }\n}\n\n\n--- File: 824 # web/frontend/src/boilerplate/init/preprocessor/03-less.json ---\n{\n  \"name\": \"Less\",\n  \"value\": {\n    \"extension\": \"less\",\n    \"dependencies\": [\"less-easing\", \"less-font-face\"],\n    \"devDependencies\": [\"gulp-less\", \"less-plugin-glob\"]\n  }\n}\n\n\n--- File: 842 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/03-less.json ---\n{\n  \"name\": \"Less\",\n  \"value\": {\n    \"extension\": \"less\",\n    \"dependencies\": [\"less-easing\", \"less-font-face\"],\n    \"devDependencies\": [\"gulp-less\", \"less-plugin-glob\"]\n  }\n}\n\n\n--- File: 812 # web/frontend/src/boilerplate/init/framework/01-reactJSX.json ---\n{\n  \"name\": \"React + JSX\",\n  \"value\": {\n    \"devDependencies\": [\"babelify\", \"babel-preset-es2015\", \"babel-preset-react\"],\n    \"dependencies\": [\"react\", \"react-dom\", \"react-router\"],\n    \"transform\": [\"babelify\"]\n  }\n}\n\n\n--- File: 830 # web/koperasi-dashboard/src/boilerplate/init/framework/01-reactJSX.json ---\n{\n  \"name\": \"React + JSX\",\n  \"value\": {\n    \"devDependencies\": [\"babelify\", \"babel-preset-es2015\", \"babel-preset-react\"],\n    \"dependencies\": [\"react\", \"react-dom\", \"react-router\"],\n    \"transform\": [\"babelify\"]\n  }\n}\n\n\n--- File: 681 # modules/Api/components/TimeHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\n\nclass TimeHelper extends Component {\n\n    public static function getElapsedTime($start, $percision = 3) {\n        return (string) round(microtime(true) - $start, $percision) . \" sec\";\n    }\n}\n?>\n\n--- File: 817 # web/frontend/src/boilerplate/init/framework/06-react-redux.json ---\n{\n  \"name\": \"React + Redux\",\n  \"value\": {\n    \"devDependencies\": [\"babelify\", \"babel-preset-es2015\", \"babel-preset-react\", \"redux-devtools\"],\n    \"dependencies\": [\"react\", \"react-dom\", \"react-router\", \"redux\", \"react-redux\", \"react-router-redux\"],\n    \"transform\": [\"babelify\"]\n  }\n}\n\n\n--- File: 835 # web/koperasi-dashboard/src/boilerplate/init/framework/06-react-redux.json ---\n{\n  \"name\": \"React + Redux\",\n  \"value\": {\n    \"devDependencies\": [\"babelify\", \"babel-preset-es2015\", \"babel-preset-react\", \"redux-devtools\"],\n    \"dependencies\": [\"react\", \"react-dom\", \"react-router\", \"redux\", \"react-redux\", \"react-router-redux\"],\n    \"transform\": [\"babelify\"]\n  }\n}\n\n\n--- File: 808 # web/index.php ---\n<?php\n\n// comment out the following two lines when deployed to production\ndefined('YII_DEBUG') or define('YII_DEBUG', true);\ndefined('YII_ENV') or define('YII_ENV', 'dev');\n\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/../vendor/yiisoft/yii2/Yii.php';\n\n$config = require __DIR__ . '/../config/web.php';\n\n(new yii\\web\\Application($config))->run();\n\n\n--- File: 807 # web/index-test.php ---\n<?php\n\n// NOTE: Make sure this file is not accessible when deployed to production\nif (!in_array(@$_SERVER['REMOTE_ADDR'], ['127.0.0.1', '::1'])) {\n    die('You are not allowed to access this file.');\n}\n\ndefined('YII_DEBUG') or define('YII_DEBUG', true);\ndefined('YII_ENV') or define('YII_ENV', 'test');\n\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/../vendor/yiisoft/yii2/Yii.php';\n\n$config = require __DIR__ . '/../config/test.php';\n\n(new yii\\web\\Application($config))->run();\n\n\n--- File: 677 # modules/Api/components/AuthHelper.php ---\n<?php\nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\Setting;\n\nclass AuthHelper extends Component {\n    private static $hash = 'sha512';\n\n    public static function checkAuth($authKey, $nik) {\n\n        if(!$authKey || !$nik) {\n            return false;\n        }\n\n        $key = Setting::getValue('secret_key');\n        $hashed = hash(self::$hash, $key . $nik);\n        \n        if($hashed != $authKey) {\n            return false;\n        }\n\n        return true;\n    }\n}\n?>\n\n--- File: 684 # modules/Api/controllers/DukcapilController.php ---\n<?php\nnamespace app\\modules\\Api\\controllers;\n\nuse app\\components\\HelperDukcapil;\nuse Yii;\nuse yii\\rest\\Controller;\n\nclass DukcapilController extends Controller {\n\n    public function actionValidasiData() {\n        if(Yii::$app->user->isGuest){\n            return $this->redirect(['/']);\n        }\n        $status = HelperDukcapil::CheckIsActiveValidateDukcapil();\n        if($status){\n            $validate = new HelperDukcapil($_POST);\n            $error = $validate->curlValidDukcapil();\n            if ($error !== true) {\n                Yii::error(\"Dukcapil error: $error | Params: \" . json_encode($_POST), __METHOD__);\n            }\n            $response = $validate->response();\n        }else{\n            $response = HelperDukcapil::AllowValidation();\n        }\n\n        return $this->asJson($response);\n    }\n\n}\n\n--- File: 743 # views/pendirian/index.php ---\n<?php\n\nuse yii\\bootstrap\\Html;\nuse yii\\bootstrap\\ActiveForm;\n?>\n    <?= Html::a('Daftar Transaksi',['/pendirian/listtransaction',], [\n        'class' => 'btn-lg btn-success',\n    ]) ?>\n    <div>\n    <div class=\"panel\">\n    <div class=\"panel-body\">\n        <h1 class=\"text-center\"><?= $judul ?></h1>\n        <?php if(!$step2): ?>\n        <?= $this->render('_form',[\n            'model' => $model,\n        ]) ?>\n        <?php endif; ?>\n\n        <?php if($step2): ?>\n            <?= $this->render('_step2', [\n                'model' => $model,\n                'data' => $data,\n                'SearchData' => $SearchData,\n                'nama_pemohon' => $nama_pemohon,\n                'email_pemohon' => $email_pemohon,\n            ]) ?>\n        <?php endif; ?>\n\n        <?php if(isset($err) && $err['status'] === true): ?>\n            <?= $this->render('_err',['err' => $err]) ?>\n        <?php endif; ?>\n    </div>\n</div>\n</div>\n\n--- File: 8 # components/BaseController.php ---\n<?php\n\nnamespace app\\components;\n\nuse Yii;\nuse docotel\\dcms\\components\\BaseController as DocoController;\nuse yii\\filters\\AccessControl;\nuse yii\\web\\Response;\nuse yii\\filters\\VerbFilter;\nuse app\\models\\LoginForm;\nuse app\\models\\ContactForm;\nuse app\\models\\notariat\\Notaris;\n\nclass BaseController extends DocoController {\n    // public $layout = '@app/views/layouts/main.php';\n    public $dummy_login =[\n        'id_notaris' => 75561,\n        'nama_notaris' => \"SABH S.H M.Kn\",\n        'wilayah_id' => 1,\n        'email' => \"sabh@koperasi.com\",\n        'telepon' => \"0912345678\",\n    ];\n\n    public function init(){\n    \tif(!Yii::$app->user->isGuest) {\n    \t\tif(empty(Yii::$app->session->get('data_notaris')) && Yii::$app->user->identity->userGroup[0]->group->group_id == 'notaris') {\n                Yii::$app->user->logout();\n                return Yii::$app->response->redirect('/site/login');\n    \t\t}\n    \t}\n    \tparent::init();\n    }\n\n}\n\n--- File: 678 # modules/Api/components/DataAnggotaHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\StatusPengurus;\nuse app\\models\\JenisKelamin;\n\nclass DataAnggotaHelper extends Component {\n\n    public static function getIdStatusPengurus($nama) {\n        $data = StatusPengurus::find()->where(['nama' => strtoupper($nama)])->one();\n        \n        if(!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function getIdJenisKelamin($nama) {\n        $nama = self::normalizeJenisKelamin($nama);\n\n        $data = JenisKelamin::find()->where(['nama' => strtoupper($nama)])->one();\n        if(!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function normalizeJenisKelamin($nama) {\n        if(strtoupper($nama) == strtoupper('LAKI-LAKI') || strtoupper($nama) == strtoupper('LAKI - LAKI') ) {\n            return \"LAKI - LAKI\";\n        }\n        return $nama;\n    }\n}\n?>\n\n--- File: 686 # modules/Api/controllers/WilayahController.php ---\n<?php\nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse app\\models\\Wilayah;\nuse yii\\rest\\Controller;\n\nclass WilayahController extends Controller {\n\n    public function actionGetChildWilayah($id, $tipe) {\n        if (!$id || !Yii::$app->request->isAjax) {\n            return json_encode([['id' => '0','nama' => 'Tidak Ditemukan']]);\n        }\n        \n        $data = Wilayah::getChildWilayah($id, $tipe);\n        \n        if (!$data) {\n            return json_encode([['id' => '0','nama' => 'Tidak Ditemukan']]);\n        }\n\n        $arr = [];\n        foreach($data as $d) {\n            if($tipe == 'Kelurahan') {\n                $arr[] = [\n                    'id' => $d['ID_WIL'],\n                    'nama' => $d['NM_KELURAHAN'],\n                ];\n                continue;\n            }\n\n            $arr[] = [\n                'id' => $d['WILAYAH_ID'],\n                'nama' => $d['NAMA'],\n            ];\n        }\n        return json_encode($arr);\n    }\n\n}\n\n--- File: 190 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Snapshotindex.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Snapshotindex\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Snapshotindex extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_gateway/snapshot\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_gateway/snapshot\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'POST';\n    }\n}\n\n\n--- File: 607 # models/MappingKBLI.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%m_kbli}}\".\n *\n * @property int $id\n * @property string $kode\n * @property int $m_jenis_koperasi\n */\nclass MappingKBLI extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%m_kbli}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['m_jenis_koperasi'], 'required'],\n            [['m_jenis_koperasi'], 'integer'],\n            [['kode'], 'string', 'max' => 33],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'kode' => 'Kode',\n            'm_jenis_koperasi' => 'M Jenis Koperasi',\n        ];\n    }\n}\n\n\n--- File: 767 # views/pesan-nama/index.php ---\n<?php\n\nuse yii\\helpers\\Html;\n?>\n<?= Html::a('Cek Nama yang Telah Dipesan', ['/pesan-nama/list-pesan',], [\n    'class' => 'btn btn-success',\n]) ?>\n\n<div class=\"panel panel-default\" style=\"padding:10px\">\n    <div class=\"panel-body\">\n        <h2 class=\"text-center\">PESAN NAMA KOPERASI</h2>\n        <hr>\n        <?= $this->render('_form', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            // 'listPelabuhan' => $listPelabuhan,\n            'listPola' => $listPola,\n            'listSubJenis' => $listSubJenis,\n            'isMerahPutih' => $isMerahPutih,\n            'listModelKop' => $listModelKop,\n        ]) ?>\n\n        <?php if (isset($step2) && $step2 === true) : ?>\n            <?= $this->render('_step2', [\n                    'model' => $model,\n                    'SearchData' => $SearchData,\n                    'dataNotaris' => $dataNotaris\n                ]) ?>\n        <?php endif; ?>\n\n        <?php if (!empty($err['status']) && $err['status'] === true) : ?>\n            <?= $this->render('_err', ['err' => $err]) ?>\n        <?php endif; ?>\n    </div>\n</div>\n\n--- File: 679 # modules/Api/components/JWTHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\helpers\\Json;\nuse app\\models\\Setting;\n\nclass JWTHelper {\n\n    const SECRET = 'D0coSp4rtan2016';\n    const HASH_ALGO = \"sha256\";\n\n    public static function makeHeader() {\n        $data = [\n            \"alg\" => \"HS256\",\n            \"typ\" => \"JWT\"\n        ];\n\n        return base64_encode(Json::encode($data) );\n    }\n\n    public static function makePayload($payload) {\n        return base64_encode( Json::encode($payload) );\n    }\n\n    public static function makeSignature($header, $payload) {\n        $secretKey = Setting::getValue('jwt_token', self::SECRET);\n        $data = $header . \".\" . $payload;\n        return hash_hmac(self::HASH_ALGO, $data, self::SECRET);\n    }\n\n    public static function validateSignature($header, $payload, $signature) {\n        $checkSign = self::makeSignature($header, $payload);\n        return $checkSign == $signature;\n    }\n\n    public static function getDataPayload($payload) {\n        return base64_decode($payload);\n    }\n\n    public static function getDataHeader($header) {\n        return base64_decode($header);\n    }\n}\n?>\n\n--- File: 4 # assets/AppAsset.php ---\n<?php\n/**\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n */\n\nnamespace app\\assets;\n\nuse yii\\web\\AssetBundle;\n\n/**\n * Main application asset bundle.\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\nclass AppAsset extends AssetBundle\n{\n    public $basePath = '@webroot';\n    public $baseUrl = '@web';\n    public $css = [\n        'css/site.css',\n        'frontend/dist/styles/main.css',\n        // 'koperasi-dashboard/dist/styles/main.css',\n        // 'css/main.css',\n    ];\n    public $js = [\n        'http://cdnjs.cloudflare.com/ajax/libs/strophe.js/1.2.4/strophe.min.js',\n        'https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js',\n        // 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js',\n        'frontend/dist/scripts/main.js',\n        'frontend/dist/scripts/vendor.js',\n        'js/global/logSyarat.js',\n    ];\n    public $depends = [\n        'yii\\web\\JqueryAsset',\n        'yii\\web\\YiiAsset',\n        // 'yii\\bootstrap\\BootstrapAsset',\n        'yii\\bootstrap\\BootstrapPluginAsset'\n    ];\n}\n\n\n--- File: 129 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Reindex.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints;\n\n/**\n * Class Reindex\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Augustin Husson <husson.augustin@gmail.com>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Reindex extends AbstractEndpoint\n{\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'slices',\n            'refresh',\n            'timeout',\n            'consistency',\n            'wait_for_completion',\n            'requests_per_second',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        return '/_reindex';\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'POST';\n    }\n\n    /**\n     * @param array $body\n     *\n     * @throws \\Elasticsearch\\Common\\Exceptions\\InvalidArgumentException\n     * @return $this\n     */\n    public function setBody($body)\n    {\n        if (isset($body) !== true) {\n            return $this;\n        }\n\n        $this->body = $body;\n\n        return $this;\n    }\n}\n\n\n--- File: 205 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/Get.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Mapping;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Get\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\\Mapping\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Get extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $type = $this->type;\n        $uri   = \"/_mapping\";\n\n        if (isset($index) === true && isset($type) === true) {\n            $uri = \"/$index/_mapping/$type\";\n        } elseif (isset($type) === true) {\n            $uri = \"/_mapping/$type\";\n        } elseif (isset($index) === true) {\n            $uri = \"/$index/_mapping\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n            'wildcard_expansion',\n            'local',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 204 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/Delete.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Mapping;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Delete\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\\Mapping\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Delete extends AbstractEndpoint\n{\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->index) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'index is required for Delete'\n            );\n        }\n        if (isset($this->type) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'type is required for Delete'\n            );\n        }\n        $index = $this->index;\n        $type = $this->type;\n        $uri   = \"/$index/$type/_mapping\";\n\n        if (isset($index) === true && isset($type) === true) {\n            $uri = \"/$index/$type/_mapping\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'master_timeout',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'DELETE';\n    }\n}\n\n\n--- File: 206 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/GetField.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Mapping;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class GetField\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\\Mapping\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass GetField extends AbstractEndpoint\n{\n    /** @var  string */\n    private $fields;\n\n    /**\n     * @param string|array $fields\n     *\n     * @return $this\n     */\n    public function setFields($fields)\n    {\n        if (isset($fields) !== true) {\n            return $this;\n        }\n\n        if (is_array($fields) === true) {\n            $fields = implode(\",\", $fields);\n        }\n\n        $this->fields = $fields;\n\n        return $this;\n    }\n\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->fields) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'fields is required for Get Field Mapping'\n            );\n        }\n        $uri = $this->getOptionalURI('_mapping/field');\n\n        return $uri.'/'.$this->fields;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'include_defaults',\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n            'local'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 734 # views/pembubaran/index.php ---\n<?php \nuse yii\\bootstrap\\ActiveForm;\nuse yii\\bootstrap\\Html;\n\n?>\n<div class=\"panel panel-default animated fadeInDown\">\n\n    <div class=\"panel-body\">\n        \n        <div id=\"judul\" class=\"page-header\">\n            <h1 class=\"text-center\">PEMBUBARAN KOPERASI</h1>\n        </div>\n        <?php $form = ActiveForm::begin([]) ?>\n        \n        <div id=\"form-isi\" style=\"margin-bottom:30px;\">\n            \n            <div class=\"row\">\n                <div class=\"col-sm-4 text-center\">\n                    <?= Html::activeLabel($model, 'nik',[\n                        'style' => 'font-size:11pt;line-height:2',\n                    ]) ?>\n                </div>\n                <div class=\"col-sm-6\">\n                    <?= Html::activeTextInput($model, 'nik',[\n                        'class' => 'form-control',\n                        'autocomplete' => false\n                    ]) ?>\n                    <br>\n                    <?= Html::error($model, 'nik', [\n                        'class' => 'help-block-error',\n                        'style' => 'color:red;',\n                    ]) ?>\n                </div>\n            </div>\n\n        </div>\n\n        <div id=\"tombol\" class=\"text-center\" style=\"margin-bottom:30px;\">\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <?= Html::submitButton('Cari', [\n                        'class' => 'btn btn-primary'\n                    ]) ?>\n                </div>\n            </div>\n        </div>\n        \n        <?php ActiveForm::end() ?>\n        \n        <div id=\"err-form\">\n            <?= $this->render('_err', [\n                'err' => $err,\n            ]) ?>\n        </div>\n    \n    </div>\n\n</div>\n\n--- File: 246 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/BooleanRequestWrapper.php ---\n<?php\n\nnamespace Elasticsearch\\Namespaces;\n\nuse Elasticsearch\\Common\\Exceptions\\Missing404Exception;\nuse Elasticsearch\\Common\\Exceptions\\RoutingMissingException;\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Transport;\nuse GuzzleHttp\\Ring\\Future\\FutureArrayInterface;\n\n/**\n * Trait AbstractNamespace\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Namespaces\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ntrait BooleanRequestWrapper\n{\n    /**\n     * Perform Request\n     *\n     * @param  AbstractEndpoint $endpoint The Endpoint to perform this request against\n     *\n     * @throws Missing404Exception\n     * @throws RoutingMissingException\n     */\n    public static function performRequest(AbstractEndpoint $endpoint, Transport $transport)\n    {\n        try {\n            $response = $transport->performRequest(\n                $endpoint->getMethod(),\n                $endpoint->getURI(),\n                $endpoint->getParams(),\n                $endpoint->getBody(),\n                $endpoint->getOptions()\n            );\n\n            $response = $transport->resultOrFuture($response, $endpoint->getOptions());\n            if (!($response instanceof FutureArrayInterface)) {\n                if ($response['status'] === 200) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                // async mode, can't easily resolve this...punt to user\n                return $response;\n            }\n        } catch (Missing404Exception $exception) {\n            return false;\n        } catch (RoutingMissingException $exception) {\n            return false;\n        }\n    }\n}\n\n\n--- File: 687 # modules/Api/models/JWTToken.php ---\n<?php \nnamespace app\\modules\\Api\\models;\n\nuse yii\\base\\Model;\nuse app\\modules\\Api\\components\\JWTHelper;\nuse yii\\helpers\\Json;\nuse yii\\base\\Exception;\n\nclass JWTToken extends Model {\n    public $token,\n           $header,\n           $payload,\n           $signature;\n\n    public function __construct($token = null)\n    {\n        parent::__construct();\n        $this->header = JWTHelper::makeHeader();\n\n        if($token) {\n            $this->mappingToken($token);\n        }\n    }\n\n\n    public function mappingToken($token) {\n        $removeBear = explode(\"Bearer \", $token);\n        $token = $removeBear[count($removeBear) - 1];\n        \n        $part = explode(\".\", $token);\n        $this->header = $part[0];\n        $this->payload = $part[1];\n        $this->signature = $part[2];\n        $this->token = $token;\n    }\n\n    public function validateSignature() {\n        return JWTHelper::validateSignature($this->header, $this->payload, $this->signature);\n    }\n\n    public function checkExpired() {\n        $data = $this->getDataPayload();\n\n        if(!array_key_exists('exp', $data)) {\n            return true;\n        }\n\n        $expired = Date(\"Y-m-d H:i:s\", strtotime($data['exp']));\n        $now = Date(\"Y-m-d H:i:s\");\n        \n        return $now <= $expired;\n    }\n\n    public function getDataPayload() {\n        $data = JWTHelper::getDataPayload($this->payload);\n        $jsonData = Json::decode($data);\n\n        if( !$jsonData ) {\n            throw new Exception(\"Format Payload Tidak Valid\");\n        }\n        return $jsonData;\n    }\n\n    public function generateToken()\n    {\n        $token = $this->header . \".\" . $this->payload . \".\" . $this->signature;\n        return $token;\n    }\n\n    public function setPayload($payload) {\n        $this->payload = JWTHelper::makePayload($payload);\n        $this->signature = JWTHelper::makeSignature($this->header, $this->payload);\n        return $this;\n    }\n}\n?>\n\n--- File: 776 # views/site/index.php ---\n<?php \n\tuse yii\\helpers\\Html;\n\tuse yii\\bootstrap\\ActiveForm;\n\tuse yii\\helpers\\Url;\n?>\n<!-- <section class=\"content container-fluid\">\n    <h1>KOPERASI</h1>\n    <a href=\"/pesan-nama/\" class=\"btn btn-success\">Pesan Nama</a>\n    <a href=\"/pesan-nama/list-pesan\" class=\"btn btn-primary\">List Pesan Nama</a>\n</section> -->\n\n<div class=\"login-content\">\n<img src=\"/images/assets/koperasi.png\" class=\"logo\" style=\"\" alt=\"\">\n      <div class=\"logo-koperasi\">\n        <h4>AHU KOPERASI</h4>\n      </div>\n      <div class=\"login-boxes animated fadeIn\">\n        <div class=\"title\">LOGIN</div>\n        <?php \n    \t$form = ActiveForm::begin([\n\t        'id' => 'login-form',\n\t        'action' => Url::base(true) . '/site/login',\n\t        // 'layout' => 'horizontal',\n\t        'fieldConfig' => [\n\t            // 'template' => \"{label}\\n<div class=\\\"col-lg-6\\\">{input}</div>\\n<div class=\\\"col-lg-12 text-center\\\">{error}</div>\",\n\t            // 'labelOptions' => ['class' => 'col-lg-offset-1 col-lg-2 control-label'],\n\t        ],\n    \t]); \n    ?>\n          <?= $form->field($model, 'username')->textInput(['autofocus' => true]) ?>\n\n        <?= $form->field($model, 'password')->passwordInput() ?>\n\n        <!-- <?= $form->field($model, 'rememberMe')->checkbox([\n            // 'template' => \"<div class=\\\"col-lg-offset-3 col-lg-3\\\">{input} {label}</div>\\n<div class=\\\"col-lg-8\\\">{error}</div>\",\n        ]) ?> -->\n            <?= Html::submitButton('Login', ['class' => 'btn btn-purple', 'name' => 'login-button']) ?>\n        <?php ActiveForm::end(); ?>\n\n        <div class=\"row\" style=\"margin-top:10px\">\n          <div class=\"col-md-12\">\n            <?php if ($showNpakMessage): ?>\n              <span style=\"color:red;font-style:italic\">\n                  Notaris yang mempunyai akses ke aplikasi pengesahan koperasi ini hanya Notaris Pembuat Akta Koperasi (NPAK)\n              </span>\n            <?php endif; ?>\n          </div>\n        </div>\n\n      </div>\n    </div>\n\n--- File: 207 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/Put.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Mapping;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Put\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\\Mapping\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Put extends AbstractEndpoint\n{\n    /**\n     * @param array $body\n     *\n     * @throws \\Elasticsearch\\Common\\Exceptions\\InvalidArgumentException\n     * @return $this\n     */\n    public function setBody($body)\n    {\n        if (isset($body) !== true) {\n            return $this;\n        }\n\n        $this->body = $body;\n\n        return $this;\n    }\n\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->type) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'type is required for Put'\n            );\n        }\n        $index = $this->index;\n        $type = $this->type;\n        $uri   = \"/_mapping/$type\";\n\n        if (isset($index) === true && isset($type) === true) {\n            $uri = \"/$index/$type/_mapping\";\n        } elseif (isset($type) === true) {\n            $uri = \"/_mapping/$type\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_conflicts',\n            'timeout',\n            'master_timeout',\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n            'update_all_types'\n        );\n    }\n\n    /**\n     * @return array\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     */\n    public function getBody()\n    {\n        if (isset($this->body) !== true) {\n            throw new Exceptions\\RuntimeException('Body is required for Put Mapping');\n        }\n\n        return $this->body;\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'PUT';\n    }\n}\n\n\n--- File: 394 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * This simple wrapper class can be used to extend handlers functionality.\n *\n * Example: A custom filtering that can be applied to any handler.\n *\n * Inherit from this class and override handle() like this:\n *\n *   public function handle(array $record)\n *   {\n *        if ($record meets certain conditions) {\n *            return false;\n *        }\n *        return $this->handler->handle($record);\n *   }\n *\n * @author Alexey Karapetov <alexey@karapetov.com>\n */\nclass HandlerWrapper implements HandlerInterface\n{\n    /**\n     * @var HandlerInterface\n     */\n    protected $handler;\n\n    /**\n     * HandlerWrapper constructor.\n     * @param HandlerInterface $handler\n     */\n    public function __construct(HandlerInterface $handler)\n    {\n        $this->handler = $handler;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function isHandling(array $record)\n    {\n        return $this->handler->isHandling($record);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function handle(array $record)\n    {\n        return $this->handler->handle($record);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function handleBatch(array $records)\n    {\n        return $this->handler->handleBatch($records);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function pushProcessor($callback)\n    {\n        $this->handler->pushProcessor($callback);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function popProcessor()\n    {\n        return $this->handler->popProcessor();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setFormatter(FormatterInterface $formatter)\n    {\n        $this->handler->setFormatter($formatter);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getFormatter()\n    {\n        return $this->handler->getFormatter();\n    }\n}\n\n\n--- File: 727 # views/layouts/main-old.php ---\n<?php\n\n/* @var $this \\yii\\web\\View */\n/* @var $content string */\n\nuse app\\widgets\\Alert;\nuse yii\\helpers\\Html;\nuse yii\\bootstrap\\Nav;\nuse yii\\bootstrap\\NavBar;\nuse yii\\widgets\\Breadcrumbs;\nuse app\\assets\\AppAsset;\n\nAppAsset::register($this);\n?>\n<?php $this->beginPage() ?>\n<!DOCTYPE html>\n<html lang=\"<?= Yii::$app->language ?>\">\n<head>\n    <meta charset=\"<?= Yii::$app->charset ?>\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <?= Html::csrfMetaTags() ?>\n    <title><?= Html::encode($this->title) ?></title>\n    <?php $this->head() ?>\n    <?php //$this->registerCssFile('@web/frontend/dist/styles/main.css') ?>\n    <script defer src=\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\" crossorigin=\"anonymous\"></script>\n</head>\n<body>\n<?php $this->beginBody() ?>\n\n<div class=\"wrap\">\n    <?php\n    NavBar::begin([\n        'brandLabel' => Yii::$app->name,\n        'brandUrl' => Yii::$app->homeUrl,\n        'options' => [\n            'class' => 'navbar-inverse navbar-fixed-top',\n        ],\n    ]);\n    echo Nav::widget([\n        'options' => ['class' => 'navbar-nav navbar-right'],\n        'items' => [\n            ['label' => 'Home', 'url' => ['/site/index']],\n            ['label' => 'About', 'url' => ['/site/about']],\n            ['label' => 'Contact', 'url' => ['/site/contact']],\n            Yii::$app->user->isGuest ? (\n                ['label' => 'Login', 'url' => ['/site/login']]\n            ) : (\n                '<li>'\n                . Html::beginForm(['/site/logout'], 'post')\n                . Html::submitButton(\n                    'Logout (' . Yii::$app->user->identity->username . ')',\n                    ['class' => 'btn btn-link logout']\n                )\n                . Html::endForm()\n                . '</li>'\n            )\n        ],\n    ]);\n    NavBar::end();\n    ?>\n\n    <div class=\"container\">\n        <?= Breadcrumbs::widget([\n            'links' => isset($this->params['breadcrumbs']) ? $this->params['breadcrumbs'] : [],\n        ]) ?>\n        <?= Alert::widget() ?>\n        <?= $content ?>\n    </div>\n</div>\n\n<footer class=\"footer\">\n    <div class=\"container\">\n        <p class=\"pull-left\">&copy; My Company <?= date('Y') ?></p>\n\n        <p class=\"pull-right\"><?= Yii::powered() ?></p>\n    </div>\n</footer>\n\n<?php $this->endBody() ?>\n</body>\n</html>\n<?php $this->endPage() ?>\n\n\n--- File: 120 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Index.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints;\n\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Index\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Index extends AbstractEndpoint\n{\n    /** @var bool  */\n    private $createIfAbsent = false;\n\n    /**\n     * @param array $body\n     *\n     * @throws \\Elasticsearch\\Common\\Exceptions\\InvalidArgumentException\n     * @return $this\n     */\n    public function setBody($body)\n    {\n        if (isset($body) !== true) {\n            return $this;\n        }\n\n        $this->body = $body;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function createIfAbsent()\n    {\n        $this->createIfAbsent = true;\n\n        return $this;\n    }\n\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->index) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'index is required for Index'\n            );\n        }\n\n        if (isset($this->type) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'type is required for Index'\n            );\n        }\n\n        $id    = $this->id;\n        $index = $this->index;\n        $type  = $this->type;\n        $uri   = \"/$index/$type\";\n\n        if (isset($id) === true) {\n            $uri = \"/$index/$type/$id\";\n        }\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'consistency',\n            'op_type',\n            'parent',\n            'percolate',\n            'refresh',\n            'replication',\n            'routing',\n            'timeout',\n            'timestamp',\n            'ttl',\n            'version',\n            'version_type',\n            'pipeline'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        if (isset($this->id) === true) {\n            return 'PUT';\n        } else {\n            return 'POST';\n        }\n    }\n\n    /**\n     * @return array\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     */\n    public function getBody()\n    {\n        if (isset($this->body) !== true) {\n            throw new Exceptions\\RuntimeException('Document body must be set for index request');\n        } else {\n            return $this->body;\n        }\n    }\n}\n\n\n--- File: 323 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/GuzzleStreamWrapper.php ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\n/**\n * Converts Guzzle streams into PHP stream resources.\n */\nclass GuzzleStreamWrapper\n{\n    /** @var resource */\n    public $context;\n\n    /** @var StreamInterface */\n    private $stream;\n\n    /** @var string r, r+, or w */\n    private $mode;\n\n    /**\n     * Returns a resource representing the stream.\n     *\n     * @param StreamInterface $stream The stream to get a resource for\n     *\n     * @return resource\n     * @throws \\InvalidArgumentException if stream is not readable or writable\n     */\n    public static function getResource(StreamInterface $stream)\n    {\n        self::register();\n\n        if ($stream->isReadable()) {\n            $mode = $stream->isWritable() ? 'r+' : 'r';\n        } elseif ($stream->isWritable()) {\n            $mode = 'w';\n        } else {\n            throw new \\InvalidArgumentException('The stream must be readable, '\n                . 'writable, or both.');\n        }\n\n        return fopen('guzzle://stream', $mode, null, stream_context_create([\n            'guzzle' => ['stream' => $stream]\n        ]));\n    }\n\n    /**\n     * Registers the stream wrapper if needed\n     */\n    public static function register()\n    {\n        if (!in_array('guzzle', stream_get_wrappers())) {\n            stream_wrapper_register('guzzle', __CLASS__);\n        }\n    }\n\n    public function stream_open($path, $mode, $options, &$opened_path)\n    {\n        $options = stream_context_get_options($this->context);\n\n        if (!isset($options['guzzle']['stream'])) {\n            return false;\n        }\n\n        $this->mode = $mode;\n        $this->stream = $options['guzzle']['stream'];\n\n        return true;\n    }\n\n    public function stream_read($count)\n    {\n        return $this->stream->read($count);\n    }\n\n    public function stream_write($data)\n    {\n        return (int) $this->stream->write($data);\n    }\n\n    public function stream_tell()\n    {\n        return $this->stream->tell();\n    }\n\n    public function stream_eof()\n    {\n        return $this->stream->eof();\n    }\n\n    public function stream_seek($offset, $whence)\n    {\n        return $this->stream->seek($offset, $whence);\n    }\n\n    public function stream_stat()\n    {\n        static $modeMap = [\n            'r'  => 33060,\n            'r+' => 33206,\n            'w'  => 33188\n        ];\n\n        return [\n            'dev'     => 0,\n            'ino'     => 0,\n            'mode'    => $modeMap[$this->mode],\n            'nlink'   => 0,\n            'uid'     => 0,\n            'gid'     => 0,\n            'rdev'    => 0,\n            'size'    => $this->stream->getSize() ?: 0,\n            'atime'   => 0,\n            'mtime'   => 0,\n            'ctime'   => 0,\n            'blksize' => 0,\n            'blocks'  => 0\n        ];\n    }\n}\n\n\n--- File: 343 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/GuzzleStreamWrapperTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Stream;\n\nuse GuzzleHttp\\Stream\\GuzzleStreamWrapper;\nuse GuzzleHttp\\Stream\\Stream;\n\n/**\n * @covers GuzzleHttp\\Stream\\GuzzleStreamWrapper\n */\nclass GuzzleStreamWrapperTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testResource()\n    {\n        $stream = Stream::factory('foo');\n        $handle = GuzzleStreamWrapper::getResource($stream);\n        $this->assertSame('foo', fread($handle, 3));\n        $this->assertSame(3, ftell($handle));\n        $this->assertSame(3, fwrite($handle, 'bar'));\n        $this->assertSame(0, fseek($handle, 0));\n        $this->assertSame('foobar', fread($handle, 6));\n        $this->assertTrue(feof($handle));\n\n        // This fails on HHVM for some reason\n        if (!defined('HHVM_VERSION')) {\n            $this->assertEquals([\n                'dev'     => 0,\n                'ino'     => 0,\n                'mode'    => 33206,\n                'nlink'   => 0,\n                'uid'     => 0,\n                'gid'     => 0,\n                'rdev'    => 0,\n                'size'    => 6,\n                'atime'   => 0,\n                'mtime'   => 0,\n                'ctime'   => 0,\n                'blksize' => 0,\n                'blocks'  => 0,\n                0         => 0,\n                1         => 0,\n                2         => 33206,\n                3         => 0,\n                4         => 0,\n                5         => 0,\n                6         => 0,\n                7         => 6,\n                8         => 0,\n                9         => 0,\n                10        => 0,\n                11        => 0,\n                12        => 0,\n            ], fstat($handle));\n        }\n\n        $this->assertTrue(fclose($handle));\n        $this->assertSame('foobar', (string) $stream);\n    }\n\n    /**\n     * @expectedException \\InvalidArgumentException\n     */\n    public function testValidatesStream()\n    {\n        $stream = $this->getMockBuilder('GuzzleHttp\\Stream\\StreamInterface')\n            ->setMethods(['isReadable', 'isWritable'])\n            ->getMockForAbstractClass();\n        $stream->expects($this->once())\n            ->method('isReadable')\n            ->will($this->returnValue(false));\n        $stream->expects($this->once())\n            ->method('isWritable')\n            ->will($this->returnValue(false));\n        GuzzleStreamWrapper::getResource($stream);\n    }\n\n    /**\n     * @expectedException \\PHPUnit_Framework_Error_Warning\n     */\n    public function testReturnsFalseWhenStreamDoesNotExist()\n    {\n        fopen('guzzle://foo', 'r');\n    }\n\n    public function testCanOpenReadonlyStream()\n    {\n        $stream = $this->getMockBuilder('GuzzleHttp\\Stream\\StreamInterface')\n            ->setMethods(['isReadable', 'isWritable'])\n            ->getMockForAbstractClass();\n        $stream->expects($this->once())\n            ->method('isReadable')\n            ->will($this->returnValue(false));\n        $stream->expects($this->once())\n            ->method('isWritable')\n            ->will($this->returnValue(true));\n        $r = GuzzleStreamWrapper::getResource($stream);\n        $this->assertInternalType('resource', $r);\n        fclose($r);\n    }\n}\n\n\n--- File: 481 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\TestCase;\n\n/**\n * @author Alexey Karapetov <alexey@karapetov.com>\n */\nclass HandlerWrapperTest extends TestCase\n{\n    /**\n     * @var HandlerWrapper\n     */\n    private $wrapper;\n\n    private $handler;\n\n    public function setUp()\n    {\n        parent::setUp();\n        $this->handler = $this->getMock('Monolog\\\\Handler\\\\HandlerInterface');\n        $this->wrapper = new HandlerWrapper($this->handler);\n    }\n\n    /**\n     * @return array\n     */\n    public function trueFalseDataProvider()\n    {\n        return array(\n            array(true),\n            array(false),\n        );\n    }\n\n    /**\n     * @param $result\n     * @dataProvider trueFalseDataProvider\n     */\n    public function testIsHandling($result)\n    {\n        $record = $this->getRecord();\n        $this->handler->expects($this->once())\n            ->method('isHandling')\n            ->with($record)\n            ->willReturn($result);\n\n        $this->assertEquals($result, $this->wrapper->isHandling($record));\n    }\n\n    /**\n     * @param $result\n     * @dataProvider trueFalseDataProvider\n     */\n    public function testHandle($result)\n    {\n        $record = $this->getRecord();\n        $this->handler->expects($this->once())\n            ->method('handle')\n            ->with($record)\n            ->willReturn($result);\n\n        $this->assertEquals($result, $this->wrapper->handle($record));\n    }\n\n    /**\n     * @param $result\n     * @dataProvider trueFalseDataProvider\n     */\n    public function testHandleBatch($result)\n    {\n        $records = $this->getMultipleRecords();\n        $this->handler->expects($this->once())\n            ->method('handleBatch')\n            ->with($records)\n            ->willReturn($result);\n\n        $this->assertEquals($result, $this->wrapper->handleBatch($records));\n    }\n\n    public function testPushProcessor()\n    {\n        $processor = function () {};\n        $this->handler->expects($this->once())\n            ->method('pushProcessor')\n            ->with($processor);\n\n        $this->assertEquals($this->wrapper, $this->wrapper->pushProcessor($processor));\n    }\n\n    public function testPopProcessor()\n    {\n        $processor = function () {};\n        $this->handler->expects($this->once())\n            ->method('popProcessor')\n            ->willReturn($processor);\n\n        $this->assertEquals($processor, $this->wrapper->popProcessor());\n    }\n\n    public function testSetFormatter()\n    {\n        $formatter = $this->getMock('Monolog\\\\Formatter\\\\FormatterInterface');\n        $this->handler->expects($this->once())\n            ->method('setFormatter')\n            ->with($formatter);\n\n        $this->assertEquals($this->wrapper, $this->wrapper->setFormatter($formatter));\n    }\n\n    public function testGetFormatter()\n    {\n        $formatter = $this->getMock('Monolog\\\\Formatter\\\\FormatterInterface');\n        $this->handler->expects($this->once())\n            ->method('getFormatter')\n            ->willReturn($formatter);\n\n        $this->assertEquals($formatter, $this->wrapper->getFormatter());\n    }\n}\n\n\n--- File: 295 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/BaseFutureTrait.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Future;\n\nuse GuzzleHttp\\Ring\\Exception\\CancelledFutureAccessException;\nuse GuzzleHttp\\Ring\\Exception\\RingException;\nuse React\\Promise\\PromiseInterface;\n\n/**\n * Implements common future functionality built on top of promises.\n */\ntrait BaseFutureTrait\n{\n    /** @var callable */\n    private $waitfn;\n\n    /** @var callable */\n    private $cancelfn;\n\n    /** @var PromiseInterface */\n    private $wrappedPromise;\n\n    /** @var \\Exception Error encountered. */\n    private $error;\n\n    /** @var mixed Result of the future */\n    private $result;\n\n    private $isRealized = false;\n\n    /**\n     * @param PromiseInterface $promise Promise to shadow with the future.\n     * @param callable         $wait    Function that blocks until the deferred\n     *                                  computation has been resolved. This\n     *                                  function MUST resolve the deferred value\n     *                                  associated with the supplied promise.\n     * @param callable         $cancel  If possible and reasonable, provide a\n     *                                  function that can be used to cancel the\n     *                                  future from completing.\n     */\n    public function __construct(\n        PromiseInterface $promise,\n        callable $wait = null,\n        callable $cancel = null\n    ) {\n        $this->wrappedPromise = $promise;\n        $this->waitfn = $wait;\n        $this->cancelfn = $cancel;\n    }\n\n    public function wait()\n    {\n        if (!$this->isRealized) {\n            $this->addShadow();\n            if (!$this->isRealized && $this->waitfn) {\n                $this->invokeWait();\n            }\n            if (!$this->isRealized) {\n                $this->error = new RingException('Waiting did not resolve future');\n            }\n        }\n\n        if ($this->error) {\n            throw $this->error;\n        }\n\n        return $this->result;\n    }\n\n    public function promise()\n    {\n        return $this->wrappedPromise;\n    }\n\n    public function then(\n        callable $onFulfilled = null,\n        callable $onRejected = null,\n        callable $onProgress = null\n    ) {\n        return $this->wrappedPromise->then($onFulfilled, $onRejected, $onProgress);\n    }\n\n    public function cancel()\n    {\n        if (!$this->isRealized) {\n            $cancelfn = $this->cancelfn;\n            $this->waitfn = $this->cancelfn = null;\n            $this->isRealized = true;\n            $this->error = new CancelledFutureAccessException();\n            if ($cancelfn) {\n                $cancelfn($this);\n            }\n        }\n    }\n\n    private function addShadow()\n    {\n        // Get the result and error when the promise is resolved. Note that\n        // calling this function might trigger the resolution immediately.\n        $this->wrappedPromise->then(\n            function ($value) {\n                $this->isRealized = true;\n                $this->result = $value;\n                $this->waitfn = $this->cancelfn = null;\n            },\n            function ($error) {\n                $this->isRealized = true;\n                $this->error = $error;\n                $this->waitfn = $this->cancelfn = null;\n            }\n        );\n    }\n\n    private function invokeWait()\n    {\n        try {\n            $wait = $this->waitfn;\n            $this->waitfn = null;\n            $wait();\n        } catch (\\Exception $e) {\n            // Defer can throw to reject.\n            $this->error = $e;\n            $this->isRealized = true;\n        }\n    }\n}\n\n\n--- File: 602 # models/LogDukcapil.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse app\\services\\ElkLoggingService;\nuse DateTime;\nuse DateTimeZone;\n\n/**\n * This is the model class for table \"log_service\".\n *\n * @property int $id\n * @property string $ip_address\n * @property string $service_uri\n * @property string $nik\n * @property string $request\n * @property string $response\n * @property string $additional_data\n * @property string $created_at\n * @property int $is_error\n * @property string $type\n * @property string $execution_time\n */\nclass LogDukcapil extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'log_dukcapil';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('dbLogSimpadhu');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            array('nik, ip_address, type, is_error, created_at, header_code, request, response, additional_data, execution_time, service_uri, parent_id, resend, layanan', 'safe'),\n        ];\n    }\n\n\tpublic static function logDcp(\n        $params, \n        $response, \n        $status, \n        $type = 'VERIFNIK', \n        $exetime = 0, \n        $layanan, \n        $additional_data, \n        $parent_id = null, \n        $nik = null\n    ){\n        $request = is_string($params) ? json_decode($params) : $params;\n\n        $log = new LogDukcapil();\n        $log->nik = $nik;\n        $log->ip_address = Yii::$app->request->userIP;\n        $log->type = $type;\n        $log->is_error = $status == 200 ? 0 : 1;\n        $log->created_at = date(\"Y-m-d H:i:s\");\n        $log->header_code = $status;\n        $log->request = json_encode($request);\n        $log->response =json_encode(is_string($response) ? json_decode($response) : $response);\n        $log->additional_data = json_encode($additional_data);\n        $log->execution_time = $exetime;\n        $log->service_uri = Yii::$app->request->url;\n        $log->resend = $status == 200 ? 0 : 1;\n        $log->layanan = $layanan;\n        $log->parent_id = $parent_id;\n\n        // Penyesuaian Date agar menggunakan Timezone\n        $old_date = $log->created_at;\n        // Explicitly tell PHP that this time is already in WIB\n        $timezone = new DateTimeZone('Asia/Jakarta');\n        $newDate = new DateTime($old_date, $timezone);\n        \n        // Ensure no UTC conversion happens\n        $newDate->setTimezone($timezone);\n        \n        // Convert to ISO 8601 format with WIB timezone\n        $log->created_at = $newDate->format(DateTime::ATOM); \n\n        // Insert ke ELK\n        $elkLogging = new ElkLoggingService('dukcapil');\n\n        $elk_logging = $elkLogging->logApplication([\n            'nik' => $log->nik,\n            'ip_address' => $log->ip_address,\n            'type' => $log->type,\n            'is_error' => $log->is_error,\n            'created_at' => $log->created_at,\n            'header_code' => $log->header_code,\n            'request' => $log->request,\n            'response' => $log->response,\n            'additional_data' => $log->additional_data,\n            'execution_time' => strval($log->execution_time),\n            'service_uri' => $log->service_uri,\n            'resend' => $log->resend,\n            'layanan' => $log->layanan,\n            'parent_id' => $log->parent_id,\n        ]);\n\n        if ($elk_logging !== false) {\n            $result = $elk_logging;\n        } else {\n            $log->created_at = $old_date;\n            $log->save();\n        }\n    }\n}\n\n\n--- File: 709 # views/admin/settingExpired/index.php ---\n<?php\nuse yii\\grid\\GridView;\nuse yii\\bootstrap\\Html;\n$this->title = \"Setting Expired\";\n?>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <header style=\"margin-bottom:50px;\">\n            <h2 class=\"text-center\">TABEL JENIS PENGATURAN</h2>\n            <hr>\n        </header>\n        <?= Html::a(\"Tambah Data\", \"setting-exp-add\", [\"class\" => \"btn btn-primary\", \"style\" => \"margin-bottom:2%\"]); ?>\n        <?= \n            GridView::widget([\n                'dataProvider' => $data_provider,\n                'filterModel' => $search_model,\n                'formatter' => [\n\t\t\t\t\t'class' => 'yii\\i18n\\Formatter',\n\t\t\t\t\t'nullDisplay' => '-'\n\t\t\t\t],\n                'columns' => [\n                    [\n                        'class' => 'yii\\grid\\SerialColumn',\n                        'header' => 'No',\n                    ],\n                    [\n                        'label' => 'Jenis Pengaturan',\n                        'attribute' => 'keterangan',\n                    ],\n                    [\n                        'label' => 'Jumlah Hari',\n                        'attribute' => 'value',\n                        'format' => 'raw',\n                    ],\n                    [\n                        'label' => 'Tanggal Pembuatan',\n                        'attribute' => 'created_date',\n                        'format' => ['date', 'php:d-F-Y H:i:s'],\n                        'filter' => \\yii\\jui\\DatePicker::widget(['model' => $search_model, \n                            'attribute' => 'created_date',\n                            'dateFormat' => 'dd-MMMM-yyyy',\n                            'options' => [\n                                'class' => 'form-control',\n                        ]]),\n                    ],\n                    [\n                        'label' => 'Tanggal Pembaruan',\n                        'attribute' => 'updated_date',\n                        'format' => ['date', 'php:d-F-Y H:i:s'],\n                        'filter' => \\yii\\jui\\DatePicker::widget(['model' => $search_model, \n                            'attribute' => 'updated_date',\n                            'dateFormat' => 'dd-MMMM-yyyy',\n                            'options' => [\n                                'class' => 'form-control',\n                        ]]),\n                    ],\n                    [\n                        'label' => 'Diperbaharui Oleh',\n                        'attribute' => 'updated_by',\n                        'value' => function($data) {\n                            $user = docotel\\dcms\\models\\User::findOne(['id' => $data->updated_by]);\n                            if ( ! $user) {\n                                return null;\n                            }\n                            return $user->username;\n                        }\n                    ],\n                    [\n                        'class' => 'yii\\grid\\ActionColumn',\n                        'header' => 'Aksi',\n                        'template' => '{update}',\n                        'buttons' => [\n                            'update' => function ($url, $model) {\n                                return Html::a('<span class=\"glyphicon glyphicon-pencil\"></span>', $url, \n                                [\n                                    'title' => Yii::t('app', 'lead-update'),\n                                ]);\n                            },\n                            'delete' => function ($url, $model) {\n                                return Html::a('<span class=\"glyphicon glyphicon-trash\"></span>', $url, \n                                [\n                                    'title' => Yii::t('app', 'lead-delete'),\n                                ]);\n                            },\n                        ],\n                        'urlCreator' => function($action, $model, $key, $index) {\n                            if ($action === 'update') {\n                                $url = \"setting-exp-update?id=\" . $model->id;\n                                return $url;\n                            }\n                            if ($action === 'delete') {\n                                $url = \"setting-exp-delete?id=\" . $model->id;\n                                return $url;\n                            }\n                        }\n                    ],\n                    \n                ]\n\n            ]);\n        ?>\n    </div>\n</div>\n\n\n\n--- File: 806 # views/perbaikan-data/index.php ---\n<?php\n\nuse app\\models\\forms\\PerbaikanDataForm;\nuse yii\\helpers\\Html;\nuse yii\\widgets\\ActiveForm;\n\n?>\n\n<style>\n    .button-wrapper {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .form-perbaikan .form-control {\n        width: 100% !important;\n    }\n\n    .warning.validation {\n        width: 100% !important;\n        margin: 0 !important;\n        display: block !important;\n        float: initial !important;\n        text-align: left !important;\n        color: red !important;\n    }\n\n    .reminder-container {\n        display: flex;\n        background-color: #fffbe9;\n        border: none;\n        border-radius: 16px;\n        padding: 12px;\n        box-shadow: none;\n    }\n\n    .btn-primary {\n        background-color: #0070ea;\n        height: 40px;\n        border-radius: 8px;\n    }\n\n    .btn-success {\n        background-color: #0eda7bff;\n        height: 40px;\n        border-radius: 8px;\n        border: none;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .panel-body {\n        padding: 24px;\n    }\n\n    .form-control {\n        border-radius: 4px;\n    }\n</style>\n\n\n<div class=\"admin-wrapper\">\n    <div class=\"container-fluid\">\n        <h1 class=\"text-center\">PERMOHONAN PERBAIKAN DATA KOPERASI</h1>\n\n        <br>\n        <?php echo $this->render('_headerReminder', ['variant' => PerbaikanDataForm::REMINDER_DOWNLOAD_MANUAL_BOOK]) ?>\n\n        <div class=\"panel panel-default\">\n            <div class=\"container-fluid panel-body\">\n\n                <?php $form = ActiveForm::begin([\n                    'id' => 'form-perbaikan',\n                    'options' => ['class' => 'form-perbaikan'],\n                    'enableClientValidation' => true,\n                    'fieldConfig' => [\n                        'template' => \"{label}\\n{input}\\n{error}\",\n                        'labelOptions' => ['class' => 'control-label'],\n                        'errorOptions' => ['class' => 'warning validation'],\n                    ],\n                ]); ?>\n\n                <div class=\"form-group clearfix\">\n                    <?= $form->field($model, 'full_nama_koperasi')\n                        ->textInput(['placeholder' => 'Masukkan Nama Koperasi'])\n                        ->label($model->getAttributeLabel('full_nama_koperasi') . ' <span style=\"color:red;\">*</span>', ['encode' => false])\n                    ?>\n                    <div class=\"form-group clearfix\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-sm-12\">\n                                <?= $form->field($model, 'no_sk_koperasi')\n                                    ->textInput(['placeholder' => 'Masukkan Nomor SKT/SKP'])\n                                    ->label($model->getAttributeLabel('no_sk_koperasi') . ' <span style=\"color:red;\">*</span>', ['encode' => false])\n                                ?>\n                            </div>\n                            <div class=\"col-md-6 col-sm-12\">\n                                <?= $form->field($model, 'tanggal_sk_koperasi')\n                                    ->input('date', ['placeholder' => 'Masukkan Tanggal SKT/SKP'])\n                                    ->label($model->getAttributeLabel('tanggal_sk_koperasi') . ' <span style=\"color:red;\">*</span>', ['encode' => false])\n                                ?>\n                            </div>\n                        </div>\n                    </div>\n\n                    <?php if (isset($confirmStep) && $confirmStep === 1) : ?>\n                        <div class=\"alert alert-success\">\n                            <p>Data Koperasi ditemukan. Silakan lanjutkan ke langkah berikutnya.</p>\n                        </div>\n                    <?php elseif (isset($confirmStep) && $confirmStep === 0) : ?>\n                        <div class=\"alert alert-danger\">\n                            <p>Data Koperasi tidak ditemukan. Silakan periksa kembali data yang Anda masukkan.</p>\n                        </div>\n                    <?php endif; ?>\n\n                    <div class=\"button-wrapper\">\n                        <a href=\"/perbaikan-data/daftar-permohonan\" class=\"btn btn-success\">Daftar Permohonan</a>\n                        <?= Html::submitButton(\n                            $confirmStep === 1 ? 'Selanjutnya' : 'Cari',\n                            ['class' => 'btn btn-primary', 'style' => 'width:150px']\n                        ) ?>\n                    </div>\n\n                    <input type=\"hidden\" name=\"confirmStepFlag\" id=\"confirmStepFlag\" value=\"<?= ($confirmStep === 1 ? 1 : 0) ?>\">\n\n                    <?php ActiveForm::end(); ?>\n\n\n                </div>\n            </div>\n        </div>\n    </div>\n\n--- File: 317 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/AppendStream.php ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\nuse GuzzleHttp\\Stream\\Exception\\CannotAttachException;\n\n/**\n * Reads from multiple streams, one after the other.\n *\n * This is a read-only stream decorator.\n */\nclass AppendStream implements StreamInterface\n{\n    /** @var StreamInterface[] Streams being decorated */\n    private $streams = [];\n\n    private $seekable = true;\n    private $current = 0;\n    private $pos = 0;\n    private $detached = false;\n\n    /**\n     * @param StreamInterface[] $streams Streams to decorate. Each stream must\n     *                                   be readable.\n     */\n    public function __construct(array $streams = [])\n    {\n        foreach ($streams as $stream) {\n            $this->addStream($stream);\n        }\n    }\n\n    public function __toString()\n    {\n        try {\n            $this->seek(0);\n            return $this->getContents();\n        } catch (\\Exception $e) {\n            return '';\n        }\n    }\n\n    /**\n     * Add a stream to the AppendStream\n     *\n     * @param StreamInterface $stream Stream to append. Must be readable.\n     *\n     * @throws \\InvalidArgumentException if the stream is not readable\n     */\n    public function addStream(StreamInterface $stream)\n    {\n        if (!$stream->isReadable()) {\n            throw new \\InvalidArgumentException('Each stream must be readable');\n        }\n\n        // The stream is only seekable if all streams are seekable\n        if (!$stream->isSeekable()) {\n            $this->seekable = false;\n        }\n\n        $this->streams[] = $stream;\n    }\n\n    public function getContents()\n    {\n        return Utils::copyToString($this);\n    }\n\n    /**\n     * Closes each attached stream.\n     *\n     * {@inheritdoc}\n     */\n    public function close()\n    {\n        $this->pos = $this->current = 0;\n\n        foreach ($this->streams as $stream) {\n            $stream->close();\n        }\n\n        $this->streams = [];\n    }\n\n    /**\n     * Detaches each attached stream\n     *\n     * {@inheritdoc}\n     */\n    public function detach()\n    {\n        $this->close();\n        $this->detached = true;\n    }\n\n    public function attach($stream)\n    {\n        throw new CannotAttachException();\n    }\n\n    public function tell()\n    {\n        return $this->pos;\n    }\n\n    /**\n     * Tries to calculate the size by adding the size of each stream.\n     *\n     * If any of the streams do not return a valid number, then the size of the\n     * append stream cannot be determined and null is returned.\n     *\n     * {@inheritdoc}\n     */\n    public function getSize()\n    {\n        $size = 0;\n\n        foreach ($this->streams as $stream) {\n            $s = $stream->getSize();\n            if ($s === null) {\n                return null;\n            }\n            $size += $s;\n        }\n\n        return $size;\n    }\n\n    public function eof()\n    {\n        return !$this->streams ||\n            ($this->current >= count($this->streams) - 1 &&\n             $this->streams[$this->current]->eof());\n    }\n\n    /**\n     * Attempts to seek to the given position. Only supports SEEK_SET.\n     *\n     * {@inheritdoc}\n     */\n    public function seek($offset, $whence = SEEK_SET)\n    {\n        if (!$this->seekable || $whence !== SEEK_SET) {\n            return false;\n        }\n\n        $success = true;\n        $this->pos = $this->current = 0;\n\n        // Rewind each stream\n        foreach ($this->streams as $stream) {\n            if (!$stream->seek(0)) {\n                $success = false;\n            }\n        }\n\n        if (!$success) {\n            return false;\n        }\n\n        // Seek to the actual position by reading from each stream\n        while ($this->pos < $offset && !$this->eof()) {\n            $this->read(min(8096, $offset - $this->pos));\n        }\n\n        return $this->pos == $offset;\n    }\n\n    /**\n     * Reads from all of the appended streams until the length is met or EOF.\n     *\n     * {@inheritdoc}\n     */\n    public function read($length)\n    {\n        $buffer = '';\n        $total = count($this->streams) - 1;\n        $remaining = $length;\n\n        while ($remaining > 0) {\n            // Progress to the next stream if needed.\n            if ($this->streams[$this->current]->eof()) {\n                if ($this->current == $total) {\n                    break;\n                }\n                $this->current++;\n            }\n            $buffer .= $this->streams[$this->current]->read($remaining);\n            $remaining = $length - strlen($buffer);\n        }\n\n        $this->pos += strlen($buffer);\n\n        return $buffer;\n    }\n\n    public function isReadable()\n    {\n        return true;\n    }\n\n    public function isWritable()\n    {\n        return false;\n    }\n\n    public function isSeekable()\n    {\n        return $this->seekable;\n    }\n\n    public function write($string)\n    {\n        return false;\n    }\n\n    public function getMetadata($key = null)\n    {\n        return $key ? null : [];\n    }\n}\n\n\n--- File: 730 # views/log/index.php ---\n<?php\n\nuse yii\\helpers\\Html;\nuse kartik\\grid\\GridView;\nuse yii\\widgets\\Pjax;\nuse yii\\widgets\\ActiveForm;\nuse app\\models\\Log;\n\n/* @var $this yii\\web\\View */\n/* @var $dataProvider yii\\data\\ActiveDataProvider */\n$this->title = 'Log Aktivitas';\n$this->params['breadcrumbs'][] = $this->title;\n?>\n<div class=\"log-index\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-header\" align=\"center\">\n            <h2 style=\"float: none;\"><?= Html::encode($this->title) ?></h2>\n            <hr>\n        </div>\n        <div class=\"x_content\">\n\n            <?php $form = ActiveForm::begin([\n                'method' => 'get',\n                'action' => ['index'],\n            ]); ?>\n\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <?= Html::dropDownList('Log[month]', $month, $months, [\n                        'class' => 'form-control',\n                    ]) ?>\n                </div>\n                <div class=\"col-md-3\">\n                    <?= Html::dropDownList('Log[year]', $year, $years, [\n                        'class' => 'form-control',\n                    ]) ?>\n                </div>\n                <div class=\"col-md-2\">\n                    <?= Html::submitButton('Cari', ['class' => 'btn btn-success']) ?>\n                </div>\n            </div>\n\n            <?php ActiveForm::end(); ?>\n            <?php Pjax::begin(); ?>\n            <?= GridView::widget([\n                'dataProvider' => $dataProvider,\n                'filterModel' => $searchModel,\n                'layout' => \"<div align='center'>{pager}</div>\\n<div align='right'>{summary}</div>\\n{items}\\n<div align='center'>{pager}</div>\",\n                'pager' => [\n                    'firstPageLabel' => '<< Pertama',\n                    'lastPageLabel'  => 'Terakhir >>',\n                    'nextPageLabel'  => 'Berikutnya >',\n                    'prevPageLabel'  => '< Sebelumnya',\n                ],\n                'formatter' => [\n                    'class' => 'yii\\i18n\\Formatter',\n                    'nullDisplay' => '-',\n                ],\n                'rowOptions' => function ($model) {\n                    if ($model->is_error === Log::ERROR) {\n                        return ['class' => GridView::TYPE_DANGER];\n                    } else if ($model->is_error === Log::DATA_TIDAK_DITEMUKAN) {\n                        return ['class' => GridView::TYPE_WARNING];\n                    }\n                },\n                'columns' => [\n                    [\n                        'class' => 'kartik\\grid\\ExpandRowColumn',\n                        'value' => function () {\n                            return 1;\n                        },\n                        'detail' => function ($model) {\n                            return $model->getDetail($model);\n                        }\n                    ],\n                    'id',\n                    'ip_address',\n                    'nik',\n                    [\n                        'attribute' => 'type',\n                        'filter' => Log::getBase(),\n                    ],\n                    [\n                        'attribute' => 'is_error',\n                        'value' => function($model) {\n                            if ($model->is_error === Log::ERROR) {\n                                return \"ERROR\";\n                            } else if ($model->is_error === Log::DATA_TIDAK_DITEMUKAN) {\n                                return \"DATA TIDAK DITEMUKAN\";\n                            } else {\n                                return \"TIDAK ERROR\";\n                            }\n                        },\n                        'filter' => Log::getStatus(),\n                    ],\n                    [\n                        'attribute' => 'created_at',\n                        'filter' => false,\n                    ],\n                    [\n                        'attribute' => 'execution_time',\n                        'value' => function($model) {\n                            return '<div class=\"koket\"><div><b>Exec Time:</b><pre class=\"koket_execution_time\">' . $model->execution_time . '</pre></div></div>';\n                        },\n                        'format' => 'html',\n                        'filter' => false,\n                    ],\n                ],\n            ]); ?>\n            <?php Pjax::end(); ?>\n        </div>\n    </div>\n</div>\n\n<?php\n$this->registerCss(\"\n    .error {\n        color: red;\n        font-size: 2em;\n    }\n    div.koket {\n        display: inline-block;\n        width: 100%;\n        float: left;\n    }\n    div.koket > div {\n        white-space: nowrap;\n        float: left;\n    }\n    div.koket > div:not(:last-child) {\n        margin-right: .3em;\n    }\n    div.koket > div > * {\n        vertical-align: middle;\n        margin: 0;\n        padding: .1em .3em;\n        display: inline-block;\n    }\n    div.koket > div b {\n        font-weight: 600;\n    }\n    div.koket > div pre {\n        background-color: rgba(0, 255, 0, .07);\n        color: #080;\n    }\n    div.koket > div > pre a {\n        color: inherit;\n        font-style: none;\n    }\n    pre.koket {\n        text-align: center;\n    }\n\");\n?>\n\n\n--- File: 680 # modules/Api/components/SKHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse Yii;\nuse app\\models\\SK;\nuse yii\\base\\Component;\nuse app\\models\\PesanNama;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\ChecklistPerubahan;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\n\nclass SKHelper extends Component {\n\n    public static function pushPerubahan($id) {\n        \n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        if ( $transaksi->is_finish == -1 ) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_perubahan', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        }\n        else {\n            $transaksi->is_finish = 1;\n\n            $pnID = [4]; // group of ids which needs to change pesan nama table\n            $bhPenggabungan = [2];\n            $group = [];\n            $idMaster = $transaksi->id_master;\n            $raw = ChecklistPerubahan::find()->joinWith(['masterPerubahan'])->where(['t_koperasi_id' => $id])->all();\n\n            if ( empty( $raw ) ) {\n\n            \techo 0; //data not found\n            \texit();\n            }\n\n            $changePesanNama = false;\n            $changePenggabungan = false;\n            foreach ($raw as $checks) {\n\n            \tif ( empty( $group ) OR ! in_array($checks->masterPerubahan->groups, $group) ) {\n\n\t            \tarray_push($group, $checks->masterPerubahan->groups);\n            \t}\n            \t\n            \tif ( in_array($checks->masterPerubahan->id, $pnID) ) {\n\n            \t\t$changePesanNama = true;\n            \t}\n            \t\n            \tif ( in_array($checks->masterPerubahan->id, $bhPenggabungan) ) {\n\n            \t\t$changePenggabungan = true;\n            \t}\n            }\n\n            $SKins = self::generateSurat( $group, $transaksi );\n\n            // change pesan nama status if master perubahan = 4 / Nama Koperasi\n            if ( $changePesanNama ) {\n            \t// var_dump('pesan');\n            \tself::changePesanNama( $transaksi, $idMaster );\n            }\n\n            // change is gabung if perubahan master id = 2 / penggabungan\n            if ( $changePenggabungan ) {\n            \t// var_dump( 'gabung' );\n            \tself::changeMasterTransactionIsGabung( $id );\n            }\n\n            // exit();\n\n            MasterTransaction::updateAll(['id_transaksi' => $id, 'id_sk' => $SKins->id], ['id' => $idMaster]);\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n        $transaksi->tanggal_jangka_waktu = ! empty( $transaksi->jumlah_jangka_waktu ) ? date(\"Y-m-d\", strtotime($transaksi->tanggal_jangka_waktu . \" + \".$transaksi->jumlah_jangka_waktu.\" year\")) : $transaksi->tanggal_jangka_waktu;\n\n        return $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'tanggal_jangka_waktu'));\n    }\n\n    public static function generateSurat( $group, $transaksi ) {\n\n        if ( empty( SK::find()->where(['t_koperasi_id' => $transaksi->id])->one() ) ) {\n\n\t        $SKins = new SK();\n\t        if ( count($group) < 2 ) {\n\n\t            $SKins->t_koperasi_id = $transaksi->id;\n\t            $SKins->no_sk_koperasi = $group[0] == 1 ? Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPerubahan() : self::getLastSK( $transaksi->id_master );\n\t            $SKins->no_sp_koperasi = $group[0] == 2 ? Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPelaporan() : NULL;\n\t        }\n\t        else {\n\n\t            $SKins->t_koperasi_id = $transaksi->id;\n\t            $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPerubahan();\n\t            $SKins->no_sp_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPelaporan();\n\t        }\n        }\n        else {\n\n        \t$SKins = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n        }\n\n        $SKins->save();\n\n        return $SKins;\n    }\n\n    public static function changePesanNama( $transaksi, $idMaster ) {\n\n    \t// change status of new name\n        PesanNama::updateAll(['status' => 1], ['id' => $transaksi->t_pesan_nama_id]);\n\n        // change is delete on before latest transaction\n    \t$raw = TransaksiKoperasi::findLastTransaction( TransaksiKoperasi::BEFORE_LATEST, $idMaster );\n    \t$lastID = $raw['id'];\n    \t$idPesanNama = $raw['t_pesan_nama_id'];\n\n        PesanNama::updateAll(['is_deleted' => 1], ['id' => $idPesanNama]);\n    }\n\n    public static function changeMasterTransactionIsGabung( $id ) {\n\n    \t// code goes here\n    \t$raw = BHPenggabungan::find()->where(['t_koperasi_id' => $id])->all();\n\n    \t// update master\n    \tforeach ($raw as $key) {\n\n\t\t\tMasterTransaction::updateAll(['is_gabung' => 1], ['id' => $key->d_koperasi_id]);\n    \t}\n    }\n    \n    public static function getLastSK( $idMaster ) {\n\n    \t$raw = MasterTransaction::find()->joinWith(['surat'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n\n    \treturn $raw->surat->no_sk_koperasi;\n    }\n}\n?>\n\n--- File: 337 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/AppendStreamTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Stream;\n\nuse GuzzleHttp\\Stream\\AppendStream;\nuse GuzzleHttp\\Stream\\Stream;\n\nclass AppendStreamTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @expectedException \\InvalidArgumentException\n     * @expectedExceptionMessage Each stream must be readable\n     */\n    public function testValidatesStreamsAreReadable()\n    {\n        $a = new AppendStream();\n        $s = $this->getMockBuilder('GuzzleHttp\\Stream\\StreamInterface')\n            ->setMethods(['isReadable'])\n            ->getMockForAbstractClass();\n        $s->expects($this->once())\n            ->method('isReadable')\n            ->will($this->returnValue(false));\n        $a->addStream($s);\n    }\n\n    public function testValidatesSeekType()\n    {\n        $a = new AppendStream();\n        $this->assertFalse($a->seek(100, SEEK_CUR));\n    }\n\n    public function testTriesToRewindOnSeek()\n    {\n        $a = new AppendStream();\n        $s = $this->getMockBuilder('GuzzleHttp\\Stream\\StreamInterface')\n            ->setMethods(['isReadable', 'seek', 'isSeekable'])\n            ->getMockForAbstractClass();\n        $s->expects($this->once())\n            ->method('isReadable')\n            ->will($this->returnValue(true));\n        $s->expects($this->once())\n            ->method('isSeekable')\n            ->will($this->returnValue(true));\n        $s->expects($this->once())\n            ->method('seek')\n            ->will($this->returnValue(false));\n        $a->addStream($s);\n        $this->assertFalse($a->seek(10));\n    }\n\n    public function testSeeksToPositionByReading()\n    {\n        $a = new AppendStream([\n            Stream::factory('foo'),\n            Stream::factory('bar'),\n            Stream::factory('baz'),\n        ]);\n\n        $this->assertTrue($a->seek(3));\n        $this->assertEquals(3, $a->tell());\n        $this->assertEquals('bar', $a->read(3));\n        $a->seek(6);\n        $this->assertEquals(6, $a->tell());\n        $this->assertEquals('baz', $a->read(3));\n    }\n\n    public function testDetachesEachStream()\n    {\n        $s1 = Stream::factory('foo');\n        $s2 = Stream::factory('foo');\n        $a = new AppendStream([$s1, $s2]);\n        $this->assertSame('foofoo', (string) $a);\n        $a->detach();\n        $this->assertSame('', (string) $a);\n        $this->assertSame(0, $a->getSize());\n    }\n\n    public function testClosesEachStream()\n    {\n        $s1 = Stream::factory('foo');\n        $a = new AppendStream([$s1]);\n        $a->close();\n        $this->assertSame('', (string) $a);\n    }\n\n    public function testIsNotWritable()\n    {\n        $a = new AppendStream([Stream::factory('foo')]);\n        $this->assertFalse($a->isWritable());\n        $this->assertTrue($a->isSeekable());\n        $this->assertTrue($a->isReadable());\n        $this->assertFalse($a->write('foo'));\n    }\n\n    public function testDoesNotNeedStreams()\n    {\n        $a = new AppendStream();\n        $this->assertEquals('', (string) $a);\n    }\n\n    public function testCanReadFromMultipleStreams()\n    {\n        $a = new AppendStream([\n            Stream::factory('foo'),\n            Stream::factory('bar'),\n            Stream::factory('baz'),\n        ]);\n        $this->assertFalse($a->eof());\n        $this->assertSame(0, $a->tell());\n        $this->assertEquals('foo', $a->read(3));\n        $this->assertEquals('bar', $a->read(3));\n        $this->assertEquals('baz', $a->read(3));\n        $this->assertTrue($a->eof());\n        $this->assertSame(9, $a->tell());\n        $this->assertEquals('foobarbaz', (string) $a);\n    }\n\n    public function testCanDetermineSizeFromMultipleStreams()\n    {\n        $a = new AppendStream([\n            Stream::factory('foo'),\n            Stream::factory('bar')\n        ]);\n        $this->assertEquals(6, $a->getSize());\n\n        $s = $this->getMockBuilder('GuzzleHttp\\Stream\\StreamInterface')\n            ->setMethods(['isSeekable', 'isReadable'])\n            ->getMockForAbstractClass();\n        $s->expects($this->once())\n            ->method('isSeekable')\n            ->will($this->returnValue(null));\n        $s->expects($this->once())\n            ->method('isReadable')\n            ->will($this->returnValue(true));\n        $a->addStream($s);\n        $this->assertNull($a->getSize());\n    }\n\n    public function testCatchesExceptionsWhenCastingToString()\n    {\n        $s = $this->getMockBuilder('GuzzleHttp\\Stream\\StreamInterface')\n            ->setMethods(['read', 'isReadable', 'eof'])\n            ->getMockForAbstractClass();\n        $s->expects($this->once())\n            ->method('read')\n            ->will($this->throwException(new \\RuntimeException('foo')));\n        $s->expects($this->once())\n            ->method('isReadable')\n            ->will($this->returnValue(true));\n        $s->expects($this->any())\n            ->method('eof')\n            ->will($this->returnValue(false));\n        $a = new AppendStream([$s]);\n        $this->assertFalse($a->eof());\n        $this->assertSame('', (string) $a);\n    }\n\n    public function testCanDetach()\n    {\n        $s = new AppendStream();\n        $s->detach();\n    }\n\n    public function testReturnsEmptyMetadata()\n    {\n        $s = new AppendStream();\n        $this->assertEquals([], $s->getMetadata());\n        $this->assertNull($s->getMetadata('foo'));\n    }\n\n    /**\n     * @expectedException \\GuzzleHttp\\Stream\\Exception\\CannotAttachException\n     */\n    public function testCannotAttach()\n    {\n        $p = new AppendStream();\n        $p->attach('a');\n    }\n}\n\n\n--- File: 630 # models/BaseNik.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse yii\\db\\Exception as DbException;\nuse yii\\db\\StaleObjectException;\n\n/**\n * This is the model class for table \"kop_base_nik\".\n *\n * @property int $id\n * @property string $base\n * @property int $count\n */\nclass BaseNik extends ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%base_nik}}';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['base'], 'required'],\n            [['base'], 'string', 'max' => 10],\n            [['base'], 'unique'],\n            [['count'], 'integer'],\n            [['count'], 'default', 'value' => 0],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'base' => 'Base NIK Prefix',\n            'count' => 'Current Count',\n        ];\n    }\n\n    /**\n     * Generates the next sequential NIK based on a given base prefix.\n     * It uses the `kop_base_nik` table to atomically manage the sequence count.\n     *\n     * @param string $base The base NIK prefix (e.g., '10203040' derived from wilayah IDs).\n     * @return string|false The generated full NIK string (e.g., '10203040001') on success, or false on failure.\n     */\n    public static function generateNik($base)\n    {\n        $db = self::getDb();\n        $transaction = $db->beginTransaction();\n\n        try {\n            // Find the BaseNik record. We acquire a lock for update to prevent race conditions.\n            // Using queryOne with FOR UPDATE is more explicit for locking the row.\n            // Alternatively, ActiveRecord's findOne() followed by save() inside a transaction\n            // usually provides sufficient atomicity for counters in most cases.\n            // For simplicity and common use-case, let's stick with findOne/save for ActiveRecord.\n            // If very high concurrency is expected and explicit row locking is needed,\n            // a raw SQL query with \"FOR UPDATE\" might be considered.\n\n            $baseNikRecord = self::findOne(['base' => $base]);\n            $newCount = 0;\n\n            if ($baseNikRecord) {\n                // Base NIK exists, increment the count\n                $baseNikRecord->count += 1;\n                $newCount = $baseNikRecord->count;\n                if (!$baseNikRecord->save()) {\n                    throw new DbException('Failed to update NIK count for base: ' . $base . '. Errors: ' . json_encode($baseNikRecord->getErrors()));\n                }\n                Yii::info(\"Updated NIK count for base '{$base}' to {$newCount}.\", __METHOD__);\n            } else {\n                // Base NIK does not exist, insert a new record with count 1\n                $baseNikRecord = new self();\n                $baseNikRecord->base = $base;\n                $baseNikRecord->count = 1; // Start with 1\n                $newCount = 1;\n                if (!$baseNikRecord->save()) {\n                    throw new DbException('Failed to insert new NIK base: ' . $base . '. Errors: ' . json_encode($baseNikRecord->getErrors()));\n                }\n                Yii::info(\"Inserted new NIK base '{$base}' with count {$newCount}.\", __METHOD__);\n            }\n\n            $transaction->commit(); // Commit the transaction if everything is successful\n\n            // Format the new count to be 3 digits with leading zeros\n            $sequentialSuffix = sprintf(\"%03d\", $newCount);\n            $fullNik = $base . $sequentialSuffix;\n\n            Yii::info(\"Generated NIK: {$fullNik}\", __METHOD__);\n            return $fullNik;\n\n        } catch (DbException $e) {\n            $transaction->rollBack(); // Rollback on database errors\n            Yii::error(\"Database error during NIK generation for base '{$base}'. Error: \" . $e->getMessage(), __METHOD__);\n            return false;\n        } catch (\\Throwable $e) {\n            // Catch any other general exceptions (e.g., PHP errors, unexpected issues)\n            $transaction->rollBack(); // Rollback on any general error\n            Yii::error(\"An unexpected error occurred during NIK generation for base '{$base}'. Error: \" . $e->getMessage(), __METHOD__);\n            return false;\n        }\n    }\n\n    public static function cleanWilayahName($name) {\n        if ($name === null) {\n            return '';\n        }\n        return trim(preg_replace('/\\b(PROVINSI|KABUPATEN|KOTA|KECAMATAN|KELURAHAN)\\b/i', '', $name));\n    }\n\n    public static function getWilayahIds($provCleaned, $kabCleaned, $kelCleaned) {\n        $row = (new \\yii\\db\\Query())\n            ->select(['id_provinsi', 'id_kabupaten', 'id_kecamatan', 'id_kelurahan'])\n            ->from('kop_m_wilayah_ods') // Assuming this table exists\n            ->where(['provinsi' => $provCleaned]) // Exact match for province\n            ->andWhere(['like', 'kabupaten', '%' . $kabCleaned . '%']) // Partial match for kabupaten\n            ->andWhere(['like', 'kelurahan', '%' . $kelCleaned . '%']) // Partial match for kelurahan\n            ->orderBy(['id' => SORT_DESC]) // Assuming 'id' is a good ordering for 'latest'\n            ->one(self::getDb()); // Use the correct DB connection\n\n        if ($row) {\n            return $row; // Returns an associative array of IDs\n        }\n        return null; // No IDs found\n    }\n}\n\n\n--- File: 728 # views/layouts/main.php ---\n<?php\n\n/* @var $this \\yii\\web\\View */\n/* @var $content string */\n\nuse app\\widgets\\Alert;\nuse yii\\helpers\\Html;\nuse yii\\bootstrap\\Nav;\nuse yii\\bootstrap\\NavBar;\nuse yii\\widgets\\Breadcrumbs;\nuse app\\assets\\AppAsset;\nuse docotel\\dcms\\widget\\SideNav;\nuse app\\components\\Menu;\nuse yii\\helpers\\ArrayHelper;\n\nAppAsset::register($this);\n?>\n<?php $this->beginPage() ?>\n<!DOCTYPE html>\n<html lang=\"<?= Yii::$app->language ?>\">\n<head>\n<meta charset=\"<?= Yii::$app->charset ?>\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n  <?= Html::csrfMetaTags() ?>\n  <title><?= Html::encode($this->title) ?></title>\n  <link rel=\"manifest\" href=\"images/favicon/manifest.json\">\n  <!-- <link rel=\"stylesheet\" href=\"/css/site.css\">\n  <link rel=\"stylesheet\" href=\"/frontend/dist/styles/main.css\"> -->\n  <style type=\"text/css\">\n    .treeview.menu-open > a > .pull-right-container > .fa-minus {\n      display: block;\n    }\n\n    .treeview.menu-open > a > .pull-right-container > .fa-plus {\n      display: none;\n    }\n    .treeview > a > .pull-right-container > .fa-minus {\n      display: none;\n    }\n\n    .treeview > a > .pull-right-container > .fa-plus {\n      display: block;\n    }\n    /*.treeview.menu-open .treeview-menu .pull-right-container .fa-minus {\n      display: block;\n    }*/\n\n  </style>\n  <?php $this->head() ?>\n  <link href=\"/css/font-awesome.min.css\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"/css/animate.css\">\n</head>\n<body class=\"hold-transition skin-blue sidebar-mini\">\n<?php $this->beginBody() ?>\n<div class=\"wrapper\">\n    <header class=\"main-header\">\n        <div class=\"navbar-top\">\n            <a href=\"#\" data-toggle=\"push-menu\" role=\"button\">\n                <div class=\"nav-toggle\" id=\"toggle-nav\" toggle-target=\"#side-nav\">\n                  <i class=\"fa fa-bars\" aria-hidden=\"true\"></i>\n                </div>\n            </a>\n\n            <h3 class=\"nav-title\">DITJEN AHU ONLINE</h3>\n            <div class=\"top-menu\">\n                <div class=\"navbar-custom-menu\">\n                    <ul class=\"nav navbar-nav\">\n                            <!-- Messages: style can be found in dropdown.less-->\n\n                            <!-- /.messages-menu -->\n                    </ul>\n                </div>\n                <div class=\"menu\"></div>\n            </div>\n            <div class=\"nav-right\">\n                <div class=\"user-info\">\n                    <div class=\"toggle-user\" id-target=\"#usermenu\">\n                      <?= Yii::$app->user->isGuest ? 'Guest' : (empty($data_notaris = Yii::$app->session->get('data_notaris')) ? Yii::$app->user->identity->username : ArrayHelper::getValue($data_notaris, 'value.username', '-'))  ?>\n                      <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>\n                    </div>\n                    <ul class=\"user-menu\" id=\"usermenu\">\n                        <?php if(!empty(Yii::$app->user->identity->userGroup[0]->group_id) && Yii::$app->user->identity->userGroup[0]->group_id != 'notaris'):\n                          // cek halaman ubah password berdasarkan user grup\n                          $usergrup = Yii::$app->user->identity->userGroup[0]->group_id;\n                          $url_ubah_password = $usergrup != 'badan-hukum' ? \"/dcms/user/change-password\" : \"/users/change-password\";\n                          ?>\n                            <li class=\"\">\n                              <?=\n                                Html::a('<span class=\"menu-icon\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i></span> Ubah Password',\n                                  $url_ubah_password,\n                                  ['data-method' => 'post']\n\n                                )?>\n                            </li>\n                        <?php endif;?>\n                        <li class=\"green-panel logout\">\n                          <?=\n                            Html::a('<span class=\"menu-icon\"><i class=\"fa fa-cogs\" aria-hidden=\"true\"></i></span> Log Out',\n                              '/site/logout',\n                              ['data-method' => 'post']\n\n                            )?>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </header>\n    <aside class=\"main-sidebar\">\n\n      <!-- sidebar: style can be found in sidebar.less -->\n      <section class=\"sidebar\">\n\n      <?php\n    // dump($_SESSION);exit;\n    //   echo SideNav::widget([\n    //     'items' => !empty($this->params['menu']) ? $this->params['menu'] : []\n    //   ]);\n      ?>\n\n          <!-- Sidebar Menu -->\n          <?php\n            echo Menu::widget([\n              'items' => !empty($this->params['menu']) ? $this->params['menu'] : [],\n              // 'indMenuOpen' => '<i class=\"fas fa-minus pull-right\"></i>',\n              // 'indMenuClose' => '<i class=\"fas fa-plus pull-right\"></i>',\n              // 'heading' => true,\n            ]);\n          ?>\n          <!-- /.sidebar-menu -->\n      </section>\n      <!-- /.sidebar -->\n      </aside>\n      <div class=\"content-wrapper\">\n      <section class=\"content container-fluid\">\n      <?= Breadcrumbs::widget([\n            'links' => isset($this->params['breadcrumbs']) ? $this->params['breadcrumbs'] : [],\n        ]) ?>\n        <?= Alert::widget() ?>\n        <?= $content ?>\n      </section>\n      </div>\n  <?php $this->endBody() ?>\n  </body>\n</html>\n<?php $this->endPage() ?>\n\n\n--- File: 718 # views/admin/whitelist/index.php ---\n<?php\n\nuse yii\\grid\\GridView;\nuse yii\\bootstrap\\Html;\nuse app\\models\\JenisKoperasi;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\MMatch;\n\n$this->title = \"Whitelist Nama\";\n?>\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <header style=\"margin-bottom:50px;\">\n            <h2 class=\"text-center\"><?= $this->title ?></h2>\n            <hr>\n        </header>\n        <?= Html::a(\"Tambah Data\", \"whitelist-add\", [\"class\" => \"btn btn-primary\", \"style\" => \"margin-bottom:2%\"]); ?>\n        <?=\n            GridView::widget([\n                'dataProvider' => $data_provider,\n                'filterModel' => $search_model,\n                'formatter' => [\n                    'class' => 'yii\\i18n\\Formatter',\n                    'nullDisplay' => '-'\n                ],\n                'columns' => [\n                    [\n                        'class' => 'yii\\grid\\SerialColumn',\n                        'header' => 'No',\n                    ],\n                    [\n                        'label' => 'Nama yang Diizinkan',\n                        'attribute' => 'name',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center'],\n                    ],\n                    [\n                        'label' => 'Keterangan',\n                        'attribute' => 'keterangan',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center'],\n                    ],\n                    [\n                        'label' => 'Tanggal Pembuatan',\n                        'attribute' => 'created_date',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center'],\n                        'format' => ['date', 'php:d-F-Y H:i:s'],\n                        'filter' => \\yii\\jui\\DatePicker::widget([\n                            'model' => $search_model,\n                            'attribute' => 'created_date',\n                            'dateFormat' => 'dd-MMMM-yyyy',\n                            'options' => [\n                                'class' => 'form-control',\n                            ]\n                        ]),\n\n                    ],\n                    [\n                        'label' => 'Diizinkan Untuk',\n                        'attribute' => 'base',\n                        'format' => 'html',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center', 'style' => 'width:20%'],\n                        'filter' => ArrayHelper::map(JenisKoperasi::find()->all(), 'id', 'nama'),\n                        'value' => function ($data) {\n                            $base = MMatch::findAll(['group_id' => $data->group_id]);\n                            if (!$base) {\n                                return null;\n                            }\n                            $temp = [];\n                            foreach ($base as $val) {\n                                $temp[] = $val->base0->nama;\n                            }\n                            return Html::ul($temp, ['item' => function ($item, $index) {\n                                return Html::tag('li', $item);\n                            }]);\n                        }\n                    ],\n                    [\n                        'label' => 'Dibuat Oleh',\n                        'attribute' => 'created_by',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center'],\n                        'value' => function ($data) {\n                            $user = docotel\\dcms\\models\\User::findOne(['id' => $data->created_by]);\n                            if (!$user) {\n                                return null;\n                            }\n                            return $user->username;\n                        }\n                    ],\n                    [\n                        'class' => 'yii\\grid\\ActionColumn',\n                        'header' => 'Aksi',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center'],\n                        'template' => '{update} {delete}',\n                        'buttons' => [\n                            'update' => function ($url, $model) {\n                                return Html::a(\n                                    '<span class=\"glyphicon glyphicon-pencil\"></span>',\n                                    $url,\n                                    [\n                                        'title' => Yii::t('app', 'lead-update'),\n                                    ]\n                                );\n                            },\n                            'delete' => function ($url, $model) {\n                                return Html::a(\n                                    '<span class=\"glyphicon glyphicon-trash\"></span>',\n                                    $url,\n                                    [\n                                        'title' => Yii::t('app', 'lead-delete'),\n                                        'onClick' => 'return confirm(\"Anda yakin ingin menghapus ini?\")'\n                                    ]\n                                );\n                            },\n                        ],\n                        'urlCreator' => function ($action, $model, $key, $index) {\n                            if ($action === 'update') {\n                                $url = \"whitelist-update?group_id=\" . $model->group_id;\n                                return $url;\n                            }\n                            if ($action === 'delete') {\n                                $url = \"whitelist-delete?group_id=\" . $model->group_id;\n                                return $url;\n                            }\n                        }\n                    ],\n                ]\n\n            ]); ?>\n    </div>\n</div>\n\n--- File: 715 # views/admin/userDinas/index.php ---\n<?php\nuse yii\\grid\\GridView;\nuse yii\\bootstrap\\Html;\nuse app\\models\\JenisKoperasi;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\MMatch;\n$this->title = \"Daftar User Dinas\";\n$status_aktif = app\\models\\User::STATUS_ACTIVE;\n$status_tidak = app\\models\\User::STATUS_INACTIVE;\n?>\n\n<style type=\"text/css\">\n    span.glyphicon.side {\n        display: block;\n        float: left;\n        width: 50%;\n    }\n</style>\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <header style=\"margin-bottom:50px;\">\n            <h2 class=\"text-center\"><?= $this->title ?></h2>\n            <hr>\n        </header>\n        <?= Html::a(\"Tambah Data\", \"user-dinas-add\", [\"class\" => \"btn btn-primary\", \"style\" => \"margin-bottom:2%\"]); ?>\n        <?= \n            GridView::widget([\n                'dataProvider' => $data_provider,\n                'filterModel' => $search_model,\n                'formatter' => [\n\t\t\t\t\t'class' => 'yii\\i18n\\Formatter',\n\t\t\t\t\t'nullDisplay' => '-'\n\t\t\t\t],\n                'columns' => [\n                    [\n                        'class' => 'yii\\grid\\SerialColumn',\n                        'header' => 'No',\n                    ],\n                    [\n                        'label' => 'Username',\n                        'attribute' => 'username',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-2'],\n                    ],\n                     [\n                        'label' => 'Email',\n                        'attribute' => 'email',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-2'],\n                    ],\n                     [\n                        'label' => 'Jenis Dinas',\n                        'attribute' => 'jenis',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-2'],\n                        'filter' => ['1' => 'Provinsi', '2' => 'Kabupaten'],\n                        'value' => function ($model) {\n                            return ($model->userDinas['jenis'] == '1') ? \"Provinsi\" : \"Kabupaten\";\n                        }\n                    ],\n                    [\n                        'label' => 'Tanggal Pembuatan',\n                        'attribute' => 'created_at',\n                        'format' => ['date', 'php:d-F-Y H:i:s'],\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-2'],\n                        'filter' => \\yii\\jui\\DatePicker::widget(['model' => $search_model, \n                            'attribute' => 'created_at',\n                            'dateFormat' => 'dd-MMMM-yyyy',\n                            'options' => [\n                                'class' => 'form-control',\n                        ]]),\n                    ],\n                    [\n                        'label' => 'Tanggal Pembaruan',\n                        'attribute' => 'updated_at',\n                        'format' => ['date', 'php:d-F-Y H:i:s'],\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-2',],\n                            'filter' => \\yii\\jui\\DatePicker::widget(['model' => $search_model, \n                            'attribute' => 'updated_at',\n                            'dateFormat' => 'dd-MMMM-yyyy',\n                            'options' => [\n                                'class' => 'form-control',\n                        ]]),\n                    ],\n                    [\n                        'label' => 'Status',\n                        'attribute' => 'status',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-1'],\n                        'filter' => [$status_tidak => 'Tidak Aktif', $status_aktif => 'Aktif'],\n                        'value' => function($data) {\n                            return $data->status == app\\models\\User::STATUS_ACTIVE ? 'Aktif' : 'Tidak Aktif';\n                        } \n                    ],\n                    [\n                        'class' => 'yii\\grid\\ActionColumn',\n                        'header' => 'Aksi',\n                        'contentOptions' => ['class' => 'text-center'],\n                        'headerOptions' => ['class' => 'text-center col-md-1'],\n                        'template' => '{update} {delete}',\n                        'buttons' => [\n                            'update' => function ($url, $model) {\n                                return Html::a('<span class=\"glyphicon glyphicon-pencil side\"></span>', $url, \n                                [\n                                    'title' => Yii::t('app', 'lead-update'),\n                                ]);\n                            },\n                            'delete' => function ($url, $model) {\n                                return Html::a('<span class=\"glyphicon glyphicon-trash side\"></span>', $url, \n                                [\n                                    'title' => Yii::t('app', 'lead-delete'),\n                                    'onClick' => 'return confirm(\"Anda yakin ingin menghapus ini?\")'\n                                ]);\n                            },\n                        ],\n                        'urlCreator' => function($action, $model, $key, $index) {\n                            if ($action === 'update') {\n                                $url = \"user-dinas-update?id=\" . $model->id;\n                                return $url;\n                            }\n                            if ($action === 'delete') {\n                                $url = \"user-dinas-delete?id=\" . $model->id;\n                                return $url;\n                            }\n                        }\n                    ], \n                ]\n            ]);\n        ?>\n    </div>\n</div>\n\n\n\n--- File: 683 # modules/Api/controllers/AuthController.php ---\n<?php \nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Json;\nuse yii\\rest\\Controller;\nuse yii\\filters\\VerbFilter;\nuse app\\components\\LogHelper;\nuse app\\modules\\Api\\models\\JWTToken;\nuse app\\modules\\Api\\components\\TimeHelper;\nuse yii\\base\\Exception;\nuse app\\models\\User;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\Setting;\nuse Firebase\\JWT\\JWT;\n\nclass AuthController extends Controller {\n\n    const EXPR_TIME_TOKEN = \"+30 minutes\";\n    private static $hash = 'sha512';\n\n    public function behaviors()\n    {\n        return [\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    'login-jwt' => ['POST'],\n                ],\n            ],\n        ];\n    }\n\n    public function actionLoginJwt() {\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"GET_JWT_TOKEN\";\n        $headers = Yii::$app->request->headers;\n        $body = Json::encode(Yii::$app->request->bodyParams);\n\n        try {\n            $dataJson = Json::decode($body);\n\n            if( !$dataJson ) {\n                try {\n                    $dataXml = simplexml_load_string(Yii::$app->request->rawBody);\n                    $json = json_encode($dataXml);\n                    $dataJson = json_decode($json, true);\n                } catch (\\Exception $e) {\n                    throw new Exception(\"Format XML Tidak Valid\", 400);\n                }\n            }\n\n            if( !array_key_exists('username', $dataJson)) {\n                throw new Exception(\"Data Username Tidak Ditemukan\", 400);\n            }\n\n            if( !array_key_exists('password', $dataJson)) {\n                throw new Exception(\"Data Password Tidak Ditemukan\", 400);\n            }\n            $username = $dataJson['username'];\n            $password = $dataJson['password'];\n\n            $dataUser = $this->getUserAuth($username, $password);\n\n            if( !$dataUser ) {\n                throw new Exception(\"User Tidak Ditemukan\", 401);\n            }\n\n            $hashKey = Setting::getValue('jwt_key');\n            $tokenId = $this->generate_sign();\n            $issuedAt = time();\n            $notBefore = $issuedAt;\n            $expire = $notBefore + 1800; // adding 60 minutes\n            $serverName = \"AHU-ONLINE\";\n\n            $token = new JWT();\n            $data = [\n                'iat' => $issuedAt,\n                'jti' => $tokenId,\n                'iss' => $serverName,\n                'nbf' => $notBefore,\n                'exp' => $expire,\n                'data' => [\n                    'theOneThatWeGaveId'   => $dataUser->id,\n                    'theOneThatWeGaveName' => $username,\n                ]\n            ];\n\n            $secretKey = base64_encode($hashKey);\n            $algorithm = 'HS256';\n            $token = $token::encode($data, $secretKey, $algorithm);\n        }\n        catch(\\Exception $e) {\n            $res = [\n                'code' => '01',\n                'message' => $e->getMessage(),\n                'status' => $e->getCode(),\n            ];\n            \n            $log = LogHelper::saveLog([\n                'service_uri' => $url,\n                'request' => $body,\n                'response' => $res,\n                'additional_data' => Json::encode( $headers->toArray() ),\n                'is_error' => 1,\n                'type' => $type_api,\n                'execution_time' => TimeHelper::getElapsedTime($start),\n            ]);\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '02',\n            'message' => 'success',\n            'token' => $token,\n            'status' => 200\n        ];\n\n        $log = LogHelper::saveLog([\n            'service_uri' => $url,\n            'request' => $body,\n            'response' => $res,\n            'additional_data' => Json::encode( $headers->toArray() ),\n            'is_error' => 0,\n            'type' => $type_api,\n            'execution_time' => TimeHelper::getElapsedTime($start),\n        ]);\n        \n        return $this->asJson($res);\n    }\n\n    public function actionAuthorization(){\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"GET_AUTH_TOKEN\";\n        $headers = Yii::$app->request->headers;\n        $body = Json::encode(Yii::$app->request->bodyParams);\n\n        try {\n            $dataJson = Json::decode($body);\n\n            if( !$dataJson ) {\n                throw new Exception(\"Format JSON Tidak Valid\");\n            }\n\n            if( !array_key_exists('nomor_transaksi', $dataJson)) {\n                throw new Exception(\"Data nomor_transaksi Tidak Ditemukan\", 400);\n            }\n\n            if( !array_key_exists('secret_key', $dataJson)) {\n                throw new Exception(\"Data secret_key Tidak Ditemukan\", 400);\n            }\n\n\n            $nomor_transaksi = $dataJson['nomor_transaksi'];\n            $secret_key = $dataJson['secret_key'];\n\n            $dataAuth = $this->getUpdateAuth($nomor_transaksi, $secret_key);\n\n            if( !$dataAuth ) {\n                throw new Exception(\"Auth Tidak Berhasil\", 401);\n            }\n\n            $token = $dataAuth;\n        \n        }\n        catch(\\Exception $e) {\n            $res = [\n                'code' => '01',\n                'message' => $e->getMessage(),\n                'status' => $e->getCode(),\n            ];\n            \n            $log = LogHelper::saveLog([\n                'service_uri' => $url,\n                'request' => $body,\n                'response' => $res,\n                'additional_data' => Json::encode( $headers->toArray() ),\n                'is_error' => 1,\n                'type' => $type_api,\n                'execution_time' => TimeHelper::getElapsedTime($start),\n            ]);\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '02',\n            'message' => 'success',\n            'token' => $token,\n            'status' => 200\n        ];\n\n        $log = LogHelper::saveLog([\n            'service_uri' => $url,\n            'request' => $body,\n            'response' => $res,\n            'additional_data' => Json::encode( $headers->toArray() ),\n            'is_error' => 0,\n            'type' => $type_api,\n            'execution_time' => TimeHelper::getElapsedTime($start),\n        ]);\n        \n        return $this->asJson($res);\n    }\n\n    public function getUpdateAuth($nomor_transaksi, $secret_key){\n        $hashed = hash(self::$hash, $secret_key . $nomor_transaksi);\n        return $hashed;\n    }\n\n    public function getUserAuth($username, $password) {\n        // Tambahkan disini jika ada group lain yang diperbolehkan get JWT Token\n        $whitelist_group = [\n            'oss',\n            'ods',\n        ];\n        $user = User::findByUsername($username);\n\n        if( !$user ) {\n            throw new Exception(\"User Tidak Ditemukan\", 404);\n        }\n\n        $cekPass = $user->validatePassword($password);\n\n        if( !$cekPass ) {\n            throw new Exception(\"Username / Password Salah\", 401);\n        }\n\n        $groups = ArrayHelper::getColumn($user->userGroup, 'group_id');\n        \n        foreach($whitelist_group as $whitelist) {\n            if( in_array($whitelist, $groups) ) {\n                return $user;\n            }\n        }\n\n        return false;\n    }\n\n    public static function generate_sign() {\n        $now = time();\n        $setengah_jam = (int)floor($now / 30 / 60);\n        $t = 'candrabeqx' . $setengah_jam . 'docotel';\n        $x = crypt($t, \"$2y$10$\" . substr(md5($t),0,22));\n\n        return $x;\n    }\n\n}\n?>\n\n--- File: 303 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/CoreTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Ring;\n\nuse GuzzleHttp\\Ring\\Core;\nuse GuzzleHttp\\Ring\\Future\\CompletedFutureArray;\nuse GuzzleHttp\\Ring\\Future\\FutureArray;\nuse GuzzleHttp\\Stream\\Stream;\nuse React\\Promise\\Deferred;\n\nclass CoreTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testReturnsNullNoHeadersAreSet()\n    {\n        $this->assertNull(Core::header([], 'Foo'));\n        $this->assertNull(Core::firstHeader([], 'Foo'));\n    }\n\n    public function testChecksIfHasHeader()\n    {\n        $message = [\n            'headers' => [\n                'Foo' => ['Bar', 'Baz'],\n                'foo' => ['hello'],\n                'bar' => ['1']\n            ]\n        ];\n        $this->assertTrue(Core::hasHeader($message, 'Foo'));\n        $this->assertTrue(Core::hasHeader($message, 'foo'));\n        $this->assertTrue(Core::hasHeader($message, 'FoO'));\n        $this->assertTrue(Core::hasHeader($message, 'bar'));\n        $this->assertFalse(Core::hasHeader($message, 'barr'));\n    }\n\n    public function testReturnsFirstHeaderWhenSimple()\n    {\n        $this->assertEquals('Bar', Core::firstHeader([\n            'headers' => ['Foo' => ['Bar', 'Baz']],\n        ], 'Foo'));\n    }\n\n    public function testReturnsFirstHeaderWhenMultiplePerLine()\n    {\n        $this->assertEquals('Bar', Core::firstHeader([\n            'headers' => ['Foo' => ['Bar, Baz']],\n        ], 'Foo'));\n    }\n\n    public function testExtractsCaseInsensitiveHeader()\n    {\n        $this->assertEquals(\n            'hello',\n            Core::header(['headers' => ['foo' => ['hello']]], 'FoO')\n        );\n    }\n\n    public function testExtractsCaseInsensitiveHeaderLines()\n    {\n        $this->assertEquals(\n            ['a', 'b', 'c', 'd'],\n            Core::headerLines([\n                'headers' => [\n                    'foo' => ['a', 'b'],\n                    'Foo' => ['c', 'd']\n                ]\n            ], 'foo')\n        );\n    }\n\n    public function testExtractsHeaderLines()\n    {\n        $this->assertEquals(\n            ['bar', 'baz'],\n            Core::headerLines([\n                'headers' => [\n                    'Foo' => ['bar', 'baz'],\n                ],\n            ], 'Foo')\n        );\n    }\n\n    public function testExtractsHeaderAsString()\n    {\n        $this->assertEquals(\n            'bar, baz',\n            Core::header([\n                'headers' => [\n                    'Foo' => ['bar', 'baz'],\n                ],\n            ], 'Foo', true)\n        );\n    }\n\n    public function testReturnsNullWhenHeaderNotFound()\n    {\n        $this->assertNull(Core::header(['headers' => []], 'Foo'));\n    }\n\n    public function testRemovesHeaders()\n    {\n        $message = [\n            'headers' => [\n                'foo' => ['bar'],\n                'Foo' => ['bam'],\n                'baz' => ['123'],\n            ],\n        ];\n\n        $this->assertSame($message, Core::removeHeader($message, 'bam'));\n        $this->assertEquals([\n            'headers' => ['baz' => ['123']],\n        ], Core::removeHeader($message, 'foo'));\n    }\n\n    public function testCreatesUrl()\n    {\n        $req = [\n            'scheme'  => 'http',\n            'headers' => ['host' => ['foo.com']],\n            'uri'     => '/',\n        ];\n\n        $this->assertEquals('http://foo.com/', Core::url($req));\n    }\n\n    /**\n     * @expectedException \\InvalidArgumentException\n     * @expectedExceptionMessage No Host header was provided\n     */\n    public function testEnsuresHostIsAvailableWhenCreatingUrls()\n    {\n        Core::url([]);\n    }\n\n    public function testCreatesUrlWithQueryString()\n    {\n        $req = [\n            'scheme'       => 'http',\n            'headers'      => ['host' => ['foo.com']],\n            'uri'          => '/',\n            'query_string' => 'foo=baz',\n        ];\n\n        $this->assertEquals('http://foo.com/?foo=baz', Core::url($req));\n    }\n\n    public function testUsesUrlIfSet()\n    {\n        $req = ['url' => 'http://foo.com'];\n        $this->assertEquals('http://foo.com', Core::url($req));\n    }\n\n    public function testReturnsNullWhenNoBody()\n    {\n        $this->assertNull(Core::body([]));\n    }\n\n    public function testReturnsStreamAsString()\n    {\n        $this->assertEquals(\n            'foo',\n            Core::body(['body' => Stream::factory('foo')])\n        );\n    }\n\n    public function testReturnsString()\n    {\n        $this->assertEquals('foo', Core::body(['body' => 'foo']));\n    }\n\n    public function testReturnsResourceContent()\n    {\n        $r = fopen('php://memory', 'w+');\n        fwrite($r, 'foo');\n        rewind($r);\n        $this->assertEquals('foo', Core::body(['body' => $r]));\n        fclose($r);\n    }\n\n    public function testReturnsIteratorContent()\n    {\n        $a = new \\ArrayIterator(['a', 'b', 'cd', '']);\n        $this->assertEquals('abcd', Core::body(['body' => $a]));\n    }\n\n    public function testReturnsObjectToString()\n    {\n        $this->assertEquals('foo', Core::body(['body' => new StrClass]));\n    }\n\n    /**\n     * @expectedException \\InvalidArgumentException\n     */\n    public function testEnsuresBodyIsValid()\n    {\n        Core::body(['body' => false]);\n    }\n\n    public function testParsesHeadersFromLines()\n    {\n        $lines = ['Foo: bar', 'Foo: baz', 'Abc: 123', 'Def: a, b'];\n        $this->assertEquals([\n            'Foo' => ['bar', 'baz'],\n            'Abc' => ['123'],\n            'Def' => ['a, b'],\n        ], Core::headersFromLines($lines));\n    }\n\n    public function testParsesHeadersFromLinesWithMultipleLines()\n    {\n        $lines = ['Foo: bar', 'Foo: baz', 'Foo: 123'];\n        $this->assertEquals([\n            'Foo' => ['bar', 'baz', '123'],\n        ], Core::headersFromLines($lines));\n    }\n\n    public function testCreatesArrayCallFunctions()\n    {\n        $called = [];\n        $a = function ($a, $b) use (&$called) {\n            $called['a'] = func_get_args();\n        };\n        $b = function ($a, $b) use (&$called) {\n            $called['b'] = func_get_args();\n        };\n        $c = Core::callArray([$a, $b]);\n        $c(1, 2);\n        $this->assertEquals([1, 2], $called['a']);\n        $this->assertEquals([1, 2], $called['b']);\n    }\n\n    public function testRewindsGuzzleStreams()\n    {\n        $str = Stream::factory('foo');\n        $this->assertTrue(Core::rewindBody(['body' => $str]));\n    }\n\n    public function testRewindsStreams()\n    {\n        $str = Stream::factory('foo')->detach();\n        $this->assertTrue(Core::rewindBody(['body' => $str]));\n    }\n\n    public function testRewindsIterators()\n    {\n        $iter = new \\ArrayIterator(['foo']);\n        $this->assertTrue(Core::rewindBody(['body' => $iter]));\n    }\n\n    public function testRewindsStrings()\n    {\n        $this->assertTrue(Core::rewindBody(['body' => 'hi']));\n    }\n\n    public function testRewindsToStrings()\n    {\n        $this->assertTrue(Core::rewindBody(['body' => new StrClass()]));\n    }\n\n    public function typeProvider()\n    {\n        return [\n            ['foo', 'string(3) \"foo\"'],\n            [true, 'bool(true)'],\n            [false, 'bool(false)'],\n            [10, 'int(10)'],\n            [1.0, 'float(1)'],\n            [new StrClass(), 'object(GuzzleHttp\\Tests\\Ring\\StrClass)'],\n            [['foo'], 'array(1)']\n        ];\n    }\n\n    /**\n     * @dataProvider typeProvider\n     */\n    public function testDescribesType($input, $output)\n    {\n        $this->assertEquals($output, Core::describeType($input));\n    }\n\n    public function testDoesSleep()\n    {\n        $t = microtime(true);\n        $expected = $t + (100 / 1000);\n        Core::doSleep(['client' => ['delay' => 100]]);\n        $this->assertGreaterThanOrEqual($expected, microtime(true));\n    }\n\n    public function testProxiesFuture()\n    {\n        $f = new CompletedFutureArray(['status' => 200]);\n        $res = null;\n        $proxied = Core::proxy($f, function ($value) use (&$res) {\n            $value['foo'] = 'bar';\n            $res = $value;\n            return $value;\n        });\n        $this->assertNotSame($f, $proxied);\n        $this->assertEquals(200, $f->wait()['status']);\n        $this->assertArrayNotHasKey('foo', $f->wait());\n        $this->assertEquals('bar', $proxied->wait()['foo']);\n        $this->assertEquals(200, $proxied->wait()['status']);\n    }\n\n    public function testProxiesDeferredFuture()\n    {\n        $d = new Deferred();\n        $f = new FutureArray($d->promise());\n        $f2 = Core::proxy($f);\n        $d->resolve(['foo' => 'bar']);\n        $this->assertEquals('bar', $f['foo']);\n        $this->assertEquals('bar', $f2['foo']);\n    }\n\n    public function testProxiesDeferredFutureFailure()\n    {\n        $d = new Deferred();\n        $f = new FutureArray($d->promise());\n        $f2 = Core::proxy($f);\n        $d->reject(new \\Exception('foo'));\n        try {\n            $f2['hello?'];\n            $this->fail('did not throw');\n        } catch (\\Exception $e) {\n            $this->assertEquals('foo', $e->getMessage());\n        }\n\n    }\n}\n\nfinal class StrClass\n{\n    public function __toString()\n    {\n        return 'foo';\n    }\n}\n\n\n--- File: 10 # components/HelperDukcapil.php ---\n<?php\n\nnamespace app\\components;\n\nuse app\\models\\LogDukcapil;\nuse app\\models\\PemilikManfaat;\nuse Yii;\nuse yii\\base\\Component;\n\nclass HelperDukcapil extends Component\n{    \n    public $USER_ID;\n    public $PASSWORD;\n    public $IP_USER;\n    public $TRESHOLD;\n    public $NIK;\n    public $NAMA_LGKP;\n    public $URL_API;\n    public $ID_KOPERASI;\n\n    public $FILTER_RESPONSE = [\n        'NAMA_LGKP' => 'NAMA tidak sesuai dengan data yang terdapat di database Kependudukan',\n    ];\n\n    protected $responseCurl;\n\n    public function __construct($data = [])\n    {\n        $this->getConfigDukcapil();\n\n        $this->ID_KOPERASI = isset($data['id_koperasi']) ? $data['id_koperasi'] : '';\n        $this->NIK = isset($data['nik']) ? $data['nik'] : '';\n        $this->NAMA_LGKP = isset($data['nama']) ? $data['nama'] : '';\n    }\n\n    protected function getConfigDukcapil()\n    {\n        $config = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'credential_dukcapil'\"\n        )->queryOne();\n\n        if($config){\n            $decode = json_decode($config['value']);\n            $this->USER_ID = $decode->user_id;\n            $this->PASSWORD = $decode->password;\n            $this->IP_USER = $decode->ip_user;\n            $this->TRESHOLD = $decode->treshold;\n            $this->URL_API = $decode->url_api;\n        }\n    }\n\n    public function mappingDataDukcapil(){\n        $data = array(\n            'USER_ID' => $this->USER_ID,\n            'PASSWORD' => $this->PASSWORD,\n            'IP_USER' => $this->IP_USER,\n            'TRESHOLD' => $this->TRESHOLD,\n            'NIK' => $this->NIK,\n            'NAMA_LGKP' => $this->NAMA_LGKP\n        );\n        return json_encode($data);\n    }\n\n    public function curlValidDukcapil() {\n        $params = str_replace(\"\\\\/\",\"/\",$this->mappingDataDukcapil());\n\n        $ch = curl_init();\n        curl_setopt($ch,CURLOPT_URL, $this->URL_API);\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);\n        curl_setopt($ch,CURLOPT_HTTPHEADER, array(\"Accept:application/json\", \"Content-Type:application/json\"));\n        curl_setopt($ch,CURLOPT_POST, true);\n        curl_setopt($ch,CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n        $time_start = microtime(true);\n        $result = curl_exec($ch);\n        $time = sprintf('%.3f', microtime(true) - $time_start) . 's';\n        $info = curl_getinfo($ch);\n\n        $error = null;\n        if(curl_errno($ch)) {\n            $error = curl_error($ch);\n            if (in_array(curl_errno($ch), array(CURLE_OPERATION_TIMEDOUT, CURLE_OPERATION_TIMEOUTED))) {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'],\n                    ])\n                );\n            } else {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => curl_error($ch)],\n                    ])\n                );\n            }\n        }\n\n        curl_close($ch);\n        \n        $res = json_decode($result, true);\n\n        $data = (object)$res;\n        \n        LogDukcapil::logDcp($params, $result, $info['http_code'], 'VERIFNIK',$time,'KOPERASI', $info, $this->ID_KOPERASI, $this->NIK);\n\n        $data = $data->content[0];\n        $this->responseCurl = (object) $data;\n        return $error ?: true;\n    }\n\n    public function mapingResponse($res)\n    {\n        $response = [\n            'status' => 1,\n            'data' => []\n        ];\n\n        if (isset($res)) {\n            if (isset($res->RESPONSE_CODE)) {\n                $data = $this->processCode($res->RESPONSE_CODE, $res->RESPONSE);\n                if($data){\n                    $response['status'] = 0;\n                    $response['data'][] = $data;\n                }\n            } elseif (isset($res->RESPONSE)){\n                $response['status'] = 0;\n                $response['data'][] = $res->RESPONSE;\n            }else {\n                $data = [];\n                $string = \"Sesuai (100)\";\n                \n                foreach ($res as $key => $value) {\n                    if(in_array($key, array_keys($this->FILTER_RESPONSE)) && stripos($value, \"Tidak Sesuai\") !== false){\n                        $data[$key] = $this->FILTER_RESPONSE[$key];\n                    }\n                }\n\n                if(count($data) >= 1){\n                    $response['status'] = 0;\n                    $response['data'] = $data;\n                }\n            }\n            \n            return $response;\n        }else{\n            $response['status'] = 0;\n            $response['data'] = ['Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'];\n            return $response;\n        }\n    }\n    \n    private function processCode($code, $message)\n    {\n        switch ($code) {\n            case 11:\n                return 'Data yang dimasukkan merupakan data orang yang telah dinyatakan meninggal';\n            case 12:\n                return 'Data Ditemukan, Status Data Ganda';\n            case 13:\n                return 'Data Tidak Ditemukan, NIK tidak terdapat di database Kependudukan';\n            case 14:\n            case 15:\n                return $message;\n            default:\n                return 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi';\n        }\n    }\n    \n\n    public function response(){\n        return $this->mapingResponse($this->responseCurl);\n    }\n\n    public static function DataBalikan($id, $model){\n        $config = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'credential_data_balikan'\"\n        )->queryOne();\n\n        $token = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'token_data_balikan'\"\n        )->queryOne();\n\n        $token = $token['value'];\n\n        $data = PemilikManfaat::findAll(['t_koperasi_id' => $id]);\n\n        if(isset($config['value'])){\n            $decode = json_decode($config['value']);\n\n            $params = [];\n            $params['id_lembaga'] = $decode->id_lembaga;\n            $params['nama_lembaga'] = $decode->nama_lembaga;\n            $nik = 0;\n            foreach ($data as $key => $value) {\n                if($value->m_jenis_identitas_id == 1){\n                    $params['data'][] = [\n                        'NIK' => $value->no_identitas,\n                        'param' => [\n                            [\"hubungan_dengan_korporasi\" => \"Pemilik Manfaat KOPERASI \" . $model->nama_koperasi],\n                        ]\n                    ];\n                    $nik = $value->no_identitas;\n                }\n            }\n\n            if(!empty($params)){\n                self::curlDataBalikan($decode->url_api, json_encode([$params]), $token, $id, $nik);\n            }\n        }\n\n    } \n\n    public static function curlDataBalikan($url, $params, $token, $id = null, $nik){\n        $time_start = microtime(true);\n        $ch = curl_init();\n        curl_setopt($ch,CURLOPT_URL, $url);\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);\n        curl_setopt($ch,CURLOPT_HTTPHEADER, array(\"Accept:application/json\", \"Content-Type:application/json\", \"Authorization:Bearer \".$token));\n        curl_setopt($ch,CURLOPT_POST, true);\n        curl_setopt($ch,CURLOPT_POSTFIELDS, $params);\n\n        // Set timeout\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $time = sprintf('%.3f', microtime(true) - $time_start) . 's';\n        $info = curl_getinfo($ch);\n\n        if(curl_errno($ch)){\n            // check is error timeout or not \n            if (in_array(curl_errno($ch), array(CURLE_OPERATION_TIMEDOUT, CURLE_OPERATION_TIMEOUTED))) {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'],\n                    ])\n                );\n            } else {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => curl_error($ch)],\n                    ])\n                );\n            }\n        }\n        curl_close($ch);\n        \n        LogDukcapil::logDcp($params, $result, $info['http_code'], 'DATABALIKAN',$time,'KOPERASI', $info, $id, $nik);\n\n        return $result;\n    }\n\n    public static function CheckIsActiveValidateDukcapil(){\n        $isActive = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'is_active_dukcapil'\"\n        )->queryOne();\n        \n        $status = 0;\n        if(!empty($isActive) && $isActive['value'] == 1){\n            $status = 1;\n        }\n\n        return $status;\n    }\n\n    public static function AllowValidation(){\n        $response = [\n            'status' => 1,\n            'data' => []\n        ];\n\n        return $response;\n    }\n}\n\n\n--- File: 283 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Core.php ---\n<?php\nnamespace GuzzleHttp\\Ring;\n\nuse GuzzleHttp\\Stream\\StreamInterface;\nuse GuzzleHttp\\Ring\\Future\\FutureArrayInterface;\nuse GuzzleHttp\\Ring\\Future\\FutureArray;\n\n/**\n * Provides core functionality of Ring handlers and middleware.\n */\nclass Core\n{\n    /**\n     * Returns a function that calls all of the provided functions, in order,\n     * passing the arguments provided to the composed function to each function.\n     *\n     * @param callable[] $functions Array of functions to proxy to.\n     *\n     * @return callable\n     */\n    public static function callArray(array $functions)\n    {\n        return function () use ($functions) {\n            $args = func_get_args();\n            foreach ($functions as $fn) {\n                call_user_func_array($fn, $args);\n            }\n        };\n    }\n\n    /**\n     * Gets an array of header line values from a message for a specific header\n     *\n     * This method searches through the \"headers\" key of a message for a header\n     * using a case-insensitive search.\n     *\n     * @param array  $message Request or response hash.\n     * @param string $header  Header to retrieve\n     *\n     * @return array\n     */\n    public static function headerLines($message, $header)\n    {\n        $result = [];\n\n        if (!empty($message['headers'])) {\n            foreach ($message['headers'] as $name => $value) {\n                if (!strcasecmp($name, $header)) {\n                    $result = array_merge($result, $value);\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Gets a header value from a message as a string or null\n     *\n     * This method searches through the \"headers\" key of a message for a header\n     * using a case-insensitive search. The lines of the header are imploded\n     * using commas into a single string return value.\n     *\n     * @param array  $message Request or response hash.\n     * @param string $header  Header to retrieve\n     *\n     * @return string|null Returns the header string if found, or null if not.\n     */\n    public static function header($message, $header)\n    {\n        $match = self::headerLines($message, $header);\n        return $match ? implode(', ', $match) : null;\n    }\n\n    /**\n     * Returns the first header value from a message as a string or null. If\n     * a header line contains multiple values separated by a comma, then this\n     * function will return the first value in the list.\n     *\n     * @param array  $message Request or response hash.\n     * @param string $header  Header to retrieve\n     *\n     * @return string|null Returns the value as a string if found.\n     */\n    public static function firstHeader($message, $header)\n    {\n        if (!empty($message['headers'])) {\n            foreach ($message['headers'] as $name => $value) {\n                if (!strcasecmp($name, $header)) {\n                    // Return the match itself if it is a single value.\n                    $pos = strpos($value[0], ',');\n                    return $pos ? substr($value[0], 0, $pos) : $value[0];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns true if a message has the provided case-insensitive header.\n     *\n     * @param array  $message Request or response hash.\n     * @param string $header  Header to check\n     *\n     * @return bool\n     */\n    public static function hasHeader($message, $header)\n    {\n        if (!empty($message['headers'])) {\n            foreach ($message['headers'] as $name => $value) {\n                if (!strcasecmp($name, $header)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Parses an array of header lines into an associative array of headers.\n     *\n     * @param array $lines Header lines array of strings in the following\n     *                     format: \"Name: Value\"\n     * @return array\n     */\n    public static function headersFromLines($lines)\n    {\n        $headers = [];\n\n        foreach ($lines as $line) {\n            $parts = explode(':', $line, 2);\n            $headers[trim($parts[0])][] = isset($parts[1])\n                ? trim($parts[1])\n                : null;\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Removes a header from a message using a case-insensitive comparison.\n     *\n     * @param array  $message Message that contains 'headers'\n     * @param string $header  Header to remove\n     *\n     * @return array\n     */\n    public static function removeHeader(array $message, $header)\n    {\n        if (isset($message['headers'])) {\n            foreach (array_keys($message['headers']) as $key) {\n                if (!strcasecmp($header, $key)) {\n                    unset($message['headers'][$key]);\n                }\n            }\n        }\n\n        return $message;\n    }\n\n    /**\n     * Replaces any existing case insensitive headers with the given value.\n     *\n     * @param array  $message Message that contains 'headers'\n     * @param string $header  Header to set.\n     * @param array  $value   Value to set.\n     *\n     * @return array\n     */\n    public static function setHeader(array $message, $header, array $value)\n    {\n        $message = self::removeHeader($message, $header);\n        $message['headers'][$header] = $value;\n\n        return $message;\n    }\n\n    /**\n     * Creates a URL string from a request.\n     *\n     * If the \"url\" key is present on the request, it is returned, otherwise\n     * the url is built up based on the scheme, host, uri, and query_string\n     * request values.\n     *\n     * @param array $request Request to get the URL from\n     *\n     * @return string Returns the request URL as a string.\n     * @throws \\InvalidArgumentException if no Host header is present.\n     */\n    public static function url(array $request)\n    {\n        if (isset($request['url'])) {\n            return $request['url'];\n        }\n\n        $uri = (isset($request['scheme'])\n                ? $request['scheme'] : 'http') . '://';\n\n        if ($host = self::header($request, 'host')) {\n            $uri .= $host;\n        } else {\n            throw new \\InvalidArgumentException('No Host header was provided');\n        }\n\n        if (isset($request['uri'])) {\n            $uri .= $request['uri'];\n        }\n\n        if (isset($request['query_string'])) {\n            $uri .= '?' . $request['query_string'];\n        }\n\n        return $uri;\n    }\n\n    /**\n     * Reads the body of a message into a string.\n     *\n     * @param array|FutureArrayInterface $message Array containing a \"body\" key\n     *\n     * @return null|string Returns the body as a string or null if not set.\n     * @throws \\InvalidArgumentException if a request body is invalid.\n     */\n    public static function body($message)\n    {\n        if (!isset($message['body'])) {\n            return null;\n        }\n\n        if ($message['body'] instanceof StreamInterface) {\n            return (string) $message['body'];\n        }\n\n        switch (gettype($message['body'])) {\n            case 'string':\n                return $message['body'];\n            case 'resource':\n                return stream_get_contents($message['body']);\n            case 'object':\n                if ($message['body'] instanceof \\Iterator) {\n                    return implode('', iterator_to_array($message['body']));\n                } elseif (method_exists($message['body'], '__toString')) {\n                    return (string) $message['body'];\n                }\n            default:\n                throw new \\InvalidArgumentException('Invalid request body: '\n                    . self::describeType($message['body']));\n        }\n    }\n\n    /**\n     * Rewind the body of the provided message if possible.\n     *\n     * @param array $message Message that contains a 'body' field.\n     *\n     * @return bool Returns true on success, false on failure\n     */\n    public static function rewindBody($message)\n    {\n        if ($message['body'] instanceof StreamInterface) {\n            return $message['body']->seek(0);\n        }\n\n        if ($message['body'] instanceof \\Generator) {\n            return false;\n        }\n\n        if ($message['body'] instanceof \\Iterator) {\n            $message['body']->rewind();\n            return true;\n        }\n\n        if (is_resource($message['body'])) {\n            return rewind($message['body']);\n        }\n\n        return is_string($message['body'])\n            || (is_object($message['body'])\n                && method_exists($message['body'], '__toString'));\n    }\n\n    /**\n     * Debug function used to describe the provided value type and class.\n     *\n     * @param mixed $input\n     *\n     * @return string Returns a string containing the type of the variable and\n     *                if a class is provided, the class name.\n     */\n    public static function describeType($input)\n    {\n        switch (gettype($input)) {\n            case 'object':\n                return 'object(' . get_class($input) . ')';\n            case 'array':\n                return 'array(' . count($input) . ')';\n            default:\n                ob_start();\n                var_dump($input);\n                // normalize float vs double\n                return str_replace('double(', 'float(', rtrim(ob_get_clean()));\n        }\n    }\n\n    /**\n     * Sleep for the specified amount of time specified in the request's\n     * ['client']['delay'] option if present.\n     *\n     * This function should only be used when a non-blocking sleep is not\n     * possible.\n     *\n     * @param array $request Request to sleep\n     */\n    public static function doSleep(array $request)\n    {\n        if (isset($request['client']['delay'])) {\n            usleep($request['client']['delay'] * 1000);\n        }\n    }\n\n    /**\n     * Returns a proxied future that modifies the dereferenced value of another\n     * future using a promise.\n     *\n     * @param FutureArrayInterface $future      Future to wrap with a new future\n     * @param callable    $onFulfilled Invoked when the future fulfilled\n     * @param callable    $onRejected  Invoked when the future rejected\n     * @param callable    $onProgress  Invoked when the future progresses\n     *\n     * @return FutureArray\n     */\n    public static function proxy(\n        FutureArrayInterface $future,\n        callable $onFulfilled = null,\n        callable $onRejected = null,\n        callable $onProgress = null\n    ) {\n        return new FutureArray(\n            $future->then($onFulfilled, $onRejected, $onProgress),\n            [$future, 'wait'],\n            [$future, 'cancel']\n        );\n    }\n\n    /**\n     * Returns a debug stream based on the provided variable.\n     *\n     * @param mixed $value Optional value\n     *\n     * @return resource\n     */\n    public static function getDebugResource($value = null)\n    {\n        if (is_resource($value)) {\n            return $value;\n        } elseif (defined('STDOUT')) {\n            return STDOUT;\n        } else {\n            return fopen('php://output', 'w');\n        }\n    }\n}\n\n\n--- File: 685 # modules/Api/controllers/TransaksiController.php ---\n<?php \nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Url;\nuse yii\\helpers\\Json;\nuse yii\\rest\\Controller;\nuse yii\\filters\\VerbFilter;\nuse app\\components\\ApiHelper;\nuse app\\components\\LogHelper;\nuse app\\models\\TransaksiKoperasi;\nuse app\\modules\\Api\\components\\AuthHelper;\nuse app\\modules\\Api\\components\\TimeHelper;\nuse app\\modules\\Api\\components\\TransaksiHelper;\nuse app\\modules\\Api\\models\\JWTToken;\nuse yii\\base\\Exception;\nuse app\\models\\bakum\\LogCodex;\nuse app\\components\\helper\\TelegramHelper;\nuse app\\models\\Setting;\nuse Firebase\\JWT\\JWT;\n\nclass TransaksiController extends Controller\n{\n\n    public function behaviors()\n    {\n        return [\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    // 'index' => ['POST'],\n                    'dummy' => ['POST'],\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * Function untuk Output Response sekaligus Save Logging\n     * \n     * @param Array Data Request\n     * \n     * @return JSON/XML Output Response Berdasarkan\n     */\n    public function responseAndSaveLog(Array $data, $typeFormat = 'JSON')\n    {\n        $this->saveLog($data);\n\n        return $this->showResponse($data['response'], $typeFormat);\n    }\n\n    /**\n     * Function untuk save Log\n     * \n     * @param Array Data Request\n     * \n     * @return Boolean Hasil Dari Saving Log\n     */\n    public function saveLog(Array $data)\n    {\n        return LogHelper::saveLog([\n            'service_uri' => $data['url'],\n            'request' => $data['request'],\n            'response' => $data['response'],\n            'nik' => $data['nik'],\n            'additional_data' => json_encode($data['additional_data']),\n            'is_error' => $data['is_error'],\n            'type' => $data['type'],\n            'execution_time' => TimeHelper::getElapsedTime($data['startTime']),\n        ]);\n    }\n\n    /**\n     * Function untuk menampilkan response berdasarkan format\n     * \n     * @param Array Response Array\n     * @param String Format Type untuk Response\n     * \n     * @return JSON/XML Return response sesuai type\n     */\n    public function showResponse(Array $res, $type = 'JSON')\n    {\n        if(!$res || !$type) {\n            throw new \\Exception;\n        }\n        // Normalize Param Type\n        $type = strtoupper($type);\n        \n        if ($type == 'XML') {\n            return $this->asXml($res);\n        }\n        elseif ($type == 'JSON') {\n            return $this->asJson($res);\n        }\n        else {\n            throw new \\Exception;\n        }\n    }\n\n    /**\n     * Function untuk menerima hit perubahan transaksi dari ODS\n     * \n     * @param AUTH_KEY\n     * @param XML_DATA\n     * \n     * @return JSON\n     */\n    public function actionIndex()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        }   \n        catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        $nik = $dataJson['data']['nik'];\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        $createTrans = TransaksiHelper::createTrans($dataJson);\n\n        if(!$createTrans['status']) {\n            $res = [\n                'code' => '05',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $createTrans['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson,'data.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson,'data.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Action API untuk url hit sendData Api Dennis\n     * \n     * @param AUTH_KEY\n     * @param JSON_DATA\n     * \n     * @return Json\n     */\n    public function actionDummy()\n    {\n        \n        $headers = Yii::$app->request->headers;\n        if($headers['Content-Type'] != 'application/json') {\n            $res = [\n                'code' => '01',\n                'message' => 'Format Must Be In Json',\n                'status' => 415\n            ];\n\n            return $this->asJson($res);\n        }\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n        $dataJson = json_decode($data, true);\n        $authKey = $headers['auth'];\n        $nik =  $dataJson['data']['koperasi']['nik'];\n        if(!$dataJson) {\n            $res = [\n                'code' => '02',\n                'message' => 'Json Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->asJson($res);\n        }\n\n        $auth = AuthHelper::checkAuth($authKey, $nik);\n\n        if(!$auth) {\n            $res = [\n                'code' => '03',\n                'message' => 'Authentication failed',\n                'status' => 401\n            ];\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->asJson($res);\n    }\n\n    /**\n     * Action API untuk url hit Update NIK dari ODS\n     * \n     * @param AUTH_KEY\n     * @param JSON_DATA\n     * \n     * @return Json\n     */\n    public function actionUpdate()\n    { \n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        $nomor_transaksi = $dataJson['data']['nomor_transaksi'];\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        $updateTrans = TransaksiHelper::updateTrans($dataJson);\n\n        if(!$updateTrans['status']) {\n            $res = [\n                'code' => '05',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $updateTrans['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson,'data.nomor_transaksi'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson,'data.nomor_transaksi'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Function untuk menerima hit insert transaksi pendirian dari ODS\n     * \n     * @param AUTH_KEY JWT\n     * @param JSON_DATA\n     * \n     * @return JSON\n     */\n    public function actionInsert()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if (empty($dataJson['data'])) {\n            $res = [\n                'code' => '05',\n                'message' => 'Invalid Parameter.',\n                'additional_info' => 'Parameter Data tidak boleh kosong',\n                'status' => 400\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => '',\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        TransaksiHelper::filterEmptyArray($dataJson);\n        $insertTransMigrasi = TransaksiHelper::insertTransMigrasi($dataJson['data']);\n\n        if (!$insertTransMigrasi['status']) {\n            $res = [\n                'code' => '06',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $insertTransMigrasi['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Function untuk menerima hit edit transaksi dari ODS\n     * ODS hanya bisa mengedit transaksi yang is_migrasi = 1\n     * \n     * @param AUTH_KEY\n     * @param JSON\n     * \n     * @return JSON\n     */\n    public function actionEdit()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if (empty($dataJson['nik']) || empty($dataJson['data'])) {\n            $res = [\n                'code' => '05',\n                'message' => 'Invalid Parameter.',\n                'additional_info' => 'Parameter NIK / Data tidak boleh kosong',\n                'status' => 400\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => '',\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        TransaksiHelper::filterEmptyArray($dataJson);\n        $editTransMigrasi = TransaksiHelper::editTransMigrasi($dataJson['nik'], $dataJson['data']);\n\n        if (!$editTransMigrasi['status']) {\n            $res = [\n                'code' => '06',\n                'message' => 'Failed To Edit Transaction.',\n                'additional_info' => $editTransMigrasi['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    public function actionSandbox() {\n        return ApiHelper::getKoperasiJson(155);\n    }\n}\n?>\n\n--- File: 22 # components/ApiHelper.php ---\n<?php\n\nnamespace app\\components;\n\nuse Yii;\nuse app\\models\\SK;\nuse app\\models\\Wilayah;\nuse app\\models\\WilayahOds;\nuse yii\\base\\Component;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\bakum\\WilayahSABH;\nuse app\\models\\notariat\\Negara;\nuse app\\models\\PemilikManfaat;\nuse app\\models\\PesanNama;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\TransaksiPembubaran;\n\nclass ApiHelper extends Component\n{\n\n    public static function getKoperasiJson($id, $asArray = false)\n    {\n\n        $data = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        $json  = [\n            'data' => [\n                'transaksi' => self::jsonTransaksi($data, true),\n                'koperasi' => self::jsonKoperasi($data, true),\n                'kedudukan' => self::jsonKedudukan($data, true),\n                'akta_notaris' => self::jsonNotaris($data, true),\n                'rapat' => self::jsonRapat($data, true),\n                'koperasi_pembentuk' => self::jsonSekunder($data, true),\n                // Take Out 8 Juli 2019\n                // Tidak Perlu Pakai Badan Hukum Gabung Dan Pisah (Dari User AHU)\n                // 'badan_hukum_gabung' => self::jsonGabung($data, true),\n                // 'badan_hukum_pisah' => self::jsonPisah($data, true),\n                'tahun_kbli' => !empty(self::jsonKbli($data, true)[1]) ? self::jsonKbli($data, true)[1] : \"\",\n                'aktivitas_usaha' => !empty(self::jsonKbli($data, true)[0]) ? self::jsonKbli($data, true)[0] : \"\",\n                'modal_koperasi' => self::jsonModalKoperasi($data, true),\n                'periode_pengurus' => self::jsonPeriodePengurus($data, true),\n                'pengawas_pengurus' => self::jsonAnggota($data, true),\n            ],\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function cekInstance($data, $class)\n    {\n\n        if (!($data instanceof $class)) {\n            $data = $class::find()->where(['id' => $data])->one();\n            if (!$data) {\n                return null;\n            }\n            return $data;\n        }\n\n        return $data;\n    }\n\n    public static function resultArray($data, $asArray)\n    {\n\n        if (!$asArray) {\n            return json_encode($data);\n        }\n\n        return $data;\n    }\n\n    public static function jsonTransaksi($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $sk = SK::find()->where(['t_koperasi_id' => $data->id])->one();\n\n        if (!$sk) {\n            $tgl_sk = null;\n            $no_sk = null;\n            $no_sp = null;\n        } else {\n            $tgl_sk = $sk->created_date;\n            $no_sk = $sk->no_sk_koperasi;\n            $no_sp = $sk->no_sp_koperasi;\n        }\n\n        $json = [\n            'tanggal_transaksi' => Date(\"Y-m-d\", strtotime($data->created_date)),\n            'jenis_transaksi' => $data->jenis_transaksi_id,\n            'nomor_transaksi' => $data->nomor_transaksi,\n            'tanggal_sk' => Date(\"Y-m-d\", strtotime($tgl_sk)),\n            'nomor_sk' => $no_sk,\n            'nomor_sp' => $no_sp,\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonKoperasi($data, $asArray)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $pesanNama = PesanNama::find()->where(['id' => $data->t_pesan_nama_id])->one();\n\n        $json = [\n            'nik' => $data->nik,\n            'nama_koperasi' => $data->nama_koperasi,\n            'nama_sk' => $data->full_nama,\n            'jenis_koperasi' => isset($data->pesanNama->c_jenis_koperasi_id) ? $data->pesanNama->c_jenis_koperasi_id : $data->pesanNama->jenis_koperasi_id,\n            'wilayah_keanggotaan' => $data->m_tingkat_wilayah_id,\n            'bentuk_koperasi' => $data->b_koperasi_id,\n            'pola_pengelolaan' => $data->pesanNama->m_pola_id,\n            'jangka_waktu' => $data->jangka_waktu,\n            'jangka_waktu_koperasi' => $data->tanggal_jangka_waktu,\n            'model_koperasi' => !empty($pesanNama['model_koperasi']) ? $pesanNama['model_koperasi'] : 0,\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonKedudukan($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [\n            'provinsi' => Wilayah::getKodeWilayah($data->provinsi_id),\n//            'kabupaten' => Wilayah::getKodeWilayah($data->kab_kota_id),\n            'kabupaten' => self::getKodeKemendagri($data->kab_kota_id),\n            'kecamatan' => Wilayah::getKodeWilayah($data->kecamatan_id),\n            // 'kelurahan' => WilayahSABH::find()->where(['ID_WIL' => $data->kel_desa_id])->one()->KD_WIL,\n            // 'kelurahan' => WilayahSABH::getKode($data->kel_desa_id),\n//            'kelurahan' => WilayahOds::getKodeWilayah($data->kel_desa_id),\n            'kelurahan' => $data->getKdWilForNikBase(),\n            'alamat' => $data->alamat_koperasi,\n            'rw' => $data->rw,\n            'rt' => $data->rt,\n            'kode_pos' => $data->kode_pos,\n            'no_telp' => $data->telepon,\n            'email' => $data->email,\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonNotaris($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [\n            'nama_notaris' => $data->nama_notaris,\n            'no_akta' => $data->akta_koperasi,\n            'tanggal_akta' => $data->tanggal_akta,\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonRapat($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [\n            'tanggal_rapat' => $data->tanggal_rapat,\n            'alamat' => $data->alamat_rapat,\n            'jumlah_peserta' => $data->jumlah_peserta_rapat,\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonModalKoperasi($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [\n            'total_modal' => $data->modal_koperasi,\n            'simpanan_pokok' => $data->simpanan_pokok,\n            'simpanan_wajib' => $data->simpanan_wajib,\n            'dana_hibah' => $data->dana_hibah,\n            'dana_cadangan' => $data->dana_cadangan\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonSekunder($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        if (!$data->bakumsekunder) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [];\n\n        foreach ($data->bakumsekunder as $sekunder) {\n            $json[] = [\n                'nik' => $sekunder->nik,\n                'nama' => $sekunder->nama_koperasi,\n                'no_sk' => $sekunder->no_sk_koperasi,\n                'npwp' => $sekunder->npwp,\n            ];\n        }\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonGabung($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        if (!$data->bakumGabung) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [];\n\n        foreach ($data->bakumGabung as $sekunder) {\n            $json[] = [\n                'nama' => $sekunder->nama_koperasi,\n                'no_sk' => $sekunder->no_sk_koperasi,\n            ];\n        }\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonPisah($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        if (!$data->bakumPisah) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [];\n\n        foreach ($data->bakumPisah as $sekunder) {\n            $json[] = [\n                'no_pesan' => $sekunder->no_pesan,\n                'nama' => $sekunder->nama_koperasi,\n                'jenis' => $sekunder->jenis_koperasi,\n            ];\n        }\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonKbli($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([\n                'utama' => [],\n                'pendukung' => [],\n                'tambahan' => [],\n            ], $asArray);\n        }\n\n        if (!$data->aktifitasusaha) {\n            return self::resultArray([\n                'utama' => [],\n                'pendukung' => [],\n                'tambahan' => [],\n            ], $asArray);\n        }\n\n        $json = [\n            'utama' => [],\n            'pendukung' => [],\n            'tambahan' => [],\n        ];\n\n        $aktifitasUsaha = $data->aktifitasusaha;\n        $tahunKbli = null;\n        foreach ($aktifitasUsaha as $usaha) {\n            $dataBakumKBLI = KBLIBakum::find()->where(['id_kbli' => $usaha->kbli_id])->one();\n\n            if ($dataBakumKBLI) {\n                $json[strtolower($usaha->jenis_kbli)][] = [\n                    'kode' => $dataBakumKBLI->kode,\n                    'judul' => $dataBakumKBLI->judul,\n                ];\n                $tahunKbli = $dataBakumKBLI->tahun;\n            }\n        }\n\n        return [self::resultArray($json, $asArray), $tahunKbli];\n    }\n\n    public static function jsonAnggota($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        if (!$data->dataanggota) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [];\n\n        foreach ($data->dataanggota as $anggota) {\n            $json[] = [\n                'status' => $anggota->m_status_pengurus_id,\n                'nik' => $anggota->nik,\n                'nama' => $anggota->nama,\n                'jenis_kelamin' => $anggota->jenis_kelamin_id,\n                'jabatan' => $anggota->jabatan,\n                'npwp' => $anggota->npwp,\n                'no_hp' => $anggota->hp,\n            ];\n        }\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function jsonPeriodePengurus($data, $asArray = false)\n    {\n        $data = self::cekInstance($data, TransaksiKoperasi::className());\n\n        if (!$data) {\n            return self::resultArray([], $asArray);\n        }\n\n        $json = [\n            'tanggal_mulai' => $data->periode_pengurus_awal,\n            'tanggal_selesai' => $data->periode_pengurus_akhir,\n        ];\n\n        return self::resultArray($json, $asArray);\n    }\n\n    public static function getJsonHitBo($id_trans)\n    {\n        $kode_lembaga = \"04\";\n\n        $result = [];\n        $arrJson = [];\n\n        if (!$id_trans) {\n            throw new \\Exception(\"ID Transaksi Tidak Ada\");\n        }\n\n        $data = TransaksiKoperasi::findOne($id_trans);\n\n        if (!$data) {\n            throw new \\Exception(\"Data Koperasi Tidak Ditemukan\");\n        }\n\n        $session_notaris = Yii::$app->session->get('data_notaris');\n\n        if (empty($session_notaris)) {\n            throw new \\Exception(\"Session notaris tidak ditemukan\");\n        }\n\n        $dataNotaris = $session_notaris['value'];\n\n        if (empty($dataNotaris)) {\n            throw new \\Exception(\"Data Notaris tidak ditemukan\");\n        }\n\n        $arrJson['transaksi_korporasi'] = [\n            'id_master_sumber' => $data->id_master,\n            'nama_korporasi' => $data->nama_koperasi,\n            'kode_lembaga' => $kode_lembaga,\n            'id_notaris' =>  $dataNotaris['id_notaris'],\n            'no_kta' => $dataNotaris['no_kta'],\n            'nama_lengkap' => $dataNotaris['nama_gelar'],\n            'sumber_laporan' => 'AHU Online',\n            'kode_provinsi' => Wilayah::getKodeWilayah($data->provinsi_id),\n            'kode_kabupaten' => Wilayah::getKodeWilayah($data->kab_kota_id),\n            'kode_kecamatan' => Wilayah::getKodeWilayah($data->kecamatan_id),\n            'kode_kelurahan' => Wilayah::getKodeWilayah($data->kel_desa_id),\n        ];\n\n        $arrJson['transaksi_bo'] = self::getTransBo($id_trans);\n\n        $result = [\n            'id_master_sumber' => $data->id_master,\n            'nama_koperasi' => $data->nama_koperasi,\n            'kode_lembaga' => $kode_lembaga,\n        ];\n\n        $result['data'] = $arrJson;\n\n        return $result;\n    }\n\n    public static function getTransBo($id_trans)\n    {\n        $arr = [];\n        if (!$id_trans) {\n            throw new \\Exception(\"ID Transaksi Tidak Ada\");\n        }\n\n        $data = PemilikManfaat::findAll(['t_koperasi_id' => $id_trans]);\n\n\n        if (!$data) {\n            return [];\n        }\n\n        foreach ($data as $bo) {\n            $arr[] = [\n                'nama_lengkap' => $bo->nama,\n                'id_jenis_identitas' => $bo->m_jenis_identitas_id,\n                'nomor_identitas' => $bo->no_identitas,\n                'tempat_lahir' => $bo->tempat_lahir,\n                'tanggal_lahir' => $bo->tanggal_lahir,\n                'id_kewarganegaraan' => $bo->kewarganegaraan == 'WNI' ? 1 : 2,\n                'kode_negara' => Negara::getKodeNegaraById($bo->negara_asal),\n                'kode_provinsi' => Wilayah::getKodeWilayah($bo->provinsi_id),\n                'kode_kabupaten' => Wilayah::getKodeWilayah($bo->kabupaten_id),\n                'kode_kecamatan' => Wilayah::getKodeWilayah($bo->kecamatan_id),\n                'kode_kelurahan' => WilayahSABH::getKode($bo->kelurahan_id),\n                'provinsi_id' => $bo->provinsi_id,\n                'kabupaten_id' => $bo->kabupaten_id,\n                'kecamatan_id' => $bo->kecamatan_id,\n                'kelurahan_id' => WilayahSABH::getWsidByIdWil($bo->kelurahan_id),\n                'rt' => $bo->rt,\n                'rw' => $bo->rw,\n                'alamat' => $bo->alamat,\n                'npwp' => $bo->npwp,\n                'hubungan_bo' => $bo->hubungan,\n                'kriteria' => self::getMappingKriteria($bo->json_checkbox),\n            ];\n        }\n\n        return $arr;\n    }\n\n    public static function getMappingKriteria($json_kriteria)\n    {\n        $encodeCrit = json_decode($json_kriteria, true);\n        unset($encodeCrit['cb_modal_bawah']);\n        $arr = [];\n\n        if ($encodeCrit['cb_modal1']) {\n            $arr['A'] = \"\";\n        }\n\n        if ($encodeCrit['cb_modal2']) {\n            $arr['B'] = \"\";\n        }\n\n        if ($encodeCrit['cb_modal3']) {\n            $arr['C'] = \"\";\n        }\n\n        if ($encodeCrit['cb_modal4']) {\n            $arr['D'] = \"\";\n        }\n\n        if ($encodeCrit['cb_modal5']) {\n            $arr['E'] = \"\";\n        }\n\n        return $arr;\n    }\n\n    public static function sendCurl($url, $postData, $headerOptions = [])\n    {\n        $ch = curl_init();\n\n        // Set the url, number of POST vars, POST data\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        // curl_setopt($ch, CURLOPT_HTTPHEADER, $header);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postData));\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.0.3705; .NET CLR 1.1.4322)');\n\n        // Set HTTP Header for POST request\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headerOptions);\n\n        // Execute post\n        $result = curl_exec($ch);\n        $error = curl_error($ch);\n\n        curl_close($ch);\n\n        return $result;\n    }\n\n    public static function getJsonPembubaran($id_bubar = null)\n    {\n        $arr = [];\n        if (!$id_bubar) {\n            throw new \\Exception(\"Data Tidak Ditemukan.\");\n        }\n\n        $data = TransaksiPembubaran::findOne($id_bubar);\n\n        if (!$data) {\n            throw new \\Exception(\"Data Tidak Ditemukan\");\n        }\n\n        $dataTrans = TransaksiKoperasi::findOne($data->id_transaksi);\n\n        if (!$dataTrans) {\n            throw new \\Exception(\"Data Transaksi Tidak Ditemukan\");\n        }\n\n        $arr = [\n            'nik' => $dataTrans->nik,\n            'alasan' => $data->alasanBubar->alasan,\n            'nama_koperasi' => $dataTrans->full_nama,\n            'tanggal_bubar' => $data->tanggal_bubar,\n        ];\n\n        return $arr;\n    }\n\n    protected static function getKodeKemendagri($data) {\n        switch ($data) {\n            case '2': return '11.01';\n            case '21': return '11.02';\n            case '38': return '11.03';\n            case '63': return '11.04';\n            case '85': return '11.05';\n            case '98': return '11.06';\n            case '122': return '11.07';\n            case '154': return '11.08';\n            case '182': return '11.09';\n            case '193': return '11.10';\n            case '210': return '11.11';\n            case '228': return '11.12';\n            case '238': return '11.13';\n            case '250': return '11.14';\n            case '260': return '11.15';\n            case '271': return '11.16';\n            case '284': return '11.17';\n            case '295': return '11.18';\n            case '304': return '11.71';\n            case '314': return '11.72';\n            case '317': return '11.73';\n            case '322': return '11.74';\n            case '328': return '11.75';\n            case '335': return '12.01';\n            case '356': return '12.02';\n            case '372': return '12.03';\n            case '404': return '12.04';\n            case '440': return '12.05';\n            case '464': return '12.06';\n            case '482': return '12.07';\n            case '516': return '12.08';\n            case '548': return '12.09';\n            case '581': return '12.10';\n            case '604': return '12.11';\n            case '620': return '12.12';\n            case '645': return '12.13';\n            case '669': return '12.14';\n            case '701': return '12.15';\n            case '710': return '12.16';\n            case '721': return '12.17';\n            case '731': return '12.18';\n            case '749': return '12.19';\n            case '757': return '12.20';\n            case '767': return '12.21';\n            case '780': return '12.22';\n            case '786': return '12.23';\n            case '795': return '12.24';\n            case '807': return '12.25';\n            case '816': return '12.71';\n            case '838': return '12.72';\n            case '847': return '12.73';\n            case '852': return '12.74';\n            case '859': return '12.75';\n            case '865': return '12.76';\n            case '871': return '12.77';\n            case '878': return '12.78';\n            case '886': return '13.01';\n            case '902': return '13.02';\n            case '922': return '13.03';\n            case '935': return '13.04';\n            case '950': return '13.05';\n            case '968': return '13.06';\n            case '985': return '13.07';\n            case '999': return '13.08';\n            case '1019': return '13.09';\n            case '1030': return '13.10';\n            case '1042': return '13.11';\n            case '1050': return '13.12';\n            case '1062': return '13.71';\n            case '1074': return '13.72';\n            case '1077': return '13.73';\n            case '1082': return '13.74';\n            case '1085': return '13.75';\n            case '1089': return '13.76';\n            case '1095': return '13.77';\n            case '1101': return '14.01';\n            case '1123': return '14.02';\n            case '1138': return '14.03';\n            case '1152': return '14.04';\n            case '1173': return '14.05';\n            case '1186': return '14.06';\n            case '1203': return '14.07';\n            case '1219': return '14.08';\n            case '1234': return '14.09';\n            case '1250': return '14.10';\n            case '1260': return '14.71';\n            case '1273': return '14.72';\n            case '1282': return '15.01';\n            case '1304': return '15.02';\n            case '1329': return '15.03';\n            case '1340': return '15.04';\n            case '1349': return '15.05';\n            case '1361': return '15.06';\n            case '1375': return '15.07';\n            case '1387': return '15.08';\n            case '1405': return '15.09';\n            case '1418': return '15.71';\n            case '1427': return '15.72';\n            case '1437': return '16.01';\n            case '1469': return '16.02';\n            case '1494': return '16.03';\n            case '1517': return '16.04';\n            case '1547': return '16.05';\n            case '1569': return '16.06';\n            case '1584': return '16.07';\n            case '1604': return '16.08';\n            case '1625': return '16.09';\n            case '1645': return '16.10';\n            case '1662': return '16.11';\n            case '1673': return '16.71';\n            case '1690': return '16.72';\n            case '1696': return '16.73';\n            case '1705': return '16.74';\n            case '1713': return '17.01';\n            case '1725': return '17.02';\n            case '1750': return '17.03';\n            case '1774': return '17.04';\n            case '1790': return '17.05';\n            case '1805': return '17.06';\n            case '1821': return '17.07';\n            case '1834': return '17.08';\n            case '1843': return '17.09';\n            case '1854': return '17.71';\n            case '1865': return '18.01';\n            case '1890': return '18.02';\n            case '1919': return '18.03';\n            case '1943': return '18.04';\n            case '1970': return '18.05';\n            case '2001': return '18.06';\n            case '2030': return '18.07';\n            case '2055': return '18.08';\n            case '2070': return '18.09';\n            case '2080': return '18.10';\n            case '2090': return '18.11';\n            case '2098': return '18.12';\n            case '2107': return '18.71';\n            case '2128': return '18.72';\n            case '2135': return '19.01';\n            case '2144': return '19.02';\n            case '2150': return '19.03';\n            case '2159': return '19.04';\n            case '2166': return '19.05';\n            case '2173': return '19.06';\n            case '2181': return '19.71';\n            case '2190': return '21.01';\n            case '2206': return '21.02';\n            case '2219': return '21.03';\n            case '2239': return '21.04';\n            case '2248': return '21.05';\n            case '2256': return '21.71';\n            case '2269': return '21.72';\n            case '2275': return '31.01';\n            case '2278': return '31.71';\n            case '2287': return '31.72';\n            case '2294': return '31.73';\n            case '2303': return '31.74';\n            case '2314': return '31.75';\n            case '2326': return '32.01';\n            case '2367': return '32.02';\n            case '2415': return '32.03';\n            case '2448': return '32.04';\n            case '2495': return '32.05';\n            case '2538': return '32.06';\n            case '2578': return '32.07';\n            case '2615': return '32.08';\n            case '2648': return '32.09';\n            case '2689': return '32.10';\n            case '2716': return '32.11';\n            case '2743': return '32.12';\n            case '2775': return '32.13';\n            case '2806': return '32.14';\n            case '2824': return '32.15';\n            case '2855': return '32.16';\n            case '2879': return '32.17';\n            case '2896': return '32.71';\n            case '2903': return '32.72';\n            case '2911': return '32.73';\n            case '2942': return '32.74';\n            case '2948': return '32.75';\n            case '2961': return '32.76';\n            case '2973': return '32.77';\n            case '2977': return '32.78';\n            case '2988': return '32.79';\n            case '2994': return '33.01';\n            case '3019': return '33.02';\n            case '3047': return '33.03';\n            case '3066': return '33.04';\n            case '3087': return '33.05';\n            case '3114': return '33.06';\n            case '3131': return '33.07';\n            case '3147': return '33.08';\n            case '3169': return '33.09';\n            case '3189': return '33.10';\n            case '3216': return '33.11';\n            case '3229': return '33.12';\n            case '3255': return '33.13';\n            case '3273': return '33.14';\n            case '3294': return '33.15';\n            case '3314': return '33.16';\n            case '3331': return '33.17';\n            case '3346': return '33.18';\n            case '3368': return '33.19';\n            case '3378': return '33.20';\n            case '3395': return '33.21';\n            case '3410': return '33.22';\n            case '3431': return '33.23';\n            case '3452': return '33.24';\n            case '3473': return '33.25';\n            case '3489': return '33.26';\n            case '3509': return '33.27';\n            case '3524': return '33.28';\n            case '3543': return '33.29';\n            case '3561': return '33.71';\n            case '3565': return '33.72';\n            case '3571': return '33.73';\n            case '3576': return '33.74';\n            case '3593': return '33.75';\n            case '3598': return '33.76';\n            case '3604': return '34.01';\n            case '3617': return '34.02';\n            case '3635': return '34.03';\n            case '3654': return '34.04';\n            case '3672': return '34.71';\n            case '3688': return '35.01';\n            case '3701': return '35.02';\n            case '3723': return '35.03';\n            case '3738': return '35.04';\n            case '3758': return '35.05';\n            case '8178': return '61.02';\n            case '3781': return '35.06';\n            case '3808': return '35.07';\n            case '3842': return '35.08';\n            case '3864': return '35.09';\n            case '3896': return '35.10';\n            case '3921': return '35.11';\n            case '3945': return '35.12';\n            case '3963': return '35.13';\n            case '3988': return '35.14';\n            case '4013': return '35.15';\n            case '4032': return '35.16';\n            case '4051': return '35.17';\n            case '4073': return '35.18';\n            case '4094': return '35.19';\n            case '4110': return '35.20';\n            case '4129': return '35.21';\n            case '4149': return '35.22';\n            case '4178': return '35.23';\n            case '4199': return '35.24';\n            case '4227': return '35.25';\n            case '4246': return '35.26';\n            case '4265': return '35.27';\n            case '4280': return '35.28';\n            case '4294': return '35.29';\n            case '4322': return '35.71';\n            case '4326': return '35.72';\n            case '4330': return '35.73';\n            case '4336': return '35.74';\n            case '4342': return '35.75';\n            case '4347': return '35.76';\n            case '4350': return '35.77';\n            case '4354': return '35.78';\n            case '4386': return '35.79';\n            case '4391': return '36.01';\n            case '4427': return '36.02';\n            case '4456': return '36.03';\n            case '4493': return '36.04';\n            case '4529': return '36.71';\n            case '4543': return '36.72';\n            case '4552': return '36.73';\n            case '4559': return '36.74';\n            case '4568': return '51.01';\n            case '4574': return '51.02';\n            case '4585': return '51.03';\n            case '4592': return '51.04';\n            case '4600': return '51.05';\n            case '4605': return '51.06';\n            case '4610': return '51.07';\n            case '4619': return '51.08';\n            case '4629': return '51.71';\n            case '4635': return '52.01';\n            case '4651': return '52.02';\n            case '4664': return '52.03';\n            case '4685': return '52.04';\n            case '4715': return '52.05';\n            case '4724': return '52.06';\n            case '4743': return '52.07';\n            case '4752': return '52.08';\n            case '4758': return '52.71';\n            case '4765': return '52.72';\n            case '4772': return '53.01';\n            case '4803': return '53.02';\n            case '4836': return '53.03';\n            case '4861': return '53.04';\n            case '4886': return '53.05';\n            case '4904': return '53.06';\n            case '4924': return '53.07';\n            case '4946': return '53.08';\n            case '4968': return '53.09';\n            case '4989': return '53.10';\n            case '5007': return '53.11';\n            case '5030': return '53.12';\n            case '5049': return '53.13';\n            case '5059': return '53.14';\n            case '5070': return '53.15';\n            case '5081': return '53.16';\n            case '5089': return '53.17';\n            case '5095': return '53.18';\n            case '5107': return '53.19';\n            case '5117': return '53.20';\n            case '5124': return '53.71';\n            case '5132': return '61.01';\n            case '5152': return '61.02';\n            case '5171': return '61.03';\n            case '5194': return '61.04';\n            case '5220': return '61.05';\n            case '5242': return '61.06';\n            case '5268': return '61.07';\n            case '5286': return '61.08';\n            case '5300': return '61.09';\n            case '5308': return '61.10';\n            case '5320': return '61.11';\n            case '5327': return '61.12';\n            case '5337': return '61.71';\n            case '5344': return '61.72';\n            case '5351': return '62.01';\n            case '5358': return '62.02';\n            case '5376': return '62.03';\n            case '5394': return '62.04';\n            case '5401': return '62.05';\n            case '5411': return '62.06';\n            case '5425': return '62.07';\n            case '5440': return '62.08';\n            case '5446': return '62.09';\n            case '5455': return '62.10';\n            case '5468': return '62.11';\n            case '5477': return '62.12';\n            case '5488': return '62.13';\n            case '5499': return '62.71';\n            case '5506': return '63.01';\n            case '5518': return '63.02';\n            case '5540': return '63.03';\n            case '5560': return '63.04';\n            case '5578': return '63.05';\n            case '5591': return '63.06';\n            case '5603': return '63.07';\n            case '5615': return '63.08';\n            case '5626': return '63.09';\n            case '5639': return '63.10';\n            case '5650': return '63.11';\n            case '5659': return '63.71';\n            case '5665': return '63.72';\n            case '5673': return '64.01';\n            case '5684': return '64.02';\n            case '5703': return '64.03';\n            case '5717': return '65.01';\n            case '5731': return '65.03';\n            case '5747': return '65.02';\n            case '5763': return '64.07';\n            case '5785': return '64.08';\n            case '5804': return '64.09';\n            case '5809': return '65.04';\n            case '5814': return '64.71';\n            case '5821': return '64.72';\n            case '5832': return '65.71';\n            case '5837': return '64.74';\n            case '5842': return '71.01';\n            case '5878': return '71.02';\n            case '5904': return '71.03';\n            case '5930': return '71.04';\n            case '5950': return '71.05';\n            case '5974': return '71.06';\n            case '5985': return '71.07';\n            case '5998': return '71.08';\n            case '6005': return '71.09';\n            case '6016': return '71.10';\n            case '6022': return '71.11';\n            case '6028': return '71.71';\n            case '6040': return '71.72';\n            case '6049': return '71.73';\n            case '6055': return '71.74';\n            case '6061': return '72.01';\n            case '6085': return '72.02';\n            case '6113': return '72.03';\n            case '6145': return '72.04';\n            case '6156': return '72.05';\n            case '6168': return '72.06';\n            case '6188': return '72.07';\n            case '6208': return '72.08';\n            case '6231': return '72.09';\n            case '6241': return '72.10';\n            case '6257': return '72.71';\n            case '6267': return '73.01';\n            case '6279': return '73.02';\n            case '6290': return '73.03';\n            case '6299': return '73.04';\n            case '6311': return '73.05';\n            case '6321': return '73.06';\n            case '6340': return '73.07';\n            case '6350': return '73.08';\n            case '6378': return '73.09';\n            case '6393': return '73.10';\n            case '6407': return '73.11';\n            case '6415': return '73.12';\n            case '6424': return '73.13';\n            case '6439': return '73.14';\n            case '6451': return '73.15';\n            case '6464': return '73.16';\n            case '6477': return '73.17';\n            case '6500': return '73.18';\n            case '6544': return '73.22';\n            case '6558': return '73.24';\n            case '6571': return '73.26';\n            case '6593': return '73.71';\n            case '6608': return '73.72';\n            case '6613': return '73.73';\n            case '6624': return '74.01';\n            case '6651': return '74.02';\n            case '6689': return '74.03';\n            case '6728': return '74.04';\n            case '6760': return '74.05';\n            case '6783': return '74.06';\n            case '6806': return '74.07';\n            case '6815': return '74.08';\n            case '6831': return '74.09';\n            case '6842': return '74.10';\n            case '6849': return '74.71';\n            case '6860': return '74.72';\n            case '6870': return '75.01';\n            case '6895': return '75.02';\n            case '6903': return '75.03';\n            case '6922': return '75.04';\n            case '6936': return '75.05';\n            case '6948': return '75.71';\n            case '6959': return '76.01';\n            case '6972': return '76.02';\n            case '6989': return '76.03';\n            case '7007': return '76.04';\n            case '7024': return '76.05';\n            case '7034': return '81.01';\n            case '7061': return '81.02';\n            case '7081': return '81.03';\n            case '7100': return '81.04';\n            case '7116': return '81.05';\n            case '7132': return '81.06';\n            case '7144': return '81.07';\n            case '7155': return '81.08';\n            case '7173': return '81.09';\n            case '7180': return '81.71';\n            case '7186': return '81.72';\n            case '7193': return '82.01';\n            case '7203': return '82.02';\n            case '7212': return '82.03';\n            case '7235': return '82.04';\n            case '7266': return '82.05';\n            case '7286': return '82.06';\n            case '7297': return '82.07';\n            case '7303': return '82.71';\n            case '7311': return '82.72';\n            case '7321': return '91.01';\n            case '7342': return '91.02';\n            case '7411': return '91.03';\n            case '7431': return '91.04';\n            case '7457': return '91.05';\n            case '7472': return '91.06';\n            case '7494': return '91.07';\n            case '7511': return '91.08';\n            case '7533': return '91.09';\n            case '7546': return '91.10';\n            case '7562': return '91.11';\n            case '7570': return '91.12';\n            case '7605': return '91.13';\n            case '7659': return '91.14';\n            case '7707': return '91.15';\n            case '7720': return '91.16';\n            case '7741': return '91.17';\n            case '7757': return '91.18';\n            case '7777': return '91.19';\n            case '7783': return '91.20';\n            case '7792': return '91.21';\n            case '7798': return '91.22';\n            case '7804': return '91.23';\n            case '7815': return '91.24';\n            case '7848': return '91.25';\n            case '7857': return '91.26';\n            case '7868': return '91.27';\n            case '7875': return '91.28';\n            case '7881': return '91.71';\n            case '7888': return '92.01';\n            case '7930': return '92.02';\n            case '7961': return '92.03';\n            case '7971': return '92.04';\n            case '7996': return '92.05';\n            case '8022': return '92.06';\n            case '8047': return '92.07';\n            case '8061': return '92.08';\n            case '8069': return '92.09';\n            case '8082': return '92.10';\n            case '8107': return '92.71';\n            case '8117': return '16.13';\n            case '8118': return '32.18';\n            case '8127': return '72.11';\n            case '8128': return '16.12';\n            case '8130': return '18.13';\n            case '8131': return '64.11';\n            case '8132': return '72.12';\n            case '8133': return '74.15';\n            case '8134': return '74.14';\n            case '8135': return '74.11';\n            case '8136': return '74.12';\n            case '8137': return '74.13';\n            case '8138': return '76.06';\n            case '8139': return '76.02';\n            case '8140': return '82.08';\n            case '8141': return '82.72';\n            case '8142': return '92.12';\n            case '8143': return '92.11';\n            case '8144': return '92.02';\n            case '8145': return '65.01';\n            case '1': return '11';\n            case '334': return '12';\n            case '885': return '13';\n            case '1100': return '14';\n            case '1281': return '15';\n            case '1436': return '16';\n            case '1712': return '17';\n            case '1864': return '18';\n            case '2134': return '19';\n            case '2189': return '21';\n            case '2274': return '31';\n            case '2325': return '32';\n            case '2993': return '33';\n            case '3603': return '34';\n            case '3687': return '35';\n            case '4390': return '36';\n            case '4567': return '51';\n            case '4634': return '52';\n            case '4771': return '53';\n            case '5131': return '61';\n            case '5350': return '62';\n            case '5505': return '63';\n            case '5672': return '64';\n            case '5841': return '71';\n            case '6060': return '72';\n            case '6266': return '73';\n            case '6623': return '74';\n            case '6869': return '75';\n            case '6958': return '76';\n            case '7033': return '81';\n            case '7192': return '82';\n            case '7320': return '91';\n            case '7887': return '92';\n            case '8129': return '65';\n        }\n        return '';\n    }\n}\n\n\n--- File: 682 # modules/Api/components/TransaksiHelper.php ---\n<?php\nnamespace app\\modules\\Api\\components;\n\nuse Yii;\nuse yii\\base\\Component;\nuse app\\models\\BHPembagian;\nuse app\\models\\DataAnggota;\nuse app\\models\\AktifitasUsaha;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\JenisTransaksi;\nuse app\\models\\PemilikManfaat;\nuse app\\models\\KoperasiSekunder;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\MasterTransaction;\nuse app\\models\\SK;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\TingkatWilayah;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\PolaPengelolaan;\nuse app\\models\\WilayahOds;\nuse app\\components\\KoperasiHelper;\nuse app\\models\\ChecklistPerubahan;\nuse app\\modules\\Api\\components\\SKHelper;\nuse app\\modules\\Api\\components\\DataAnggotaHelper;\nuse yii\\base\\Exception;\nuse app\\components\\ApiHelper;\nuse yii\\helpers\\ArrayHelper;\n\nclass TransaksiHelper extends Component\n{\n\n    public static function createTrans($data)\n    {\n        if(!$data) {\n            return [\n                'status' => false,\n                'info' => 'Data tidak Boleh Kosong',\n            ];\n        }\n\n        $nik = $data['data']['nik'];\n\n        if(!$nik) {\n            return [\n                'status' => false,\n                'info' => 'NIK Tidak Ditemukan',\n            ];\n        }\n\n        $transaction = Yii::$app->db_koperasi->beginTransaction();\n        try {\n\n            $cekValidateAnggota = self::validateDataAnggota($data);\n            if(!$cekValidateAnggota['status']) {\n                return [\n                    'status' => false,\n                    'info' => $cekValidateAnggota['info']\n                ];\n            }\n            $newId = self::createNewTrans($nik, $data);\n            if(!$newId) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Membuat Transaksi Baru'\n                ];\n            }\n\n            $updateAnggota = self::updateDataAnggota($newId,$data);\n            if(!$updateAnggota) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Melakukan Perubahan Data Anggota'\n                ];\n            }\n\n            $transaction->commit();\n        }\n        catch(\\Exception $e) {\n            $transaction->rollback();\n            return [\n                'status' => false,\n                'info' => 'Terjadi Kesalahan Saat Membuat Transaksi'\n            ];\n        }\n\n        if(!$updateAnggota) {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n            try {\n                // Create / Generate Surat SK / SP\n                $generateSurat = self::sendPushPerubahan($newId);\n                if(!$generateSurat) {\n                    return [\n                        'status' => false,\n                        'info' => 'Gagal Melakukan Generate Surat SK/SP'\n                    ];\n                }\n\n                $transaction->commit();\n            }\n            catch(\\Exception $e) {\n                $transaction->rollback();\n                $transHapus = TransaksiKoperasi::find()->where(['id' => $newId ])->one();\n                if($transHapus) {\n                    $transHapus->delete();\n                }\n                return [\n                    'status' => false,\n                    'info' => 'Terjadi Kesalahan Saat Melakukan Generate Surat SK/SP'\n                ];\n            }\n        }\n\n       return [\n           'status' => true,\n           'info' => null\n       ];\n    }\n\n    public static function updateTrans($data)\n    {\n        if(!$data) {\n            return [\n                'status' => false,\n                'info' => 'Data tidak Boleh Kosong',\n            ];\n        }\n\n        $nomor_transaksi = $data['data']['nomor_transaksi'];\n\n        if(!$nomor_transaksi) {\n            return [\n                'status' => false,\n                'info' => 'NIK Tidak Ditemukan',\n            ];\n        }\n        $transaction = Yii::$app->db_koperasi->beginTransaction();\n        try {\n\n            $updateNik = self::updateKoperasi($nomor_transaksi, $data);\n            if(!$updateNik) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Melakukan Perubahan Data Koperasi'\n                ];\n            }\n\n            $transaction->commit();\n        }\n        catch(\\Exception $e) {\n            $transaction->rollback();\n            return [\n                'status' => false,\n                'info' => 'Terjadi Kesalahan Saat Membuat Transaksi'\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function createNewTrans($nik, $data)\n    {\n        $dataTrans = TransaksiKoperasi::find()->where(['nik' => $nik])->orderBy(['id' => SORT_DESC])->one();\n        $newTrans = new TransaksiKoperasi();\n        $newTrans->setAttributes($dataTrans->attributes, false);\n        $newTrans->id = null;\n        //$newTrans->nomor_transaksi = KoperasiHelper::getNoTrans('koperasi','perubahan', ['no_wilayah' => $dataTrans->nomor_transaksi]);\n        $newTrans->nomor_transaksi = '';\n        $newTrans->jenis_transaksi_id = JenisTransaksi::getPrimaryByNama(\"PERUBAHAN\");\n        $newTrans->nama_notaris = null;\n        $newTrans->ahu_notaris_id = null;\n        $newTrans->jenis_transaksi = \"PERUBAHAN\";\n        $newTrans->jumlah_jangka_waktu = 0;\n        $newTrans->tanggal_rapat = date(\"Y-m-d\");\n        $newTrans->tanggal_akta = date(\"Y-m-d\");\n        $newTrans->is_ods = 1;\n        $newTrans->created_date = date(\"Y-m-d H:i:s\");\n        $newTrans->updated_date = null;\n        $newTrans->updated_by = null;\n        $newTrans->deleted_date = null;\n        $newTrans->deleted_by = null;\n        $newTrans->is_deleted = '0';\n        $newTrans->is_finish = 1;\n\n        $saveTrans = $newTrans->save(false);\n        $newId = $newTrans->getPrimaryKey();\n        $oldId = $dataTrans->id;\n\n        $saveAU = self::saveRelationData(AktifitasUsaha::className(),$oldId, $newId,'t_koperasi_id');\n        $savePembagian = self::saveRelationData(BHPembagian::className(),$oldId, $newId, 't_koperasi_id');\n        $savePenggabungan = self::saveRelationData(BHPenggabungan::className(),$oldId,$newId, 't_koperasi_id');\n        $saveBO = self::saveRelationData(PemilikManfaat::className(), $oldId, $newId, 't_koperasi_id');\n        $saveSekunder = self::saveRelationData(KoperasiSekunder::className(), $oldId, $newId, 't_koperasi_id');\n        $saveAnggota = self::saveRelationData(DataAnggota::className(), $oldId, $newId, 't_koperasi_id');\n\n        // Create Checklist Perubahan\n        $saveDataPerubahan = self::createDataPerubahan($newId, $newTrans->id_master, $data);\n\n        $saveData = $saveTrans && $saveAU && $savePembagian && $savePenggabungan && $saveBO && $saveSekunder && $saveAnggota && $saveDataPerubahan;\n        if(!$saveData) {\n            return false;\n        }\n\n        return $newId;\n    }\n\n    public static function validateDataAnggota($data)\n    {\n        $jumlah = 3;\n        $jumlahPengurus = $jumlahPengawas = 0;\n        $dataAnggota = (Array) self::getData($data,'data.perubahan.data_anggota.anggota');\n        if(!$dataAnggota) {\n            return [\n                'status' => false,\n                'info' => 'Data Anggota Tidak Ditemukan'\n            ];\n        }\n        if(!empty($dataAnggota['nik'])){\n            return [\n                'status' => false,\n                'info' => \"Pengurus Minimal {$jumlah} Orang.\"\n            ];\n        }\n        if(empty($dataAnggota['nik'])){\n            $coulumnnik = array_column($dataAnggota, 'nik');\n            $unique = array_unique($coulumnnik);\n            $duplicates = array_diff_assoc($coulumnnik, $unique);\n            if ($duplicates) {\n                foreach ($duplicates as $d){\n                    return [\n                        'status' => false,\n                        'info' => 'Duplikat NIK ' . $d\n                    ];\n                }\n            }\n        }\n        foreach ($dataAnggota as $anggota) {\n            if ($anggota['status'] == \"PENGURUS\") {\n                $jumlahPengurus++;\n            }\n            \n            if ($anggota['status'] == \"PENGAWAS\") {\n                $jumlahPengawas++;\n            }\n        }\n\n        if (($jumlahPengurus < $jumlah)) {\n            return [\n                'status' => false,\n                'info' => \"Pengurus Minimal {$jumlah} Orang.\"\n            ];\n        }\n        \n        if (($jumlahPengawas <= 0)) {\n            return [\n                'status' => false,\n                'info' => \"Pengawas Tidak Ditemukan.\"\n            ];\n        }\n\n        if (( ($jumlahPengurus % 2) == 0 )) {\n            return [\n                'status' => false,\n                'info' => \"Pengurus Harus Memiliki Jumlah Ganjil.\"\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function saveRelationData($class, $oldId, $newId, $relationField)\n    {\n        $data = $class::find()->where([$relationField => $oldId])->all();\n\n        if(!$data) {\n            return true;\n        }\n\n        try {\n            foreach($data as $d) {\n                $newData = new $class($d);\n                $newData->id = null;\n                $newData->$relationField = $newId;\n                $newData->save();\n            }\n\n            return true;\n        }\n        catch(\\Exception $e) {\n            return false;\n        }\n    }\n\n    public static function updateDataAnggota($id, $data)\n    {\n        $dataAnggota = (Array) self::getData($data,'data.perubahan.data_anggota.anggota');\n\n        if(!$dataAnggota) {\n            return false;\n        }\n        $oldData = DataAnggota::find()->where(['t_koperasi_id' => $id])->all();\n\n        foreach ($oldData as $val) {\n            $val->delete();\n        }\n\n        foreach($dataAnggota as $data) {\n            $newData = new DataAnggota();\n            $newData->t_koperasi_id = $id;\n            $idStatus = DataAnggotaHelper::getIdStatusPengurus($data['status']);\n            if(!$idStatus) {\n                throw new \\Exception;\n            }\n            $newData->m_status_pengurus_id = $idStatus;\n            $newData->nama_status = !empty($data['status'])? $data['status'] : \"\";\n            $newData->nik = !empty($data['nik'])? $data['nik'] : \"\";\n            $newData->nama = !empty($data['nama'])? $data['nama'] : \"\";\n            $idJK = DataAnggotaHelper::getIdJenisKelamin($data['jenis_kelamin']);\n            if(!$idJK) {\n                throw new \\Exception;\n            }\n            $newData->jenis_kelamin_id = $idJK;\n            $newData->jabatan = !empty($data['jabatan'])? $data['jabatan'] : \"\";\n            $newData->npwp = !empty($data['npwp'])? $data['npwp'] : \"\";\n            $newData->hp = !empty($data['no_hp'])? $data['no_hp'] : \"\";\n\n            if(!$newData->save(false)) {\n                return false;\n            }        \n        }\n\n        return true;\n    }\n\n    public static function updateKoperasi($nomor_transaksi, $data)\n    {\n        //Get Data Koperasi Lama\n        $dataOld = (Array) self::getData($data,'data.nomor_transaksi');\n        $dataNew = (Array) self::getData($data,'data.perubahan.nik');\n\n        if(!Yii::$app->db_koperasi->createCommand()->update('kop_t_koperasi', ['nik' => $dataNew[0]], 'nomor_transaksi = :nomor_transaksi AND jenis_transaksi_id = 2', [':nomor_transaksi' => $nomor_transaksi])->execute()){\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function getData($data, $search)\n    {\n        $listKey = explode(\".\",$search);\n        $walk = $data;\n        foreach($listKey as $key) {\n            try{\n                $walk = $walk[$key];\n            }\n            catch(\\Exception $e) {\n                return false;\n            }\n        }\n\n        return $walk;\n    }\n\n    public static function sendPushPerubahan($id)\n    {\n        if(!$id) {\n            return false;\n        }\n\n        return SKHelper::pushPerubahan($id);\n    }\n\n    public static function createDataPerubahan($idTrans, $idMaster, $data)\n    {\n        $idPerubahan = (Array) self::getData($data, 'data.perubahan_id.id');\n\n        foreach($idPerubahan as $id) {\n            $newData = new ChecklistPerubahan();\n            $newData->no_checklist = uniqid(\"\", true);\n            $newData->d_koperasi_id = $idMaster;\n            $newData->t_koperasi_id = $idTrans;\n            $newData->m_perubahan_id = $id;\n\n            if(!$newData->save()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static function getDataKoperasi($nik, $nama, $asArray = false)\n    {\n        $transFind = TransaksiKoperasi::find()\n            ->alias('t')\n            ->where(['t.nik' => $nik])\n            ->innerJoinWith('dataMaster m',false)\n            // ->innerJoinWith('dataSK sk',false)\n            ->andWhere(['m.is_active' => 1])\n            ->andWhere(['t.is_finish' => 1])\n            ->orderBy(['t.id' => SORT_DESC])\n            ->one();\n        if( !$transFind ) {\n            throw new Exception(\"Data Koperasi Tidak Ditemukan\");\n        }\n    \n        $latestId = $transFind->id;\n\n        return ApiHelper::getKoperasiJson($latestId, $asArray);\n    }\n\n    public static function insertTransMigrasi($data)\n    {\n        try {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n            if (!$data) {\n                throw new Exception('Data tidak Boleh Kosong');\n            }\n\n            $validate = self::validateInsertMigrasi($data);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $validate = self::validateExist($data);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $insertPesanNama = self::insertPesanNama($data);\n            if (!$insertPesanNama) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Pesan Nama');\n            }\n\n            $checkNik = self::checkNikKoperasi($data, $insertPesanNama);\n            if (!$checkNik) {\n                throw new Exception('Terjadi Kesalahan Saat Memasukkan NIK');\n            }\n\n            $insertTrans = self::insertTransKoperasi($data, $insertPesanNama);\n            if(!$insertTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Transaksi');\n            }\n\n            $insertMaster = self::insertMasterKoperasi($data, $insertTrans);\n            if (!$insertMaster) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Master');\n            }\n\n            $updateTrans = self::updateTransKoperasi($insertTrans, $insertMaster);\n            if (!$updateTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Update Transaksi');\n            }\n\n\n            $insertSk = self::insertSkKoperasi($data, $insertTrans);\n            if (!$insertSk) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat SK');\n            }\n\n            $updateMaster = self::updateMasterKoperasi($insertMaster, $insertSk);\n            if (!$updateMaster) {\n                throw new Exception('Terjadi Kesalahan Saat Update Master');\n            }\n\n            $transaction->commit();\n\n        } catch(\\Exception $e) {\n            $transaction->rollBack();\n            return [\n                'status' => false,\n                'info' => 'Error : ' . $e->getMessage(),\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function getFields($data)\n    {\n        $nik = self::getData($data, 'koperasi.nik');\n        $nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $nama_sk = self::getData($data, 'koperasi.nama_sk');\n        $jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $pola_pengelolaan = self::getData($data, 'koperasi.pola_pengelolaan');\n        $wilayah_keanggotaan = self::getData($data, 'koperasi.wilayah_keanggotaan');\n        $bentuk_koperasi = self::getData($data, 'koperasi.bentuk_koperasi');\n        $jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n        $model_koperasi = self::getData($data, 'koperasi.model_koperasi');\n\n\n        $nomor_sk = self::getData($data, 'transaksi.nomor_sk');\n        $tanggal_sk = self::getData($data, 'transaksi.tanggal_sk');\n\n        $kelurahan = self::getData($data, 'kedudukan.kelurahan');\n        $alamat = self::getData($data, 'kedudukan.alamat');\n\n        $nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $no_akta = self::getData($data, 'akta_notaris.no_akta');\n        $tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $alamat_rapat = self::getData($data, 'rapat.alamat_rapat');\n        $jumlah_peserta = self::getData($data, 'rapat.jumlah_peserta');\n\n        $total_modal = self::getData($data, 'modal_koperasi.total_modal');\n        $simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n\n        $datas = compact(\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok', 'model_koperasi'\n        );\n\n        return $datas;\n    }\n\n    public static function validateInsertMigrasi($data)\n    {\n        $required_fields = [\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok'\n        ];\n\n        $datas = self::getFields($data);\n\n        // Validasi key kosong / tidak ada\n        foreach ($required_fields as $field) {\n            if (empty($datas[$field])) {\n                $errors[$field] = ucwords(str_replace(\"_\", \" \", $field)) . \" Tidak Boleh Kosong\";\n            }\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        $valid = self::checkValid($datas);\n\n        return $valid;\n    }\n\n    public static function validateExist($data)\n    {\n        $errors = [];\n        $datas = self::getFields($data);\n        extract($datas);\n\n        $transaksi = TransaksiKoperasi::find()\n                        //->Where(['or', ['nik' => $nik], ['full_nama' => $nama_sk]])\n                        ->Where(['nik' => $nik])\n                        ->andWhere(['full_nama' => $nama_sk])\n                        ->one();\n        if (!empty($transaksi)) {\n            $errors['nama_koperasi'] = 'Nama Koperasi ' . $nama_koperasi . ' Sudah Dipesan';\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        return false;\n    }\n\n    public static function checkValid($data, $transaksi = null)\n    {\n        $errors = [];\n        extract($data);\n\n        if (empty($transaksi) || ($transaksi && strtolower($transaksi->nama_koperasi) != strtolower($nama_koperasi))) {\n            if (self::checkNama($nama_koperasi)) {\n                $errors['nama_koperasi'] = 'Nama Koperasi ' . $nama_koperasi . ' Sudah Dipesan';\n            }\n        }\n\n        if (!empty($model_koperasi) && !PesanNama::checkIsValidModelKoperasi($model_koperasi) ){\n                $errors['nama_koperasi'] = 'Model Koperasi Tidak Valid';\n        }\n\n        if (!JenisKoperasi::getPrimaryByNama($jenis_koperasi)) {\n            $errors['jenis_koperasi'] = 'Jenis Koperasi ' . $jenis_koperasi . ' Tidak Valid';\n        }\n\n        if (!PolaPengelolaan::getPrimaryByNama($pola_pengelolaan)) {\n            $errors['pola_pengelolaan'] = 'Pola Pengelolaan ' . $pola_pengelolaan . ' Tidak Valid';\n        }\n\n        if (!TingkatWilayah::getPrimaryByNama($wilayah_keanggotaan)) {\n            $errors['wilayah_keanggotaan'] = 'Wilayah Keanggotaan ' . $wilayah_keanggotaan . ' Tidak Valid';\n        }\n\n        if (!BentukKoperasi::getPrimaryByNama($bentuk_koperasi)) {\n            $errors['bentuk_koperasi'] = 'Bentuk Koperasi ' . $bentuk_koperasi . ' Tidak Valid';\n        }\n\n        // if (!WilayahOds::getWilayah($kelurahan)) {\n        //     $errors['kelurahan'] = 'Kode Kelurahan Tidak Valid';\n        // }\n\n        // if (!in_array(strtolower($jangka_waktu), ['terbatas', 'tidak terbatas'])) {\n        //     $errors['jangka_waktu'] = 'Jangka Waktu Tidak Valid';\n        // }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        return false;\n    }\n\n    public static function checkNama($nama)\n    {\n        $data = PesanNama::find()\n            ->where(['nama_koperasi' => $nama])\n            ->andWhere(['is_deleted' => '0'])\n            ->orderBy('created_date DESC')\n            ->one();\n        $now = Date(\"Y-m-d H:i:s\");\n        if($data) {\n\n            // Jika ada pesan nama di antrian\n            if($data->status == 0) {\n\n                // Jika Belum Pendirian Tetapi Sudah Expired\n                if($data->end_date < $now) {\n                    return false;\n                }\n\n                return true;\n            }\n\n            $dataTrans = ArrayHelper::getColumn(TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $data->id])->all(),'id');\n\n            // Jika Tidak Ada Data Transaksi Yang Menggunakan Pesan Nama Tersebut\n            if(!$dataTrans) {\n                return false;\n            }\n\n            if(sizeof($dataTrans) == 1) {\n                $cekData = TransaksiKoperasi::find()->where(['id' => $dataTrans[0]])->one();\n                // Jika Dalam Masa Tahap Penddirian\n                if($cekData->is_finish != 1) {\n                    return true;\n                }\n            }\n\n            $dataMaster = MasterTransaction::find()->where(['id_transaksi' => $dataTrans])->one();\n\n            // Jika Tidak Ada Data Master Koperasi Yang Menggunakan Pesan Nama Tersebut\n            if(!$dataMaster) {\n                return false;\n            }\n\n            // Jika Data Master Koperasi Yang Ditemukan Sudah Melakukan Penggabungan\n            if($dataMaster->is_gabung == 1) {\n                return false;\n            }\n\n            if($dataMaster->is_active == 0) {\n                return false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    public static function insertPesanNama($data)\n    {\n        $pesan_nama = new PesanNama();\n        $pesan_nama->no_pesan = '';\n        // $pesan_nama->nama_koperasi = $pesan_nama->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $pesan_nama->full_nama = $pesan_nama->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $pesan_nama->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $pesan_nama->full_nama = self::getData($data, 'koperasi.nama_sk');\n\n        $jenis_koperasi = JenisKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.jenis_koperasi'));\n\n        $pesan_nama->jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['parent_id'] : $jenis_koperasi['id'];\n        $pesan_nama->c_jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['id'] : null;\n        $pesan_nama->m_pola_id = PolaPengelolaan::getPrimaryByNama(self::getData($data, 'koperasi.pola_pengelolaan'));\n        $pesan_nama->ahu_notaris_id = '-1';\n        $pesan_nama->status = '1';\n        $pesan_nama->created_by = '-1';\n        $pesan_nama->created_date = date('Y-m-d H:i:s');\n\n        if(PesanNama::checkIsKoperasiMultiPihak(self::getData($data, 'koperasi.model_koperasi'))){\n            $pesan_nama->model_koperasi = 1;\n        }\n\n        $save_pesan_nama = $pesan_nama->save(false);\n        $new_id = $pesan_nama->getPrimaryKey();\n\n        if (!$save_pesan_nama) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function insertTransKoperasi($data, $id_pesan_nama)\n    {\n        $pn = new PesanNama();\n        $transaksi = new TransaksiKoperasi();\n        $transaksi->nomor_transaksi = '';\n        $transaksi->t_pesan_nama_id = $id_pesan_nama;\n        // $transaksi->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $transaksi->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $transaksi->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $transaksi->full_nama = self::getData($data, 'koperasi.nama_sk');\n        $transaksi->jenis_transaksi_id = JenisTransaksi::getPrimaryByNama(\"PENDIRIAN\");\n        $transaksi->jenis_transaksi = \"PENDIRIAN\";\n        $transaksi->jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $transaksi->m_tingkat_wilayah_id = TingkatWilayah::getPrimaryByNama(self::getData($data, 'koperasi.wilayah_keanggotaan'));\n        $transaksi->b_koperasi_id = BentukKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.bentuk_koperasi'));\n        $transaksi->jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n\n        if (strtolower($transaksi->jangka_waktu) == \"tidak terbatas\") {\n            $transaksi->jumlah_jangka_waktu = self::getData($data, 'koperasi.jumlah_jangka_waktu');\n            $transaksi->tanggal_jangka_waktu = self::getData($data, 'koperasi.tanggal_jangka_waktu');\n        } else {\n            $transaksi->jumlah_jangka_waktu = null;\n            $transaksi->tanggal_jangka_waktu = null;\n        }\n\n        $wilayah = WilayahOds::getWilayah(self::getData($data, 'kedudukan.kelurahan'));\n\n        if ($wilayah) {\n            $transaksi->provinsi_id = $wilayah['provinsi_id'];\n            $transaksi->nama_provinsi = $wilayah['nama_provinsi'];\n            $transaksi->kab_kota_id = $wilayah['kab_kota_id'];\n            $transaksi->nama_kabupaten = $wilayah['nama_kabupaten'];\n            $transaksi->kecamatan_id = $wilayah['kecamatan_id'];\n            $transaksi->nama_kecamatan = $wilayah['nama_kecamatan'];\n            $transaksi->kel_desa_id = $wilayah['kel_desa_id'];\n            $transaksi->nama_kelurahan = $wilayah['nama_kelurahan'];\n        }\n\n        $transaksi->alamat_koperasi = self::getData($data, 'kedudukan.alamat');\n        $transaksi->rw = self::getData($data, 'kedudukan.rw');\n        $transaksi->rt = self::getData($data, 'kedudukan.rt');\n        $transaksi->kode_pos = self::getData($data, 'kedudukan.kode_pos');\n        $transaksi->telepon = self::getData($data, 'kedudukan.no_telp');\n        $transaksi->email = self::getData($data, 'kedudukan.email');\n\n        $transaksi->nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $transaksi->akta_koperasi = self::getData($data, 'akta_notaris.no_akta');\n        $transaksi->tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $transaksi->tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $transaksi->alamat_rapat = self::getData($data, 'rapat.alamat');\n        $transaksi->jumlah_peserta_rapat = self::getData($data, 'rapat.jumlah_peserta');\n\n\n        $transaksi->modal_koperasi = self::getData($data, 'modal_koperasi.total_modal');\n        $transaksi->simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $transaksi->simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n        $transaksi->dana_hibah = self::getData($data, 'modal_koperasi.dana_hibah');\n        $transaksi->dana_cadangan = self::getData($data, 'modal_koperasi.dana_cadangan');\n\n        $transaksi->periode_pengurus_awal = self::getData($data, 'periode_pengurus.tanggal_mulai');\n        $transaksi->periode_pengurus_akhir = self::getData($data, 'periode_pengurus.tanggal_selesai');\n\n        $transaksi->is_confirm = '0';\n        $transaksi->nik = self::getData($data, 'koperasi.nik');\n        $transaksi->is_deleted = '0';\n        $transaksi->created_by = '-1';\n        $transaksi->created_date = date('Y-m-d H:i:s');\n        $transaksi->is_finish = '1';\n        $transaksi->is_ods = '1';\n        $transaksi->is_migrasi = '1';\n\n        $save_transaksi = $transaksi->save(false);\n        $new_id = $transaksi->getPrimaryKey();\n\n        if (!$save_transaksi) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function insertMasterKoperasi($data, $id_transaksi)\n    {\n        $master_transaksi = new MasterTransaction();\n        $master_transaksi->id_transaksi = $id_transaksi;\n        $master_transaksi->id_sk = null;\n        $master_transaksi->is_deleted = '0';\n        $master_transaksi->status = '1';\n        $master_transaksi->is_gabung = '0';\n        $master_transaksi->is_active = '1';\n        $master_transaksi->is_bubar = '0';\n        $master_transaksi->is_blokir = '0';\n\n        $save_master = $master_transaksi->save(false);\n        $new_id = $master_transaksi->getPrimaryKey();\n\n        if (!$save_master) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function updateTransKoperasi($id_transaksi, $id_master)\n    {\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id_transaksi])->one();\n        $transaksi->id_master = $id_master;\n\n        $save_transaksi = $transaksi->save(false);\n\n        if (!$save_transaksi) {\n            return false;\n        }\n\n        return $save_transaksi;\n    }\n\n    public static function insertSkKoperasi($data, $id_transaksi)\n    {\n        $sk = new SK();\n        $sk->t_koperasi_id = $id_transaksi;\n        $sk->no_sk_koperasi = self::getData($data, 'transaksi.nomor_sk');\n        $sk->created_date = self::getData($data, 'transaksi.tanggal_sk');\n\n        $save_sk = $sk->save(false);\n        $new_id = $sk->getPrimaryKey();\n\n        if (!$save_sk) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function checkNikKoperasi($data, $id_pesan_nama)\n    {\n        $nik        = self::getData($data, 'koperasi.nik');\n        $check_nik  = TransaksiKoperasi::find()->where(['nik' => $nik])->orderBy(['id' => SORT_ASC])->one();\n\n        if($check_nik) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function updateMasterKoperasi($id_master, $id_sk)\n    {\n        $master_transaksi = MasterTransaction::find()->where(['id' => $id_master])->one();\n        $master_transaksi->id_sk = $id_sk;\n\n        $save_master = $master_transaksi->save(false);\n\n        if (!$save_master) {\n            return false;\n        }\n\n        return $save_master;\n    }\n\n    public static function validateEditMigrasi($data, $transaksi)\n    {\n        $required_fields = [\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok'\n        ];\n\n        $datas = self::getFields($data);\n\n        // Validasi key kosong / tidak ada\n        foreach ($required_fields as $field) {\n            if (empty($datas[$field])) {\n                $errors[$field] = ucwords(str_replace(\"_\", \" \", $field)) . \" Tidak Boleh Kosong\";\n            }\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        $valid = self::checkValid($datas, $transaksi);\n\n        return $valid;\n    }\n\n    public static function editTransMigrasi($nik, $data)\n    {\n        try {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n\n            if (!$data) {\n                throw new Exception('Data tidak Boleh Kosong');\n            }\n\n            $transaksi = TransaksiKoperasi::find()\n                            ->where(['nik' => $nik])\n                            ->andWhere(['is_finish' => 1])\n                            ->orderBy(['id' => SORT_DESC])\n                            ->one();\n\n            if ($transaksi) {\n                if ($transaksi->is_migrasi != 1) {\n                    throw new Exception(\"Koperasi tidak bisa diedit karena sudah melakukan transaksi di aplikasi AHU\");\n                }\n            } else {\n                throw new Exception(\"Koperasi dengan NIK {$nik} tidak ditemukan\");\n            }\n\n            $validate = self::validateEditMigrasi($data, $transaksi);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $editPesanNama = self::editPesanNama($data, $transaksi);\n            if (!$editPesanNama) {\n                throw new Exception('Terjadi Kesalahan Saat Edit Pesan Nama');\n            }\n\n            $editTrans = self::editTransKoperasi($data, $transaksi);\n            if (!$editTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Edit Transaksi');\n            }\n\n            $editSk = self::editSkKoperasi($data, $transaksi);\n            if (!$editSk) {\n                throw new Exception('Terjadi Kesalahan Saat Edit SK');\n            }\n\n            $transaction->commit();\n\n        } catch(\\Exception $e) {\n            $transaction->rollBack();\n            return [\n                'status' => false,\n                'info' => 'Error : ' . $e->getMessage(),\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function editPesanNama($data, $transaksi)\n    {\n        $pesan_nama = PesanNama::findOne($transaksi->t_pesan_nama_id);\n\n        if ($pesan_nama) {\n            $pn = new PesanNama();\n            // $pesan_nama->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n            // $pesan_nama->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n            $pesan_nama->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n            $pesan_nama->full_nama = self::getData($data, 'koperasi.nama_sk');\n\n            $jenis_koperasi = JenisKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.jenis_koperasi'));\n\n            $pesan_nama->jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['parent_id'] : $jenis_koperasi['id'];\n            $pesan_nama->c_jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['id'] : null;\n            $pesan_nama->m_pola_id = PolaPengelolaan::getPrimaryByNama(self::getData($data, 'koperasi.pola_pengelolaan'));\n            $pesan_nama->updated_by = '-1';\n            $pesan_nama->updated_date = date('Y-m-d H:i:s');\n\n            $model_koperasi = self::getData($data, 'koperasi.model_koperasi');\n            if(PesanNama::checkIsValidModelKoperasi($model_koperasi)){\n                $is_model_koperasi = PesanNama::checkIsKoperasiMultiPihak($model_koperasi) ? 1 : 0;\n                $pesan_nama->model_koperasi = $is_model_koperasi;\n            }\n\n            $save_pesan_nama = $pesan_nama->save(false);\n\n            return $save_pesan_nama;\n        }\n\n        return false;\n    }\n\n    public static function editTransKoperasi($data, $transaksi)\n    {\n        $pn = new PesanNama();\n        // $transaksi->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $transaksi->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $transaksi->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $transaksi->full_nama = self::getData($data, 'koperasi.nama_sk');\n        $transaksi->jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $transaksi->m_tingkat_wilayah_id = TingkatWilayah::getPrimaryByNama(self::getData($data, 'koperasi.wilayah_keanggotaan'));\n        $transaksi->b_koperasi_id = BentukKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.bentuk_koperasi'));\n        $transaksi->jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n\n        if (strtolower($transaksi->jangka_waktu) == \"tidak terbatas\") {\n            $transaksi->jumlah_jangka_waktu = self::getData($data, 'koperasi.jumlah_jangka_waktu');\n            $transaksi->tanggal_jangka_waktu = self::getData($data, 'koperasi.tanggal_jangka_waktu');\n        } else {\n            $transaksi->jumlah_jangka_waktu = null;\n            $transaksi->tanggal_jangka_waktu = null;\n        }\n\n        $wilayah = WilayahOds::getWilayah(self::getData($data, 'kedudukan.kelurahan'));\n\n        if ($wilayah) {\n            $transaksi->provinsi_id = $wilayah['provinsi_id'];\n            $transaksi->nama_provinsi = $wilayah['nama_provinsi'];\n            $transaksi->kab_kota_id = $wilayah['kab_kota_id'];\n            $transaksi->nama_kabupaten = $wilayah['nama_kabupaten'];\n            $transaksi->kecamatan_id = $wilayah['kecamatan_id'];\n            $transaksi->nama_kecamatan = $wilayah['nama_kecamatan'];\n            $transaksi->kel_desa_id = $wilayah['kel_desa_id'];\n            $transaksi->nama_kelurahan = $wilayah['nama_kelurahan'];\n        }\n\n        $transaksi->alamat_koperasi = self::getData($data, 'kedudukan.alamat');\n        $transaksi->rw = self::getData($data, 'kedudukan.rw');\n        $transaksi->rt = self::getData($data, 'kedudukan.rt');\n        $transaksi->kode_pos = self::getData($data, 'kedudukan.kode_pos');\n        $transaksi->telepon = self::getData($data, 'kedudukan.no_telp');\n        $transaksi->email = self::getData($data, 'kedudukan.email');\n\n        $transaksi->nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $transaksi->akta_koperasi = self::getData($data, 'akta_notaris.no_akta');\n        $transaksi->tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $transaksi->tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $transaksi->alamat_rapat = self::getData($data, 'rapat.alamat');\n        $transaksi->jumlah_peserta_rapat = self::getData($data, 'rapat.jumlah_peserta');\n\n        $transaksi->modal_koperasi = self::getData($data, 'modal_koperasi.total_modal');\n        $transaksi->simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $transaksi->simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n        $transaksi->dana_hibah = self::getData($data, 'modal_koperasi.dana_hibah');\n        $transaksi->dana_cadangan = self::getData($data, 'modal_koperasi.dana_cadangan');\n\n        $transaksi->periode_pengurus_awal = self::getData($data, 'periode_pengurus.tanggal_mulai');\n        $transaksi->periode_pengurus_akhir = self::getData($data, 'periode_pengurus.tanggal_selesai');\n\n        $transaksi->nik = self::getData($data, 'koperasi.nik');\n        $transaksi->updated_by = '-1';\n        $transaksi->updated_date = date('Y-m-d H:i:s');\n        $transaksi->is_ods = '1';\n        $transaksi->is_migrasi = '1';\n\n        $save_transaksi = $transaksi->save(false);\n\n        return $save_transaksi;\n    }\n\n    public static function editSkKoperasi($data, $transaksi)\n    {\n        $sk = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n\n        $no_sk_koperasi_post = self::getData($data, 'transaksi.nomor_sk');\n        $created_date_post = self::getData($data, 'transaksi.tanggal_sk');\n\n        if ($sk) {\n            $sk->no_sk_koperasi = $no_sk_koperasi_post;\n            $sk->created_date = $created_date_post;\n\n            $save_sk = $sk->save(false);\n\n            return $save_sk;\n        } elseif (empty($sk) && !empty($no_sk_koperasi_post)) {            \n            $sk_new = new SK;\n            $sk_new->t_koperasi_id = $transaksi->id;\n            $sk_new->no_sk_koperasi = $no_sk_koperasi_post;\n            $sk_new->created_date = $created_date_post;\n\n            $save_sk = $sk_new->save(false);\n\n            return $save_sk;          \n        }\n\n        return false;\n    }\n\n    public static function filterEmptyArray(&$array)\n    {\n        foreach ($array as $k => &$v) {\n            if (empty($v) && is_array($v)) {\n                $array[$k] = \"\";\n            } else {\n                is_array($v) && self::filterEmptyArray($v);\n            }\n        }\n    }\n}\n?>\n\n\n--- File: 294 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/RingException.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Exception;\n\nclass RingException extends \\RuntimeException {};\n\n\n--- File: 544 # extensions/elasticSearch/vendor/react/promise/src/Exception/LengthException.php ---\n<?php\n\nnamespace React\\Promise\\Exception;\n\nclass LengthException extends \\LengthException\n{\n}\n\n\n--- File: 522 # extensions/elasticSearch/vendor/psr/log/Psr/Log/InvalidArgumentException.php ---\n<?php\n\nnamespace Psr\\Log;\n\nclass InvalidArgumentException extends \\InvalidArgumentException\n{\n}\n\n\n--- File: 543 # extensions/elasticSearch/vendor/react/promise/src/functions_include.php ---\n<?php\n\nif (!function_exists('React\\Promise\\resolve')) {\n    require __DIR__.'/functions.php';\n}\n\n\n--- File: 266 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientBuilder/DummyLogger.php ---\n<?php\ndeclare(strict_types = 1);\n\nnamespace Elasticsearch\\Tests\\ClientBuilder;\n\nclass DummyLogger\n{\n\n}\n\n\n--- File: 335 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/Exception/CannotAttachException.php ---\n<?php\nnamespace GuzzleHttp\\Stream\\Exception;\n\nclass CannotAttachException extends \\RuntimeException {}\n\n\n--- File: 573 # extensions/elasticSearch/vendor/react/promise/tests/Stub/CallableStub.php ---\n<?php\n\nnamespace React\\Promise\\Stub;\n\nclass CallableStub\n{\n    public function __invoke()\n    {\n    }\n}\n\n\n--- File: 291 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/CancelledException.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Exception;\n\n/**\n * Marker interface for cancelled exceptions.\n */\ninterface CancelledException {}\n\n\n--- File: 292 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/CancelledFutureAccessException.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Exception;\n\nclass CancelledFutureAccessException extends RingException implements CancelledException {}\n\n\n--- File: 293 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/ConnectException.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Exception;\n\n/**\n * Occurs when the connection failed.\n */\nclass ConnectException extends RingException {}\n\n\n--- File: 55 # extensions/elasticSearch/vendor/composer/autoload_classmap.php ---\n<?php\n\n// autoload_classmap.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n\n--- File: 539 # extensions/elasticSearch/vendor/react/promise/src/PromisorInterface.php ---\n<?php\n\nnamespace React\\Promise;\n\ninterface PromisorInterface\n{\n    /**\n     * @return PromiseInterface\n     */\n    public function promise();\n}\n\n\n--- File: 57 # extensions/elasticSearch/vendor/composer/autoload_namespaces.php ---\n<?php\n\n// autoload_namespaces.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n\n--- File: 531 # extensions/elasticSearch/vendor/react/promise/src/CancellablePromiseInterface.php ---\n<?php\n\nnamespace React\\Promise;\n\ninterface CancellablePromiseInterface extends PromiseInterface\n{\n    /**\n     * @return void\n     */\n    public function cancel();\n}\n\n\n--- File: 810 # web/frontend/dist/images/favicon/yandex-browser-manifest.json ---\n{\n  \"version\": \"0.0.1\",\n  \"api_version\": 1,\n  \"layout\": {\n    \"logo\": \"images/favicon/yandex-browser-50x50.png\",\n    \"color\": \"transparent\",\n    \"show_title\": true\n  }\n}\n\n--- File: 828 # web/koperasi-dashboard/dist/images/favicon/yandex-browser-manifest.json ---\n{\n  \"version\": \"0.0.1\",\n  \"api_version\": 1,\n  \"layout\": {\n    \"logo\": \"images/favicon/yandex-browser-50x50.png\",\n    \"color\": \"transparent\",\n    \"show_title\": true\n  }\n}\n\n--- File: 53 # extensions/elasticSearch/vendor/autoload.php ---\n<?php\n\n// autoload.php @generated by Composer\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit4280ae4ff74c80f1831d2d9bb5f97706::getLoader();\n\n\n--- File: 577 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleTestCancellable.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass SimpleTestCancellable\n{\n    public $cancelCalled = false;\n\n    public function cancel()\n    {\n        $this->cancelCalled = true;\n    }\n}\n\n\n--- File: 561 # extensions/elasticSearch/vendor/react/promise/tests/bootstrap.php ---\n<?php\n\n$loader = @include __DIR__.'/../vendor/autoload.php';\nif (!$loader) {\n    $loader = require __DIR__.'/../../../../vendor/autoload.php';\n}\n$loader->addPsr4('React\\\\Promise\\\\', __DIR__);\n\n\n--- File: 34 # config/test_db.php ---\n<?php\n$db = require __DIR__ . '/db.php';\n// test database! Important not to run tests on production or development databases\n$db['dsn'] = 'mysql:host=localhost;dbname=yii2_basic_tests';\n\nreturn $db;\n\n\n--- File: 2 # docker-compose.yml ---\nversion: '2'\nservices:\n  php:\n    image: yiisoftware/yii2-php:7.1-apache\n    volumes:\n      - ~/.composer-docker/cache:/root/.composer/cache:delegated\n      - ./:/app:delegated\n    ports:\n      - '8000:80'\n\n--- File: 299 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureArrayInterface.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Future;\n\n/**\n * Future that provides array-like access.\n */\ninterface FutureArrayInterface extends\n    FutureInterface,\n    \\ArrayAccess,\n    \\Countable,\n    \\IteratorAggregate {};\n\n\n--- File: 281 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/docstheme/manifest.yml ---\nname: asciidoc\n\nglobal:\n    \"pages/namespaces.twig\": \"namespaces.asciidoc\"\n    \"pages/interfaces.twig\": \"interfaces.asciidoc\"\n    \"pages/classes.twig\": \"classes.asciidoc\"\n\nclass:\n    \"pages/class.twig\": \"%s.asciidoc\"\n\n\n--- File: 304 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/bootstrap.php ---\n<?php\nrequire __DIR__ . '/../vendor/autoload.php';\nrequire __DIR__ . '/Client/Server.php';\n\nuse GuzzleHttp\\Tests\\Ring\\Client\\Server;\n\nServer::start();\n\nregister_shutdown_function(function () {\n    Server::stop();\n});\n\n\n--- File: 788 # views/bakum-verifikator/_verifikasi_scripts.php ---\n<script>\n  function submitAksi(v){\n    (v==='tahap2' ? document.getElementById('aksi-terima') : document.getElementById('aksi-tolak')).checked = true;\n    document.getElementById('form-verifikasi').submit();\n  }\n</script>\n\n\n\n--- File: 316 # extensions/elasticSearch/vendor/guzzlehttp/streams/.travis.yml ---\nlanguage: php\n\nphp:\n  - 5.4\n  - 5.5\n  - 5.6\n  - hhvm\n\nbefore_script:\n  - composer self-update\n  - composer install --no-interaction --prefer-source --dev\n\nscript: vendor/bin/phpunit\n\nmatrix:\n  allow_failures:\n    - php: hhvm\n\n\n--- File: 538 # extensions/elasticSearch/vendor/react/promise/src/PromiseInterface.php ---\n<?php\n\nnamespace React\\Promise;\n\ninterface PromiseInterface\n{\n    /**\n     * @return PromiseInterface\n     */\n    public function then(callable $onFulfilled = null, callable $onRejected = null, callable $onProgress = null);\n}\n\n\n--- File: 56 # extensions/elasticSearch/vendor/composer/autoload_files.php ---\n<?php\n\n// autoload_files.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'ad155f8f1cf0d418fe49e248db8c661b' => $vendorDir . '/react/promise/src/functions_include.php',\n);\n\n\n--- File: 19 # components/RegexHelper.php ---\n<?php\nnamespace app\\components;\n\nuse yii\\base\\Component;\n\n\nclass RegexHelper extends Component \n{\n    const LETTER_AND_SPACES = '/^[a-zA-Z\\s]*$/';\n    const LETTER_ONLY = '/^[a-zA-Z]*$/';\n    const NUMBER_ONLY = '/^(\\(?\\+?[0-9]*\\)?)?[0-9_\\- \\(\\)]*$/';\n}\n\n\n--- File: 563 # extensions/elasticSearch/vendor/react/promise/tests/PromiseAdapter/PromiseAdapterInterface.php ---\n<?php\n\nnamespace React\\Promise\\PromiseAdapter;\n\nuse React\\Promise;\n\ninterface PromiseAdapterInterface\n{\n    public function promise();\n    public function resolve();\n    public function reject();\n    public function notify();\n    public function settle();\n}\n\n\n--- File: 327 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/MetadataStreamInterface.php ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\n/**\n * This interface is deprecated and should no longer be used. Just use\n * StreamInterface now that the getMetadata method has been added to\n * StreamInterface.\n *\n * @deprecated\n */\ninterface MetadataStreamInterface extends StreamInterface {}\n\n\n--- File: 587 # models/Command.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass Command extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{command}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n}\n\n--- File: 591 # models/Disclaimer.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass Disclaimer extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%m_disclaimer}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n}\n\n--- File: 598 # models/Kombinasi.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass Kombinasi extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%m_ban_kombinasi}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n}\n\n--- File: 663 # models/notariat/TransaksiNotaris.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\n\nclass TransaksiNotaris extends \\yii\\db\\ActiveRecord\n{\n    public static function tableName()\n    {\n        return 'ahu_transaksi_notaris';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat');\n    }\n}\n\n\n--- File: 301 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureValue.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Future;\n\n/**\n * Represents a future value that responds to wait() to retrieve the promised\n * value, but can also return promises that are delivered the value when it is\n * available.\n */\nclass FutureValue implements FutureInterface\n{\n    use BaseFutureTrait;\n}\n\n\n--- File: 628 # models/WilayahNotariat.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\nclass WilayahNotariat extends ActiveRecord\n{\n    \n    public static function tableName()\n    {\n        return '{{WILAYAH}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat2');\n    }\n}\n\n\n--- File: 524 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LoggerAwareInterface.php ---\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes a logger-aware instance.\n */\ninterface LoggerAwareInterface\n{\n    /**\n     * Sets a logger instance on the object.\n     *\n     * @param LoggerInterface $logger\n     *\n     * @return void\n     */\n    public function setLogger(LoggerInterface $logger);\n}\n\n\n--- File: 583 # models/BHPenggabungan.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass BHPenggabungan extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%bh_penggabungan}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n}\n\n--- File: 565 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/FullTestTrait.php ---\n<?php\n\nnamespace React\\Promise\\PromiseTest;\n\ntrait FullTestTrait\n{\n    use PromisePendingTestTrait,\n        PromiseSettledTestTrait,\n        PromiseFulfilledTestTrait,\n        PromiseRejectedTestTrait,\n        ResolveTestTrait,\n        RejectTestTrait,\n        NotifyTestTrait,\n        CancelTestTrait;\n}\n\n\n--- File: 282 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/.travis.yml ---\nlanguage: php\n\nphp:\n  - 5.4\n  - 5.5\n  - 5.6\n  - 7.0\n  - hhvm\n\nbefore_script:\n  - composer self-update\n  - composer install --no-interaction --prefer-source --dev\n  - ~/.nvm/nvm.sh install v0.6.14\n  - ~/.nvm/nvm.sh run v0.6.14\n\nscript:\n  - make test\n\nmatrix:\n  allow_failures:\n    - php: hhvm\n  fast_finish: true\n\n\n--- File: 581 # models/AlasanPembubaran.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\KBLIBakum;\n\n\nclass AlasanPembubaran extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%m_alasan_pembubaran}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n}\n\n--- File: 610 # models/MasterPerubahan.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass MasterPerubahan extends ActiveRecord \n{\n    const ID_KOPERASI_MERAH_PUTIH = 23;\n\n    public static function tableName()\n    {\n        return '{{%m_perubahan}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n}\n\n\n--- File: 39 # controllers/NewFormController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\components\\BaseController;\nuse app\\models\\forms\\PendirianForm;\n\nclass NewFormController extends BaseController\n{\n    public function actionIndex()\n    {\n        $model =  new PendirianForm();\n\n        return $this->render('//layouts/new-form', [\n            'model' => $model,\n        ]);\n    }\n}\n\n--- File: 523 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LogLevel.php ---\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes log levels.\n */\nclass LogLevel\n{\n    const EMERGENCY = 'emergency';\n    const ALERT     = 'alert';\n    const CRITICAL  = 'critical';\n    const ERROR     = 'error';\n    const WARNING   = 'warning';\n    const NOTICE    = 'notice';\n    const INFO      = 'info';\n    const DEBUG     = 'debug';\n}\n\n\n--- File: 578 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleTestCancellableThenable.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass SimpleTestCancellableThenable\n{\n    public $cancelCalled = false;\n\n    public function then(callable $onFulfilled = null, callable $onRejected = null, callable $onProgress = null)\n    {\n        return new self();\n    }\n\n    public function cancel()\n    {\n        $this->cancelCalled = true;\n    }\n}\n\n\n--- File: 32 # config/db.php ---\n<?php\n\nreturn [\n    'class' => 'yii\\db\\Connection',\n    'dsn' => 'mysql:host=localhost;dbname=yii2basic',\n    'username' => 'root',\n    'password' => '',\n    'charset' => 'utf8',\n\n    // Schema cache options (for production environment)\n    //'enableSchemaCache' => true,\n    //'schemaCacheDuration' => 60,\n    //'schemaCache' => 'cache',\n];\n\n\n--- File: 72 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ElasticsearchException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * Generic Exception interface\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ninterface ElasticsearchException\n{\n}\n\n\n--- File: 773 # views/site/about.php ---\n<?php\n\n/* @var $this yii\\web\\View */\n\nuse yii\\helpers\\Html;\n\n$this->title = 'About';\n$this->params['breadcrumbs'][] = $this->title;\n?>\n<div class=\"site-about\">\n    <h1><?= Html::encode($this->title) ?></h1>\n\n    <p>\n        This is the About page. You may modify the following file to customize its content:\n    </p>\n\n    <code><?= __FILE__ ?></code>\n</div>\n\n\n--- File: 76 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Missing404Exception.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * Missing404Exception\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Missing404Exception extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 85 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/TransportException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * TransportException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass TransportException extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 73 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Forbidden403Exception.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * Forbidden403Exception\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Forbidden403Exception extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 82 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/RuntimeException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * RuntimeException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RuntimeException extends \\RuntimeException implements ElasticsearchException\n{\n}\n\n\n--- File: 75 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/MaxRetriesException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * MaxRetriesException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass MaxRetriesException extends TransportException implements ElasticsearchException\n{\n}\n\n\n--- File: 78 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/NoNodesAvailableException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * NoNodesAvailableException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass NoNodesAvailableException extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 344 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/InflateStreamTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Stream;\n\nuse GuzzleHttp\\Stream\\InflateStream;\nuse GuzzleHttp\\Stream\\Stream;\n\nclass InflateStreamtest extends \\PHPUnit_Framework_TestCase\n{\n    public function testInflatesStreams()\n    {\n        $content = gzencode('test');\n        $a = Stream::factory($content);\n        $b = new InflateStream($a);\n        $this->assertEquals('test', (string) $b);\n    }\n}\n\n\n--- File: 525 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LoggerAwareTrait.php ---\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * Basic Implementation of LoggerAwareInterface.\n */\ntrait LoggerAwareTrait\n{\n    /**\n     * The logger instance.\n     *\n     * @var LoggerInterface\n     */\n    protected $logger;\n\n    /**\n     * Sets a logger.\n     *\n     * @param LoggerInterface $logger\n     */\n    public function setLogger(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n}\n\n\n--- File: 80 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/RequestTimeout408Exception.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * RequestTimeout408Exception\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RequestTimeout408Exception extends BadRequest400Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 84 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ServerErrorResponseException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * ServerErrorResponseException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass ServerErrorResponseException extends TransportException implements ElasticsearchException\n{\n}\n\n\n--- File: 70 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ClientErrorResponseException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class ClientErrorResponseException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass ClientErrorResponseException extends TransportException implements ElasticsearchException\n{\n}\n\n\n--- File: 77 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/NoDocumentsToGetException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * NoDocumentsToGetException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass NoDocumentsToGetException extends ServerErrorResponseException implements ElasticsearchException\n{\n}\n\n\n--- File: 79 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/NoShardAvailableException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * NoShardAvailableException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass NoShardAvailableException extends ServerErrorResponseException implements ElasticsearchException\n{\n}\n\n\n--- File: 83 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ScriptLangNotSupportedException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * ScriptLangNotSupportedException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass ScriptLangNotSupportedException extends BadRequest400Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 71 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Conflict409Exception.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * Conflict409Exception, thrown on 409 conflict http error\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Conflict409Exception extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 69 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/BadRequest400Exception.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * BadRequest400Exception, thrown on 400 conflict http error\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass BadRequest400Exception extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 353 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/Exception/SeekExceptionTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Stream\\Exception;\n\nuse GuzzleHttp\\Stream\\Exception\\SeekException;\nuse GuzzleHttp\\Stream\\Stream;\n\nclass SeekExceptionTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testHasStream()\n    {\n        $s = Stream::factory('foo');\n        $e = new SeekException($s, 10);\n        $this->assertSame($s, $e->getStream());\n        $this->assertContains('10', $e->getMessage());\n    }\n}\n\n\n--- File: 67 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/AlreadyExpiredException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * AlreadyExpiredException, thrown when a document has already expired\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass AlreadyExpiredException extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 86 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Unauthorized401Exception.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * Unauthorized401Exception, thrown on 401 unauthorized http error\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Unauthorized401Exception extends \\Exception implements ElasticsearchException\n{\n}\n\n\n--- File: 328 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/NoSeekStream.php ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\n/**\n * Stream decorator that prevents a stream from being seeked\n */\nclass NoSeekStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    public function seek($offset, $whence = SEEK_SET)\n    {\n        return false;\n    }\n\n    public function isSeekable()\n    {\n        return false;\n    }\n\n    public function attach($stream)\n    {\n        $this->stream->attach($stream);\n    }\n}\n\n\n--- File: 401 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/MissingExtensionException.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * Exception can be thrown if an extension for an handler is missing\n *\n * @author  Christian Bergau <cbergau86@gmail.com>\n */\nclass MissingExtensionException extends \\Exception\n{\n}\n\n\n--- File: 74 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/InvalidArgumentException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * InvalidArgumentException\n *\n * Denote invalid or incorrect argument values\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass InvalidArgumentException extends \\InvalidArgumentException implements ElasticsearchException\n{\n}\n\n\n--- File: 580 # models/AktifitasUsaha.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\KBLIBakum;\n\n\nclass AktifitasUsaha extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%t_aktifitas_usaha}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getBakumKBLI() {\n        return $this->hasOne(KBLIBakum::className(),['id_kbli' => 'kbli_id']);\n    }\n}\n\n--- File: 81 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/RoutingMissingException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * RoutingMissingException, thrown on when a routing value is required but\n * not provided\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RoutingMissingException extends ServerErrorResponseException implements ElasticsearchException\n{\n}\n\n\n--- File: 87 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/UnexpectedValueException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * UnexpectedValueException\n *\n * Denote a value that is outside the normally accepted values\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass UnexpectedValueException extends \\UnexpectedValueException implements ElasticsearchException\n{\n}\n\n\n--- File: 68 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/BadMethodCallException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions;\n\n/**\n * BadMethodCallException\n *\n * Denote problems with a method call (e.g. incorrect number of arguments)\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass BadMethodCallException extends \\BadMethodCallException implements ElasticsearchException\n{\n}\n\n\n--- File: 530 # extensions/elasticSearch/vendor/react/promise/.travis.yml ---\nlanguage: php\n\nphp:\n  - 5.4\n  - 5.5\n  - 5.6\n  - 7.0\n  - nightly\n  - hhvm\n\nbefore_install:\n  - composer self-update\n\ninstall:\n  - composer install\n\nscript:\n  - ./vendor/bin/phpunit -v --coverage-text --coverage-clover=./build/logs/clover.xml\n\nafter_script:\n  - if [ -f ./build/logs/clover.xml ]; then travis_retry composer require satooshi/php-coveralls --no-interaction --update-with-dependencies; fi\n  - if [ -f ./build/logs/clover.xml ]; then php vendor/bin/coveralls -v; fi\n\n\n--- File: 717 # views/admin/whitelist/add_edit.php ---\n<?php\n$this->title = $header;\n?>\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <header style=\"margin-bottom:50px;\">\n            <h2 class=\"text-center\"><?= $header ?></h2>\n            <hr>\n        </header>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-10 col-md-offset-1\">\n            <div class=\"form\">\n                <?= $this->render('_form', ['form_model' => $form_model,]); ?>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n--- File: 690 # vagrant/config/vagrant-local.example.yml ---\n# Your personal GitHub token\ngithub_token: <your-personal-github-token>\n# Read more: https://github.com/blog/1509-personal-api-tokens\n# You can generate it here: https://github.com/settings/tokens\n\n# Guest OS timezone\ntimezone: Europe/London\n\n# Are we need check box updates for every 'vagrant up'?\nbox_check_update: false\n\n# Virtual machine name\nmachine_name: yii2basic\n\n# Virtual machine IP\nip: 192.168.83.137\n\n# Virtual machine CPU cores number\ncpus: 1\n\n# Virtual machine RAM\nmemory: 1024\n\n\n--- File: 479 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/GelfMockMessagePublisher.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Gelf\\MessagePublisher;\nuse Gelf\\Message;\n\nclass GelfMockMessagePublisher extends MessagePublisher\n{\n    public function publish(Message $message)\n    {\n        $this->lastMessage = $message;\n    }\n\n    public $lastMessage = null;\n}\n\n\n--- File: 660 # models/notariat/MsSkAdditional.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\n\nclass MsSkAdditional extends \\yii\\db\\ActiveRecord\n{\n    public static function tableName()\n    {\n        return 'MS_SK_ADDITIONAL';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat2');\n    }\n\n    public static function getSK($nomor_sk)\n    {\n        $data = MsSkAdditional::find()->where(['LIKE', 'DATA_SK', $nomor_sk])->one();\n        if($data)\n            return $data->ID_NOTARIS;\n        return false;\n    }\n}\n\n\n--- File: 605 # models/MKbli.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass MKbli extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%m_kbli}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    public static function getAktifitasUsaha($kode) {\n\n        return self::find()\n            ->select('kode, judul, uraian, tahun')\n            ->where( ['in', 'id_kbli', $kode] )\n            ->asArray()\n            ->all();\n    }\n}\n\n\n--- File: 613 # models/NotarisNpak.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass NotarisNpak extends ActiveRecord \n{\n    const NPAK_AKTIF = 1;\n    const NPAK_TIDAK_AKTIF = 0;\n    \n    public static function tableName()\n    {\n        return '{{%notaris_npak}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public static function checkNotarisNPAK( $id_notaris ) {\n    \treturn self::findOne(['id_notaris' => $id_notaris, 'npak' => self::NPAK_AKTIF]);\n    }\n}\n\n\n\n--- File: 575 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleFulfilledTestThenable.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass SimpleFulfilledTestThenable\n{\n    public function then(callable $onFulfilled = null, callable $onRejected = null, callable $onProgress = null)\n    {\n        try {\n            if ($onFulfilled) {\n                $onFulfilled('foo');\n            }\n\n            return new self();\n        } catch (\\Throwable $exception) {\n            return new RejectedPromise($exception);\n        } catch (\\Exception $exception) {\n            return new RejectedPromise($exception);\n        }\n    }\n}\n\n\n--- File: 708 # views/admin/settingExpired/add_edit.php ---\n<?php\n$this->title = $header;\n?>\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <header style=\"margin-bottom:50px;\">\n            <h2 class=\"text-center\"><?= $header ?></h2>\n            <hr>\n        </header>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-10 col-md-offset-1\">\n            <div class=\"form\">\n                <?= $this->render('_form', ['form_model' => $form_model,'isEdit' => isset($isEdit) ? $isEdit : null]); ?>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n--- File: 88 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Curl/CouldNotConnectToHost.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions\\Curl;\n\nuse Elasticsearch\\Common\\Exceptions\\ElasticsearchException;\nuse Elasticsearch\\Common\\Exceptions\\TransportException;\n\n/**\n * Class CouldNotConnectToHost\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\\Curl\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass CouldNotConnectToHost extends TransportException implements ElasticsearchException\n{\n}\n\n\n--- File: 90 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Curl/OperationTimeoutException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions\\Curl;\n\nuse Elasticsearch\\Common\\Exceptions\\ElasticsearchException;\nuse Elasticsearch\\Common\\Exceptions\\TransportException;\n\n/**\n * Class OperationTimeoutException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\\Curl\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n  */\nclass OperationTimeoutException extends TransportException implements ElasticsearchException\n{\n}\n\n\n--- File: 89 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Curl/CouldNotResolveHostException.php ---\n<?php\n\nnamespace Elasticsearch\\Common\\Exceptions\\Curl;\n\nuse Elasticsearch\\Common\\Exceptions\\ElasticsearchException;\nuse Elasticsearch\\Common\\Exceptions\\TransportException;\n\n/**\n * Class CouldNotResolveHostException\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\\Exceptions\\Curl\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n  */\nclass CouldNotResolveHostException extends TransportException implements ElasticsearchException\n{\n}\n\n\n--- File: 775 # views/site/error.php ---\n<?php\n\n/* @var $this yii\\web\\View */\n/* @var $name string */\n/* @var $message string */\n/* @var $exception Exception */\n\nuse yii\\helpers\\Html;\n\n$this->title = $name;\n?>\n<div class=\"site-error\">\n\n    <h1><?= Html::encode($this->title) ?></h1>\n\n    <div class=\"alert alert-danger\">\n        <?= nl2br(Html::encode($message)) ?>\n    </div>\n\n    <p>\n        The above error occurred while the Web server was processing your request.\n    </p>\n    <p>\n        Please contact us if you think this is a server error. Thank you.\n    </p>\n\n</div>\n\n\n--- File: 576 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleRejectedTestPromise.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass SimpleRejectedTestPromise implements PromiseInterface\n{\n    public function then(callable $onFulfilled = null, callable $onRejected = null, callable $onProgress = null)\n    {\n        try {\n            if ($onRejected) {\n                $onRejected('foo');\n            }\n\n            return new self();\n        } catch (\\Throwable $exception) {\n            return new RejectedPromise($exception);\n        } catch (\\Exception $exception) {\n            return new RejectedPromise($exception);\n        }\n    }\n}\n\n\n--- File: 574 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleFulfilledTestPromise.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass SimpleFulfilledTestPromise implements PromiseInterface\n{\n    public function then(callable $onFulfilled = null, callable $onRejected = null, callable $onProgress = null)\n    {\n        try {\n            if ($onFulfilled) {\n                $onFulfilled('foo');\n            }\n\n            return new self();\n        } catch (\\Throwable $exception) {\n            return new RejectedPromise($exception);\n        } catch (\\Exception $exception) {\n            return new RejectedPromise($exception);\n        }\n    }\n}\n\n\n--- File: 336 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/Exception/SeekException.php ---\n<?php\nnamespace GuzzleHttp\\Stream\\Exception;\n\nuse GuzzleHttp\\Stream\\StreamInterface;\n\n/**\n * Exception thrown when a seek fails on a stream.\n */\nclass SeekException extends \\RuntimeException\n{\n    private $stream;\n\n    public function __construct(StreamInterface $stream, $pos = 0, $msg = '')\n    {\n        $this->stream = $stream;\n        $msg = $msg ?: 'Could not seek the stream to position ' . $pos;\n        parent::__construct($msg);\n    }\n\n    /**\n     * @return StreamInterface\n     */\n    public function getStream()\n    {\n        return $this->stream;\n    }\n}\n\n\n--- File: 280 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/docsConfig.php ---\n<?php\n\ndeclare(strict_types = 1);\n\nuse Sami\\Sami;\nuse Symfony\\Component\\Finder\\Finder;\n\n$iterator = Finder::create()\n    ->files()\n    ->name('*Namespace.php')\n    ->name(\"Client.php\")\n    ->name(\"ClientBuilder.php\")\n    ->notName(\"AbstractNamespace.php\")\n    ->in(__DIR__.'/../src/');\n\nreturn new Sami($iterator, [\n    'theme'                => 'asciidoc',\n    'template_dirs'        => [__DIR__.'/docstheme/'],\n    'title'                => 'Elasticsearch-php',\n    'build_dir'            => __DIR__.'/../docs/build',\n    'cache_dir'            => __DIR__.'/cache/',\n]);\n\n\n--- File: 437 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/ProcessIdProcessor.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Adds value of getmypid into records\n *\n * @author Andreas H\u00f6rnicke\n */\nclass ProcessIdProcessor\n{\n    /**\n     * @param  array $record\n     * @return array\n     */\n    public function __invoke(array $record)\n    {\n        $record['extra']['process_id'] = getmypid();\n\n        return $record;\n    }\n}\n\n\n--- File: 485 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/MockRavenClient.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Raven_Client;\n\nclass MockRavenClient extends Raven_Client\n{\n    public function capture($data, $stack, $vars = null)\n    {\n        $data = array_merge($this->get_user_data(), $data);\n        $this->lastData = $data;\n        $this->lastStack = $stack;\n    }\n\n    public $lastData;\n    public $lastStack;\n}\n\n\n--- File: 108 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/BulkEndpointInterface.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints;\n\nuse Elasticsearch\\Serializers\\SerializerInterface;\nuse Elasticsearch\\Transport;\n\n/**\n * Interface BulkEndpointInterface\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ninterface BulkEndpointInterface\n{\n    /**\n     * Constructor\n     *\n     * @param SerializerInterface $serializer A serializer\n     */\n    public function __construct(SerializerInterface $serializer);\n}\n\n\n--- File: 534 # extensions/elasticSearch/vendor/react/promise/src/ExtendedPromiseInterface.php ---\n<?php\n\nnamespace React\\Promise;\n\ninterface ExtendedPromiseInterface extends PromiseInterface\n{\n    /**\n     * @return void\n     */\n    public function done(callable $onFulfilled = null, callable $onRejected = null, callable $onProgress = null);\n\n    /**\n     * @return ExtendedPromiseInterface\n     */\n    public function otherwise(callable $onRejected);\n\n    /**\n     * @return ExtendedPromiseInterface\n     */\n    public function always(callable $onFulfilledOrRejected);\n\n    /**\n     * @return ExtendedPromiseInterface\n     */\n    public function progress(callable $onProgress);\n}\n\n\n--- File: 58 # extensions/elasticSearch/vendor/composer/autoload_psr4.php ---\n<?php\n\n// autoload_psr4.php @generated by Composer\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'React\\\\Promise\\\\' => array($vendorDir . '/react/promise/src'),\n    'Psr\\\\Log\\\\' => array($vendorDir . '/psr/log/Psr/Log'),\n    'Monolog\\\\' => array($vendorDir . '/monolog/monolog/src/Monolog'),\n    'GuzzleHttp\\\\Stream\\\\' => array($vendorDir . '/guzzlehttp/streams/src'),\n    'GuzzleHttp\\\\Ring\\\\' => array($vendorDir . '/guzzlehttp/ringphp/src'),\n    'Elasticsearch\\\\' => array($vendorDir . '/elasticsearch/elasticsearch/src/Elasticsearch'),\n);\n\n\n--- File: 93 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/ConnectionPoolInterface.php ---\n<?php\n\nnamespace Elasticsearch\\ConnectionPool;\n\nuse Elasticsearch\\Connections\\ConnectionInterface;\n\n/**\n * ConnectionPoolInterface\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\ConnectionPool\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ninterface ConnectionPoolInterface\n{\n    /**\n     * @param bool $force\n     *\n     * @return ConnectionInterface\n     */\n    public function nextConnection($force = false);\n\n    /**\n     * @return void\n     */\n    public function scheduleCheck();\n}\n\n\n--- File: 590 # models/DataAnggota.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass DataAnggota extends ActiveRecord \n{\n    public function getJenisKelamin()\n    {\n        return $this->hasOne(JenisKelamin::className(),['id' => 'jenis_kelamin_id']);\n    }\n\n    public static function tableName()\n    {\n        return '{{%data_anggota}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public static function getAnggotaByID($kode) {\n\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->asArray()\n            ->all();\n    }\n}\n\n--- File: 541 # extensions/elasticSearch/vendor/react/promise/src/UnhandledRejectionException.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass UnhandledRejectionException extends \\RuntimeException\n{\n    private $reason;\n\n    public static function resolve($reason)\n    {\n        if ($reason instanceof \\Exception || $reason instanceof \\Throwable) {\n            return $reason;\n        }\n\n        return new static($reason);\n    }\n\n    public function __construct($reason)\n    {\n        $this->reason = $reason;\n\n        $message = sprintf('Unhandled Rejection: %s', json_encode($reason));\n\n        parent::__construct($message, 0);\n    }\n\n    public function getReason()\n    {\n        return $this->reason;\n    }\n}\n\n\n--- File: 28 # components/helper/TelegramHelper.php ---\n<?php\nnamespace app\\components\\helper;\n\nclass TelegramHelper {\n\n    public static function sendMessage($chatID, $message, $token) {\n        // echo \"sending message to \" . $chatID . \"\\n\";\n        $url = \"https://api.telegram.org/bot\" . $token . \"/sendMessage?chat_id=\" . $chatID;\n        $url = $url . \"&text=\" . urlencode($message);\n        $ch = curl_init();\n        $optArray = array(\n                CURLOPT_URL => $url,\n                CURLOPT_RETURNTRANSFER => true\n        );\n        curl_setopt_array($ch, $optArray);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        return $result;\n    }\n}\n?>\n\n--- File: 260 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/bootstrap.php ---\n<?php\n\ndeclare(strict_types = 1);\n\nerror_reporting(E_ALL | E_STRICT);\n\n// Set the default timezone. While this doesn't cause any tests to fail, PHP\n// complains if it is not set in 'date.timezone' of php.ini.\ndate_default_timezone_set('UTC');\n\n// Ensure that composer has installed all dependencies\nif (!file_exists(dirname(__DIR__) . '/composer.lock')) {\n    die(\"Dependencies must be installed using composer:\\n\\nphp composer.phar install --dev\\n\\n\"\n        . \"See http://getcomposer.org for help with installing composer\\n\");\n}\n\n// Include the composer autoloader\n$autoloader = require_once dirname(__DIR__) . '/vendor/autoload.php';\n\n\n--- File: 210 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Template/AbstractTemplateEndpoint.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Template;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class AbstractTemplateEndpoint\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\\Template\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nabstract class AbstractTemplateEndpoint extends AbstractEndpoint\n{\n    /** @var  string */\n    protected $name;\n\n    /**\n     * @param $name\n     *\n     * @return $this\n     */\n    public function setName($name)\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n}\n\n\n--- File: 426 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\FingersCrossed;\n\n/**\n * Interface for activation strategies for the FingersCrossedHandler.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n */\ninterface ActivationStrategyInterface\n{\n    /**\n     * Returns whether the given record activates the handler.\n     *\n     * @param  array   $record\n     * @return Boolean\n     */\n    public function isHandlerActivated(array $record);\n}\n\n\n--- File: 528 # extensions/elasticSearch/vendor/psr/log/Psr/Log/NullLogger.php ---\n<?php\n\nnamespace Psr\\Log;\n\n/**\n * This Logger can be used to avoid conditional log calls.\n *\n * Logging should always be optional, and if no logger is provided to your\n * library creating a NullLogger instance to have something to throw logs at\n * is a good way to avoid littering your code with `if ($this->logger) { }`\n * blocks.\n */\nclass NullLogger extends AbstractLogger\n{\n    /**\n     * Logs with an arbitrary level.\n     *\n     * @param mixed  $level\n     * @param string $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function log($level, $message, array $context = array())\n    {\n        // noop\n    }\n}\n\n\n--- File: 121 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Info.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints;\n\n/**\n * Class Info\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Info extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 128 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ping.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints;\n\n/**\n * Class Ping\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Ping extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'HEAD';\n    }\n}\n\n\n--- File: 511 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/GitProcessorTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\TestCase;\n\nclass GitProcessorTest extends TestCase\n{\n    /**\n     * @covers Monolog\\Processor\\GitProcessor::__invoke\n     */\n    public function testProcessor()\n    {\n        $processor = new GitProcessor();\n        $record = $processor($this->getRecord());\n\n        $this->assertArrayHasKey('git', $record['extra']);\n        $this->assertTrue(!is_array($record['extra']['git']['branch']));\n    }\n}\n\n\n--- File: 100 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/SelectorInterface.php ---\n<?php\n\nnamespace Elasticsearch\\ConnectionPool\\Selectors;\n\n/**\n * Class RandomSelector\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Connections\\Selectors\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ninterface SelectorInterface\n{\n    /**\n     * Perform logic to select a single ConnectionInterface instance from the array provided\n     *\n     * @param  \\Elasticsearch\\Connections\\ConnectionInterface[] $connections an array of ConnectionInterface instances to choose from\n     *\n     * @return \\Elasticsearch\\Connections\\ConnectionInterface\n     */\n    public function select($connections);\n}\n\n\n--- File: 707 # views/admin/settingExpired/_form.php ---\n<?php \nuse yii\\bootstrap\\ActiveForm;\nuse yii\\bootstrap\\Html;\n\n$form = ActiveForm::begin(); ?>\n    <?php if (!$isEdit) : ?>\n        <?= $form->field($form_model, 'nama')->label(\"Nama Variable Setting&nbsp;<span style='color:red'>*</span>\") ?>\n    <?php endif; ?>\n    <?= $form->field($form_model, 'keterangan')->label(\"Jenis Pengaturan&nbsp;<span style='color:red'>*</span>\") ?>\n    <?= $form->field($form_model, 'value')->label(\"Jumlah Hari&nbsp;<span style='color:red'>*</span>\") ?>\n    <div class=\"form-group\">\n        <?= Html::submitButton('Simpan', ['class' => 'btn btn-primary']) ?>\n        <?= Html::a('Batal', 'setting-exp', ['class' => 'btn btn-danger']) ?>\n    </div>\n<?php ActiveForm::end(); ?>\n\n--- File: 312 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Future/CompletedFutureArrayTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Ring\\Future;\n\nuse GuzzleHttp\\Ring\\Future\\CompletedFutureArray;\n\nclass CompletedFutureArrayTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testReturnsAsArray()\n    {\n        $f = new CompletedFutureArray(['foo' => 'bar']);\n        $this->assertEquals('bar', $f['foo']);\n        $this->assertFalse(isset($f['baz']));\n        $f['abc'] = '123';\n        $this->assertTrue(isset($f['abc']));\n        $this->assertEquals(['foo' => 'bar', 'abc' => '123'], iterator_to_array($f));\n        $this->assertEquals(2, count($f));\n        unset($f['abc']);\n        $this->assertEquals(1, count($f));\n        $this->assertEquals(['foo' => 'bar'], iterator_to_array($f));\n    }\n}\n\n\n--- File: 645 # models/forms/BlokirNamaForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse yii\\base\\Model;\n\nclass BlokirNamaForm extends Model \n{\n    public $blokir;\n    public $alasan;\n    public $m_jenis_koperasi_id;\n\n    const SCENARIO_MASTER_FORM = \"master\";\n\n    public function rules()\n    {\n        return [\n            [['m_jenis_koperasi_id'], 'required', 'message' => 'Jenis Koperasi tidak boleh kosong'],\n            [['blokir'], 'required', 'message' => 'Kalimat Blokir tidak boleh kosong'],\n            [['alasan'], 'required', 'message' => 'Keterangan tidak boleh kosong'],\n        ];\n    }\n\n    public function scenarios() {\n\n        return [\n            self::SCENARIO_MASTER_FORM => ['m_jenis_koperasi_id', 'blokir', 'alasan']\n        ];\n    }\n}\n\n--- File: 162 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/RemoteInfo.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cluster;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * RemoteInfo Health\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cluster\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RemoteInfo extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        return \"/_remote/info\";\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return [];\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 224 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Remote/Info.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Remote;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Info\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cluster\\Nodes\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Info extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        return \"/_remote/info\";\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array();\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 579 # mail/layouts/html.php ---\n<?php\nuse yii\\helpers\\Html;\n\n/* @var $this \\yii\\web\\View view component instance */\n/* @var $message \\yii\\mail\\MessageInterface the message being composed */\n/* @var $content string main view render result */\n?>\n<?php $this->beginPage() ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=<?= Yii::$app->charset ?>\" />\n    <title><?= Html::encode($this->title) ?></title>\n    <?php $this->head() ?>\n</head>\n<body>\n    <?php $this->beginBody() ?>\n    <?= $content ?>\n    <?php $this->endBody() ?>\n</body>\n</html>\n<?php $this->endPage() ?>\n\n\n--- File: 644 # models/forms/BlokirKalimatForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse yii\\base\\Model;\n\nclass BlokirKalimatForm extends Model \n{\n    public $blokir;\n    public $alasan;\n    public $m_jenis_koperasi_id;\n\n    const SCENARIO_MASTER_FORM = \"master\";\n\n    public function rules()\n    {\n        return [\n            [['m_jenis_koperasi_id'], 'required', 'message' => 'Jenis Koperasi tidak boleh kosong'],\n            [['blokir'], 'required', 'message' => 'Kalimat Blokir tidak boleh kosong'],\n            [['alasan'], 'required', 'message' => 'Keterangan tidak boleh kosong'],\n        ];\n    }\n\n    public function scenarios() {\n\n        return [\n            self::SCENARIO_MASTER_FORM => ['m_jenis_koperasi_id', 'blokir', 'alasan']\n        ];\n    }\n}\n\n--- File: 617 # models/SK.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass SK extends ActiveRecord \n{\n    const SK_PENDIRIAN = 1;\n    const SK_PERUBAHAN = 5;\n    const SP_PERUBAHAN = 7;\n    const SK_PEMBUBARAN = 6;\n\n    const SK_PENDIRIAN_DESC = 'sk_pendirian';\n    const SK_PERUBAHAN_DESC = 'sk_perubahan';\n    const SP_PERUBAHAN_DESC = 'sp_perubahan';\n    const SK_PEMBUBARAN_DESC = 'sk_pembubaran';\n    \n    public static function tableName()\n    {\n        return '{{%sk}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getDataTransaksi()\n    {\n        return $this->hasOne(TransaksiKoperasi::className(), ['id' => 't_koperasi_id']);\n    }\n}\n\n--- File: 655 # models/forms/UserDinasDataForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse Yii;\n\nclass UserDinasDataForm extends yii\\base\\Model\n{\n    public $nama;\n    public $jenis;\n    public $provinsi_id;\n    public $kab_kota_id;\n    public $status_aktif;\n\n    /**\n     * @inheritdoc\n     */\n    public function rules()\n    {\n        return [\n                [['nama', 'jenis', 'provinsi_id', 'kab_kota_id', 'status_aktif'], 'safe'],\n                [['nama', 'jenis' , 'provinsi_id'], 'required', 'message' => '{attribute} tidak boleh kosong.'],\n                ['kab_kota_id', 'required',\n                  'message' => '{attribute} tidak boleh kosong.', 'when' => function($model) {\n                    return $model->provinsi_id == '2';\n                }]\n        ];\n    }\n}\n\n\n--- File: 489 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/NullHandlerTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\TestCase;\nuse Monolog\\Logger;\n\n/**\n * @covers Monolog\\Handler\\NullHandler::handle\n */\nclass NullHandlerTest extends TestCase\n{\n    public function testHandle()\n    {\n        $handler = new NullHandler();\n        $this->assertTrue($handler->handle($this->getRecord()));\n    }\n\n    public function testHandleLowerLevelRecord()\n    {\n        $handler = new NullHandler(Logger::WARNING);\n        $this->assertFalse($handler->handle($this->getRecord(Logger::DEBUG)));\n    }\n}\n\n\n--- File: 17 # components/NpakHelper.php ---\n<?php\n\nnamespace app\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\NotarisNpak;\nuse app\\models\\Setting;\n\nclass NpakHelper extends Component\n{\n\n    public static function checkNotarisNpak($idNotaris)\n    {\n        $flagPengecekanNpak = Setting::getValue('pengecekan_npak');\n        if ($flagPengecekanNpak == 0) {\n            return true;\n        }\n\n        return self::isNpak($idNotaris);\n    }\n\n    public static function isNpak($idNotaris) {\n        $notarisNpak = NotarisNpak::checkNotarisNPAK($idNotaris);\n        return $notarisNpak ? true : false;\n    }\n\n    public static function isPengecekanNpak() {\n        $flagPengecekanNpak = Setting::getValue('pengecekan_npak');\n        return $flagPengecekanNpak == 0 ? false : true;\n    }\n}\n\n\n--- File: 466 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/CouchDBHandlerTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\TestCase;\nuse Monolog\\Logger;\n\nclass CouchDBHandlerTest extends TestCase\n{\n    public function testHandle()\n    {\n        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \\stdClass, 'foo' => 34));\n\n        $handler = new CouchDBHandler();\n\n        try {\n            $handler->handle($record);\n        } catch (\\RuntimeException $e) {\n            $this->markTestSkipped('Could not connect to couchdb server on http://localhost:5984');\n        }\n    }\n}\n\n\n--- File: 519 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/UidProcessorTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\TestCase;\n\nclass UidProcessorTest extends TestCase\n{\n    /**\n     * @covers Monolog\\Processor\\UidProcessor::__invoke\n     */\n    public function testProcessor()\n    {\n        $processor = new UidProcessor();\n        $record = $processor($this->getRecord());\n        $this->assertArrayHasKey('uid', $record['extra']);\n    }\n\n    public function testGetUid()\n    {\n        $processor = new UidProcessor(10);\n        $this->assertEquals(10, strlen($processor->getUid()));\n    }\n}\n\n\n--- File: 428 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\FingersCrossed;\n\nuse Monolog\\Logger;\n\n/**\n * Error level based activation strategy.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n */\nclass ErrorLevelActivationStrategy implements ActivationStrategyInterface\n{\n    private $actionLevel;\n\n    public function __construct($actionLevel)\n    {\n        $this->actionLevel = Logger::toMonologLevel($actionLevel);\n    }\n\n    public function isHandlerActivated(array $record)\n    {\n        return $record['level'] >= $this->actionLevel;\n    }\n}\n\n\n--- File: 298 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureArray.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Future;\n\n/**\n * Represents a future array value that when dereferenced returns an array.\n */\nclass FutureArray implements FutureArrayInterface\n{\n    use MagicFutureTrait;\n\n    public function offsetExists($offset)\n    {\n        return isset($this->_value[$offset]);\n    }\n\n    public function offsetGet($offset)\n    {\n        return $this->_value[$offset];\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        $this->_value[$offset] = $value;\n    }\n\n    public function offsetUnset($offset)\n    {\n        unset($this->_value[$offset]);\n    }\n\n    public function count()\n    {\n        return count($this->_value);\n    }\n\n    public function getIterator()\n    {\n        return new \\ArrayIterator($this->_value);\n    }\n}\n\n\n--- File: 589 # models/Counter.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass Counter extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{counting}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function beforeSave($insert)\n    {\n        if (!parent::beforeSave($insert)) {\n            return false;\n        }\n\n        $this->last_timestamp = Date(\"Y-m-d H:i:s\");\n\n        return true;\n    }\n\n    public static function resetNumber($id) {\n        $data = self::findOne($id);\n\n        if(!$data) {\n            return false;\n        }\n\n        $data->nomor = 0;\n        \n        if(!$data->save(false)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n--- File: 632 # models/ChecklistPerbaikanForm.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\nuse yii\\base\\Model;\n\nclass ChecklistPerbaikanForm extends Model\n{\n    public $m_perbaikan_id;\n\n    public static function tableName()\n    {\n        return '{{%c_perubahan}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function rules()\n    {\n        return [\n            [['m_perbaikan_id'], 'atLeastOne']\n        ];\n    }\n\n    public function atLeastOne($attribute, $params)\n    {\n\n        foreach ($this->m_perbaikan_id as $key => $value) {\n\n            if (! empty($value)) {\n\n                return true;\n            }\n        }\n\n        $this->addError($attribute, 'At least 1 of the field must be filled up properly');\n\n        return false;\n    }\n}\n\n\n--- File: 435 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/MemoryUsageProcessor.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Injects memory_get_usage in all records\n *\n * @see Monolog\\Processor\\MemoryProcessor::__construct() for options\n * @author Rob Jensen\n */\nclass MemoryUsageProcessor extends MemoryProcessor\n{\n    /**\n     * @param  array $record\n     * @return array\n     */\n    public function __invoke(array $record)\n    {\n        $bytes = memory_get_usage($this->realUsage);\n        $formatted = $this->formatBytes($bytes);\n\n        $record['extra']['memory_usage'] = $formatted;\n\n        return $record;\n    }\n}\n\n\n--- File: 144 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Help.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Help\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Help extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'help',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 361 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/FormatterInterface.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Interface for formatters\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\ninterface FormatterInterface\n{\n    /**\n     * Formats a log record.\n     *\n     * @param  array $record A record to format\n     * @return mixed The formatted record\n     */\n    public function format(array $record);\n\n    /**\n     * Formats a set of log records.\n     *\n     * @param  array $records A set of records to format\n     * @return mixed The formatted set of records\n     */\n    public function formatBatch(array $records);\n}\n\n\n--- File: 433 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/MemoryPeakUsageProcessor.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Injects memory_get_peak_usage in all records\n *\n * @see Monolog\\Processor\\MemoryProcessor::__construct() for options\n * @author Rob Jensen\n */\nclass MemoryPeakUsageProcessor extends MemoryProcessor\n{\n    /**\n     * @param  array $record\n     * @return array\n     */\n    public function __invoke(array $record)\n    {\n        $bytes = memory_get_peak_usage($this->realUsage);\n        $formatted = $this->formatBytes($bytes);\n\n        $record['extra']['memory_peak_usage'] = $formatted;\n\n        return $record;\n    }\n}\n\n\n--- File: 98 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/RandomSelector.php ---\n<?php\n\nnamespace Elasticsearch\\ConnectionPool\\Selectors;\n\nuse Elasticsearch\\Connections\\ConnectionInterface;\n\n/**\n * Class RandomSelector\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Connections\\Selectors\\RandomSelector\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RandomSelector implements SelectorInterface\n{\n    /**\n     * Select a random connection from the provided array\n     *\n     * @param  ConnectionInterface[] $connections an array of ConnectionInterface instances to choose from\n     *\n     * @return \\Elasticsearch\\Connections\\ConnectionInterface\n     */\n    public function select($connections)\n    {\n        return $connections[array_rand($connections)];\n    }\n}\n\n\n--- File: 258 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Serializers/SerializerInterface.php ---\n<?php\n\nnamespace Elasticsearch\\Serializers;\n\n/**\n * Interface SerializerInterface\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Serializers\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ninterface SerializerInterface\n{\n    /**\n     * Serialize a complex data-structure into a json encoded string\n     *\n     * @param mixed   The data to encode\n     *\n     * @return string\n     */\n    public function serialize($data);\n\n    /**\n     * Deserialize json encoded string into an associative array\n     *\n     * @param string $data    JSON encoded string\n     * @param array  $headers Response Headers\n     *\n     * @return array\n     */\n    public function deserialize($data, $headers);\n}\n\n\n--- File: 0 # codeception.yml ---\nactor: Tester\npaths:\n    tests: tests\n    log: tests/_output\n    data: tests/_data\n    helpers: tests/_support\nsettings:\n    bootstrap: _bootstrap.php\n    memory_limit: 1024M\n    colors: true\nmodules:\n    config:\n        Yii2:\n            configFile: 'config/test.php'\n            cleanup: false\n\n# To enable code coverage:\n#coverage:\n#    #c3_url: http://localhost:8080/index-test.php/\n#    enabled: true\n#    #remote: true\n#    #remote_config: '../codeception.yml'\n#    whitelist:\n#        include:\n#            - models/*\n#            - controllers/*\n#            - commands/*\n#            - mail/*\n#    blacklist:\n#        include:\n#            - assets/*\n#            - config/*\n#            - runtime/*\n#            - vendor/*\n#            - views/*\n#            - web/*\n#            - tests/*\n\n\n--- File: 5 # commands/HelloController.php ---\n<?php\n/**\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n */\n\nnamespace app\\commands;\n\nuse yii\\console\\Controller;\nuse yii\\console\\ExitCode;\n\n/**\n * This command echoes the first argument that you have entered.\n *\n * This command is provided as an example for you to learn how to create console commands.\n *\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\nclass HelloController extends Controller\n{\n    /**\n     * This command echoes what you have entered as the message.\n     * @param string $message the message to be echoed.\n     * @return int Exit code\n     */\n    public function actionIndex($message = 'hello world')\n    {\n        echo $message . \"\\n\";\n\n        return ExitCode::OK;\n    }\n}\n\n\n--- File: 25 # components/helper/FormatDate.php ---\n<?php \nnamespace app\\components\\helper;\n\nuse Yii;\nuse yii\\base\\Component;\nuse yii\\helpers\\VarDumper;\n\nclass FormatDate extends Component \n{\n\tpublic static $instance = null;\n\n\tpublic static function formatDateIndonesia($date)\n    {\n        $result = '';\n        if($date) {\n            $BulanIndo = array(\"Januari\", \"Februari\", \"Maret\", \"April\", \"Mei\", \"Juni\", \"Juli\", \"Agustus\", \"September\", \"Oktober\", \"November\", \"Desember\");\n            $tahun = substr($date, 0, 4);\n            $bulan = substr($date, 5, 2);\n            $tgl   = substr($date, 8, 2);\n            if(array_key_exists((int)$bulan-1, $BulanIndo)) {\n                $result = $tgl . \" \" . $BulanIndo[(int)$bulan-1] . \" \". $tahun;\n            } else {\n                $result = \"-\";\n            }\n        }\n        return $result;\n    }\n}\n\n--- File: 66 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/EmptyLogger.php ---\n<?php\n\nnamespace Elasticsearch\\Common;\n\nuse Psr\\Log\\AbstractLogger;\nuse Psr\\Log\\LoggerInterface;\n\n/**\n * Class EmptyLogger\n *\n * Logger that doesn't do anything.  Similar to Monolog's NullHandler,\n * but avoids the overhead of partially loading Monolog\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Common\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass EmptyLogger extends AbstractLogger implements LoggerInterface\n{\n    /**\n     * Logs with an arbitrary level.\n     *\n     * @param mixed $level\n     * @param string $message\n     * @param array $context\n     *\n     * @return null\n     */\n    public function log($level, $message, array $context = array())\n    {\n        return;\n    }\n}\n\n\n--- File: 161 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/PendingTasks.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cluster;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Pendingtasks\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cluster\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass PendingTasks extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cluster/pending_tasks\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 253 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/RemoteNamespace.php ---\n<?php\n\nnamespace Elasticsearch\\Namespaces;\n\nuse Elasticsearch\\Endpoints\\Remote\\Info;\n\n/**\n * Class RemoteNamespace\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Namespaces\\TasksNamespace\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RemoteNamespace extends AbstractNamespace\n{\n    /**\n     * @param $params array Associative array of parameters\n     *\n     * @return array\n     */\n    public function info($params = array())\n    {\n        /** @var callback $endpointBuilder */\n        $endpointBuilder = $this->endpoints;\n\n        /** @var Info $endpoint */\n        $endpoint = $endpointBuilder('Remote\\Info');\n        $endpoint->setParams($params);\n\n        return $this->performRequest($endpoint);\n    }\n}\n\n\n--- File: 439 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Adds a tags array into record\n *\n * @author Martijn Riemers\n */\nclass TagProcessor\n{\n    private $tags;\n\n    public function __construct(array $tags = array())\n    {\n        $this->setTags($tags);\n    }\n\n    public function addTags(array $tags = array())\n    {\n        $this->tags = array_merge($this->tags, $tags);\n    }\n\n    public function setTags(array $tags = array())\n    {\n        $this->tags = $tags;\n    }\n\n    public function __invoke(array $record)\n    {\n        $record['extra']['tags'] = $this->tags;\n\n        return $record;\n    }\n}\n\n\n--- File: 29 # components/helper/EncryptHelper.php ---\n<?php\n\nnamespace app\\components\\helper;\n\nclass EncryptHelper {\n\n    /**\n     * Default symmetric key for encoding IDs in URLs.\n     * Keep consistent across controllers and views that need encrypted params.\n     */\n    const DEFAULT_KEY = 'D0c0spArT@n';\n\n    public static function encrypt($data, $key, $method = \"AES-128-ECB\") {\n        return openssl_encrypt($data, $method, $key);\n    }\n\n    public static function decrypt($data, $key, $method = \"AES-128-ECB\") {\n        return openssl_decrypt($data, $method, $key);\n    }\n\n    public static function encryptWithDefaultKey($data, $method = \"AES-128-ECB\") {\n        return self::encrypt($data, self::DEFAULT_KEY, $method);\n    }\n\n    public static function decryptWithDefaultKey($data, $method = \"AES-128-ECB\") {\n        return self::decrypt($data, self::DEFAULT_KEY, $method);\n    }\n}\n\n\n--- File: 219 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/ProcessorGrok.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Ingest\\Pipeline;\n\nuse Elasticsearch\\Common\\Exceptions;\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class ProcessorGrok\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Ingest\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass ProcessorGrok extends AbstractEndpoint\n{\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        return \"/_ingest/processor/grok\";\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return [];\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 661 # models/notariat/Negara.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\nuse yii\\helpers\\ArrayHelper;\n\nclass Negara extends \\yii\\db\\ActiveRecord\n{\n\n    public static function tableName()\n    {\n        return 'NEGARA';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat2');\n    }\n\n    public static function getKodeNegaraById($id)\n    {\n        $data = self::findOne($id);\n\n        if(!$data) {\n            return null;\n        }\n\n        return $data->KODE;\n    }\n\n    public static function getListNegara()\n    {\n        $data = self::find()\n            ->orderBy('NEGARA ASC')\n            ->all();\n\n        if(!$data) {\n            return [];\n        }\n\n        return ArrayHelper::map($data, 'id', 'NEGARA');\n    }\n\n}\n\n?>\n\n--- File: 701 # views/admin/profilLengkap.php ---\n<?php \n\tuse yii\\grid\\GridView;\n\tuse yii\\helpers\\Html;\n\tuse yii\\helpers\\Url;\n\tuse app\\components\\helper\\loginChecker;\n\tuse app\\models\\TransaksiKoperasi;\n\n\tforeach ($trans as $raw) {\n\n\t\tif ( $raw->jenis_transaksi_id == 2 ) {\n\n\t\t\t$data = TransaksiKoperasi::getPreviewData( $raw->id );\n\n            $data['confirmationOnly'] = false;\n            $data['isAdmin'] = false;\n            \n            if ( $data['is_finish'] == \"0\" ) {\n\n                // Yii::$app->session->setFlash('confirmationOnly', 'yes');\n                $data['confirmationOnly'] = true;\n            }\n            else if ( Yii::$app->user->identity->username == \"notaris-sabh\" ) {\n                $data['isAdmin'] = true;\n            }\n\n            $data['document_title'] = 'Pengesahan Pendirian Koperasi';\n\n\t\t\techo $this->render('../pendirian/preview', $data);\n\t\t}\n\t}\n?>\n\n--- File: 497 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SamplingHandlerTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\TestCase;\n\n/**\n * @covers Monolog\\Handler\\SamplingHandler::handle\n */\nclass SamplingHandlerTest extends TestCase\n{\n    public function testHandle()\n    {\n        $testHandler = new TestHandler();\n        $handler = new SamplingHandler($testHandler, 2);\n        for ($i = 0; $i < 10000; $i++) {\n            $handler->handle($this->getRecord());\n        }\n        $count = count($testHandler->getRecords());\n        // $count should be half of 10k, so between 4k and 6k\n        $this->assertLessThan(6000, $count);\n        $this->assertGreaterThan(4000, $count);\n    }\n}\n\n\n--- File: 516 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\TestCase;\n\nclass ProcessIdProcessorTest extends TestCase\n{\n    /**\n     * @covers Monolog\\Processor\\ProcessIdProcessor::__invoke\n     */\n    public function testProcessor()\n    {\n        $processor = new ProcessIdProcessor();\n        $record = $processor($this->getRecord());\n        $this->assertArrayHasKey('process_id', $record['extra']);\n        $this->assertInternalType('int', $record['extra']['process_id']);\n        $this->assertGreaterThan(0, $record['extra']['process_id']);\n        $this->assertEquals(getmypid(), $record['extra']['process_id']);\n    }\n}\n\n\n--- File: 325 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/LazyOpenStream.php ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\n/**\n * Lazily reads or writes to a file that is opened only after an IO operation\n * take place on the stream.\n */\nclass LazyOpenStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    /** @var string File to open */\n    private $filename;\n\n    /** @var string $mode */\n    private $mode;\n\n    /**\n     * @param string $filename File to lazily open\n     * @param string $mode     fopen mode to use when opening the stream\n     */\n    public function __construct($filename, $mode)\n    {\n        $this->filename = $filename;\n        $this->mode = $mode;\n    }\n\n    /**\n     * Creates the underlying stream lazily when required.\n     *\n     * @return StreamInterface\n     */\n    protected function createStream()\n    {\n        return Stream::factory(Utils::open($this->filename, $this->mode));\n    }\n}\n\n\n--- File: 296 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/CompletedFutureArray.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Future;\n\n/**\n * Represents a future array that has been completed successfully.\n */\nclass CompletedFutureArray extends CompletedFutureValue implements FutureArrayInterface\n{\n    public function __construct(array $result)\n    {\n        parent::__construct($result);\n    }\n\n    public function offsetExists($offset)\n    {\n        return isset($this->result[$offset]);\n    }\n\n    public function offsetGet($offset)\n    {\n        return $this->result[$offset];\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        $this->result[$offset] = $value;\n    }\n\n    public function offsetUnset($offset)\n    {\n        unset($this->result[$offset]);\n    }\n\n    public function count()\n    {\n        return count($this->result);\n    }\n\n    public function getIterator()\n    {\n        return new \\ArrayIterator($this->result);\n    }\n}\n\n\n--- File: 171 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Settings/Get.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cluster\\Settings;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Get\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cluster\\Settings\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\n\nclass Get extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cluster/settings\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'flat_settings',\n            'master_timeout',\n            'timeout',\n            'include_defaults'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 146 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Master.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Master\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Master extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/master\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 586 # models/ChecklistPerubahanForm.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\base\\Model;\n\nuse app\\models\\MasterPerubahan;\n\n/**\n * LoginForm is the model behind the login form.\n *\n * @property User|null $user This property is read-only.\n *\n */\nclass ChecklistPerubahanForm extends Model\n{\n\tpublic $m_perubahan_id;\n\n    public static function tableName()\n    {\n        return '{{%c_perubahan}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function rules()\n    {\n        return [\n        \t[['m_perubahan_id'], 'atLeastOne']\n        ];\n    }\n\n    public function atLeastOne( $attribute, $params ) {\n\n    \tforeach ($this->m_perubahan_id as $key => $value) {\n\n    \t\tif ( ! empty( $value ) ) {\n\n    \t\t\treturn true;\n    \t\t}\n    \t}\n\n    \t$this->addError($attribute, 'At least 1 of the field must be filled up properly');\n\n    \treturn false;\n    }\n}\n\n--- File: 150 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Plugins.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Health\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Plugins extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/plugins\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 562 # extensions/elasticSearch/vendor/react/promise/tests/PromiseAdapter/CallbackPromiseAdapter.php ---\n<?php\n\nnamespace React\\Promise\\PromiseAdapter;\n\nuse React\\Promise;\n\nclass CallbackPromiseAdapter implements PromiseAdapterInterface\n{\n    private $callbacks;\n\n    public function __construct(array $callbacks)\n    {\n        $this->callbacks = $callbacks;\n    }\n\n    public function promise()\n    {\n        return call_user_func_array($this->callbacks['promise'], func_get_args());\n    }\n\n    public function resolve()\n    {\n        return call_user_func_array($this->callbacks['resolve'], func_get_args());\n    }\n\n    public function reject()\n    {\n        return call_user_func_array($this->callbacks['reject'], func_get_args());\n    }\n\n    public function notify()\n    {\n        return call_user_func_array($this->callbacks['notify'], func_get_args());\n    }\n\n    public function settle()\n    {\n        return call_user_func_array($this->callbacks['settle'], func_get_args());\n    }\n}\n\n\n--- File: 147 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/NodeAttrs.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class NodeAttrs\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass NodeAttrs extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/nodeattrs\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 560 # extensions/elasticSearch/vendor/react/promise/tests/TestCase.php ---\n<?php\n\nnamespace React\\Promise;\n\nclass TestCase extends \\PHPUnit_Framework_TestCase\n{\n    public function expectCallableExactly($amount)\n    {\n        $mock = $this->createCallableMock();\n        $mock\n            ->expects($this->exactly($amount))\n            ->method('__invoke');\n\n        return $mock;\n    }\n\n    public function expectCallableOnce()\n    {\n        $mock = $this->createCallableMock();\n        $mock\n            ->expects($this->once())\n            ->method('__invoke');\n\n        return $mock;\n    }\n\n    public function expectCallableNever()\n    {\n        $mock = $this->createCallableMock();\n        $mock\n            ->expects($this->never())\n            ->method('__invoke');\n\n        return $mock;\n    }\n\n    public function createCallableMock()\n    {\n        return $this\n            ->getMockBuilder('React\\\\Promise\\Stub\\CallableStub')\n            ->getMock();\n    }\n}\n\n\n--- File: 143 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Health.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Health\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Health extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/health\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'ts',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 148 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Nodes.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Nodes\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Nodes extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/nodes\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'full_id',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 149 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/PendingTasks.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Pendingtasks\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass PendingTasks extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/pending_tasks\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 152 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Repositories.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Repositories\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Repositories extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/repositories\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 169 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/Shutdown.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cluster\\Nodes;\n\n/**\n * Class Shutdown\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cluster\\Nodes\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Shutdown extends AbstractNodesEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $node_id = $this->nodeID;\n        $uri   = \"/_shutdown\";\n\n        if (isset($node_id) === true) {\n            $uri = \"/_cluster/nodes/$node_id/_shutdown\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'delay',\n            'exit',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'POST';\n    }\n}\n\n\n--- File: 94 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/SimpleConnectionPool.php ---\n<?php\n\nnamespace Elasticsearch\\ConnectionPool;\n\nuse Elasticsearch\\ConnectionPool\\Selectors\\SelectorInterface;\nuse Elasticsearch\\Connections\\Connection;\nuse Elasticsearch\\Connections\\ConnectionFactoryInterface;\n\nclass SimpleConnectionPool extends AbstractConnectionPool implements ConnectionPoolInterface\n{\n\n    /**\n     * {@inheritdoc}\n     */\n    public function __construct($connections, SelectorInterface $selector, ConnectionFactoryInterface $factory, $connectionPoolParams)\n    {\n        parent::__construct($connections, $selector, $factory, $connectionPoolParams);\n    }\n\n    /**\n     * @param bool $force\n     *\n     * @return Connection\n     * @throws \\Elasticsearch\\Common\\Exceptions\\NoNodesAvailableException\n     */\n    public function nextConnection($force = false)\n    {\n        return $this->selector->select($this->connections);\n    }\n\n    public function scheduleCheck()\n    {\n    }\n}\n\n\n--- File: 267 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/SniffingConnectionPoolIntegrationTest.php ---\n<?php\n\ndeclare(strict_types = 1);\n\nnamespace Elasticsearch\\Tests\\ConnectionPool;\n\nuse Elasticsearch\\ClientBuilder;\nuse Elasticsearch\\ConnectionPool\\SniffingConnectionPool;\n\n/**\n * Class SniffingConnectionPoolIntegrationTest\n *\n * @category   Tests\n * @package    Elasticsearch\n * @subpackage Tests/SniffingConnectionPoolTest\n * @author     Zachary Tong <zachary.tong@elasticsearch.com>\n * @license    http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link       http://elasticsearch.org\n */\nclass SniffingConnectionPoolIntegrationTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testSniff()\n    {\n        $client = ClientBuilder::create()\n            ->setHosts([$_SERVER['ES_TEST_HOST']])\n            ->setConnectionPool(SniffingConnectionPool::class, ['sniffingInterval' => -10])\n            ->build();\n\n        $pinged = $client->ping();\n        $this->assertTrue($pinged);\n    }\n}\n\n\n--- File: 302 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/MagicFutureTrait.php ---\n<?php\nnamespace GuzzleHttp\\Ring\\Future;\n\n/**\n * Implements common future functionality that is triggered when the result\n * property is accessed via a magic __get method.\n *\n * @property mixed $_value Actual data used by the future. Accessing this\n *     property will cause the future to block if needed.\n */\ntrait MagicFutureTrait\n{\n    use BaseFutureTrait;\n\n    /**\n     * This function handles retrieving the dereferenced result when requested.\n     *\n     * @param string $name Should always be \"data\" or an exception is thrown.\n     *\n     * @return mixed Returns the dereferenced data.\n     * @throws \\RuntimeException\n     * @throws \\GuzzleHttp\\Ring\\Exception\\CancelledException\n     */\n    public function __get($name)\n    {\n        if ($name !== '_value') {\n            throw new \\RuntimeException(\"Class has no {$name} property\");\n        }\n\n        return $this->_value = $this->wait();\n    }\n}\n\n\n--- File: 341 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/DroppingStreamTest.php ---\n<?php\nnamespace GuzzleHttp\\Tests\\Stream;\n\nuse GuzzleHttp\\Stream\\BufferStream;\nuse GuzzleHttp\\Stream\\DroppingStream;\n\nclass DroppingStreamTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testBeginsDroppingWhenSizeExceeded()\n    {\n        $stream = new BufferStream();\n        $drop = new DroppingStream($stream, 5);\n        $this->assertEquals(3, $drop->write('hel'));\n        $this->assertFalse($drop->write('lo'));\n        $this->assertEquals(5, $drop->getSize());\n        $this->assertEquals('hello', $drop->read(5));\n        $this->assertEquals(0, $drop->getSize());\n        $drop->write('12345678910');\n        $this->assertEquals(5, $stream->getSize());\n        $this->assertEquals(5, $drop->getSize());\n        $this->assertEquals('12345', (string) $drop);\n        $this->assertEquals(0, $drop->getSize());\n        $drop->write('hello');\n        $this->assertFalse($drop->write('test'));\n    }\n}\n\n\n--- File: 780 # views/bakum-verifikator/_perbaikan_data_perbaikan.php ---\n<?php\nuse yii\\helpers\\Html;\nuse yii\\helpers\\Url;\nuse app\\components\\helper\\PerbaikanDataHelper;\n\n/* Expects: $model, $jenisPerbaikan */\n?>\n<div class=\"fieldset\">\n  <span class=\"legend\">Data Perbaikan</span>\n  <div class=\"kv-row\">\n    <div class=\"label\">Jenis Perbaikan</div>\n    <div class=\"value\"><?php echo $jenisPerbaikan ?></div>\n  </div>\n\n  <?php foreach (PerbaikanDataHelper::getFileAttributes($model) as $attribute):\n    $label = $model->getAttributeLabel($attribute);\n    $has   = !empty($model->$attribute);\n  ?>\n    <div class=\"kv-row\">\n      <div class=\"label\"><?php echo Html::encode($label) ?></div>\n      <div class=\"value\">\n        <?php if ($has): ?>\n          <a class=\"btn-doc\" target=\"_blank\" href=\"<?php echo Url::to([$model->$attribute], true) ?>\">Lihat Dokumen</a>\n        <?php else: ?><span class=\"muted\">Tidak ada</span><?php endif; ?>\n      </div>\n    </div>\n  <?php endforeach; ?>\n</div>\n\n\n\n--- File: 156 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Tasks.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Tasks\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Tasks extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        return \"/_cat/tasks\";\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'format',\n            'node_id',\n            'actions',\n            'detailed',\n            'parent_node',\n            'parent_task',\n            'h',\n            'help',\n            'v',\n            's'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 194 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Alias/AbstractAliasEndpoint.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Alias;\n\nuse Elasticsearch\\Common\\Exceptions\\InvalidArgumentException;\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class AbstractAliasEndpoint\n *\n * @category Elasticsearch\n * @package Elasticsearch\\Endpoints\\Indices\\Alias\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nabstract class AbstractAliasEndpoint extends AbstractEndpoint\n{\n    /** @var null|string */\n    protected $name = null;\n\n    /**\n     * @param $name\n     *\n     * @throws \\Elasticsearch\\Common\\Exceptions\\InvalidArgumentException\n     *\n     * @return $this\n     */\n    public function setName($name)\n    {\n        if (is_string($name) !== true) {\n            throw new InvalidArgumentException('Name must be a string');\n        }\n        $this->name = urlencode($name);\n\n        return $this;\n    }\n}\n\n\n--- File: 624 # models/TransaksiPembubaran.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse app\\models\\User;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\AlasanPembubaran;\nuse app\\models\\TransaksiKoperasi;\n\n\nclass TransaksiPembubaran extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%t_pembubaran}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getDataTransaksi() {\n        return $this->hasOne(TransaksiKoperasi::className(), ['id' => 'id_transaksi']);\n    }\n\n    public function getAlasanBubar() {\n        return $this->hasOne(AlasanPembubaran::className(), ['id' => 'alasan']);\n    }\n\n    public function getDataCreatedUser() {\n        return $this->hasOne(User::className(), ['id' => 'created_by']);\n    }\n\n    public function getBakumKBLI() {\n        return $this->hasOne(KBLIBakum::className(),['id_kbli' => 'kbli_id']);\n    }\n}\n\n--- File: 261 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientBuilderTest.php ---\n<?php\n\ndeclare(strict_types = 1);\n\nnamespace Elasticsearch\\Tests;\n\nuse Elasticsearch\\ClientBuilder;\nuse Elasticsearch\\Common\\Exceptions\\InvalidArgumentException;\nuse PHPUnit\\Framework\\TestCase;\n\nclass ClientBuilderTest extends TestCase\n{\n\n    public function testClientBuilderThrowsExceptionForIncorrectLoggerClass()\n    {\n        $this->expectException(InvalidArgumentException::class);\n        $this->expectExceptionMessage('$logger must implement \\Psr\\Log\\LoggerInterface!');\n\n        ClientBuilder::create()->setLogger(new \\Elasticsearch\\Tests\\ClientBuilder\\DummyLogger());\n    }\n\n    public function testClientBuilderThrowsExceptionForIncorrectTracerClass()\n    {\n        $this->expectException(InvalidArgumentException::class);\n        $this->expectExceptionMessage('$tracer must implement \\Psr\\Log\\LoggerInterface!');\n\n        ClientBuilder::create()->setTracer(new \\Elasticsearch\\Tests\\ClientBuilder\\DummyLogger());\n    }\n}\n\n\n--- File: 262 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientIntegrationTests.php ---\n<?php\n\ndeclare(strict_types = 1);\n\nnamespace Elasticsearch\\Tests;\n\nuse ElasticSearch;\n\n/**\n * Class ClientTest\n *\n * @category   Tests\n * @package    Elasticsearch\n * @subpackage Tests\n * @author     Zachary Tong <zachary.tong@elasticsearch.com>\n * @license    http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link       http://elasticsearch.org\n */\nclass ClientIntegrationTests extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testCustomQueryParams()\n    {\n        $client = Elasticsearch\\ClientBuilder::create()->setHosts([$_SERVER['ES_TEST_HOST']])->build();\n\n        $getParams = [\n            'index' => 'test',\n            'type' => 'test',\n            'id' => 1,\n            'parent' => 'abc',\n            'custom' => ['customToken' => 'abc', 'otherToken' => 123],\n            'client' => ['ignore' => 400]\n        ];\n        $exists = $client->exists($getParams);\n\n        $this->assertFalse($exists);\n    }\n}\n\n\n--- File: 442 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse Monolog\\Handler\\TestHandler;\n\nclass ErrorHandlerTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testHandleError()\n    {\n        $logger = new Logger('test', array($handler = new TestHandler));\n        $errHandler = new ErrorHandler($logger);\n\n        $errHandler->registerErrorHandler(array(E_USER_NOTICE => Logger::EMERGENCY), false);\n        trigger_error('Foo', E_USER_ERROR);\n        $this->assertCount(1, $handler->getRecords());\n        $this->assertTrue($handler->hasErrorRecords());\n        trigger_error('Foo', E_USER_NOTICE);\n        $this->assertCount(2, $handler->getRecords());\n        $this->assertTrue($handler->hasEmergencyRecords());\n    }\n}\n\n\n--- File: 183 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Recovery.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Recovery\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Recovery extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_recovery\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_recovery\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'detailed',\n            'active_only',\n            'human'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 273 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/Endpoints/AbstractEndpointTest.php ---\n<?php\n\ndeclare(strict_types = 1);\n\nnamespace Elasticsearch\\Tests\\Endpoints;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\nclass AbstractEndpointTest extends \\PHPUnit\\Framework\\TestCase\n{\n    private $endpoint;\n\n    public static function invalidParameters()\n    {\n        return [\n            [['invalid' => 10]],\n            [['invalid' => 10, 'invalid2' => 'another']],\n        ];\n    }\n\n    /**\n     * @dataProvider invalidParameters\n     * @expectedException \\Elasticsearch\\Common\\Exceptions\\UnexpectedValueException\n     */\n    public function testInvalidParamsCauseErrorsWhenProvidedToSetParams(array $params)\n    {\n        $this->endpoint->expects($this->once())\n            ->method('getParamWhitelist')\n            ->willReturn(['one', 'two']);\n\n        $this->endpoint->setParams($params);\n    }\n\n    protected function setUp()\n    {\n        $this->endpoint = $this->getMockForAbstractClass(AbstractEndpoint::class);\n    }\n}\n\n\n--- File: 186 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Seal.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Seal\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Seal extends AbstractEndpoint\n{\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_seal\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_seal\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array();\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'POST';\n    }\n}\n\n\n--- File: 324 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/InflateStream.php ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\n/**\n * Uses PHP's zlib.inflate filter to inflate deflate or gzipped content.\n *\n * This stream decorator skips the first 10 bytes of the given stream to remove\n * the gzip header, converts the provided stream to a PHP stream resource,\n * then appends the zlib.inflate filter. The stream is then converted back\n * to a Guzzle stream resource to be used as a Guzzle stream.\n *\n * @link http://tools.ietf.org/html/rfc1952\n * @link http://php.net/manual/en/filters.compression.php\n */\nclass InflateStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    public function __construct(StreamInterface $stream)\n    {\n        // Skip the first 10 bytes\n        $stream = new LimitStream($stream, -1, 10);\n        $resource = GuzzleStreamWrapper::getResource($stream);\n        stream_filter_append($resource, 'zlib.inflate', STREAM_FILTER_READ);\n        $this->stream = new Stream($resource);\n    }\n}\n\n\n--- File: 440 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Adds a unique identifier into records\n *\n * @author Simon M\u00f6nch <sm@webfactory.de>\n */\nclass UidProcessor\n{\n    private $uid;\n\n    public function __construct($length = 7)\n    {\n        if (!is_int($length) || $length > 32 || $length < 1) {\n            throw new \\InvalidArgumentException('The uid length must be an integer between 1 and 32');\n        }\n\n        $this->uid = substr(hash('md5', uniqid('', true)), 0, $length);\n    }\n\n    public function __invoke(array $record)\n    {\n        $record['extra']['uid'] = $this->uid;\n\n        return $record;\n    }\n\n    /**\n     * @return string\n     */\n    public function getUid()\n    {\n        return $this->uid;\n    }\n}\n\n\n--- File: 99 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/RoundRobinSelector.php ---\n<?php\n\nnamespace Elasticsearch\\ConnectionPool\\Selectors;\n\nuse Elasticsearch\\Connections\\ConnectionInterface;\n\n/**\n * Class RoundRobinSelector\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\ConnectionPool\\Selectors\\ConnectionPool\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass RoundRobinSelector implements SelectorInterface\n{\n    /**\n     * @var int\n     */\n    private $current = 0;\n\n    /**\n     * Select the next connection in the sequence\n     *\n     * @param  ConnectionInterface[] $connections an array of ConnectionInterface instances to choose from\n     *\n     * @return \\Elasticsearch\\Connections\\ConnectionInterface\n     */\n    public function select($connections)\n    {\n        $returnConnection = $connections[$this->current % count($connections)];\n\n        $this->current += 1;\n\n        return $returnConnection;\n    }\n}\n\n\n--- File: 104 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Connections/ConnectionFactoryInterface.php ---\n<?php\n\nnamespace Elasticsearch\\Connections;\n\nuse Elasticsearch\\Serializers\\SerializerInterface;\nuse Psr\\Log\\LoggerInterface;\n\n/**\n * Class AbstractConnection\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Connections\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\ninterface ConnectionFactoryInterface\n{\n    /**\n     * @param $handler\n     * @param array $connectionParams\n     * @param SerializerInterface $serializer\n     * @param LoggerInterface $logger\n     * @param LoggerInterface $tracer\n     */\n    public function __construct(\n        callable $handler,\n        array $connectionParams,\n        SerializerInterface $serializer,\n        LoggerInterface $logger,\n        LoggerInterface $tracer\n    );\n\n    /**\n     * @param $hostDetails\n     *\n     * @return ConnectionInterface\n     */\n    public function create($hostDetails);\n}\n\n\n--- File: 405 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/NullHandler.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\n/**\n * Blackhole\n *\n * Any record it can handle will be thrown away. This can be used\n * to put on top of an existing stack to override it temporarily.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass NullHandler extends AbstractHandler\n{\n    /**\n     * @param int $level The minimum logging level at which this handler will be triggered\n     */\n    public function __construct($level = Logger::DEBUG)\n    {\n        parent::__construct($level, false);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function handle(array $record)\n    {\n        if ($record['level'] < $this->level) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n\n--- File: 786 # views/bakum-verifikator/_verifikasi_data_perbaikan.php ---\n<?php\nuse yii\\helpers\\Html;\nuse yii\\helpers\\Url;\nuse app\\components\\helper\\PerbaikanDataHelper;\n\n/* Expects: $model, $jenisPerbaikan */\n?>\n<div class=\"fieldset\">\n  <span class=\"legend\">Data Perbaikan</span>\n\n  <div class=\"kv-row\">\n    <div class=\"label\">Jenis Perbaikan</div>\n    <div class=\"value\"><?php echo $jenisPerbaikan ?></div>\n  </div>\n\n  <?php foreach (PerbaikanDataHelper::getFileAttributes($model) as $attribute): ?>\n    <?php $label = $model->getAttributeLabel($attribute); $has = !empty($model->$attribute); ?>\n    <div class=\"kv-row\">\n      <div class=\"label\"><?php echo Html::encode($label) ?></div>\n      <div class=\"value\">\n        <?php if ($has): ?>\n          <a class=\"btn-doc\" target=\"_blank\" href=\"<?php echo Url::to([$model->$attribute], true) ?>\">Lihat Dokumen</a>\n        <?php else: ?>\n          <span class=\"muted\">Tidak ada</span>\n        <?php endif; ?>\n      </div>\n      <div></div>\n    </div>\n  <?php endforeach; ?>\n</div>\n\n\n\n--- File: 167 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/HotThreads.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cluster\\Nodes;\n\n/**\n * Class Hotthreads\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cluster\\Nodes\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass HotThreads extends AbstractNodesEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $node_id = $this->nodeID;\n        $uri   = \"/_cluster/nodes/hotthreads\";\n\n        if (isset($node_id) === true) {\n            $uri = \"/_cluster/nodes/$node_id/hotthreads\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'interval',\n            'snapshots',\n            'threads',\n            'type',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 177 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Delete.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Delete\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Delete extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/$index\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'timeout',\n            'master_timeout',\n            'ignore_unavailable',\n            'allow_no_indices'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'DELETE';\n    }\n}\n\n\n--- File: 158 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/ThreadPool.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class ThreadPool\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\n\nclass ThreadPool extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $uri   = \"/_cat/thread_pool\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            'full_id',\n            'size',\n            'thread_pool_patterns',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 222 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/Pipeline/Get.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Ingest\\Pipeline;\n\nuse Elasticsearch\\Common\\Exceptions;\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Get\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Ingest\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Get extends AbstractEndpoint\n{\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->id) !== true) {\n            return '/_ingest/pipeline/*';\n        }\n\n        $id = $this->id;\n\n        return \"/_ingest/pipeline/$id\";\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'master_timeout'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 9 # components/DinasHelper.php ---\n<?php \nnamespace app\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\UserDinas;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\TransaksiKoperasi;\n\n\nclass DinasHelper extends Component {\n\n    public static function getTransKedudukanByMaster($id_user,$id_master) {\n        $dataDinas = UserDinas::find()->where(['user_id' => $id_user])->one();\n\n        if(!$dataDinas) {\n            return null;\n        }\n        $data = TransaksiKoperasi::find()->where(['id_master' => $id_master])->andWhere(['jenis_transaksi_id' => [2, 3]]);\n        \n        // Search Transaksi by Kedudukan\n        if($dataDinas->jenis == '1') {\n            $data = $data->andWhere(['provinsi_id' => $dataDinas->provinsi_id]);\n        }\n        else if($dataDinas->jenis == '2') {\n            $data = $data->andWhere(['kab_kota_id' => $dataDinas->kab_kota_id]);\n        }\n\n        $data = $data->all();\n        if(!$data) {\n            return null;\n        }\n\n        return ArrayHelper::getColumn($data,'id');\n    }\n}\n?>\n\n--- File: 203 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Gateway/Snapshot.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices\\Gateway;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Snapshot\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\\Gateway\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Snapshot extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_gateway/snapshot\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_gateway/snapshot\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'POST';\n    }\n}\n\n\n--- File: 141 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Count.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Count\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Count extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_cat/count\";\n\n        if (isset($index) === true) {\n            $uri = \"/_cat/count/$index\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 700 # views/admin/npak-search-sk-notaris.php ---\n<?php\n\nuse yii\\bootstrap\\ActiveForm;\nuse yii\\helpers\\Html;\nuse yii\\web\\View;\n?>\n<div class=\"panel panel-default\">\n    <div class=\"panel-header\">\n        <h4 style=\"margin-left: 40px\"><?= $aksi; ?> Data Notaris</h2>\n        <hr>\n    </div>\n    <div class=\"panel-body\">\n\t\t<div class=\"npak-form\">\n\t\t    <?php $form = ActiveForm::begin([\n\t\t        'layout' => 'horizontal',\n\t\t        'fieldConfig' => [\n\t\t            'template' => \"{label}\\n{beginWrapper}\\n{input}\\n{hint}\\n{error}\\n{endWrapper}\",\n\t\t            'horizontalCssClasses' => [\n\t\t                'label' => 'col-sm-2',\n\t\t                'wrapper' => 'col-sm-10',\n\t\t                'error' => '',\n\t\t                'hint' => '',\n\t\t            ],\n\t\t        ],\n\t\t    ]) ?>\n\n\t\t\t<?= $form->field($model, 'nomor_sk_notaris')->textInput(['class' => 'form-control'])  ?>\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<?= Html::submitButton('Cari',['class' => 'btn btn-danger btn-lg'])?>\n\t\t\t</div>\n\t\t\t<?php ActiveForm::end() ?>\n\t\t</div>\n\t</div>\n</div>\n\n--- File: 382 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/DoctrineCouchDBHandler.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\NormalizerFormatter;\nuse Doctrine\\CouchDB\\CouchDBClient;\n\n/**\n * CouchDB handler for Doctrine CouchDB ODM\n *\n * @author Markus Bachmann <markus.bachmann@bachi.biz>\n */\nclass DoctrineCouchDBHandler extends AbstractProcessingHandler\n{\n    private $client;\n\n    public function __construct(CouchDBClient $client, $level = Logger::DEBUG, $bubble = true)\n    {\n        $this->client = $client;\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record)\n    {\n        $this->client->postDocument($record['formatted']);\n    }\n\n    protected function getDefaultFormatter()\n    {\n        return new NormalizerFormatter;\n    }\n}\n\n\n--- File: 184 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Refresh.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Refresh\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Refresh extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_refresh\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_refresh\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n            'force',\n            'operation_threading',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 187 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Segments.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Segments\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Segments extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_segments\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_segments\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n            'human',\n            'operation_threading',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 154 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Shards.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Shards\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Shards extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_cat/shards\";\n\n        if (isset($index) === true) {\n            $uri = \"/_cat/shards/$index\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'bytes',\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 240 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Tasks/TasksList.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Tasks;\n\nuse Elasticsearch\\Common\\Exceptions;\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class TasksLists\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Tasks\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass TasksList extends AbstractEndpoint\n{\n\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        return \"/_tasks\";\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'node_id',\n            'actions',\n            'detailed',\n            'parent_node',\n            'parent_task',\n            'wait_for_completion',\n            'group_by',\n            'task_id'\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 546 # extensions/elasticSearch/vendor/react/promise/tests/DeferredTest.php ---\n<?php\n\nnamespace React\\Promise;\n\nuse React\\Promise\\PromiseAdapter\\CallbackPromiseAdapter;\n\nclass DeferredTest extends TestCase\n{\n    use PromiseTest\\FullTestTrait;\n\n    public function getPromiseTestAdapter(callable $canceller = null)\n    {\n        $d = new Deferred($canceller);\n\n        return new CallbackPromiseAdapter([\n            'promise' => [$d, 'promise'],\n            'resolve' => [$d, 'resolve'],\n            'reject'  => [$d, 'reject'],\n            'notify'  => [$d, 'progress'],\n            'settle'  => [$d, 'resolve'],\n        ]);\n    }\n\n    /** @test */\n    public function progressIsAnAliasForNotify()\n    {\n        $deferred = new Deferred();\n\n        $sentinel = new \\stdClass();\n\n        $mock = $this->createCallableMock();\n        $mock\n            ->expects($this->once())\n            ->method('__invoke')\n            ->with($sentinel);\n\n        $deferred->promise()\n            ->then($this->expectCallableNever(), $this->expectCallableNever(), $mock);\n\n        $deferred->progress($sentinel);\n    }\n}\n\n\n--- File: 151 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Recovery.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Recovery\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Recovery extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_cat/recovery\";\n\n        if (isset($index) === true) {\n            $uri = \"/_cat/recovery/$index\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'bytes',\n            'local',\n            'master_timeout',\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 798 # views/perbaikan-data/_headerInformasiKoperasi.php ---\n<?php\nuse yii\\helpers\\Html;\n?>\n\n<div class=\"panel panel-default\" id=\"informasi-koperasi\">\n    <div class=\"panel-body\">\n        <?php if (Yii::$app->session->get('no_checklist')): ?>\n            <h4><strong>Status Verifikasi:</strong>&nbsp; Belum Diverifikasi</h4>\n            <br>\n        <?php endif; ?>\n\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <p><strong>Nama Koperasi</strong>&nbsp;<span style=\"color:red\">*</span></p>\n                <p><?= Html::encode($fullNamaKoperasi) ?></p>\n            </div>\n            <div class=\"col-md-4\">\n                <p><strong>Nomor SKT/SKP</strong>&nbsp;<span style=\"color:red\">*</span></p>\n                <p><?= Html::encode($nomorSk) ?></p>\n            </div>\n            <div class=\"col-md-4\">\n                <!-- show tanggal sk here -->\n                <p><strong>Tanggal SKT/SKP</strong>&nbsp;<span style=\"color:red\">*</span></p>\n                <p><?= date('d-m-Y', strtotime($tanggalSk)) ?></p>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n--- File: 242 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Template/Get.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Template;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Get\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Template\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Get extends AbstractEndpoint\n{\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->id) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'id is required for Get'\n            );\n        }\n        $templateId = $this->id;\n        $uri  = \"/_search/template/$templateId\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array();\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 370 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/ScalarFormatter.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Formats data into an associative array of scalar values.\n * Objects and arrays will be JSON encoded.\n *\n * @author Andrew Lawson <adlawson@gmail.com>\n */\nclass ScalarFormatter extends NormalizerFormatter\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function format(array $record)\n    {\n        foreach ($record as $key => $value) {\n            $record[$key] = $this->normalizeValue($value);\n        }\n\n        return $record;\n    }\n\n    /**\n     * @param  mixed $value\n     * @return mixed\n     */\n    protected function normalizeValue($value)\n    {\n        $normalized = $this->normalize($value);\n\n        if (is_array($normalized) || is_object($normalized)) {\n            return $this->toJson($normalized, true);\n        }\n\n        return $normalized;\n    }\n}\n\n\n--- File: 620 # models/StatusPengurus.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"m_status_pengurus\".\n *\n * @property int $id\n * @property string $nama\n */\nclass StatusPengurus extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'm_status_pengurus';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['nama'], 'string', 'max' => 50],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'nama' => 'Nama',\n        ];\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['id' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->nama;\n    }\n}\n\n\n--- File: 241 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Template/Delete.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Template;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Delete\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Template\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Delete extends AbstractEndpoint\n{\n    /**\n     * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\n     * @return string\n     */\n    public function getURI()\n    {\n        if (isset($this->id) !== true) {\n            throw new Exceptions\\RuntimeException(\n                'id is required for Delete'\n            );\n        }\n        $templateId   = $this->id;\n        $uri  = \"/_search/template/$templateId\";\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array();\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'DELETE';\n    }\n}\n\n\n--- File: 592 # models/EnableColumn.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%enable_column}}\".\n *\n * @property int $id\n * @property int $m_perubahan_id\n * @property string $tables\n * @property string $kolom\n */\nclass EnableColumn extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%enable_column}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['m_perubahan_id'], 'integer'],\n            [['tables', 'kolom'], 'string', 'max' => 50],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'm_perubahan_id' => 'M Perubahan ID',\n            'tables' => 'Tables',\n            'kolom' => 'Kolom',\n        ];\n    }\n}\n\n\n--- File: 192 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Status.php ---\n<?php\n\nnamespace Elasticsearch\\Endpoints\\Indices;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\n\n/**\n * Class Status\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Endpoints\\Indices\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\nclass Status extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_status\";\n\n        if (isset($index) === true) {\n            $uri = \"/$index/_status\";\n        }\n\n        return $uri;\n    }\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'ignore_unavailable',\n            'allow_no_indices',\n            'expand_wildcards',\n            'human',\n            'operation_threading',\n            'recovery',\n            'snapshot',\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 251 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/NamespaceBuilderInterface.php ---\n<?php\n/**\n * Class RegisteredNamespaceInterface\n *\n * @category Elasticsearch\n * @package  Elasticsearch\\Namespaces\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\n\nnamespace Elasticsearch\\Namespaces;\n\nuse Elasticsearch\\Serializers\\SerializerInterface;\nuse Elasticsearch\\Transport;\n\ninterface NamespaceBuilderInterface\n{\n    /**\n     * Returns the name of the namespace.  This is what users will call, e.g. the name\n     * \"foo\" will be invoked by the user as `$client->foo()`\n     * @return string\n     */\n    public function getName();\n\n    /**\n     * Returns the actual namespace object which contains your custom methods. The transport\n     * and serializer objects are provided so that your namespace may do whatever custom\n     * logic is required.\n     *\n     * @param Transport $transport\n     * @param SerializerInterface $serializer\n     * @return Object\n     */\n    public function getObject(Transport $transport, SerializerInterface $serializer);\n}\n\n\n--- File: 517 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/PsrLogMessageProcessorTest.php ---\n<?php\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nclass PsrLogMessageProcessorTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @dataProvider getPairs\n     */\n    public function testReplacement($val, $expected)\n    {\n        $proc = new PsrLogMessageProcessor;\n\n        $message = $proc(array(\n            'message' => '{foo}',\n            'context' => array('foo' => $val),\n        ));\n        $this->assertEquals($expected, $message['message']);\n    }\n\n    public function getPairs()\n    {\n        return array(\n            array('foo',    'foo'),\n            array('3',      '3'),\n            array(3,        '3'),\n            array(null,     ''),\n            array(true,     '1'),\n            array(false,    ''),\n            array(new \\stdClass, '[object stdClass]'),\n            array(array(), '[array]'),\n        );\n    }\n}\n\n\n--- File: 24 # components/helper/Disclaimer.php ---\n<?php \nnamespace app\\components\\helper;\n\nuse Yii;\nuse yii\\base\\Component;\nuse yii\\helpers\\VarDumper;\n\nclass Disclaimer extends Component \n{\n\tpublic static $instance = null;\n\tpublic static $values = array();\n\n\tpublic static function generateValues( $fieldName, $type, $koperasi_id, $pesan_nama_id,$dataType =\"POST\") {\n\t\tif($dataType == \"POST\") {\n\t\t\t$data = Yii::$app->request->post($fieldName);\n\t\t}\n\t\telseif($dataType == \"ARRAY\") {\n\t\t\t$data = $fieldName;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\n        foreach ( $data as $key => $disclaimer_id ) {\n\n            array_push(self::$values, [\n                $type, \n                $disclaimer_id, \n                $koperasi_id, \n                $pesan_nama_id\n            ]);\n\t\t}\n\n\t\tif ( self::$instance === null ) {\n\n\t\t\tself::$instance = new self;\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\tpublic function save() {\n\n        return Yii::$app->db_koperasi->createCommand()->batchInsert('kop_t_statement_disclaimer', ['m_disclaimer', 'c_m_disclaimer_id', 't_koperasi_id', 'pesan_nama_id'], self::$values)->execute();\n\t\t\n\t}\n}\n\n\n--- File: 153 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Segments.php ---\n<?php\n/**\n * User: zach\n * Date: 01/12/2015\n * Time: 14:34:49 pm\n */\n\nnamespace Elasticsearch\\Endpoints\\Cat;\n\nuse Elasticsearch\\Endpoints\\AbstractEndpoint;\nuse Elasticsearch\\Common\\Exceptions;\n\n/**\n * Class Segments\n *\n * @category Elasticsearch\n * @package Elasticsearch\\Endpoints\\Cat\n * @author   Zachary Tong <zach@elastic.co>\n * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache2\n * @link     http://elastic.co\n */\n\nclass Segments extends AbstractEndpoint\n{\n    /**\n     * @return string\n     */\n    public function getURI()\n    {\n        $index = $this->index;\n        $uri   = \"/_cat/segments\";\n\n        if (isset($index) === true) {\n            $uri = \"/_cat/segments/$index\";\n        }\n\n        return $uri;\n    }\n\n\n    /**\n     * @return string[]\n     */\n    public function getParamWhitelist()\n    {\n        return array(\n            'h',\n            'help',\n            'v',\n            's',\n            'format',\n        );\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getMethod()\n    {\n        return 'GET';\n    }\n}\n\n\n--- File: 321 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/DroppingStream.php (truncated) ---\n<?php\nnamespace GuzzleHttp\\Stream;\n\n/**\n * Stream decorator that begins dropping data once the size of the underlying\n * stream becomes too full.\n */\nclass DroppingStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    private $maxLength;\n\n    /**\n     * @param StreamInterface $stream    Underlying stream to decorate.\n     * @param int             $maxLength Maximum size before dropping data.\n     */\n    public function __construct(StreamInterface $stream, $maxLength)\n    {\n        $this->stream = $stream;\n        $this->maxLength = $maxLength;\n    }\n\n    public function write($string)\n    {\n... (truncated)\n\nAnalyze the codebase context.\nIdentify the top 5-10 core most important abstractions to help those new to the codebase.\n\nFor each abstraction, provide:\n1. A concise `name`.\n2. A beginner-friendly `description` explaining what it is with a simple analogy, in around 100 words.\n3. A list of relevant `file_indices` (integers) using the format `idx # path/comment`.\n\nList of file indices and paths present in the context:\n- 0 # codeception.yml\n- 1 # composer.json\n- 2 # docker-compose.yml\n- 3 # requirements.php\n- 4 # assets/AppAsset.php\n- 5 # commands/HelloController.php\n- 6 # commands/TaskController.php\n- 7 # components/ActionHelper.php\n- 8 # components/BaseController.php\n- 9 # components/DinasHelper.php\n- 10 # components/HelperDukcapil.php\n- 11 # components/Helpers.php\n- 12 # components/KoperasiHelper.php\n- 13 # components/LogHelper.php\n- 14 # components/Menu.php\n- 15 # components/NikHelper.php\n- 16 # components/NotariatHelper.php\n- 17 # components/NpakHelper.php\n- 18 # components/QrCodeHelper.php\n- 19 # components/RegexHelper.php\n- 20 # components/TransaksiHelper.php\n- 21 # components/ViewHelper.php\n- 22 # components/ApiHelper.php\n- 23 # components/helper/BoHelper.php\n- 24 # components/helper/Disclaimer.php\n- 25 # components/helper/FormatDate.php\n- 26 # components/helper/LoginChecker.php\n- 27 # components/helper/Numbering.php\n- 28 # components/helper/TelegramHelper.php\n- 29 # components/helper/EncryptHelper.php\n- 30 # components/helper/PerbaikanDataHelper.php\n- 31 # config/console-sample.php\n- 32 # config/db.php\n- 33 # config/test.php\n- 34 # config/test_db.php\n- 35 # config/web-sample.php\n- 36 # controllers/BlokirController.php\n- 37 # controllers/DinasController.php\n- 38 # controllers/LogController.php\n- 39 # controllers/NewFormController.php\n- 40 # controllers/PembubaranController.php\n- 41 # controllers/QrCodeController.php\n- 42 # controllers/ServiceController.php\n- 43 # controllers/UsersController.php\n- 44 # controllers/AdminController.php\n- 45 # controllers/BakumVerifikatorController.php\n- 46 # controllers/PendirianController.php\n- 47 # controllers/PerbaikanDataController.php\n- 48 # controllers/PerubahanController.php\n- 49 # controllers/PesanNamaController.php\n- 50 # controllers/SiteController.php\n- 51 # extensions/elasticSearch/ElasticSearch.php\n- 52 # extensions/elasticSearch/ElasticSearchInterface.php\n- 53 # extensions/elasticSearch/vendor/autoload.php\n- 54 # extensions/elasticSearch/vendor/composer/ClassLoader.php\n- 55 # extensions/elasticSearch/vendor/composer/autoload_classmap.php\n- 56 # extensions/elasticSearch/vendor/composer/autoload_files.php\n- 57 # extensions/elasticSearch/vendor/composer/autoload_namespaces.php\n- 58 # extensions/elasticSearch/vendor/composer/autoload_psr4.php\n- 59 # extensions/elasticSearch/vendor/composer/autoload_real.php\n- 60 # extensions/elasticSearch/vendor/composer/autoload_static.php\n- 61 # extensions/elasticSearch/vendor/composer/installed.json\n- 62 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/.travis.yml\n- 63 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Client.php\n- 64 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ClientBuilder.php\n- 65 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Transport.php\n- 66 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/EmptyLogger.php\n- 67 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/AlreadyExpiredException.php\n- 68 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/BadMethodCallException.php\n- 69 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/BadRequest400Exception.php\n- 70 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ClientErrorResponseException.php\n- 71 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Conflict409Exception.php\n- 72 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ElasticsearchException.php\n- 73 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Forbidden403Exception.php\n- 74 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/InvalidArgumentException.php\n- 75 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/MaxRetriesException.php\n- 76 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Missing404Exception.php\n- 77 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/NoDocumentsToGetException.php\n- 78 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/NoNodesAvailableException.php\n- 79 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/NoShardAvailableException.php\n- 80 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/RequestTimeout408Exception.php\n- 81 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/RoutingMissingException.php\n- 82 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/RuntimeException.php\n- 83 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ScriptLangNotSupportedException.php\n- 84 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/ServerErrorResponseException.php\n- 85 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/TransportException.php\n- 86 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Unauthorized401Exception.php\n- 87 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/UnexpectedValueException.php\n- 88 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Curl/CouldNotConnectToHost.php\n- 89 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Curl/CouldNotResolveHostException.php\n- 90 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Curl/OperationTimeoutException.php\n- 91 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Common/Exceptions/Serializer/JsonErrorException.php\n- 92 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/AbstractConnectionPool.php\n- 93 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/ConnectionPoolInterface.php\n- 94 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/SimpleConnectionPool.php\n- 95 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/SniffingConnectionPool.php\n- 96 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/StaticConnectionPool.php\n- 97 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/StaticNoPingConnectionPool.php\n- 98 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/RandomSelector.php\n- 99 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/RoundRobinSelector.php\n- 100 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/SelectorInterface.php\n- 101 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/ConnectionPool/Selectors/StickyRoundRobinSelector.php\n- 102 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Connections/Connection.php\n- 103 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Connections/ConnectionFactory.php\n- 104 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Connections/ConnectionFactoryInterface.php\n- 105 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Connections/ConnectionInterface.php\n- 106 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/AbstractEndpoint.php\n- 107 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Bulk.php\n- 108 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/BulkEndpointInterface.php\n- 109 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/ClearScroll.php\n- 110 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Count.php\n- 111 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/CountPercolate.php\n- 112 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Create.php\n- 113 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Delete.php\n- 114 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/DeleteByQuery.php\n- 115 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Exists.php\n- 116 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Explain.php\n- 117 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/FieldCaps.php\n- 118 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/FieldStats.php\n- 119 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Get.php\n- 120 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Index.php\n- 121 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Info.php\n- 122 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/MPercolate.php\n- 123 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/MTermVectors.php\n- 124 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Mget.php\n- 125 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Msearch.php\n- 126 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/MsearchTemplate.php\n- 127 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Percolate.php\n- 128 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ping.php\n- 129 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Reindex.php\n- 130 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/RenderSearchTemplate.php\n- 131 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Scroll.php\n- 132 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Search.php\n- 133 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/SearchShards.php\n- 134 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/SearchTemplate.php\n- 135 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Suggest.php\n- 136 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/TermVectors.php\n- 137 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Update.php\n- 138 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/UpdateByQuery.php\n- 139 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Aliases.php\n- 140 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Allocation.php\n- 141 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Count.php\n- 142 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Fielddata.php\n- 143 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Health.php\n- 144 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Help.php\n- 145 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Indices.php\n- 146 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Master.php\n- 147 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/NodeAttrs.php\n- 148 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Nodes.php\n- 149 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/PendingTasks.php\n- 150 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Plugins.php\n- 151 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Recovery.php\n- 152 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Repositories.php\n- 153 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Segments.php\n- 154 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Shards.php\n- 155 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Snapshots.php\n- 156 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Tasks.php\n- 157 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/Templates.php\n- 158 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cat/ThreadPool.php\n- 159 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/AllocationExplain.php\n- 160 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Health.php\n- 161 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/PendingTasks.php\n- 162 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/RemoteInfo.php\n- 163 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Reroute.php\n- 164 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/State.php\n- 165 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Stats.php\n- 166 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/AbstractNodesEndpoint.php\n- 167 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/HotThreads.php\n- 168 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/Info.php\n- 169 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/Shutdown.php\n- 170 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Nodes/Stats.php\n- 171 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Settings/Get.php\n- 172 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Cluster/Settings/Put.php\n- 173 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Analyze.php\n- 174 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/ClearCache.php\n- 175 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Close.php\n- 176 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Create.php\n- 177 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Delete.php\n- 178 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Exists.php\n- 179 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Flush.php\n- 180 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/ForceMerge.php\n- 181 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Get.php\n- 182 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Open.php\n- 183 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Recovery.php\n- 184 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Refresh.php\n- 185 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Rollover.php\n- 186 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Seal.php\n- 187 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Segments.php\n- 188 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/ShardStores.php\n- 189 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Shrink.php\n- 190 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Snapshotindex.php\n- 191 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Stats.php\n- 192 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Status.php\n- 193 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/ValidateQuery.php\n- 194 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Alias/AbstractAliasEndpoint.php\n- 195 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Alias/Delete.php\n- 196 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Alias/Exists.php\n- 197 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Alias/Get.php\n- 198 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Alias/Put.php\n- 199 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Aliases/Update.php\n- 200 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Cache/Clear.php\n- 201 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Exists/Types.php\n- 202 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Field/Get.php\n- 203 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Gateway/Snapshot.php\n- 204 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/Delete.php\n- 205 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/Get.php\n- 206 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/GetField.php\n- 207 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Mapping/Put.php\n- 208 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Settings/Get.php\n- 209 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Settings/Put.php\n- 210 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Template/AbstractTemplateEndpoint.php\n- 211 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Template/Delete.php\n- 212 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Template/Exists.php\n- 213 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Template/Get.php\n- 214 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Template/Put.php\n- 215 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Type/Exists.php\n- 216 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Upgrade/Get.php\n- 217 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Upgrade/Post.php\n- 218 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Indices/Validate/Query.php\n- 219 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/ProcessorGrok.php\n- 220 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/Simulate.php\n- 221 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/Pipeline/Delete.php\n- 222 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/Pipeline/Get.php\n- 223 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Ingest/Pipeline/Put.php\n- 224 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Remote/Info.php\n- 225 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Script/Delete.php\n- 226 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Script/Get.php\n- 227 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Script/Put.php\n- 228 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Create.php\n- 229 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Delete.php\n- 230 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Get.php\n- 231 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Restore.php\n- 232 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Status.php\n- 233 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Repository/Create.php\n- 234 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Repository/Delete.php\n- 235 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Repository/Get.php\n- 236 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Snapshot/Repository/Verify.php\n- 237 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Source/Get.php\n- 238 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Tasks/Cancel.php\n- 239 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Tasks/Get.php\n- 240 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Tasks/TasksList.php\n- 241 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Template/Delete.php\n- 242 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Endpoints/Template/Get.php\n- 243 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Helper/Iterators/SearchHitIterator.php\n- 244 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Helper/Iterators/SearchResponseIterator.php\n- 245 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/AbstractNamespace.php\n- 246 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/BooleanRequestWrapper.php\n- 247 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/CatNamespace.php\n- 248 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/ClusterNamespace.php\n- 249 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/IndicesNamespace.php\n- 250 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/IngestNamespace.php\n- 251 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/NamespaceBuilderInterface.php\n- 252 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/NodesNamespace.php\n- 253 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/RemoteNamespace.php\n- 254 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/SnapshotNamespace.php\n- 255 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Namespaces/TasksNamespace.php\n- 256 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Serializers/ArrayToJSONSerializer.php\n- 257 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Serializers/EverythingToJSONSerializer.php\n- 258 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Serializers/SerializerInterface.php\n- 259 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/src/Elasticsearch/Serializers/SmartSerializer.php\n- 260 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/bootstrap.php\n- 261 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientBuilderTest.php\n- 262 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientIntegrationTests.php\n- 263 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientTest.php\n- 264 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/RegisteredNamespaceTest.php\n- 265 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/YamlRunnerTest.php\n- 266 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ClientBuilder/DummyLogger.php\n- 267 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/SniffingConnectionPoolIntegrationTest.php\n- 268 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/SniffingConnectionPoolTest.php\n- 269 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/StaticConnectionPoolIntegrationTest.php\n- 270 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/StaticConnectionPoolTest.php\n- 271 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/Selectors/RoundRobinSelectorTest.php\n- 272 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/ConnectionPool/Selectors/StickyRoundRobinSelectorTest.php\n- 273 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/Endpoints/AbstractEndpointTest.php\n- 274 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/Helper/Iterators/SearchResponseIteratorTest.php\n- 275 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/Serializers/ArrayToJSONSerializerTest.php\n- 276 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/tests/Elasticsearch/Tests/Serializers/EverythingToJSONSerializerTest.php\n- 277 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/EnsureClusterAlive.php\n- 278 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/RestSpecRunner.php\n- 279 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/SpecParser.php\n- 280 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/docsConfig.php\n- 281 # extensions/elasticSearch/vendor/elasticsearch/elasticsearch/util/docstheme/manifest.yml\n- 282 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/.travis.yml\n- 283 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Core.php\n- 284 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/ClientUtils.php\n- 285 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/CurlFactory.php\n- 286 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/CurlHandler.php\n- 287 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/CurlMultiHandler.php\n- 288 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/Middleware.php\n- 289 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/MockHandler.php\n- 290 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Client/StreamHandler.php\n- 291 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/CancelledException.php\n- 292 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/CancelledFutureAccessException.php\n- 293 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/ConnectException.php\n- 294 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Exception/RingException.php\n- 295 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/BaseFutureTrait.php\n- 296 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/CompletedFutureArray.php\n- 297 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/CompletedFutureValue.php\n- 298 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureArray.php\n- 299 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureArrayInterface.php\n- 300 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureInterface.php\n- 301 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/FutureValue.php\n- 302 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/src/Future/MagicFutureTrait.php\n- 303 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/CoreTest.php\n- 304 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/bootstrap.php\n- 305 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/CurlFactoryTest.php\n- 306 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/CurlHandlerTest.php\n- 307 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/CurlMultiHandlerTest.php\n- 308 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/MiddlewareTest.php\n- 309 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/MockHandlerTest.php\n- 310 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/Server.php\n- 311 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Client/StreamHandlerTest.php\n- 312 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Future/CompletedFutureArrayTest.php\n- 313 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Future/CompletedFutureValueTest.php\n- 314 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Future/FutureArrayTest.php\n- 315 # extensions/elasticSearch/vendor/guzzlehttp/ringphp/tests/Future/FutureValueTest.php\n- 316 # extensions/elasticSearch/vendor/guzzlehttp/streams/.travis.yml\n- 317 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/AppendStream.php\n- 318 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/AsyncReadStream.php\n- 319 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/BufferStream.php\n- 320 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/CachingStream.php\n- 321 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/DroppingStream.php\n- 322 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/FnStream.php\n- 323 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/GuzzleStreamWrapper.php\n- 324 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/InflateStream.php\n- 325 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/LazyOpenStream.php\n- 326 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/LimitStream.php\n- 327 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/MetadataStreamInterface.php\n- 328 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/NoSeekStream.php\n- 329 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/NullStream.php\n- 330 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/PumpStream.php\n- 331 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/Stream.php\n- 332 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/StreamDecoratorTrait.php\n- 333 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/StreamInterface.php\n- 334 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/Utils.php\n- 335 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/Exception/CannotAttachException.php\n- 336 # extensions/elasticSearch/vendor/guzzlehttp/streams/src/Exception/SeekException.php\n- 337 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/AppendStreamTest.php\n- 338 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/AsyncReadStreamTest.php\n- 339 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/BufferStreamTest.php\n- 340 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/CachingStreamTest.php\n- 341 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/DroppingStreamTest.php\n- 342 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/FnStreamTest.php\n- 343 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/GuzzleStreamWrapperTest.php\n- 344 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/InflateStreamTest.php\n- 345 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/LazyOpenStreamTest.php\n- 346 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/LimitStreamTest.php\n- 347 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/NoSeekStreamTest.php\n- 348 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/NullStreamTest.php\n- 349 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/PumpStreamTest.php\n- 350 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/StreamDecoratorTraitTest.php\n- 351 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/StreamTest.php\n- 352 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/UtilsTest.php\n- 353 # extensions/elasticSearch/vendor/guzzlehttp/streams/tests/Exception/SeekExceptionTest.php\n- 354 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/ErrorHandler.php\n- 355 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Logger.php\n- 356 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Registry.php\n- 357 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/ChromePHPFormatter.php\n- 358 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php\n- 359 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php\n- 360 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php\n- 361 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/FormatterInterface.php\n- 362 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php\n- 363 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php\n- 364 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php\n- 365 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php\n- 366 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/LogglyFormatter.php\n- 367 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php\n- 368 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php\n- 369 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php\n- 370 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/ScalarFormatter.php\n- 371 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php\n- 372 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php\n- 373 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php\n- 374 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php\n- 375 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php\n- 376 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php\n- 377 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php\n- 378 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php\n- 379 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php\n- 380 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php\n- 381 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php\n- 382 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/DoctrineCouchDBHandler.php\n- 383 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php\n- 384 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php\n- 385 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php\n- 386 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php\n- 387 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php\n- 388 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php\n- 389 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php\n- 390 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php\n- 391 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/GelfHandler.php\n- 392 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php\n- 393 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php\n- 394 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php\n- 395 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php\n- 396 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php\n- 397 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/LogEntriesHandler.php\n- 398 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php\n- 399 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/MailHandler.php\n- 400 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php\n- 401 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/MissingExtensionException.php\n- 402 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php\n- 403 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php\n- 404 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php\n- 405 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/NullHandler.php\n- 406 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php\n- 407 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php\n- 408 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php\n- 409 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php\n- 410 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php\n- 411 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php\n- 412 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php\n- 413 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php\n- 414 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php\n- 415 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php\n- 416 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php\n- 417 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php\n- 418 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php\n- 419 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php\n- 420 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php\n- 421 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php\n- 422 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php\n- 423 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php\n- 424 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/ZendMonitorHandler.php\n- 425 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/Curl/Util.php\n- 426 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php\n- 427 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php\n- 428 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php\n- 429 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php\n- 430 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php\n- 431 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/GitProcessor.php\n- 432 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php\n- 433 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/MemoryPeakUsageProcessor.php\n- 434 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php\n- 435 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/MemoryUsageProcessor.php\n- 436 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/MercurialProcessor.php\n- 437 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/ProcessIdProcessor.php\n- 438 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php\n- 439 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php\n- 440 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php\n- 441 # extensions/elasticSearch/vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php\n- 442 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php\n- 443 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/LoggerTest.php\n- 444 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php\n- 445 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/RegistryTest.php\n- 446 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/TestCase.php\n- 447 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php\n- 448 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php\n- 449 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php\n- 450 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php\n- 451 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php\n- 452 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php\n- 453 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php\n- 454 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php\n- 455 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php\n- 456 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php\n- 457 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php\n- 458 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php\n- 459 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php\n- 460 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php\n- 461 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php\n- 462 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php\n- 463 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php\n- 464 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php\n- 465 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php\n- 466 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/CouchDBHandlerTest.php\n- 467 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php\n- 468 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php\n- 469 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php\n- 470 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php\n- 471 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php\n- 472 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php\n- 473 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php\n- 474 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php\n- 475 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php\n- 476 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php\n- 477 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php\n- 478 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php\n- 479 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/GelfMockMessagePublisher.php\n- 480 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php\n- 481 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php\n- 482 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php\n- 483 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php\n- 484 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php\n- 485 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/MockRavenClient.php\n- 486 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php\n- 487 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php\n- 488 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php\n- 489 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/NullHandlerTest.php\n- 490 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php\n- 491 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php\n- 492 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php\n- 493 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php\n- 494 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php\n- 495 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php\n- 496 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php\n- 497 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SamplingHandlerTest.php\n- 498 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php\n- 499 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php\n- 500 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php\n- 501 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php\n- 502 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php\n- 503 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php\n- 504 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SyslogHandlerTest.php\n- 505 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php\n- 506 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php\n- 507 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php\n- 508 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php\n- 509 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php\n- 510 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php\n- 511 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/GitProcessorTest.php\n- 512 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php\n- 513 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php\n- 514 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php\n- 515 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/MercurialProcessorTest.php\n- 516 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php\n- 517 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/PsrLogMessageProcessorTest.php\n- 518 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php\n- 519 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/UidProcessorTest.php\n- 520 # extensions/elasticSearch/vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php\n- 521 # extensions/elasticSearch/vendor/psr/log/Psr/Log/AbstractLogger.php\n- 522 # extensions/elasticSearch/vendor/psr/log/Psr/Log/InvalidArgumentException.php\n- 523 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LogLevel.php\n- 524 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LoggerAwareInterface.php\n- 525 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LoggerAwareTrait.php\n- 526 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LoggerInterface.php\n- 527 # extensions/elasticSearch/vendor/psr/log/Psr/Log/LoggerTrait.php\n- 528 # extensions/elasticSearch/vendor/psr/log/Psr/Log/NullLogger.php\n- 529 # extensions/elasticSearch/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php\n- 530 # extensions/elasticSearch/vendor/react/promise/.travis.yml\n- 531 # extensions/elasticSearch/vendor/react/promise/src/CancellablePromiseInterface.php\n- 532 # extensions/elasticSearch/vendor/react/promise/src/CancellationQueue.php\n- 533 # extensions/elasticSearch/vendor/react/promise/src/Deferred.php\n- 534 # extensions/elasticSearch/vendor/react/promise/src/ExtendedPromiseInterface.php\n- 535 # extensions/elasticSearch/vendor/react/promise/src/FulfilledPromise.php\n- 536 # extensions/elasticSearch/vendor/react/promise/src/LazyPromise.php\n- 537 # extensions/elasticSearch/vendor/react/promise/src/Promise.php\n- 538 # extensions/elasticSearch/vendor/react/promise/src/PromiseInterface.php\n- 539 # extensions/elasticSearch/vendor/react/promise/src/PromisorInterface.php\n- 540 # extensions/elasticSearch/vendor/react/promise/src/RejectedPromise.php\n- 541 # extensions/elasticSearch/vendor/react/promise/src/UnhandledRejectionException.php\n- 542 # extensions/elasticSearch/vendor/react/promise/src/functions.php\n- 543 # extensions/elasticSearch/vendor/react/promise/src/functions_include.php\n- 544 # extensions/elasticSearch/vendor/react/promise/src/Exception/LengthException.php\n- 545 # extensions/elasticSearch/vendor/react/promise/tests/CancellationQueueTest.php\n- 546 # extensions/elasticSearch/vendor/react/promise/tests/DeferredTest.php\n- 547 # extensions/elasticSearch/vendor/react/promise/tests/FulfilledPromiseTest.php\n- 548 # extensions/elasticSearch/vendor/react/promise/tests/FunctionAllTest.php\n- 549 # extensions/elasticSearch/vendor/react/promise/tests/FunctionAnyTest.php\n- 550 # extensions/elasticSearch/vendor/react/promise/tests/FunctionCheckTypehintTest.php\n- 551 # extensions/elasticSearch/vendor/react/promise/tests/FunctionMapTest.php\n- 552 # extensions/elasticSearch/vendor/react/promise/tests/FunctionRaceTest.php\n- 553 # extensions/elasticSearch/vendor/react/promise/tests/FunctionReduceTest.php\n- 554 # extensions/elasticSearch/vendor/react/promise/tests/FunctionRejectTest.php\n- 555 # extensions/elasticSearch/vendor/react/promise/tests/FunctionResolveTest.php\n- 556 # extensions/elasticSearch/vendor/react/promise/tests/FunctionSomeTest.php\n- 557 # extensions/elasticSearch/vendor/react/promise/tests/LazyPromiseTest.php\n- 558 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest.php\n- 559 # extensions/elasticSearch/vendor/react/promise/tests/RejectedPromiseTest.php\n- 560 # extensions/elasticSearch/vendor/react/promise/tests/TestCase.php\n- 561 # extensions/elasticSearch/vendor/react/promise/tests/bootstrap.php\n- 562 # extensions/elasticSearch/vendor/react/promise/tests/PromiseAdapter/CallbackPromiseAdapter.php\n- 563 # extensions/elasticSearch/vendor/react/promise/tests/PromiseAdapter/PromiseAdapterInterface.php\n- 564 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/CancelTestTrait.php\n- 565 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/FullTestTrait.php\n- 566 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/NotifyTestTrait.php\n- 567 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/PromiseFulfilledTestTrait.php\n- 568 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/PromisePendingTestTrait.php\n- 569 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/PromiseRejectedTestTrait.php\n- 570 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/PromiseSettledTestTrait.php\n- 571 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/RejectTestTrait.php\n- 572 # extensions/elasticSearch/vendor/react/promise/tests/PromiseTest/ResolveTestTrait.php\n- 573 # extensions/elasticSearch/vendor/react/promise/tests/Stub/CallableStub.php\n- 574 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleFulfilledTestPromise.php\n- 575 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleFulfilledTestThenable.php\n- 576 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleRejectedTestPromise.php\n- 577 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleTestCancellable.php\n- 578 # extensions/elasticSearch/vendor/react/promise/tests/fixtures/SimpleTestCancellableThenable.php\n- 579 # mail/layouts/html.php\n- 580 # models/AktifitasUsaha.php\n- 581 # models/AlasanPembubaran.php\n- 582 # models/BHPembagian.php\n- 583 # models/BHPenggabungan.php\n- 584 # models/BentukKoperasi.php\n- 585 # models/ChecklistPerubahan.php\n- 586 # models/ChecklistPerubahanForm.php\n- 587 # models/Command.php\n- 588 # models/ContactForm.php\n- 589 # models/Counter.php\n- 590 # models/DataAnggota.php\n- 591 # models/Disclaimer.php\n- 592 # models/EnableColumn.php\n- 593 # models/GroupSetting.php\n- 594 # models/JenisIdentitas.php\n- 595 # models/JenisKelamin.php\n- 596 # models/JenisKoperasi.php\n- 597 # models/JenisTransaksi.php\n- 598 # models/Kombinasi.php\n- 599 # models/KoperasiBlokir.php\n- 600 # models/KoperasiSekunder.php\n- 601 # models/Log.php\n- 602 # models/LogDukcapil.php\n- 603 # models/LogService.php\n- 604 # models/LoginForm.php\n- 605 # models/MKbli.php\n- 606 # models/MMatch.php\n- 607 # models/MappingKBLI.php\n- 608 # models/MasterBan.php\n- 609 # models/MasterBanKalimat.php\n- 610 # models/MasterPerubahan.php\n- 611 # models/MasterProduk.php\n- 612 # models/ModalUsaha.php\n- 613 # models/NotarisNpak.php\n- 614 # models/Pelabuhan.php\n- 615 # models/PemilikManfaat.php\n- 616 # models/PolaPengelolaan.php\n- 617 # models/SK.php\n- 618 # models/Setting.php\n- 619 # models/StatementDisclaimer.php\n- 620 # models/StatusPengurus.php\n- 621 # models/TPendirianDokumen.php\n- 622 # models/TPerubahanDokumen.php\n- 623 # models/TingkatWilayah.php\n- 624 # models/TransaksiPembubaran.php\n- 625 # models/User.php\n- 626 # models/UserDinas.php\n- 627 # models/Wilayah.php\n- 628 # models/WilayahNotariat.php\n- 629 # models/WilayahOds.php\n- 630 # models/BaseNik.php\n- 631 # models/ChecklistPerbaikan.php\n- 632 # models/ChecklistPerbaikanForm.php\n- 633 # models/MasterPerbaikan.php\n- 634 # models/MasterTransaction.php\n- 635 # models/PesanNama.php\n- 636 # models/TransaksiKoperasi.php\n- 637 # models/TransaksiPerbaikan.php\n- 638 # models/VerifikasiPerbaikan.php\n- 639 # models/WilayahSabh.php\n- 640 # models/bakum/KBLIBakum.php\n- 641 # models/bakum/LogCodex.php\n- 642 # models/bakum/WilayahSABH.php\n- 643 # models/forms/AdminEditForm.php\n- 644 # models/forms/BlokirKalimatForm.php\n- 645 # models/forms/BlokirNamaForm.php\n- 646 # models/forms/KuisionerForm.php\n- 647 # models/forms/MMatchForm.php\n- 648 # models/forms/ModalUsahaForm.php\n- 649 # models/forms/NikForm.php\n- 650 # models/forms/NpakForm.php\n- 651 # models/forms/PembubaranForm.php\n- 652 # models/forms/PendirianForm.php\n- 653 # models/forms/PerubahanForm.php\n- 654 # models/forms/SettingExpForm.php\n- 655 # models/forms/UserDinasDataForm.php\n- 656 # models/forms/UserDinasForm.php\n- 657 # models/forms/UserDinasFormEdit.php\n- 658 # models/forms/PerbaikanDataForm.php\n- 659 # models/forms/PesanNamaForm.php\n- 660 # models/notariat/MsSkAdditional.php\n- 661 # models/notariat/Negara.php\n- 662 # models/notariat/Notaris.php\n- 663 # models/notariat/TransaksiNotaris.php\n- 664 # models/search/BanSearch.php\n- 665 # models/search/BlokirKoperasiSearch.php\n- 666 # models/search/DaftarKoperasiSearch.php\n- 667 # models/search/KBLIBakumSearch.php\n- 668 # models/search/KalimatBanSearch.php\n- 669 # models/search/MMatchSearch.php\n- 670 # models/search/NPAKSearch.php\n- 671 # models/search/PembubaranSearch.php\n- 672 # models/search/PesanNamaSearch.php\n- 673 # models/search/SettingExpSearch.php\n- 674 # models/search/UserDinasSearch.php\n- 675 # models/search/DaftarPerbaikanSearch.php\n- 676 # modules/Api/Api.php\n- 677 # modules/Api/components/AuthHelper.php\n- 678 # modules/Api/components/DataAnggotaHelper.php\n- 679 # modules/Api/components/JWTHelper.php\n- 680 # modules/Api/components/SKHelper.php\n- 681 # modules/Api/components/TimeHelper.php\n- 682 # modules/Api/components/TransaksiHelper.php\n- 683 # modules/Api/controllers/AuthController.php\n- 684 # modules/Api/controllers/DukcapilController.php\n- 685 # modules/Api/controllers/TransaksiController.php\n- 686 # modules/Api/controllers/WilayahController.php\n- 687 # modules/Api/models/JWTToken.php\n- 688 # services/ElkLoggingService.php\n- 689 # services/ElsKoperasiService.php\n- 690 # vagrant/config/vagrant-local.example.yml\n- 691 # views/admin/ListModalUsaha.php\n- 692 # views/admin/TambahBlokirKalimat.php\n- 693 # views/admin/TambahBlokirNama.php\n- 694 # views/admin/TambahModalUsaha.php\n- 695 # views/admin/list-blokir.php\n- 696 # views/admin/list-kalimat-blokir.php\n- 697 # views/admin/nik-form.php\n- 698 # views/admin/npak-form.php\n- 699 # views/admin/npak-list.php\n- 700 # views/admin/npak-search-sk-notaris.php\n- 701 # views/admin/profilLengkap.php\n- 702 # views/admin/transaksiKoperasi.php\n- 703 # views/admin/daftarKoperasi.php\n- 704 # views/admin/list-pesan-nama.php\n- 705 # views/admin/profil/pendirian.php\n- 706 # views/admin/profil/perubahan.php\n- 707 # views/admin/settingExpired/_form.php\n- 708 # views/admin/settingExpired/add_edit.php\n- 709 # views/admin/settingExpired/index.php\n- 710 # views/admin/transaksi/edit_pendirian.php\n- 711 # views/admin/transaksi/edit_perubahan.php\n- 712 # views/admin/transaksi/detail.php\n- 713 # views/admin/userDinas/add.php\n- 714 # views/admin/userDinas/edit.php\n- 715 # views/admin/userDinas/index.php\n- 716 # views/admin/whitelist/_form.php\n- 717 # views/admin/whitelist/add_edit.php\n- 718 # views/admin/whitelist/index.php\n- 719 # views/blokir/_formBlokir.php\n- 720 # views/blokir/daftarkop.php\n- 721 # views/blokir/listblokir.php\n- 722 # views/blokir/riwayatblokir.php\n- 723 # views/dinas/DaftarKoperasi.php\n- 724 # views/dinas/detail.php\n- 725 # views/dinas/transaksiKoperasi.php\n- 726 # views/layouts/login.php\n- 727 # views/layouts/main-old.php\n- 728 # views/layouts/main.php\n- 729 # views/layouts/new-form.php\n- 730 # views/log/index.php\n- 731 # views/pembubaran/_err.php\n- 732 # views/pembubaran/daftarPembubaran.php\n- 733 # views/pembubaran/detail.php\n- 734 # views/pembubaran/index.php\n- 735 # views/pembubaran/pembubaranForm.php\n- 736 # views/pembubaran/surat_bubar.php\n- 737 # views/pendirian/_err.php\n- 738 # views/pendirian/_form.php\n- 739 # views/pendirian/_modal_bakum_kop.php\n- 740 # views/pendirian/_modal_kbli.php\n- 741 # views/pendirian/_modal_pemilik_manfaat.php\n- 742 # views/pendirian/_modal_pengawas_pengurus.php\n- 743 # views/pendirian/index.php\n- 744 # views/pendirian/sk_pendirian.php\n- 745 # views/pendirian/sk_pendirian_merah_putih.php\n- 746 # views/pendirian/uploadDocument.php\n- 747 # views/pendirian/_step2.php\n- 748 # views/pendirian/form-pendirian.php\n- 749 # views/pendirian/kuisioner.php\n- 750 # views/pendirian/listTransaction.php\n- 751 # views/pendirian/preview.php\n- 752 # views/perubahan/UploadDocument.php\n- 753 # views/perubahan/_modal_bakum_kop.php\n- 754 # views/perubahan/_modal_bakum_kop_pembagian.php\n- 755 # views/perubahan/anggaranDasar.php\n- 756 # views/perubahan/form-perubahan.php\n- 757 # views/perubahan/kuisioner.php\n- 758 # views/perubahan/preview.php\n- 759 # views/perubahan/sk_perubahan.php\n- 760 # views/perubahan/sk_perubahan_merah_putih.php\n- 761 # views/perubahan/sp_pelaporan.php\n- 762 # views/perubahan/checklistPerubahan.php\n- 763 # views/perubahan/listTransaction.php\n- 764 # views/pesan-nama/_bukti_pdf.php\n- 765 # views/pesan-nama/_err.php\n- 766 # views/pesan-nama/_step2.php\n- 767 # views/pesan-nama/index.php\n- 768 # views/pesan-nama/sukses.php\n- 769 # views/pesan-nama/_form.php\n- 770 # views/pesan-nama/listPesan.php\n- 771 # views/qr-code/sk.php\n- 772 # views/qr-code/sp.php\n- 773 # views/site/about.php\n- 774 # views/site/contact.php\n- 775 # views/site/error.php\n- 776 # views/site/index.php\n- 777 # views/site/login.php\n- 778 # views/users/change-password.php\n- 779 # views/bakum-verifikator/_perbaikan_bo_pengurus.php\n- 780 # views/bakum-verifikator/_perbaikan_data_perbaikan.php\n- 781 # views/bakum-verifikator/_perbaikan_form_koperasi.php\n- 782 # views/bakum-verifikator/_perbaikan_modal_scripts.php\n- 783 # views/bakum-verifikator/_perbaikan_styles.php\n- 784 # views/bakum-verifikator/_verifikasi_bo_pengurus.php\n- 785 # views/bakum-verifikator/_verifikasi_data_koperasi_kegiatan.php\n- 786 # views/bakum-verifikator/_verifikasi_data_perbaikan.php\n- 787 # views/bakum-verifikator/_verifikasi_panel.php\n- 788 # views/bakum-verifikator/_verifikasi_scripts.php\n- 789 # views/bakum-verifikator/_verifikasi_styles.php\n- 790 # views/bakum-verifikator/daftarPerbaikanData.php\n- 791 # views/bakum-verifikator/perbaikanVerifikasi.php\n- 792 # views/bakum-verifikator/verifikasiPerbaikan.php\n- 793 # views/perbaikan-data/_formChecklistPerbaikan.php\n- 794 # views/perbaikan-data/_formKegiatanUsaha.php\n- 795 # views/perbaikan-data/_formPemilikManfaat.php\n- 796 # views/perbaikan-data/_formPengawasPengurus.php\n- 797 # views/perbaikan-data/_formSuratPermohonan.php\n- 798 # views/perbaikan-data/_headerInformasiKoperasi.php\n- 799 # views/perbaikan-data/_headerReminder.php\n- 800 # views/perbaikan-data/_modal_kbli.php\n- 801 # views/perbaikan-data/anggaranDasar.php\n- 802 # views/perbaikan-data/daftarPermohonan.php\n- 803 # views/perbaikan-data/detailPermohonan.php\n- 804 # views/perbaikan-data/formStepDataPemohon.php\n- 805 # views/perbaikan-data/formStepPermohonan.php\n- 806 # views/perbaikan-data/index.php\n- 807 # web/index-test.php\n- 808 # web/index.php\n- 809 # web/frontend/dist/images/favicon/manifest.json\n- 810 # web/frontend/dist/images/favicon/yandex-browser-manifest.json\n- 811 # web/frontend/src/package.json\n- 812 # web/frontend/src/boilerplate/init/framework/01-reactJSX.json\n- 813 # web/frontend/src/boilerplate/init/framework/02-backboneMarionette.json\n- 814 # web/frontend/src/boilerplate/init/framework/03-backbone.json\n- 815 # web/frontend/src/boilerplate/init/framework/04-angular2.json\n- 816 # web/frontend/src/boilerplate/init/framework/05-aurelia.json\n- 817 # web/frontend/src/boilerplate/init/framework/06-react-redux.json\n- 818 # web/frontend/src/boilerplate/init/framework/nothing.json\n- 819 # web/frontend/src/boilerplate/init/language/01-babel.json\n- 820 # web/frontend/src/boilerplate/init/language/02-coffeescript.json\n- 821 # web/frontend/src/boilerplate/init/language/nothing.json\n- 822 # web/frontend/src/boilerplate/init/preprocessor/01-sass.json\n- 823 # web/frontend/src/boilerplate/init/preprocessor/02-stylus.json\n- 824 # web/frontend/src/boilerplate/init/preprocessor/03-less.json\n- 825 # web/frontend/src/boilerplate/init/preprocessor/nothing.json\n- 826 # web/frontend/src/src/config.json\n- 827 # web/koperasi-dashboard/dist/images/favicon/manifest.json\n- 828 # web/koperasi-dashboard/dist/images/favicon/yandex-browser-manifest.json\n- 829 # web/koperasi-dashboard/src/package.json\n- 830 # web/koperasi-dashboard/src/boilerplate/init/framework/01-reactJSX.json\n- 831 # web/koperasi-dashboard/src/boilerplate/init/framework/02-backboneMarionette.json\n- 832 # web/koperasi-dashboard/src/boilerplate/init/framework/03-backbone.json\n- 833 # web/koperasi-dashboard/src/boilerplate/init/framework/04-angular2.json\n- 834 # web/koperasi-dashboard/src/boilerplate/init/framework/05-aurelia.json\n- 835 # web/koperasi-dashboard/src/boilerplate/init/framework/06-react-redux.json\n- 836 # web/koperasi-dashboard/src/boilerplate/init/framework/nothing.json\n- 837 # web/koperasi-dashboard/src/boilerplate/init/language/01-babel.json\n- 838 # web/koperasi-dashboard/src/boilerplate/init/language/02-coffeescript.json\n- 839 # web/koperasi-dashboard/src/boilerplate/init/language/nothing.json\n- 840 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/01-sass.json\n- 841 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/02-stylus.json\n- 842 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/03-less.json\n- 843 # web/koperasi-dashboard/src/boilerplate/init/preprocessor/nothing.json\n- 844 # web/koperasi-dashboard/src/src/config.json\n- 845 # widgets/Alert.php\n\nFormat the output as a YAML list of dictionaries:\n\n```yaml\n- name: |\n    Query Processing\n  description: |\n    Explains what the abstraction does.\n    It's like a central dispatcher routing requests.\n  file_indices:\n    - 0 # path/to/file1.py\n    - 3 # path/to/related.py\n- name: |\n    Query Optimization\n  description: |\n    Another core concept, similar to a blueprint for objects.\n  file_indices:\n    - 5 # path/to/another.js\n# ... up to 10 abstractions\n```": "Based on the codebase analysis, here are the top 10 core abstractions for the Koperasi (Cooperative) system:\n\n```yaml\n- name: |\n    Transaksi Koperasi (Cooperative Transaction)\n  description: |\n    The heart of the cooperative system that manages all transactions like establishment, changes, and dissolution of cooperatives. \n    It's like a ledger that records every important event in a cooperative's lifecycle, from birth to any modifications.\n  file_indices:\n    - 636 # models/TransaksiKoperasi.php\n    - 682 # modules/Api/components/TransaksiHelper.php\n    - 685 # modules/Api/controllers/TransaksiController.php\n    - 46 # controllers/PendirianController.php\n    - 48 # controllers/PerubahanController.php\n\n- name: |\n    Pesan Nama (Name Reservation)\n  description: |\n    Handles the cooperative name reservation system, ensuring unique names are reserved before establishment.\n    Like reserving a domain name before building a website - you claim it first to ensure no one else can use it.\n  file_indices:\n    - 635 # models/PesanNama.php\n    - 49 # controllers/PesanNamaController.php\n    - 659 # models/forms/PesanNamaForm.php\n    - 767 # views/pesan-nama/index.php\n\n- name: |\n    API Authentication & JWT\n  description: |\n    Security layer that validates external API requests using JWT tokens and various authentication methods.\n    Acts like a security guard checking credentials before allowing access to sensitive cooperative data.\n  file_indices:\n    - 677 # modules/Api/components/AuthHelper.php\n    - 679 # modules/Api/components/JWTHelper.php\n    - 683 # modules/Api/controllers/AuthController.php\n    - 687 # modules/Api/models/JWTToken.php\n\n- name: |\n    Dukcapil Integration\n  description: |\n    Validates citizen identity data against the national population database (Dukcapil).\n    Like a background check system that verifies people's identities are legitimate before they can manage cooperatives.\n  file_indices:\n    - 10 # components/HelperDukcapil.php\n    - 684 # modules/Api/controllers/DukcapilController.php\n    - 602 # models/LogDukcapil.php\n\n- name: |\n    Master Transaction Management\n  description: |\n    Tracks the main cooperative records and their status (active, merged, dissolved).\n    Similar to a master directory that maintains the official status of all registered cooperatives.\n  file_indices:\n    - 634 # models/MasterTransaction.php\n    - 680 # modules/Api/components/SKHelper.php\n    - 617 # models/SK.php\n\n- name: |\n    Notaris Integration\n  description: |\n    Manages notary-related operations for cooperative legal documents and authentication.\n    Like having a legal witness system that validates and certifies all cooperative establishment documents.\n  file_indices:\n    - 662 # models/notariat/Notaris.php\n    - 613 # models/NotarisNpak.php\n    - 17 # components/NpakHelper.php\n    - 663 # models/notariat/TransaksiNotaris.php\n\n- name: |\n    Wilayah (Regional) Management\n  description: |\n    Handles geographical location data for cooperatives across Indonesian provinces, cities, and districts.\n    Works like a GPS system that organizes cooperatives by their physical locations in the administrative hierarchy.\n  file_indices:\n    - 627 # models/Wilayah.php\n    - 629 # models/WilayahOds.php\n    - 642 # models/bakum/WilayahSABH.php\n    - 686 # modules/Api/controllers/WilayahController.php\n\n- name: |\n    Data Anggota (Member Data)\n  description: |\n    Manages cooperative members, including board members and supervisors with their roles and personal information.\n    Like an employee directory that keeps track of who holds what position in the cooperative organization.\n  file_indices:\n    - 590 # models/DataAnggota.php\n    - 678 # modules/Api/components/DataAnggotaHelper.php\n    - 620 # models/StatusPengurus.php\n\n- name: |\n    Perbaikan Data (Data Correction)\n  description: |\n    Handles requests to correct cooperative data after establishment, with verification workflow.\n    Similar to an edit request system where changes must be reviewed and approved before being applied.\n  file_indices:\n    - 658 # models/forms/PerbaikanDataForm.php\n    - 47 # controllers/PerbaikanDataController.php\n    - 637 # models/TransaksiPerbaikan.php\n    - 638 # models/VerifikasiPerbaikan.php\n\n- name: |\n    KBLI Business Activity\n  description: |\n    Manages Indonesian Standard Industrial Classification codes for cooperative business activities.\n    Like categorizing cooperatives by their business type - whether they're agricultural, retail, or service cooperatives.\n  file_indices:\n    - 580 # models/AktifitasUsaha.php\n    - 640 # models/bakum/KBLIBakum.php\n    - 607 # models/MappingKBLI.php\n    - 605 # models/MKbli.php\n```", "\nBased on the following abstractions and relevant code snippets from the project `koperasi`:\n\nList of Abstraction Indices and Names:\n0 # Transaksi Koperasi (Cooperative Transaction)\n\n1 # Pesan Nama (Name Reservation)\n\n2 # API Authentication & JWT\n\n3 # Dukcapil Integration\n\n4 # Master Transaction Management\n\n5 # Notaris Integration\n\n6 # Wilayah (Regional) Management\n\n7 # Data Anggota (Member Data)\n\n8 # Perbaikan Data (Data Correction)\n\n9 # KBLI Business Activity\n\n\nContext (Abstractions, Descriptions, Code):\nIdentified Abstractions:\\n- Index 0: Transaksi Koperasi (Cooperative Transaction)\n (Relevant file indices: [46, 48, 636, 682, 685])\\n  Description: The heart of the cooperative system that manages all transactions like establishment, changes, and dissolution of cooperatives. \nIt's like a ledger that records every important event in a cooperative's lifecycle, from birth to any modifications.\n\\n- Index 1: Pesan Nama (Name Reservation)\n (Relevant file indices: [49, 635, 659, 767])\\n  Description: Handles the cooperative name reservation system, ensuring unique names are reserved before establishment.\nLike reserving a domain name before building a website - you claim it first to ensure no one else can use it.\n\\n- Index 2: API Authentication & JWT\n (Relevant file indices: [677, 679, 683, 687])\\n  Description: Security layer that validates external API requests using JWT tokens and various authentication methods.\nActs like a security guard checking credentials before allowing access to sensitive cooperative data.\n\\n- Index 3: Dukcapil Integration\n (Relevant file indices: [10, 602, 684])\\n  Description: Validates citizen identity data against the national population database (Dukcapil).\nLike a background check system that verifies people's identities are legitimate before they can manage cooperatives.\n\\n- Index 4: Master Transaction Management\n (Relevant file indices: [617, 634, 680])\\n  Description: Tracks the main cooperative records and their status (active, merged, dissolved).\nSimilar to a master directory that maintains the official status of all registered cooperatives.\n\\n- Index 5: Notaris Integration\n (Relevant file indices: [17, 613, 662, 663])\\n  Description: Manages notary-related operations for cooperative legal documents and authentication.\nLike having a legal witness system that validates and certifies all cooperative establishment documents.\n\\n- Index 6: Wilayah (Regional) Management\n (Relevant file indices: [627, 629, 642, 686])\\n  Description: Handles geographical location data for cooperatives across Indonesian provinces, cities, and districts.\nWorks like a GPS system that organizes cooperatives by their physical locations in the administrative hierarchy.\n\\n- Index 7: Data Anggota (Member Data)\n (Relevant file indices: [590, 620, 678])\\n  Description: Manages cooperative members, including board members and supervisors with their roles and personal information.\nLike an employee directory that keeps track of who holds what position in the cooperative organization.\n\\n- Index 8: Perbaikan Data (Data Correction)\n (Relevant file indices: [47, 637, 638, 658])\\n  Description: Handles requests to correct cooperative data after establishment, with verification workflow.\nSimilar to an edit request system where changes must be reviewed and approved before being applied.\n\\n- Index 9: KBLI Business Activity\n (Relevant file indices: [580, 605, 607, 640])\\n  Description: Manages Indonesian Standard Industrial Classification codes for cooperative business activities.\nLike categorizing cooperatives by their business type - whether they're agricultural, retail, or service cooperatives.\n\\n\\nRelevant File Snippets (Referenced by Index and Path):\\n--- File: 677 # modules/Api/components/AuthHelper.php ---\n<?php\nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\Setting;\n\nclass AuthHelper extends Component {\n    private static $hash = 'sha512';\n\n    public static function checkAuth($authKey, $nik) {\n\n        if(!$authKey || !$nik) {\n            return false;\n        }\n\n        $key = Setting::getValue('secret_key');\n        $hashed = hash(self::$hash, $key . $nik);\n        \n        if($hashed != $authKey) {\n            return false;\n        }\n\n        return true;\n    }\n}\n?>\n\n--- File: 684 # modules/Api/controllers/DukcapilController.php ---\n<?php\nnamespace app\\modules\\Api\\controllers;\n\nuse app\\components\\HelperDukcapil;\nuse Yii;\nuse yii\\rest\\Controller;\n\nclass DukcapilController extends Controller {\n\n    public function actionValidasiData() {\n        if(Yii::$app->user->isGuest){\n            return $this->redirect(['/']);\n        }\n        $status = HelperDukcapil::CheckIsActiveValidateDukcapil();\n        if($status){\n            $validate = new HelperDukcapil($_POST);\n            $error = $validate->curlValidDukcapil();\n            if ($error !== true) {\n                Yii::error(\"Dukcapil error: $error | Params: \" . json_encode($_POST), __METHOD__);\n            }\n            $response = $validate->response();\n        }else{\n            $response = HelperDukcapil::AllowValidation();\n        }\n\n        return $this->asJson($response);\n    }\n\n}\n\n--- File: 678 # modules/Api/components/DataAnggotaHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\StatusPengurus;\nuse app\\models\\JenisKelamin;\n\nclass DataAnggotaHelper extends Component {\n\n    public static function getIdStatusPengurus($nama) {\n        $data = StatusPengurus::find()->where(['nama' => strtoupper($nama)])->one();\n        \n        if(!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function getIdJenisKelamin($nama) {\n        $nama = self::normalizeJenisKelamin($nama);\n\n        $data = JenisKelamin::find()->where(['nama' => strtoupper($nama)])->one();\n        if(!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function normalizeJenisKelamin($nama) {\n        if(strtoupper($nama) == strtoupper('LAKI-LAKI') || strtoupper($nama) == strtoupper('LAKI - LAKI') ) {\n            return \"LAKI - LAKI\";\n        }\n        return $nama;\n    }\n}\n?>\n\n--- File: 686 # modules/Api/controllers/WilayahController.php ---\n<?php\nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse app\\models\\Wilayah;\nuse yii\\rest\\Controller;\n\nclass WilayahController extends Controller {\n\n    public function actionGetChildWilayah($id, $tipe) {\n        if (!$id || !Yii::$app->request->isAjax) {\n            return json_encode([['id' => '0','nama' => 'Tidak Ditemukan']]);\n        }\n        \n        $data = Wilayah::getChildWilayah($id, $tipe);\n        \n        if (!$data) {\n            return json_encode([['id' => '0','nama' => 'Tidak Ditemukan']]);\n        }\n\n        $arr = [];\n        foreach($data as $d) {\n            if($tipe == 'Kelurahan') {\n                $arr[] = [\n                    'id' => $d['ID_WIL'],\n                    'nama' => $d['NM_KELURAHAN'],\n                ];\n                continue;\n            }\n\n            $arr[] = [\n                'id' => $d['WILAYAH_ID'],\n                'nama' => $d['NAMA'],\n            ];\n        }\n        return json_encode($arr);\n    }\n\n}\n\n--- File: 679 # modules/Api/components/JWTHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\helpers\\Json;\nuse app\\models\\Setting;\n\nclass JWTHelper {\n\n    const SECRET = 'D0coSp4rtan2016';\n    const HASH_ALGO = \"sha256\";\n\n    public static function makeHeader() {\n        $data = [\n            \"alg\" => \"HS256\",\n            \"typ\" => \"JWT\"\n        ];\n\n        return base64_encode(Json::encode($data) );\n    }\n\n    public static function makePayload($payload) {\n        return base64_encode( Json::encode($payload) );\n    }\n\n    public static function makeSignature($header, $payload) {\n        $secretKey = Setting::getValue('jwt_token', self::SECRET);\n        $data = $header . \".\" . $payload;\n        return hash_hmac(self::HASH_ALGO, $data, self::SECRET);\n    }\n\n    public static function validateSignature($header, $payload, $signature) {\n        $checkSign = self::makeSignature($header, $payload);\n        return $checkSign == $signature;\n    }\n\n    public static function getDataPayload($payload) {\n        return base64_decode($payload);\n    }\n\n    public static function getDataHeader($header) {\n        return base64_decode($header);\n    }\n}\n?>\n\n--- File: 687 # modules/Api/models/JWTToken.php ---\n<?php \nnamespace app\\modules\\Api\\models;\n\nuse yii\\base\\Model;\nuse app\\modules\\Api\\components\\JWTHelper;\nuse yii\\helpers\\Json;\nuse yii\\base\\Exception;\n\nclass JWTToken extends Model {\n    public $token,\n           $header,\n           $payload,\n           $signature;\n\n    public function __construct($token = null)\n    {\n        parent::__construct();\n        $this->header = JWTHelper::makeHeader();\n\n        if($token) {\n            $this->mappingToken($token);\n        }\n    }\n\n\n    public function mappingToken($token) {\n        $removeBear = explode(\"Bearer \", $token);\n        $token = $removeBear[count($removeBear) - 1];\n        \n        $part = explode(\".\", $token);\n        $this->header = $part[0];\n        $this->payload = $part[1];\n        $this->signature = $part[2];\n        $this->token = $token;\n    }\n\n    public function validateSignature() {\n        return JWTHelper::validateSignature($this->header, $this->payload, $this->signature);\n    }\n\n    public function checkExpired() {\n        $data = $this->getDataPayload();\n\n        if(!array_key_exists('exp', $data)) {\n            return true;\n        }\n\n        $expired = Date(\"Y-m-d H:i:s\", strtotime($data['exp']));\n        $now = Date(\"Y-m-d H:i:s\");\n        \n        return $now <= $expired;\n    }\n\n    public function getDataPayload() {\n        $data = JWTHelper::getDataPayload($this->payload);\n        $jsonData = Json::decode($data);\n\n        if( !$jsonData ) {\n            throw new Exception(\"Format Payload Tidak Valid\");\n        }\n        return $jsonData;\n    }\n\n    public function generateToken()\n    {\n        $token = $this->header . \".\" . $this->payload . \".\" . $this->signature;\n        return $token;\n    }\n\n    public function setPayload($payload) {\n        $this->payload = JWTHelper::makePayload($payload);\n        $this->signature = JWTHelper::makeSignature($this->header, $this->payload);\n        return $this;\n    }\n}\n?>\n\n--- File: 602 # models/LogDukcapil.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse app\\services\\ElkLoggingService;\nuse DateTime;\nuse DateTimeZone;\n\n/**\n * This is the model class for table \"log_service\".\n *\n * @property int $id\n * @property string $ip_address\n * @property string $service_uri\n * @property string $nik\n * @property string $request\n * @property string $response\n * @property string $additional_data\n * @property string $created_at\n * @property int $is_error\n * @property string $type\n * @property string $execution_time\n */\nclass LogDukcapil extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'log_dukcapil';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('dbLogSimpadhu');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            array('nik, ip_address, type, is_error, created_at, header_code, request, response, additional_data, execution_time, service_uri, parent_id, resend, layanan', 'safe'),\n        ];\n    }\n\n\tpublic static function logDcp(\n        $params, \n        $response, \n        $status, \n        $type = 'VERIFNIK', \n        $exetime = 0, \n        $layanan, \n        $additional_data, \n        $parent_id = null, \n        $nik = null\n    ){\n        $request = is_string($params) ? json_decode($params) : $params;\n\n        $log = new LogDukcapil();\n        $log->nik = $nik;\n        $log->ip_address = Yii::$app->request->userIP;\n        $log->type = $type;\n        $log->is_error = $status == 200 ? 0 : 1;\n        $log->created_at = date(\"Y-m-d H:i:s\");\n        $log->header_code = $status;\n        $log->request = json_encode($request);\n        $log->response =json_encode(is_string($response) ? json_decode($response) : $response);\n        $log->additional_data = json_encode($additional_data);\n        $log->execution_time = $exetime;\n        $log->service_uri = Yii::$app->request->url;\n        $log->resend = $status == 200 ? 0 : 1;\n        $log->layanan = $layanan;\n        $log->parent_id = $parent_id;\n\n        // Penyesuaian Date agar menggunakan Timezone\n        $old_date = $log->created_at;\n        // Explicitly tell PHP that this time is already in WIB\n        $timezone = new DateTimeZone('Asia/Jakarta');\n        $newDate = new DateTime($old_date, $timezone);\n        \n        // Ensure no UTC conversion happens\n        $newDate->setTimezone($timezone);\n        \n        // Convert to ISO 8601 format with WIB timezone\n        $log->created_at = $newDate->format(DateTime::ATOM); \n\n        // Insert ke ELK\n        $elkLogging = new ElkLoggingService('dukcapil');\n\n        $elk_logging = $elkLogging->logApplication([\n            'nik' => $log->nik,\n            'ip_address' => $log->ip_address,\n            'type' => $log->type,\n            'is_error' => $log->is_error,\n            'created_at' => $log->created_at,\n            'header_code' => $log->header_code,\n            'request' => $log->request,\n            'response' => $log->response,\n            'additional_data' => $log->additional_data,\n            'execution_time' => strval($log->execution_time),\n            'service_uri' => $log->service_uri,\n            'resend' => $log->resend,\n            'layanan' => $log->layanan,\n            'parent_id' => $log->parent_id,\n        ]);\n\n        if ($elk_logging !== false) {\n            $result = $elk_logging;\n        } else {\n            $log->created_at = $old_date;\n            $log->save();\n        }\n    }\n}\n\n\n--- File: 680 # modules/Api/components/SKHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse Yii;\nuse app\\models\\SK;\nuse yii\\base\\Component;\nuse app\\models\\PesanNama;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\ChecklistPerubahan;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\n\nclass SKHelper extends Component {\n\n    public static function pushPerubahan($id) {\n        \n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        if ( $transaksi->is_finish == -1 ) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_perubahan', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        }\n        else {\n            $transaksi->is_finish = 1;\n\n            $pnID = [4]; // group of ids which needs to change pesan nama table\n            $bhPenggabungan = [2];\n            $group = [];\n            $idMaster = $transaksi->id_master;\n            $raw = ChecklistPerubahan::find()->joinWith(['masterPerubahan'])->where(['t_koperasi_id' => $id])->all();\n\n            if ( empty( $raw ) ) {\n\n            \techo 0; //data not found\n            \texit();\n            }\n\n            $changePesanNama = false;\n            $changePenggabungan = false;\n            foreach ($raw as $checks) {\n\n            \tif ( empty( $group ) OR ! in_array($checks->masterPerubahan->groups, $group) ) {\n\n\t            \tarray_push($group, $checks->masterPerubahan->groups);\n            \t}\n            \t\n            \tif ( in_array($checks->masterPerubahan->id, $pnID) ) {\n\n            \t\t$changePesanNama = true;\n            \t}\n            \t\n            \tif ( in_array($checks->masterPerubahan->id, $bhPenggabungan) ) {\n\n            \t\t$changePenggabungan = true;\n            \t}\n            }\n\n            $SKins = self::generateSurat( $group, $transaksi );\n\n            // change pesan nama status if master perubahan = 4 / Nama Koperasi\n            if ( $changePesanNama ) {\n            \t// var_dump('pesan');\n            \tself::changePesanNama( $transaksi, $idMaster );\n            }\n\n            // change is gabung if perubahan master id = 2 / penggabungan\n            if ( $changePenggabungan ) {\n            \t// var_dump( 'gabung' );\n            \tself::changeMasterTransactionIsGabung( $id );\n            }\n\n            // exit();\n\n            MasterTransaction::updateAll(['id_transaksi' => $id, 'id_sk' => $SKins->id], ['id' => $idMaster]);\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n        $transaksi->tanggal_jangka_waktu = ! empty( $transaksi->jumlah_jangka_waktu ) ? date(\"Y-m-d\", strtotime($transaksi->tanggal_jangka_waktu . \" + \".$transaksi->jumlah_jangka_waktu.\" year\")) : $transaksi->tanggal_jangka_waktu;\n\n        return $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'tanggal_jangka_waktu'));\n    }\n\n    public static function generateSurat( $group, $transaksi ) {\n\n        if ( empty( SK::find()->where(['t_koperasi_id' => $transaksi->id])->one() ) ) {\n\n\t        $SKins = new SK();\n\t        if ( count($group) < 2 ) {\n\n\t            $SKins->t_koperasi_id = $transaksi->id;\n\t            $SKins->no_sk_koperasi = $group[0] == 1 ? Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPerubahan() : self::getLastSK( $transaksi->id_master );\n\t            $SKins->no_sp_koperasi = $group[0] == 2 ? Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPelaporan() : NULL;\n\t        }\n\t        else {\n\n\t            $SKins->t_koperasi_id = $transaksi->id;\n\t            $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPerubahan();\n\t            $SKins->no_sp_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPelaporan();\n\t        }\n        }\n        else {\n\n        \t$SKins = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n        }\n\n        $SKins->save();\n\n        return $SKins;\n    }\n\n    public static function changePesanNama( $transaksi, $idMaster ) {\n\n    \t// change status of new name\n        PesanNama::updateAll(['status' => 1], ['id' => $transaksi->t_pesan_nama_id]);\n\n        // change is delete on before latest transaction\n    \t$raw = TransaksiKoperasi::findLastTransaction( TransaksiKoperasi::BEFORE_LATEST, $idMaster );\n    \t$lastID = $raw['id'];\n    \t$idPesanNama = $raw['t_pesan_nama_id'];\n\n        PesanNama::updateAll(['is_deleted' => 1], ['id' => $idPesanNama]);\n    }\n\n    public static function changeMasterTransactionIsGabung( $id ) {\n\n    \t// code goes here\n    \t$raw = BHPenggabungan::find()->where(['t_koperasi_id' => $id])->all();\n\n    \t// update master\n    \tforeach ($raw as $key) {\n\n\t\t\tMasterTransaction::updateAll(['is_gabung' => 1], ['id' => $key->d_koperasi_id]);\n    \t}\n    }\n    \n    public static function getLastSK( $idMaster ) {\n\n    \t$raw = MasterTransaction::find()->joinWith(['surat'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n\n    \treturn $raw->surat->no_sk_koperasi;\n    }\n}\n?>\n\n--- File: 683 # modules/Api/controllers/AuthController.php ---\n<?php \nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Json;\nuse yii\\rest\\Controller;\nuse yii\\filters\\VerbFilter;\nuse app\\components\\LogHelper;\nuse app\\modules\\Api\\models\\JWTToken;\nuse app\\modules\\Api\\components\\TimeHelper;\nuse yii\\base\\Exception;\nuse app\\models\\User;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\Setting;\nuse Firebase\\JWT\\JWT;\n\nclass AuthController extends Controller {\n\n    const EXPR_TIME_TOKEN = \"+30 minutes\";\n    private static $hash = 'sha512';\n\n    public function behaviors()\n    {\n        return [\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    'login-jwt' => ['POST'],\n                ],\n            ],\n        ];\n    }\n\n    public function actionLoginJwt() {\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"GET_JWT_TOKEN\";\n        $headers = Yii::$app->request->headers;\n        $body = Json::encode(Yii::$app->request->bodyParams);\n\n        try {\n            $dataJson = Json::decode($body);\n\n            if( !$dataJson ) {\n                try {\n                    $dataXml = simplexml_load_string(Yii::$app->request->rawBody);\n                    $json = json_encode($dataXml);\n                    $dataJson = json_decode($json, true);\n                } catch (\\Exception $e) {\n                    throw new Exception(\"Format XML Tidak Valid\", 400);\n                }\n            }\n\n            if( !array_key_exists('username', $dataJson)) {\n                throw new Exception(\"Data Username Tidak Ditemukan\", 400);\n            }\n\n            if( !array_key_exists('password', $dataJson)) {\n                throw new Exception(\"Data Password Tidak Ditemukan\", 400);\n            }\n            $username = $dataJson['username'];\n            $password = $dataJson['password'];\n\n            $dataUser = $this->getUserAuth($username, $password);\n\n            if( !$dataUser ) {\n                throw new Exception(\"User Tidak Ditemukan\", 401);\n            }\n\n            $hashKey = Setting::getValue('jwt_key');\n            $tokenId = $this->generate_sign();\n            $issuedAt = time();\n            $notBefore = $issuedAt;\n            $expire = $notBefore + 1800; // adding 60 minutes\n            $serverName = \"AHU-ONLINE\";\n\n            $token = new JWT();\n            $data = [\n                'iat' => $issuedAt,\n                'jti' => $tokenId,\n                'iss' => $serverName,\n                'nbf' => $notBefore,\n                'exp' => $expire,\n                'data' => [\n                    'theOneThatWeGaveId'   => $dataUser->id,\n                    'theOneThatWeGaveName' => $username,\n                ]\n            ];\n\n            $secretKey = base64_encode($hashKey);\n            $algorithm = 'HS256';\n            $token = $token::encode($data, $secretKey, $algorithm);\n        }\n        catch(\\Exception $e) {\n            $res = [\n                'code' => '01',\n                'message' => $e->getMessage(),\n                'status' => $e->getCode(),\n            ];\n            \n            $log = LogHelper::saveLog([\n                'service_uri' => $url,\n                'request' => $body,\n                'response' => $res,\n                'additional_data' => Json::encode( $headers->toArray() ),\n                'is_error' => 1,\n                'type' => $type_api,\n                'execution_time' => TimeHelper::getElapsedTime($start),\n            ]);\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '02',\n            'message' => 'success',\n            'token' => $token,\n            'status' => 200\n        ];\n\n        $log = LogHelper::saveLog([\n            'service_uri' => $url,\n            'request' => $body,\n            'response' => $res,\n            'additional_data' => Json::encode( $headers->toArray() ),\n            'is_error' => 0,\n            'type' => $type_api,\n            'execution_time' => TimeHelper::getElapsedTime($start),\n        ]);\n        \n        return $this->asJson($res);\n    }\n\n    public function actionAuthorization(){\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"GET_AUTH_TOKEN\";\n        $headers = Yii::$app->request->headers;\n        $body = Json::encode(Yii::$app->request->bodyParams);\n\n        try {\n            $dataJson = Json::decode($body);\n\n            if( !$dataJson ) {\n                throw new Exception(\"Format JSON Tidak Valid\");\n            }\n\n            if( !array_key_exists('nomor_transaksi', $dataJson)) {\n                throw new Exception(\"Data nomor_transaksi Tidak Ditemukan\", 400);\n            }\n\n            if( !array_key_exists('secret_key', $dataJson)) {\n                throw new Exception(\"Data secret_key Tidak Ditemukan\", 400);\n            }\n\n\n            $nomor_transaksi = $dataJson['nomor_transaksi'];\n            $secret_key = $dataJson['secret_key'];\n\n            $dataAuth = $this->getUpdateAuth($nomor_transaksi, $secret_key);\n\n            if( !$dataAuth ) {\n                throw new Exception(\"Auth Tidak Berhasil\", 401);\n            }\n\n            $token = $dataAuth;\n        \n        }\n        catch(\\Exception $e) {\n            $res = [\n                'code' => '01',\n                'message' => $e->getMessage(),\n                'status' => $e->getCode(),\n            ];\n            \n            $log = LogHelper::saveLog([\n                'service_uri' => $url,\n                'request' => $body,\n                'response' => $res,\n                'additional_data' => Json::encode( $headers->toArray() ),\n                'is_error' => 1,\n                'type' => $type_api,\n                'execution_time' => TimeHelper::getElapsedTime($start),\n            ]);\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '02',\n            'message' => 'success',\n            'token' => $token,\n            'status' => 200\n        ];\n\n        $log = LogHelper::saveLog([\n            'service_uri' => $url,\n            'request' => $body,\n            'response' => $res,\n            'additional_data' => Json::encode( $headers->toArray() ),\n            'is_error' => 0,\n            'type' => $type_api,\n            'execution_time' => TimeHelper::getElapsedTime($start),\n        ]);\n        \n        return $this->asJson($res);\n    }\n\n    public function getUpdateAuth($nomor_transaksi, $secret_key){\n        $hashed = hash(self::$hash, $secret_key . $nomor_transaksi);\n        return $hashed;\n    }\n\n    public function getUserAuth($username, $password) {\n        // Tambahkan disini jika ada group lain yang diperbolehkan get JWT Token\n        $whitelist_group = [\n            'oss',\n            'ods',\n        ];\n        $user = User::findByUsername($username);\n\n        if( !$user ) {\n            throw new Exception(\"User Tidak Ditemukan\", 404);\n        }\n\n        $cekPass = $user->validatePassword($password);\n\n        if( !$cekPass ) {\n            throw new Exception(\"Username / Password Salah\", 401);\n        }\n\n        $groups = ArrayHelper::getColumn($user->userGroup, 'group_id');\n        \n        foreach($whitelist_group as $whitelist) {\n            if( in_array($whitelist, $groups) ) {\n                return $user;\n            }\n        }\n\n        return false;\n    }\n\n    public static function generate_sign() {\n        $now = time();\n        $setengah_jam = (int)floor($now / 30 / 60);\n        $t = 'candrabeqx' . $setengah_jam . 'docotel';\n        $x = crypt($t, \"$2y$10$\" . substr(md5($t),0,22));\n\n        return $x;\n    }\n\n}\n?>\n\n--- File: 10 # components/HelperDukcapil.php ---\n<?php\n\nnamespace app\\components;\n\nuse app\\models\\LogDukcapil;\nuse app\\models\\PemilikManfaat;\nuse Yii;\nuse yii\\base\\Component;\n\nclass HelperDukcapil extends Component\n{    \n    public $USER_ID;\n    public $PASSWORD;\n    public $IP_USER;\n    public $TRESHOLD;\n    public $NIK;\n    public $NAMA_LGKP;\n    public $URL_API;\n    public $ID_KOPERASI;\n\n    public $FILTER_RESPONSE = [\n        'NAMA_LGKP' => 'NAMA tidak sesuai dengan data yang terdapat di database Kependudukan',\n    ];\n\n    protected $responseCurl;\n\n    public function __construct($data = [])\n    {\n        $this->getConfigDukcapil();\n\n        $this->ID_KOPERASI = isset($data['id_koperasi']) ? $data['id_koperasi'] : '';\n        $this->NIK = isset($data['nik']) ? $data['nik'] : '';\n        $this->NAMA_LGKP = isset($data['nama']) ? $data['nama'] : '';\n    }\n\n    protected function getConfigDukcapil()\n    {\n        $config = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'credential_dukcapil'\"\n        )->queryOne();\n\n        if($config){\n            $decode = json_decode($config['value']);\n            $this->USER_ID = $decode->user_id;\n            $this->PASSWORD = $decode->password;\n            $this->IP_USER = $decode->ip_user;\n            $this->TRESHOLD = $decode->treshold;\n            $this->URL_API = $decode->url_api;\n        }\n    }\n\n    public function mappingDataDukcapil(){\n        $data = array(\n            'USER_ID' => $this->USER_ID,\n            'PASSWORD' => $this->PASSWORD,\n            'IP_USER' => $this->IP_USER,\n            'TRESHOLD' => $this->TRESHOLD,\n            'NIK' => $this->NIK,\n            'NAMA_LGKP' => $this->NAMA_LGKP\n        );\n        return json_encode($data);\n    }\n\n    public function curlValidDukcapil() {\n        $params = str_replace(\"\\\\/\",\"/\",$this->mappingDataDukcapil());\n\n        $ch = curl_init();\n        curl_setopt($ch,CURLOPT_URL, $this->URL_API);\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);\n        curl_setopt($ch,CURLOPT_HTTPHEADER, array(\"Accept:application/json\", \"Content-Type:application/json\"));\n        curl_setopt($ch,CURLOPT_POST, true);\n        curl_setopt($ch,CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n        $time_start = microtime(true);\n        $result = curl_exec($ch);\n        $time = sprintf('%.3f', microtime(true) - $time_start) . 's';\n        $info = curl_getinfo($ch);\n\n        $error = null;\n        if(curl_errno($ch)) {\n            $error = curl_error($ch);\n            if (in_array(curl_errno($ch), array(CURLE_OPERATION_TIMEDOUT, CURLE_OPERATION_TIMEOUTED))) {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'],\n                    ])\n                );\n            } else {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => curl_error($ch)],\n                    ])\n                );\n            }\n        }\n\n        curl_close($ch);\n        \n        $res = json_decode($result, true);\n\n        $data = (object)$res;\n        \n        LogDukcapil::logDcp($params, $result, $info['http_code'], 'VERIFNIK',$time,'KOPERASI', $info, $this->ID_KOPERASI, $this->NIK);\n\n        $data = $data->content[0];\n        $this->responseCurl = (object) $data;\n        return $error ?: true;\n    }\n\n    public function mapingResponse($res)\n    {\n        $response = [\n            'status' => 1,\n            'data' => []\n        ];\n\n        if (isset($res)) {\n            if (isset($res->RESPONSE_CODE)) {\n                $data = $this->processCode($res->RESPONSE_CODE, $res->RESPONSE);\n                if($data){\n                    $response['status'] = 0;\n                    $response['data'][] = $data;\n                }\n            } elseif (isset($res->RESPONSE)){\n                $response['status'] = 0;\n                $response['data'][] = $res->RESPONSE;\n            }else {\n                $data = [];\n                $string = \"Sesuai (100)\";\n                \n                foreach ($res as $key => $value) {\n                    if(in_array($key, array_keys($this->FILTER_RESPONSE)) && stripos($value, \"Tidak Sesuai\") !== false){\n                        $data[$key] = $this->FILTER_RESPONSE[$key];\n                    }\n                }\n\n                if(count($data) >= 1){\n                    $response['status'] = 0;\n                    $response['data'] = $data;\n                }\n            }\n            \n            return $response;\n        }else{\n            $response['status'] = 0;\n            $response['data'] = ['Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'];\n            return $response;\n        }\n    }\n    \n    private function processCode($code, $message)\n    {\n        switch ($code) {\n            case 11:\n                return 'Data yang dimasukkan merupakan data orang yang telah dinyatakan meninggal';\n            case 12:\n                return 'Data Ditemukan, Status Data Ganda';\n            case 13:\n                return 'Data Tidak Ditemukan, NIK tidak terdapat di database Kependudukan';\n            case 14:\n            case 15:\n                return $message;\n            default:\n                return 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi';\n        }\n    }\n    \n\n    public function response(){\n        return $this->mapingResponse($this->responseCurl);\n    }\n\n    public static function DataBalikan($id, $model){\n        $config = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'credential_data_balikan'\"\n        )->queryOne();\n\n        $token = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'token_data_balikan'\"\n        )->queryOne();\n\n        $token = $token['value'];\n\n        $data = PemilikManfaat::findAll(['t_koperasi_id' => $id]);\n\n        if(isset($config['value'])){\n            $decode = json_decode($config['value']);\n\n            $params = [];\n            $params['id_lembaga'] = $decode->id_lembaga;\n            $params['nama_lembaga'] = $decode->nama_lembaga;\n            $nik = 0;\n            foreach ($data as $key => $value) {\n                if($value->m_jenis_identitas_id == 1){\n                    $params['data'][] = [\n                        'NIK' => $value->no_identitas,\n                        'param' => [\n                            [\"hubungan_dengan_korporasi\" => \"Pemilik Manfaat KOPERASI \" . $model->nama_koperasi],\n                        ]\n                    ];\n                    $nik = $value->no_identitas;\n                }\n            }\n\n            if(!empty($params)){\n                self::curlDataBalikan($decode->url_api, json_encode([$params]), $token, $id, $nik);\n            }\n        }\n\n    } \n\n    public static function curlDataBalikan($url, $params, $token, $id = null, $nik){\n        $time_start = microtime(true);\n        $ch = curl_init();\n        curl_setopt($ch,CURLOPT_URL, $url);\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);\n        curl_setopt($ch,CURLOPT_HTTPHEADER, array(\"Accept:application/json\", \"Content-Type:application/json\", \"Authorization:Bearer \".$token));\n        curl_setopt($ch,CURLOPT_POST, true);\n        curl_setopt($ch,CURLOPT_POSTFIELDS, $params);\n\n        // Set timeout\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $time = sprintf('%.3f', microtime(true) - $time_start) . 's';\n        $info = curl_getinfo($ch);\n\n        if(curl_errno($ch)){\n            // check is error timeout or not \n            if (in_array(curl_errno($ch), array(CURLE_OPERATION_TIMEDOUT, CURLE_OPERATION_TIMEOUTED))) {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'],\n                    ])\n                );\n            } else {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => curl_error($ch)],\n                    ])\n                );\n            }\n        }\n        curl_close($ch);\n        \n        LogDukcapil::logDcp($params, $result, $info['http_code'], 'DATABALIKAN',$time,'KOPERASI', $info, $id, $nik);\n\n        return $result;\n    }\n\n    public static function CheckIsActiveValidateDukcapil(){\n        $isActive = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'is_active_dukcapil'\"\n        )->queryOne();\n        \n        $status = 0;\n        if(!empty($isActive) && $isActive['value'] == 1){\n            $status = 1;\n        }\n\n        return $status;\n    }\n\n    public static function AllowValidation(){\n        $response = [\n            'status' => 1,\n            'data' => []\n        ];\n\n        return $response;\n    }\n}\n\n\n--- File: 685 # modules/Api/controllers/TransaksiController.php ---\n<?php \nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Url;\nuse yii\\helpers\\Json;\nuse yii\\rest\\Controller;\nuse yii\\filters\\VerbFilter;\nuse app\\components\\ApiHelper;\nuse app\\components\\LogHelper;\nuse app\\models\\TransaksiKoperasi;\nuse app\\modules\\Api\\components\\AuthHelper;\nuse app\\modules\\Api\\components\\TimeHelper;\nuse app\\modules\\Api\\components\\TransaksiHelper;\nuse app\\modules\\Api\\models\\JWTToken;\nuse yii\\base\\Exception;\nuse app\\models\\bakum\\LogCodex;\nuse app\\components\\helper\\TelegramHelper;\nuse app\\models\\Setting;\nuse Firebase\\JWT\\JWT;\n\nclass TransaksiController extends Controller\n{\n\n    public function behaviors()\n    {\n        return [\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    // 'index' => ['POST'],\n                    'dummy' => ['POST'],\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * Function untuk Output Response sekaligus Save Logging\n     * \n     * @param Array Data Request\n     * \n     * @return JSON/XML Output Response Berdasarkan\n     */\n    public function responseAndSaveLog(Array $data, $typeFormat = 'JSON')\n    {\n        $this->saveLog($data);\n\n        return $this->showResponse($data['response'], $typeFormat);\n    }\n\n    /**\n     * Function untuk save Log\n     * \n     * @param Array Data Request\n     * \n     * @return Boolean Hasil Dari Saving Log\n     */\n    public function saveLog(Array $data)\n    {\n        return LogHelper::saveLog([\n            'service_uri' => $data['url'],\n            'request' => $data['request'],\n            'response' => $data['response'],\n            'nik' => $data['nik'],\n            'additional_data' => json_encode($data['additional_data']),\n            'is_error' => $data['is_error'],\n            'type' => $data['type'],\n            'execution_time' => TimeHelper::getElapsedTime($data['startTime']),\n        ]);\n    }\n\n    /**\n     * Function untuk menampilkan response berdasarkan format\n     * \n     * @param Array Response Array\n     * @param String Format Type untuk Response\n     * \n     * @return JSON/XML Return response sesuai type\n     */\n    public function showResponse(Array $res, $type = 'JSON')\n    {\n        if(!$res || !$type) {\n            throw new \\Exception;\n        }\n        // Normalize Param Type\n        $type = strtoupper($type);\n        \n        if ($type == 'XML') {\n            return $this->asXml($res);\n        }\n        elseif ($type == 'JSON') {\n            return $this->asJson($res);\n        }\n        else {\n            throw new \\Exception;\n        }\n    }\n\n    /**\n     * Function untuk menerima hit perubahan transaksi dari ODS\n     * \n     * @param AUTH_KEY\n     * @param XML_DATA\n     * \n     * @return JSON\n     */\n    public function actionIndex()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        }   \n        catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        $nik = $dataJson['data']['nik'];\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        $createTrans = TransaksiHelper::createTrans($dataJson);\n\n        if(!$createTrans['status']) {\n            $res = [\n                'code' => '05',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $createTrans['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson,'data.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson,'data.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Action API untuk url hit sendData Api Dennis\n     * \n     * @param AUTH_KEY\n     * @param JSON_DATA\n     * \n     * @return Json\n     */\n    public function actionDummy()\n    {\n        \n        $headers = Yii::$app->request->headers;\n        if($headers['Content-Type'] != 'application/json') {\n            $res = [\n                'code' => '01',\n                'message' => 'Format Must Be In Json',\n                'status' => 415\n            ];\n\n            return $this->asJson($res);\n        }\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n        $dataJson = json_decode($data, true);\n        $authKey = $headers['auth'];\n        $nik =  $dataJson['data']['koperasi']['nik'];\n        if(!$dataJson) {\n            $res = [\n                'code' => '02',\n                'message' => 'Json Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->asJson($res);\n        }\n\n        $auth = AuthHelper::checkAuth($authKey, $nik);\n\n        if(!$auth) {\n            $res = [\n                'code' => '03',\n                'message' => 'Authentication failed',\n                'status' => 401\n            ];\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->asJson($res);\n    }\n\n    /**\n     * Action API untuk url hit Update NIK dari ODS\n     * \n     * @param AUTH_KEY\n     * @param JSON_DATA\n     * \n     * @return Json\n     */\n    public function actionUpdate()\n    { \n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        $nomor_transaksi = $dataJson['data']['nomor_transaksi'];\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        $updateTrans = TransaksiHelper::updateTrans($dataJson);\n\n        if(!$updateTrans['status']) {\n            $res = [\n                'code' => '05',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $updateTrans['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson,'data.nomor_transaksi'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson,'data.nomor_transaksi'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Function untuk menerima hit insert transaksi pendirian dari ODS\n     * \n     * @param AUTH_KEY JWT\n     * @param JSON_DATA\n     * \n     * @return JSON\n     */\n    public function actionInsert()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if (empty($dataJson['data'])) {\n            $res = [\n                'code' => '05',\n                'message' => 'Invalid Parameter.',\n                'additional_info' => 'Parameter Data tidak boleh kosong',\n                'status' => 400\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => '',\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        TransaksiHelper::filterEmptyArray($dataJson);\n        $insertTransMigrasi = TransaksiHelper::insertTransMigrasi($dataJson['data']);\n\n        if (!$insertTransMigrasi['status']) {\n            $res = [\n                'code' => '06',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $insertTransMigrasi['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Function untuk menerima hit edit transaksi dari ODS\n     * ODS hanya bisa mengedit transaksi yang is_migrasi = 1\n     * \n     * @param AUTH_KEY\n     * @param JSON\n     * \n     * @return JSON\n     */\n    public function actionEdit()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if (empty($dataJson['nik']) || empty($dataJson['data'])) {\n            $res = [\n                'code' => '05',\n                'message' => 'Invalid Parameter.',\n                'additional_info' => 'Parameter NIK / Data tidak boleh kosong',\n                'status' => 400\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => '',\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        TransaksiHelper::filterEmptyArray($dataJson);\n        $editTransMigrasi = TransaksiHelper::editTransMigrasi($dataJson['nik'], $dataJson['data']);\n\n        if (!$editTransMigrasi['status']) {\n            $res = [\n                'code' => '06',\n                'message' => 'Failed To Edit Transaction.',\n                'additional_info' => $editTransMigrasi['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    public function actionSandbox() {\n        return ApiHelper::getKoperasiJson(155);\n    }\n}\n?>\n\n--- File: 682 # modules/Api/components/TransaksiHelper.php ---\n<?php\nnamespace app\\modules\\Api\\components;\n\nuse Yii;\nuse yii\\base\\Component;\nuse app\\models\\BHPembagian;\nuse app\\models\\DataAnggota;\nuse app\\models\\AktifitasUsaha;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\JenisTransaksi;\nuse app\\models\\PemilikManfaat;\nuse app\\models\\KoperasiSekunder;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\MasterTransaction;\nuse app\\models\\SK;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\TingkatWilayah;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\PolaPengelolaan;\nuse app\\models\\WilayahOds;\nuse app\\components\\KoperasiHelper;\nuse app\\models\\ChecklistPerubahan;\nuse app\\modules\\Api\\components\\SKHelper;\nuse app\\modules\\Api\\components\\DataAnggotaHelper;\nuse yii\\base\\Exception;\nuse app\\components\\ApiHelper;\nuse yii\\helpers\\ArrayHelper;\n\nclass TransaksiHelper extends Component\n{\n\n    public static function createTrans($data)\n    {\n        if(!$data) {\n            return [\n                'status' => false,\n                'info' => 'Data tidak Boleh Kosong',\n            ];\n        }\n\n        $nik = $data['data']['nik'];\n\n        if(!$nik) {\n            return [\n                'status' => false,\n                'info' => 'NIK Tidak Ditemukan',\n            ];\n        }\n\n        $transaction = Yii::$app->db_koperasi->beginTransaction();\n        try {\n\n            $cekValidateAnggota = self::validateDataAnggota($data);\n            if(!$cekValidateAnggota['status']) {\n                return [\n                    'status' => false,\n                    'info' => $cekValidateAnggota['info']\n                ];\n            }\n            $newId = self::createNewTrans($nik, $data);\n            if(!$newId) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Membuat Transaksi Baru'\n                ];\n            }\n\n            $updateAnggota = self::updateDataAnggota($newId,$data);\n            if(!$updateAnggota) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Melakukan Perubahan Data Anggota'\n                ];\n            }\n\n            $transaction->commit();\n        }\n        catch(\\Exception $e) {\n            $transaction->rollback();\n            return [\n                'status' => false,\n                'info' => 'Terjadi Kesalahan Saat Membuat Transaksi'\n            ];\n        }\n\n        if(!$updateAnggota) {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n            try {\n                // Create / Generate Surat SK / SP\n                $generateSurat = self::sendPushPerubahan($newId);\n                if(!$generateSurat) {\n                    return [\n                        'status' => false,\n                        'info' => 'Gagal Melakukan Generate Surat SK/SP'\n                    ];\n                }\n\n                $transaction->commit();\n            }\n            catch(\\Exception $e) {\n                $transaction->rollback();\n                $transHapus = TransaksiKoperasi::find()->where(['id' => $newId ])->one();\n                if($transHapus) {\n                    $transHapus->delete();\n                }\n                return [\n                    'status' => false,\n                    'info' => 'Terjadi Kesalahan Saat Melakukan Generate Surat SK/SP'\n                ];\n            }\n        }\n\n       return [\n           'status' => true,\n           'info' => null\n       ];\n    }\n\n    public static function updateTrans($data)\n    {\n        if(!$data) {\n            return [\n                'status' => false,\n                'info' => 'Data tidak Boleh Kosong',\n            ];\n        }\n\n        $nomor_transaksi = $data['data']['nomor_transaksi'];\n\n        if(!$nomor_transaksi) {\n            return [\n                'status' => false,\n                'info' => 'NIK Tidak Ditemukan',\n            ];\n        }\n        $transaction = Yii::$app->db_koperasi->beginTransaction();\n        try {\n\n            $updateNik = self::updateKoperasi($nomor_transaksi, $data);\n            if(!$updateNik) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Melakukan Perubahan Data Koperasi'\n                ];\n            }\n\n            $transaction->commit();\n        }\n        catch(\\Exception $e) {\n            $transaction->rollback();\n            return [\n                'status' => false,\n                'info' => 'Terjadi Kesalahan Saat Membuat Transaksi'\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function createNewTrans($nik, $data)\n    {\n        $dataTrans = TransaksiKoperasi::find()->where(['nik' => $nik])->orderBy(['id' => SORT_DESC])->one();\n        $newTrans = new TransaksiKoperasi();\n        $newTrans->setAttributes($dataTrans->attributes, false);\n        $newTrans->id = null;\n        //$newTrans->nomor_transaksi = KoperasiHelper::getNoTrans('koperasi','perubahan', ['no_wilayah' => $dataTrans->nomor_transaksi]);\n        $newTrans->nomor_transaksi = '';\n        $newTrans->jenis_transaksi_id = JenisTransaksi::getPrimaryByNama(\"PERUBAHAN\");\n        $newTrans->nama_notaris = null;\n        $newTrans->ahu_notaris_id = null;\n        $newTrans->jenis_transaksi = \"PERUBAHAN\";\n        $newTrans->jumlah_jangka_waktu = 0;\n        $newTrans->tanggal_rapat = date(\"Y-m-d\");\n        $newTrans->tanggal_akta = date(\"Y-m-d\");\n        $newTrans->is_ods = 1;\n        $newTrans->created_date = date(\"Y-m-d H:i:s\");\n        $newTrans->updated_date = null;\n        $newTrans->updated_by = null;\n        $newTrans->deleted_date = null;\n        $newTrans->deleted_by = null;\n        $newTrans->is_deleted = '0';\n        $newTrans->is_finish = 1;\n\n        $saveTrans = $newTrans->save(false);\n        $newId = $newTrans->getPrimaryKey();\n        $oldId = $dataTrans->id;\n\n        $saveAU = self::saveRelationData(AktifitasUsaha::className(),$oldId, $newId,'t_koperasi_id');\n        $savePembagian = self::saveRelationData(BHPembagian::className(),$oldId, $newId, 't_koperasi_id');\n        $savePenggabungan = self::saveRelationData(BHPenggabungan::className(),$oldId,$newId, 't_koperasi_id');\n        $saveBO = self::saveRelationData(PemilikManfaat::className(), $oldId, $newId, 't_koperasi_id');\n        $saveSekunder = self::saveRelationData(KoperasiSekunder::className(), $oldId, $newId, 't_koperasi_id');\n        $saveAnggota = self::saveRelationData(DataAnggota::className(), $oldId, $newId, 't_koperasi_id');\n\n        // Create Checklist Perubahan\n        $saveDataPerubahan = self::createDataPerubahan($newId, $newTrans->id_master, $data);\n\n        $saveData = $saveTrans && $saveAU && $savePembagian && $savePenggabungan && $saveBO && $saveSekunder && $saveAnggota && $saveDataPerubahan;\n        if(!$saveData) {\n            return false;\n        }\n\n        return $newId;\n    }\n\n    public static function validateDataAnggota($data)\n    {\n        $jumlah = 3;\n        $jumlahPengurus = $jumlahPengawas = 0;\n        $dataAnggota = (Array) self::getData($data,'data.perubahan.data_anggota.anggota');\n        if(!$dataAnggota) {\n            return [\n                'status' => false,\n                'info' => 'Data Anggota Tidak Ditemukan'\n            ];\n        }\n        if(!empty($dataAnggota['nik'])){\n            return [\n                'status' => false,\n                'info' => \"Pengurus Minimal {$jumlah} Orang.\"\n            ];\n        }\n        if(empty($dataAnggota['nik'])){\n            $coulumnnik = array_column($dataAnggota, 'nik');\n            $unique = array_unique($coulumnnik);\n            $duplicates = array_diff_assoc($coulumnnik, $unique);\n            if ($duplicates) {\n                foreach ($duplicates as $d){\n                    return [\n                        'status' => false,\n                        'info' => 'Duplikat NIK ' . $d\n                    ];\n                }\n            }\n        }\n        foreach ($dataAnggota as $anggota) {\n            if ($anggota['status'] == \"PENGURUS\") {\n                $jumlahPengurus++;\n            }\n            \n            if ($anggota['status'] == \"PENGAWAS\") {\n                $jumlahPengawas++;\n            }\n        }\n\n        if (($jumlahPengurus < $jumlah)) {\n            return [\n                'status' => false,\n                'info' => \"Pengurus Minimal {$jumlah} Orang.\"\n            ];\n        }\n        \n        if (($jumlahPengawas <= 0)) {\n            return [\n                'status' => false,\n                'info' => \"Pengawas Tidak Ditemukan.\"\n            ];\n        }\n\n        if (( ($jumlahPengurus % 2) == 0 )) {\n            return [\n                'status' => false,\n                'info' => \"Pengurus Harus Memiliki Jumlah Ganjil.\"\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function saveRelationData($class, $oldId, $newId, $relationField)\n    {\n        $data = $class::find()->where([$relationField => $oldId])->all();\n\n        if(!$data) {\n            return true;\n        }\n\n        try {\n            foreach($data as $d) {\n                $newData = new $class($d);\n                $newData->id = null;\n                $newData->$relationField = $newId;\n                $newData->save();\n            }\n\n            return true;\n        }\n        catch(\\Exception $e) {\n            return false;\n        }\n    }\n\n    public static function updateDataAnggota($id, $data)\n    {\n        $dataAnggota = (Array) self::getData($data,'data.perubahan.data_anggota.anggota');\n\n        if(!$dataAnggota) {\n            return false;\n        }\n        $oldData = DataAnggota::find()->where(['t_koperasi_id' => $id])->all();\n\n        foreach ($oldData as $val) {\n            $val->delete();\n        }\n\n        foreach($dataAnggota as $data) {\n            $newData = new DataAnggota();\n            $newData->t_koperasi_id = $id;\n            $idStatus = DataAnggotaHelper::getIdStatusPengurus($data['status']);\n            if(!$idStatus) {\n                throw new \\Exception;\n            }\n            $newData->m_status_pengurus_id = $idStatus;\n            $newData->nama_status = !empty($data['status'])? $data['status'] : \"\";\n            $newData->nik = !empty($data['nik'])? $data['nik'] : \"\";\n            $newData->nama = !empty($data['nama'])? $data['nama'] : \"\";\n            $idJK = DataAnggotaHelper::getIdJenisKelamin($data['jenis_kelamin']);\n            if(!$idJK) {\n                throw new \\Exception;\n            }\n            $newData->jenis_kelamin_id = $idJK;\n            $newData->jabatan = !empty($data['jabatan'])? $data['jabatan'] : \"\";\n            $newData->npwp = !empty($data['npwp'])? $data['npwp'] : \"\";\n            $newData->hp = !empty($data['no_hp'])? $data['no_hp'] : \"\";\n\n            if(!$newData->save(false)) {\n                return false;\n            }        \n        }\n\n        return true;\n    }\n\n    public static function updateKoperasi($nomor_transaksi, $data)\n    {\n        //Get Data Koperasi Lama\n        $dataOld = (Array) self::getData($data,'data.nomor_transaksi');\n        $dataNew = (Array) self::getData($data,'data.perubahan.nik');\n\n        if(!Yii::$app->db_koperasi->createCommand()->update('kop_t_koperasi', ['nik' => $dataNew[0]], 'nomor_transaksi = :nomor_transaksi AND jenis_transaksi_id = 2', [':nomor_transaksi' => $nomor_transaksi])->execute()){\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function getData($data, $search)\n    {\n        $listKey = explode(\".\",$search);\n        $walk = $data;\n        foreach($listKey as $key) {\n            try{\n                $walk = $walk[$key];\n            }\n            catch(\\Exception $e) {\n                return false;\n            }\n        }\n\n        return $walk;\n    }\n\n    public static function sendPushPerubahan($id)\n    {\n        if(!$id) {\n            return false;\n        }\n\n        return SKHelper::pushPerubahan($id);\n    }\n\n    public static function createDataPerubahan($idTrans, $idMaster, $data)\n    {\n        $idPerubahan = (Array) self::getData($data, 'data.perubahan_id.id');\n\n        foreach($idPerubahan as $id) {\n            $newData = new ChecklistPerubahan();\n            $newData->no_checklist = uniqid(\"\", true);\n            $newData->d_koperasi_id = $idMaster;\n            $newData->t_koperasi_id = $idTrans;\n            $newData->m_perubahan_id = $id;\n\n            if(!$newData->save()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static function getDataKoperasi($nik, $nama, $asArray = false)\n    {\n        $transFind = TransaksiKoperasi::find()\n            ->alias('t')\n            ->where(['t.nik' => $nik])\n            ->innerJoinWith('dataMaster m',false)\n            // ->innerJoinWith('dataSK sk',false)\n            ->andWhere(['m.is_active' => 1])\n            ->andWhere(['t.is_finish' => 1])\n            ->orderBy(['t.id' => SORT_DESC])\n            ->one();\n        if( !$transFind ) {\n            throw new Exception(\"Data Koperasi Tidak Ditemukan\");\n        }\n    \n        $latestId = $transFind->id;\n\n        return ApiHelper::getKoperasiJson($latestId, $asArray);\n    }\n\n    public static function insertTransMigrasi($data)\n    {\n        try {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n            if (!$data) {\n                throw new Exception('Data tidak Boleh Kosong');\n            }\n\n            $validate = self::validateInsertMigrasi($data);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $validate = self::validateExist($data);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $insertPesanNama = self::insertPesanNama($data);\n            if (!$insertPesanNama) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Pesan Nama');\n            }\n\n            $checkNik = self::checkNikKoperasi($data, $insertPesanNama);\n            if (!$checkNik) {\n                throw new Exception('Terjadi Kesalahan Saat Memasukkan NIK');\n            }\n\n            $insertTrans = self::insertTransKoperasi($data, $insertPesanNama);\n            if(!$insertTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Transaksi');\n            }\n\n            $insertMaster = self::insertMasterKoperasi($data, $insertTrans);\n            if (!$insertMaster) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Master');\n            }\n\n            $updateTrans = self::updateTransKoperasi($insertTrans, $insertMaster);\n            if (!$updateTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Update Transaksi');\n            }\n\n\n            $insertSk = self::insertSkKoperasi($data, $insertTrans);\n            if (!$insertSk) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat SK');\n            }\n\n            $updateMaster = self::updateMasterKoperasi($insertMaster, $insertSk);\n            if (!$updateMaster) {\n                throw new Exception('Terjadi Kesalahan Saat Update Master');\n            }\n\n            $transaction->commit();\n\n        } catch(\\Exception $e) {\n            $transaction->rollBack();\n            return [\n                'status' => false,\n                'info' => 'Error : ' . $e->getMessage(),\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function getFields($data)\n    {\n        $nik = self::getData($data, 'koperasi.nik');\n        $nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $nama_sk = self::getData($data, 'koperasi.nama_sk');\n        $jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $pola_pengelolaan = self::getData($data, 'koperasi.pola_pengelolaan');\n        $wilayah_keanggotaan = self::getData($data, 'koperasi.wilayah_keanggotaan');\n        $bentuk_koperasi = self::getData($data, 'koperasi.bentuk_koperasi');\n        $jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n        $model_koperasi = self::getData($data, 'koperasi.model_koperasi');\n\n\n        $nomor_sk = self::getData($data, 'transaksi.nomor_sk');\n        $tanggal_sk = self::getData($data, 'transaksi.tanggal_sk');\n\n        $kelurahan = self::getData($data, 'kedudukan.kelurahan');\n        $alamat = self::getData($data, 'kedudukan.alamat');\n\n        $nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $no_akta = self::getData($data, 'akta_notaris.no_akta');\n        $tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $alamat_rapat = self::getData($data, 'rapat.alamat_rapat');\n        $jumlah_peserta = self::getData($data, 'rapat.jumlah_peserta');\n\n        $total_modal = self::getData($data, 'modal_koperasi.total_modal');\n        $simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n\n        $datas = compact(\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok', 'model_koperasi'\n        );\n\n        return $datas;\n    }\n\n    public static function validateInsertMigrasi($data)\n    {\n        $required_fields = [\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok'\n        ];\n\n        $datas = self::getFields($data);\n\n        // Validasi key kosong / tidak ada\n        foreach ($required_fields as $field) {\n            if (empty($datas[$field])) {\n                $errors[$field] = ucwords(str_replace(\"_\", \" \", $field)) . \" Tidak Boleh Kosong\";\n            }\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        $valid = self::checkValid($datas);\n\n        return $valid;\n    }\n\n    public static function validateExist($data)\n    {\n        $errors = [];\n        $datas = self::getFields($data);\n        extract($datas);\n\n        $transaksi = TransaksiKoperasi::find()\n                        //->Where(['or', ['nik' => $nik], ['full_nama' => $nama_sk]])\n                        ->Where(['nik' => $nik])\n                        ->andWhere(['full_nama' => $nama_sk])\n                        ->one();\n        if (!empty($transaksi)) {\n            $errors['nama_koperasi'] = 'Nama Koperasi ' . $nama_koperasi . ' Sudah Dipesan';\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        return false;\n    }\n\n    public static function checkValid($data, $transaksi = null)\n    {\n        $errors = [];\n        extract($data);\n\n        if (empty($transaksi) || ($transaksi && strtolower($transaksi->nama_koperasi) != strtolower($nama_koperasi))) {\n            if (self::checkNama($nama_koperasi)) {\n                $errors['nama_koperasi'] = 'Nama Koperasi ' . $nama_koperasi . ' Sudah Dipesan';\n            }\n        }\n\n        if (!empty($model_koperasi) && !PesanNama::checkIsValidModelKoperasi($model_koperasi) ){\n                $errors['nama_koperasi'] = 'Model Koperasi Tidak Valid';\n        }\n\n        if (!JenisKoperasi::getPrimaryByNama($jenis_koperasi)) {\n            $errors['jenis_koperasi'] = 'Jenis Koperasi ' . $jenis_koperasi . ' Tidak Valid';\n        }\n\n        if (!PolaPengelolaan::getPrimaryByNama($pola_pengelolaan)) {\n            $errors['pola_pengelolaan'] = 'Pola Pengelolaan ' . $pola_pengelolaan . ' Tidak Valid';\n        }\n\n        if (!TingkatWilayah::getPrimaryByNama($wilayah_keanggotaan)) {\n            $errors['wilayah_keanggotaan'] = 'Wilayah Keanggotaan ' . $wilayah_keanggotaan . ' Tidak Valid';\n        }\n\n        if (!BentukKoperasi::getPrimaryByNama($bentuk_koperasi)) {\n            $errors['bentuk_koperasi'] = 'Bentuk Koperasi ' . $bentuk_koperasi . ' Tidak Valid';\n        }\n\n        // if (!WilayahOds::getWilayah($kelurahan)) {\n        //     $errors['kelurahan'] = 'Kode Kelurahan Tidak Valid';\n        // }\n\n        // if (!in_array(strtolower($jangka_waktu), ['terbatas', 'tidak terbatas'])) {\n        //     $errors['jangka_waktu'] = 'Jangka Waktu Tidak Valid';\n        // }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        return false;\n    }\n\n    public static function checkNama($nama)\n    {\n        $data = PesanNama::find()\n            ->where(['nama_koperasi' => $nama])\n            ->andWhere(['is_deleted' => '0'])\n            ->orderBy('created_date DESC')\n            ->one();\n        $now = Date(\"Y-m-d H:i:s\");\n        if($data) {\n\n            // Jika ada pesan nama di antrian\n            if($data->status == 0) {\n\n                // Jika Belum Pendirian Tetapi Sudah Expired\n                if($data->end_date < $now) {\n                    return false;\n                }\n\n                return true;\n            }\n\n            $dataTrans = ArrayHelper::getColumn(TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $data->id])->all(),'id');\n\n            // Jika Tidak Ada Data Transaksi Yang Menggunakan Pesan Nama Tersebut\n            if(!$dataTrans) {\n                return false;\n            }\n\n            if(sizeof($dataTrans) == 1) {\n                $cekData = TransaksiKoperasi::find()->where(['id' => $dataTrans[0]])->one();\n                // Jika Dalam Masa Tahap Penddirian\n                if($cekData->is_finish != 1) {\n                    return true;\n                }\n            }\n\n            $dataMaster = MasterTransaction::find()->where(['id_transaksi' => $dataTrans])->one();\n\n            // Jika Tidak Ada Data Master Koperasi Yang Menggunakan Pesan Nama Tersebut\n            if(!$dataMaster) {\n                return false;\n            }\n\n            // Jika Data Master Koperasi Yang Ditemukan Sudah Melakukan Penggabungan\n            if($dataMaster->is_gabung == 1) {\n                return false;\n            }\n\n            if($dataMaster->is_active == 0) {\n                return false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    public static function insertPesanNama($data)\n    {\n        $pesan_nama = new PesanNama();\n        $pesan_nama->no_pesan = '';\n        // $pesan_nama->nama_koperasi = $pesan_nama->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $pesan_nama->full_nama = $pesan_nama->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $pesan_nama->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $pesan_nama->full_nama = self::getData($data, 'koperasi.nama_sk');\n\n        $jenis_koperasi = JenisKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.jenis_koperasi'));\n\n        $pesan_nama->jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['parent_id'] : $jenis_koperasi['id'];\n        $pesan_nama->c_jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['id'] : null;\n        $pesan_nama->m_pola_id = PolaPengelolaan::getPrimaryByNama(self::getData($data, 'koperasi.pola_pengelolaan'));\n        $pesan_nama->ahu_notaris_id = '-1';\n        $pesan_nama->status = '1';\n        $pesan_nama->created_by = '-1';\n        $pesan_nama->created_date = date('Y-m-d H:i:s');\n\n        if(PesanNama::checkIsKoperasiMultiPihak(self::getData($data, 'koperasi.model_koperasi'))){\n            $pesan_nama->model_koperasi = 1;\n        }\n\n        $save_pesan_nama = $pesan_nama->save(false);\n        $new_id = $pesan_nama->getPrimaryKey();\n\n        if (!$save_pesan_nama) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function insertTransKoperasi($data, $id_pesan_nama)\n    {\n        $pn = new PesanNama();\n        $transaksi = new TransaksiKoperasi();\n        $transaksi->nomor_transaksi = '';\n        $transaksi->t_pesan_nama_id = $id_pesan_nama;\n        // $transaksi->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $transaksi->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $transaksi->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $transaksi->full_nama = self::getData($data, 'koperasi.nama_sk');\n        $transaksi->jenis_transaksi_id = JenisTransaksi::getPrimaryByNama(\"PENDIRIAN\");\n        $transaksi->jenis_transaksi = \"PENDIRIAN\";\n        $transaksi->jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $transaksi->m_tingkat_wilayah_id = TingkatWilayah::getPrimaryByNama(self::getData($data, 'koperasi.wilayah_keanggotaan'));\n        $transaksi->b_koperasi_id = BentukKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.bentuk_koperasi'));\n        $transaksi->jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n\n        if (strtolower($transaksi->jangka_waktu) == \"tidak terbatas\") {\n            $transaksi->jumlah_jangka_waktu = self::getData($data, 'koperasi.jumlah_jangka_waktu');\n            $transaksi->tanggal_jangka_waktu = self::getData($data, 'koperasi.tanggal_jangka_waktu');\n        } else {\n            $transaksi->jumlah_jangka_waktu = null;\n            $transaksi->tanggal_jangka_waktu = null;\n        }\n\n        $wilayah = WilayahOds::getWilayah(self::getData($data, 'kedudukan.kelurahan'));\n\n        if ($wilayah) {\n            $transaksi->provinsi_id = $wilayah['provinsi_id'];\n            $transaksi->nama_provinsi = $wilayah['nama_provinsi'];\n            $transaksi->kab_kota_id = $wilayah['kab_kota_id'];\n            $transaksi->nama_kabupaten = $wilayah['nama_kabupaten'];\n            $transaksi->kecamatan_id = $wilayah['kecamatan_id'];\n            $transaksi->nama_kecamatan = $wilayah['nama_kecamatan'];\n            $transaksi->kel_desa_id = $wilayah['kel_desa_id'];\n            $transaksi->nama_kelurahan = $wilayah['nama_kelurahan'];\n        }\n\n        $transaksi->alamat_koperasi = self::getData($data, 'kedudukan.alamat');\n        $transaksi->rw = self::getData($data, 'kedudukan.rw');\n        $transaksi->rt = self::getData($data, 'kedudukan.rt');\n        $transaksi->kode_pos = self::getData($data, 'kedudukan.kode_pos');\n        $transaksi->telepon = self::getData($data, 'kedudukan.no_telp');\n        $transaksi->email = self::getData($data, 'kedudukan.email');\n\n        $transaksi->nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $transaksi->akta_koperasi = self::getData($data, 'akta_notaris.no_akta');\n        $transaksi->tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $transaksi->tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $transaksi->alamat_rapat = self::getData($data, 'rapat.alamat');\n        $transaksi->jumlah_peserta_rapat = self::getData($data, 'rapat.jumlah_peserta');\n\n\n        $transaksi->modal_koperasi = self::getData($data, 'modal_koperasi.total_modal');\n        $transaksi->simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $transaksi->simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n        $transaksi->dana_hibah = self::getData($data, 'modal_koperasi.dana_hibah');\n        $transaksi->dana_cadangan = self::getData($data, 'modal_koperasi.dana_cadangan');\n\n        $transaksi->periode_pengurus_awal = self::getData($data, 'periode_pengurus.tanggal_mulai');\n        $transaksi->periode_pengurus_akhir = self::getData($data, 'periode_pengurus.tanggal_selesai');\n\n        $transaksi->is_confirm = '0';\n        $transaksi->nik = self::getData($data, 'koperasi.nik');\n        $transaksi->is_deleted = '0';\n        $transaksi->created_by = '-1';\n        $transaksi->created_date = date('Y-m-d H:i:s');\n        $transaksi->is_finish = '1';\n        $transaksi->is_ods = '1';\n        $transaksi->is_migrasi = '1';\n\n        $save_transaksi = $transaksi->save(false);\n        $new_id = $transaksi->getPrimaryKey();\n\n        if (!$save_transaksi) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function insertMasterKoperasi($data, $id_transaksi)\n    {\n        $master_transaksi = new MasterTransaction();\n        $master_transaksi->id_transaksi = $id_transaksi;\n        $master_transaksi->id_sk = null;\n        $master_transaksi->is_deleted = '0';\n        $master_transaksi->status = '1';\n        $master_transaksi->is_gabung = '0';\n        $master_transaksi->is_active = '1';\n        $master_transaksi->is_bubar = '0';\n        $master_transaksi->is_blokir = '0';\n\n        $save_master = $master_transaksi->save(false);\n        $new_id = $master_transaksi->getPrimaryKey();\n\n        if (!$save_master) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function updateTransKoperasi($id_transaksi, $id_master)\n    {\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id_transaksi])->one();\n        $transaksi->id_master = $id_master;\n\n        $save_transaksi = $transaksi->save(false);\n\n        if (!$save_transaksi) {\n            return false;\n        }\n\n        return $save_transaksi;\n    }\n\n    public static function insertSkKoperasi($data, $id_transaksi)\n    {\n        $sk = new SK();\n        $sk->t_koperasi_id = $id_transaksi;\n        $sk->no_sk_koperasi = self::getData($data, 'transaksi.nomor_sk');\n        $sk->created_date = self::getData($data, 'transaksi.tanggal_sk');\n\n        $save_sk = $sk->save(false);\n        $new_id = $sk->getPrimaryKey();\n\n        if (!$save_sk) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function checkNikKoperasi($data, $id_pesan_nama)\n    {\n        $nik        = self::getData($data, 'koperasi.nik');\n        $check_nik  = TransaksiKoperasi::find()->where(['nik' => $nik])->orderBy(['id' => SORT_ASC])->one();\n\n        if($check_nik) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function updateMasterKoperasi($id_master, $id_sk)\n    {\n        $master_transaksi = MasterTransaction::find()->where(['id' => $id_master])->one();\n        $master_transaksi->id_sk = $id_sk;\n\n        $save_master = $master_transaksi->save(false);\n\n        if (!$save_master) {\n            return false;\n        }\n\n        return $save_master;\n    }\n\n    public static function validateEditMigrasi($data, $transaksi)\n    {\n        $required_fields = [\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok'\n        ];\n\n        $datas = self::getFields($data);\n\n        // Validasi key kosong / tidak ada\n        foreach ($required_fields as $field) {\n            if (empty($datas[$field])) {\n                $errors[$field] = ucwords(str_replace(\"_\", \" \", $field)) . \" Tidak Boleh Kosong\";\n            }\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        $valid = self::checkValid($datas, $transaksi);\n\n        return $valid;\n    }\n\n    public static function editTransMigrasi($nik, $data)\n    {\n        try {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n\n            if (!$data) {\n                throw new Exception('Data tidak Boleh Kosong');\n            }\n\n            $transaksi = TransaksiKoperasi::find()\n                            ->where(['nik' => $nik])\n                            ->andWhere(['is_finish' => 1])\n                            ->orderBy(['id' => SORT_DESC])\n                            ->one();\n\n            if ($transaksi) {\n                if ($transaksi->is_migrasi != 1) {\n                    throw new Exception(\"Koperasi tidak bisa diedit karena sudah melakukan transaksi di aplikasi AHU\");\n                }\n            } else {\n                throw new Exception(\"Koperasi dengan NIK {$nik} tidak ditemukan\");\n            }\n\n            $validate = self::validateEditMigrasi($data, $transaksi);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $editPesanNama = self::editPesanNama($data, $transaksi);\n            if (!$editPesanNama) {\n                throw new Exception('Terjadi Kesalahan Saat Edit Pesan Nama');\n            }\n\n            $editTrans = self::editTransKoperasi($data, $transaksi);\n            if (!$editTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Edit Transaksi');\n            }\n\n            $editSk = self::editSkKoperasi($data, $transaksi);\n            if (!$editSk) {\n                throw new Exception('Terjadi Kesalahan Saat Edit SK');\n            }\n\n            $transaction->commit();\n\n        } catch(\\Exception $e) {\n            $transaction->rollBack();\n            return [\n                'status' => false,\n                'info' => 'Error : ' . $e->getMessage(),\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function editPesanNama($data, $transaksi)\n    {\n        $pesan_nama = PesanNama::findOne($transaksi->t_pesan_nama_id);\n\n        if ($pesan_nama) {\n            $pn = new PesanNama();\n            // $pesan_nama->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n            // $pesan_nama->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n            $pesan_nama->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n            $pesan_nama->full_nama = self::getData($data, 'koperasi.nama_sk');\n\n            $jenis_koperasi = JenisKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.jenis_koperasi'));\n\n            $pesan_nama->jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['parent_id'] : $jenis_koperasi['id'];\n            $pesan_nama->c_jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['id'] : null;\n            $pesan_nama->m_pola_id = PolaPengelolaan::getPrimaryByNama(self::getData($data, 'koperasi.pola_pengelolaan'));\n            $pesan_nama->updated_by = '-1';\n            $pesan_nama->updated_date = date('Y-m-d H:i:s');\n\n            $model_koperasi = self::getData($data, 'koperasi.model_koperasi');\n            if(PesanNama::checkIsValidModelKoperasi($model_koperasi)){\n                $is_model_koperasi = PesanNama::checkIsKoperasiMultiPihak($model_koperasi) ? 1 : 0;\n                $pesan_nama->model_koperasi = $is_model_koperasi;\n            }\n\n            $save_pesan_nama = $pesan_nama->save(false);\n\n            return $save_pesan_nama;\n        }\n\n        return false;\n    }\n\n    public static function editTransKoperasi($data, $transaksi)\n    {\n        $pn = new PesanNama();\n        // $transaksi->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $transaksi->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $transaksi->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $transaksi->full_nama = self::getData($data, 'koperasi.nama_sk');\n        $transaksi->jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $transaksi->m_tingkat_wilayah_id = TingkatWilayah::getPrimaryByNama(self::getData($data, 'koperasi.wilayah_keanggotaan'));\n        $transaksi->b_koperasi_id = BentukKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.bentuk_koperasi'));\n        $transaksi->jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n\n        if (strtolower($transaksi->jangka_waktu) == \"tidak terbatas\") {\n            $transaksi->jumlah_jangka_waktu = self::getData($data, 'koperasi.jumlah_jangka_waktu');\n            $transaksi->tanggal_jangka_waktu = self::getData($data, 'koperasi.tanggal_jangka_waktu');\n        } else {\n            $transaksi->jumlah_jangka_waktu = null;\n            $transaksi->tanggal_jangka_waktu = null;\n        }\n\n        $wilayah = WilayahOds::getWilayah(self::getData($data, 'kedudukan.kelurahan'));\n\n        if ($wilayah) {\n            $transaksi->provinsi_id = $wilayah['provinsi_id'];\n            $transaksi->nama_provinsi = $wilayah['nama_provinsi'];\n            $transaksi->kab_kota_id = $wilayah['kab_kota_id'];\n            $transaksi->nama_kabupaten = $wilayah['nama_kabupaten'];\n            $transaksi->kecamatan_id = $wilayah['kecamatan_id'];\n            $transaksi->nama_kecamatan = $wilayah['nama_kecamatan'];\n            $transaksi->kel_desa_id = $wilayah['kel_desa_id'];\n            $transaksi->nama_kelurahan = $wilayah['nama_kelurahan'];\n        }\n\n        $transaksi->alamat_koperasi = self::getData($data, 'kedudukan.alamat');\n        $transaksi->rw = self::getData($data, 'kedudukan.rw');\n        $transaksi->rt = self::getData($data, 'kedudukan.rt');\n        $transaksi->kode_pos = self::getData($data, 'kedudukan.kode_pos');\n        $transaksi->telepon = self::getData($data, 'kedudukan.no_telp');\n        $transaksi->email = self::getData($data, 'kedudukan.email');\n\n        $transaksi->nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $transaksi->akta_koperasi = self::getData($data, 'akta_notaris.no_akta');\n        $transaksi->tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $transaksi->tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $transaksi->alamat_rapat = self::getData($data, 'rapat.alamat');\n        $transaksi->jumlah_peserta_rapat = self::getData($data, 'rapat.jumlah_peserta');\n\n        $transaksi->modal_koperasi = self::getData($data, 'modal_koperasi.total_modal');\n        $transaksi->simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $transaksi->simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n        $transaksi->dana_hibah = self::getData($data, 'modal_koperasi.dana_hibah');\n        $transaksi->dana_cadangan = self::getData($data, 'modal_koperasi.dana_cadangan');\n\n        $transaksi->periode_pengurus_awal = self::getData($data, 'periode_pengurus.tanggal_mulai');\n        $transaksi->periode_pengurus_akhir = self::getData($data, 'periode_pengurus.tanggal_selesai');\n\n        $transaksi->nik = self::getData($data, 'koperasi.nik');\n        $transaksi->updated_by = '-1';\n        $transaksi->updated_date = date('Y-m-d H:i:s');\n        $transaksi->is_ods = '1';\n        $transaksi->is_migrasi = '1';\n\n        $save_transaksi = $transaksi->save(false);\n\n        return $save_transaksi;\n    }\n\n    public static function editSkKoperasi($data, $transaksi)\n    {\n        $sk = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n\n        $no_sk_koperasi_post = self::getData($data, 'transaksi.nomor_sk');\n        $created_date_post = self::getData($data, 'transaksi.tanggal_sk');\n\n        if ($sk) {\n            $sk->no_sk_koperasi = $no_sk_koperasi_post;\n            $sk->created_date = $created_date_post;\n\n            $save_sk = $sk->save(false);\n\n            return $save_sk;\n        } elseif (empty($sk) && !empty($no_sk_koperasi_post)) {            \n            $sk_new = new SK;\n            $sk_new->t_koperasi_id = $transaksi->id;\n            $sk_new->no_sk_koperasi = $no_sk_koperasi_post;\n            $sk_new->created_date = $created_date_post;\n\n            $save_sk = $sk_new->save(false);\n\n            return $save_sk;          \n        }\n\n        return false;\n    }\n\n    public static function filterEmptyArray(&$array)\n    {\n        foreach ($array as $k => &$v) {\n            if (empty($v) && is_array($v)) {\n                $array[$k] = \"\";\n            } else {\n                is_array($v) && self::filterEmptyArray($v);\n            }\n        }\n    }\n}\n?>\n\n\n--- File: 663 # models/notariat/TransaksiNotaris.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\n\nclass TransaksiNotaris extends \\yii\\db\\ActiveRecord\n{\n    public static function tableName()\n    {\n        return 'ahu_transaksi_notaris';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat');\n    }\n}\n\n\n--- File: 580 # models/AktifitasUsaha.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\KBLIBakum;\n\n\nclass AktifitasUsaha extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%t_aktifitas_usaha}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getBakumKBLI() {\n        return $this->hasOne(KBLIBakum::className(),['id_kbli' => 'kbli_id']);\n    }\n}\n\n--- File: 605 # models/MKbli.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass MKbli extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%m_kbli}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    public static function getAktifitasUsaha($kode) {\n\n        return self::find()\n            ->select('kode, judul, uraian, tahun')\n            ->where( ['in', 'id_kbli', $kode] )\n            ->asArray()\n            ->all();\n    }\n}\n\n\n--- File: 613 # models/NotarisNpak.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass NotarisNpak extends ActiveRecord \n{\n    const NPAK_AKTIF = 1;\n    const NPAK_TIDAK_AKTIF = 0;\n    \n    public static function tableName()\n    {\n        return '{{%notaris_npak}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public static function checkNotarisNPAK( $id_notaris ) {\n    \treturn self::findOne(['id_notaris' => $id_notaris, 'npak' => self::NPAK_AKTIF]);\n    }\n}\n\n\n\n--- File: 590 # models/DataAnggota.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass DataAnggota extends ActiveRecord \n{\n    public function getJenisKelamin()\n    {\n        return $this->hasOne(JenisKelamin::className(),['id' => 'jenis_kelamin_id']);\n    }\n\n    public static function tableName()\n    {\n        return '{{%data_anggota}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public static function getAnggotaByID($kode) {\n\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->asArray()\n            ->all();\n    }\n}\n\n--- File: 617 # models/SK.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass SK extends ActiveRecord \n{\n    const SK_PENDIRIAN = 1;\n    const SK_PERUBAHAN = 5;\n    const SP_PERUBAHAN = 7;\n    const SK_PEMBUBARAN = 6;\n\n    const SK_PENDIRIAN_DESC = 'sk_pendirian';\n    const SK_PERUBAHAN_DESC = 'sk_perubahan';\n    const SP_PERUBAHAN_DESC = 'sp_perubahan';\n    const SK_PEMBUBARAN_DESC = 'sk_pembubaran';\n    \n    public static function tableName()\n    {\n        return '{{%sk}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getDataTransaksi()\n    {\n        return $this->hasOne(TransaksiKoperasi::className(), ['id' => 't_koperasi_id']);\n    }\n}\n\n--- File: 17 # components/NpakHelper.php ---\n<?php\n\nnamespace app\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\NotarisNpak;\nuse app\\models\\Setting;\n\nclass NpakHelper extends Component\n{\n\n    public static function checkNotarisNpak($idNotaris)\n    {\n        $flagPengecekanNpak = Setting::getValue('pengecekan_npak');\n        if ($flagPengecekanNpak == 0) {\n            return true;\n        }\n\n        return self::isNpak($idNotaris);\n    }\n\n    public static function isNpak($idNotaris) {\n        $notarisNpak = NotarisNpak::checkNotarisNPAK($idNotaris);\n        return $notarisNpak ? true : false;\n    }\n\n    public static function isPengecekanNpak() {\n        $flagPengecekanNpak = Setting::getValue('pengecekan_npak');\n        return $flagPengecekanNpak == 0 ? false : true;\n    }\n}\n\n\n--- File: 607 # models/MappingKBLI.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%m_kbli}}\".\n *\n * @property int $id\n * @property string $kode\n * @property int $m_jenis_koperasi\n */\nclass MappingKBLI extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%m_kbli}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['m_jenis_koperasi'], 'required'],\n            [['m_jenis_koperasi'], 'integer'],\n            [['kode'], 'string', 'max' => 33],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'kode' => 'Kode',\n            'm_jenis_koperasi' => 'M Jenis Koperasi',\n        ];\n    }\n}\n\n\n--- File: 620 # models/StatusPengurus.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"m_status_pengurus\".\n *\n * @property int $id\n * @property string $nama\n */\nclass StatusPengurus extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'm_status_pengurus';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['nama'], 'string', 'max' => 50],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'nama' => 'Nama',\n        ];\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['id' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->nama;\n    }\n}\n\n\n--- File: 767 # views/pesan-nama/index.php ---\n<?php\n\nuse yii\\helpers\\Html;\n?>\n<?= Html::a('Cek Nama yang Telah Dipesan', ['/pesan-nama/list-pesan',], [\n    'class' => 'btn btn-success',\n]) ?>\n\n<div class=\"panel panel-default\" style=\"padding:10px\">\n    <div class=\"panel-body\">\n        <h2 class=\"text-center\">PESAN NAMA KOPERASI</h2>\n        <hr>\n        <?= $this->render('_form', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            // 'listPelabuhan' => $listPelabuhan,\n            'listPola' => $listPola,\n            'listSubJenis' => $listSubJenis,\n            'isMerahPutih' => $isMerahPutih,\n            'listModelKop' => $listModelKop,\n        ]) ?>\n\n        <?php if (isset($step2) && $step2 === true) : ?>\n            <?= $this->render('_step2', [\n                    'model' => $model,\n                    'SearchData' => $SearchData,\n                    'dataNotaris' => $dataNotaris\n                ]) ?>\n        <?php endif; ?>\n\n        <?php if (!empty($err['status']) && $err['status'] === true) : ?>\n            <?= $this->render('_err', ['err' => $err]) ?>\n        <?php endif; ?>\n    </div>\n</div>\n\n--- File: 627 # models/Wilayah.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\WilayahSABH;\n\n\nclass Wilayah extends ActiveRecord \n{\n    \n    public static function tableName()\n    {\n        return 'WILAYAH';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat2');\n    }\n\n    public static function getDataProvinsi() {\n        return self::find()\n                ->where(['PARENT_ID' => '0'])\n                ->andWhere(['TIPE' => 'Provinsi'])\n                ->orderBy('NAMA')\n                ->all();\n    }\n\n    public static function getChildWilayah($parent,$tipe) {\n        if($tipe != 'Kelurahan') {\n            $data = self::find()\n                        ->where(['PARENT_ID' => $parent])\n                        ->andWhere(['TIPE' => $tipe])\n                        ->orderBy('NAMA')\n                        ->all();\n        }\n        else {\n            $data = WilayahSABH::find()\n                            ->where(['ID_WILAYAH_M' => $parent])\n                            ->orderBy('NM_KELURAHAN')\n                            ->all();\n        }\n        return $data;\n    }\n\n    public static function getDDListProvinsi() {\n        $data = self::getDataProvinsi();\n        $arr = [];\n        foreach ($data as $val) {\n            $arr[$val['WILAYAH_ID']] = $val['NAMA']; \n        }\n        return $arr;\n    }\n\n    public static function getKodeWilayah($id) {\n        $data = self::find()->where(['WILAYAH_ID' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->KODE;\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['WILAYAH_ID' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->NAMA;\n    }\n}\n\n\n\n--- File: 640 # models/bakum/KBLIBakum.php ---\n<?php\n\nnamespace app\\models\\bakum;\n\nuse app\\models\\Setting;\nuse Yii;\n\n/**\n * This is the model class for table \"m_kbli\".\n *\n * @property int $id_kbli\n * @property string $kode\n * @property string $kategori\n * @property string $judul\n * @property string $uraian\n */\nclass KBLIBakum extends \\yii\\db\\ActiveRecord\n{\n\n    const KODE_TKBM = 52240;\n    const KODE_SIMPAN_PINJAM_KONVENSIONAL = 64141;\n    const KODE_SIMPAN_PINJAM_SYARIAH = 64142;\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'm_kbli';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['uraian'], 'string'],\n            [['kode'], 'string', 'max' => 11],\n            [['kategori'], 'string', 'max' => 3],\n            [['judul'], 'string', 'max' => 255],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id_kbli' => 'Id Kbli',\n            'kode' => 'Kode KBLI',\n            'kategori' => 'Kategori KBLI',\n            'judul' => 'Judul KBLI',\n            'uraian' => 'Uraian KBLI',\n        ];\n    }\n\n    public static function find()\n    {\n        $array_kbli = Setting::getValue('hidden_kbli');\n        $array_kbli = json_decode($array_kbli);\n        return parent::find()->andOnCondition(['not in', 'kode', $array_kbli]);\n    }\n\n    public static function findWithoutFilter()\n    {\n        return parent::find();\n    }\n\n    public static function ProviderKBLI($id) {\n        return self::find()->where(['m_jenis_koperasi' => $id]);\n    }\n\n    public static function listKodeSimpanPinjam()\n    {\n        return [\n            self::KODE_SIMPAN_PINJAM_KONVENSIONAL,\n            self::KODE_SIMPAN_PINJAM_SYARIAH,\n        ];\n    }\n\n    public static function listKodeTkbm()\n    {\n        return [\n            self::KODE_TKBM,\n        ];\n    }\n}\n\n\n--- File: 638 # models/VerifikasiPerbaikan.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%v_perbaikan}}\" (maps to `kop_v_perbaikan`).\n *\n * @property int $id\n * @property int $t_perbaikan_id\n * @property string $tahap VERIFIKATOR_1|VERIFIKATOR_2\n * @property string $status DITERIMA|DITOLAK\n * @property string $alasan\n * @property string|null $created_by\n * @property string $created_date\n * @property string|null $updated_by\n * @property string|null $updated_date\n *\n * @property TransaksiPerbaikan $transaksiPerbaikan\n */\nclass VerifikasiPerbaikan extends \\yii\\db\\ActiveRecord\n{\n    // Tahap verifikasi\n    const TAHAP_VERIFIKATOR_1 = 'VERIFIKATOR_1';\n    const TAHAP_VERIFIKATOR_2 = 'VERIFIKATOR_2';\n\n    // Status verifikasi\n    const STATUS_DITERIMA = 'DITERIMA';\n    const STATUS_DITOLAK  = 'DITOLAK';\n\n    public static function tableName()\n    {\n        // With tablePrefix configured as 'kop_' this resolves to `kop_v_perbaikan`\n        return '{{%v_perbaikan}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function rules()\n    {\n        return [\n            [['t_perbaikan_id', 'tahap', 'status', 'alasan'], 'required'],\n            [['t_perbaikan_id'], 'integer'],\n            [['alasan'], 'string'],\n            [['created_date', 'updated_date'], 'safe'],\n            [['created_by', 'updated_by'], 'string', 'max' => 36],\n            ['tahap', 'in', 'range' => [self::TAHAP_VERIFIKATOR_1, self::TAHAP_VERIFIKATOR_2]],\n            ['status', 'in', 'range' => [self::STATUS_DITERIMA, self::STATUS_DITOLAK]],\n            [\n                't_perbaikan_id',\n                'exist',\n                'targetClass' => TransaksiPerbaikan::class,\n                'targetAttribute' => ['t_perbaikan_id' => 'id']\n            ],\n        ];\n    }\n\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            't_perbaikan_id' => 'Transaksi Perbaikan',\n            'tahap' => 'Tahap',\n            'status' => 'Status',\n            'alasan' => 'Alasan',\n            'created_by' => 'Dibuat Oleh',\n            'created_date' => 'Tanggal Buat',\n            'updated_by' => 'Diubah Oleh',\n            'updated_date' => 'Tanggal Ubah',\n        ];\n    }\n\n    public function getTransaksiPerbaikan()\n    {\n        return $this->hasOne(TransaksiPerbaikan::class, ['id' => 't_perbaikan_id']);\n    }\n}\n\n\n\n--- File: 642 # models/bakum/WilayahSABH.php ---\n<?php\n\nnamespace app\\models\\bakum;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%WILAYAH_SABH}}\".\n *\n * @property int $WSID\n * @property int $ID_WIL\n * @property int $ID_WILAYAH_M\n * @property string $KD_WIL\n * @property string $NM_KELURAHAN\n * @property string $NM_KECAMATAN\n * @property string $NM_DATI2\n * @property string $NM_DATI1\n * @property string $KD_POS\n * @property string $KD_KPP\n * @property string $KD_KP2KP\n */\nclass WilayahSABH extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%WILAYAH_SABH}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['ID_WIL', 'ID_WILAYAH_M'], 'integer'],\n            [['KD_WIL', 'KD_KP2KP'], 'string', 'max' => 15],\n            [['NM_KELURAHAN', 'NM_KECAMATAN', 'NM_DATI1'], 'string', 'max' => 30],\n            [['NM_DATI2'], 'string', 'max' => 35],\n            [['KD_POS', 'KD_KPP'], 'string', 'max' => 10],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'WSID' => 'Wsid',\n            'ID_WIL' => 'Id  Wil',\n            'ID_WILAYAH_M' => 'Id  Wilayah  M',\n            'KD_WIL' => 'Kd  Wil',\n            'NM_KELURAHAN' => 'Nm  Kelurahan',\n            'NM_KECAMATAN' => 'Nm  Kecamatan',\n            'NM_DATI2' => 'Nm  Dati2',\n            'NM_DATI1' => 'Nm  Dati1',\n            'KD_POS' => 'Kd  Pos',\n            'KD_KPP' => 'Kd  Kpp',\n            'KD_KP2KP' => 'Kd  Kp2 Kp',\n        ];\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['ID_WIL' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->NM_KELURAHAN;\n    }\n\n    public static function getKode($id) {\n        $data = self::find()->where(['ID_WIL' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->KD_WIL;\n    }\n\n    public static function getKelurahanNameByParentIdAndIdWil($parent, $id_wil) {\n        $data = self::find()->where(['ID_WILAYAH_M' => $parent, 'ID_WIL' => $id_wil])\n                            ->one();\n\n        if ($data) {\n            return $data->NM_KELURAHAN;\n        } else {\n            return self::getNama($id_wil);\n        }\n    }\n\n    public static function getWsidByIdWil($id_wil)\n    {\n        if ($id_wil) {\n            if ($data = self::find()->where(['ID_WIL' => $id_wil])->one()) {\n                return $data->WSID;\n            }\n        }\n\n        return null;\n    }\n}\n\n\n--- File: 629 # models/WilayahOds.php ---\n<?php\n\nnamespace app\\models;\n\nuse app\\models\\Wilayah;\nuse app\\models\\WilayahSabh;\nuse Yii;\n\n/**\n * This is the model class for table \"kop_m_wilayah_ods\".\n *\n * @property int $id\n * @property string $id_provinsi\n * @property string $provinsi\n * @property string $id_kabupaten\n * @property string $kabupaten\n * @property string $id_kecamatan\n * @property string $kecamatan\n * @property string $id_kelurahan\n * @property string $kelurahan\n * @property int $wilayah_kelurahan_id\n * @property string $counter\n */\nclass WilayahOds extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%m_wilayah_ods}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['wilayah_kelurahan_id', 'counter'], 'integer'],\n            [['id_provinsi', 'provinsi', 'id_kabupaten', 'kabupaten', 'id_kecamatan', 'kecamatan', 'id_kelurahan', 'kelurahan'], 'string', 'max' => 50],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'id_provinsi' => 'Id Provinsi',\n            'provinsi' => 'Provinsi',\n            'id_kabupaten' => 'Id Kabupaten',\n            'kabupaten' => 'Kabupaten',\n            'id_kecamatan' => 'Id Kecamatan',\n            'kecamatan' => 'Kecamatan',\n            'id_kelurahan' => 'Id Kelurahan',\n            'kelurahan' => 'Kelurahan',\n            'wilayah_kelurahan_id' => 'Wilayah Kelurahan ID',\n            'counter' => 'Counter',\n        ];\n    }\n\n    public static function getKodeWilayah($id)\n    {\n        $data = self::find()->where(['wilayah_kelurahan_id' => $id])->one();\n\n        if ($data) {\n            return $data->id_provinsi.$data->id_kabupaten.$data->id_kecamatan.$data->id_kelurahan;\n        }\n\n        return null;\n    }\n\n    public static function getWilayah($full_id)\n    {\n        $data = self::find()\n                    ->where(['CONCAT(id_provinsi, id_kabupaten, id_kecamatan, id_kelurahan)' => $full_id])->one();\n\n        if ($data) {\n            $kelurahan = WilayahSabh::find()->where(['ID_WIL' => $data->wilayah_kelurahan_id])->one();\n\n            if ($kelurahan) {\n                $wilayah = Wilayah::find()\n                            ->alias('kecamatan')\n                            ->select([\n                                'kecamatan.WILAYAH_ID AS kecamatan_id', 'kecamatan.nama AS nama_kecamatan',\n                                'kabupaten.WILAYAH_ID AS kab_kota_id', 'kabupaten.nama AS nama_kabupaten',\n                                'provinsi.WILAYAH_ID AS provinsi_id', 'provinsi.nama AS nama_provinsi',\n                            ])\n                            ->leftJoin('WILAYAH kabupaten', 'kecamatan.PARENT_ID = kabupaten.WILAYAH_ID')\n                            ->leftJoin('WILAYAH provinsi', 'kabupaten.PARENT_ID = provinsi.WILAYAH_ID')\n                            ->where(['kecamatan.WILAYAH_ID' => $kelurahan->ID_WILAYAH_M])\n                            ->asArray()\n                            ->one();\n\n                if ($wilayah) {\n                    return [\n                        'provinsi_id' => $wilayah['provinsi_id'],\n                        'nama_provinsi' => $wilayah['nama_provinsi'],\n                        'kab_kota_id' => $wilayah['kab_kota_id'],\n                        'nama_kabupaten' => $wilayah['nama_kabupaten'],\n                        'kecamatan_id' => $wilayah['kecamatan_id'],\n                        'nama_kecamatan' => $wilayah['nama_kecamatan'],\n                        'kel_desa_id' => $kelurahan['ID_WIL'],\n                        'nama_kelurahan' => $kelurahan['NM_KELURAHAN'],\n                    ];\n                }\n            }\n        }\n\n        return null;\n    }\n}\n\n\n--- File: 637 # models/TransaksiPerbaikan.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n\n/**\n * This is the model class for table \"{{%t_perbaikan}}\".\n *\n * @property int $id\n * @property int $t_koperasi_id\n * @property string $file_surat_permohonan\n * @property string $file_surat_pernyataan\n * @property string $file_surat_keterangan_domisili\n * @property string $file_lain_lain\n * @property string $data_diperbaiki_list\n * @property string $data_koperasi_list\n * @property string $status_transaksi_perbaikan\n * @property string $is_deleted 0:Tidak,1:Ya\n * @property string $created_by\n * @property string $created_date\n * @property string $updated_by\n * @property string $updated_date\n * @property string $deleted_by\n * @property string $deleted_date\n */\nclass TransaksiPerbaikan extends \\yii\\db\\ActiveRecord\n{\n    const STATUS_VERIFIKATOR_1_TUNGGU    = 'verifikator_1_tunggu';\n    const STATUS_VERIFIKATOR_1_TOLAK     = 'verifikator_1_tolak';\n    const STATUS_VERIFIKATOR_1_REVISI    = 'verifikator_1_revisi';\n    const STATUS_VERIFIKATOR_2_TUNGGU    = 'verifikator_2_tunggu';\n    const STATUS_PERMOHONAN_DITERIMA     = 'permohonan_diterima';\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%t_perbaikan}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['t_koperasi_id'], 'required'],\n            // Biarkan DB default atau proses bisnis menetapkan status awal\n            [['t_koperasi_id'], 'integer'],\n            [['created_date', 'updated_date', 'deleted_date'], 'safe'],\n            [['file_surat_permohonan', 'data_diperbaiki_list', 'data_koperasi_list', 'file_surat_pernyataan', 'file_surat_keterangan_domisili', 'file_lain_lain'], 'string'],\n            [['status_transaksi_perbaikan'], 'in', 'range' => [\n                'verifikator_1_tunggu',\n                'verifikator_1_tolak',\n                'verifikator_1_revisi',\n                'verifikator_2_tunggu',\n                'permohonan_diterima'\n            ]],\n            [['is_deleted'], 'in', 'range' => ['0', '1']],\n            [['created_by', 'updated_by', 'deleted_by'], 'string', 'max' => 36],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            't_koperasi_id' => 'ID Transaksi',\n            'file_surat_permohonan' => 'Surat Permohonan',\n            'file_surat_pernyataan' => 'Surat Pernyataan',\n            'file_surat_keterangan_domisili' => 'Surat Keterangan Domisili',\n            'file_lain_lain' => 'Lain-Lain',\n            'data_diperbaiki_list' => 'Data Diperbaiki List',\n            'data_koperasi_list' => 'Data Koperasi (Snapshot)',\n            'status_transaksi_perbaikan' => 'Status Transaksi Perbaikan',\n            'is_deleted' => 'Is Deleted',\n            'created_by' => 'Created By',\n            'created_date' => 'Created Date',\n            'updated_by' => 'Updated By',\n            'updated_date' => 'Updated Date',\n            'deleted_by' => 'Deleted By',\n            'deleted_date' => 'Deleted Date',\n        ];\n    }\n\n    public function getTransaksiKoperasi()\n    {\n        return $this->hasOne(TransaksiKoperasi::class, ['id' => 't_koperasi_id']);\n    }\n\n    public function getChecklistPerbaikan()\n    {\n        return $this->hasMany(ChecklistPerbaikan::class, ['t_perbaikan_id' => 'id']);\n    }\n\n    /**\n     * Peta label ramah pengguna untuk status transaksi perbaikan.\n     * Digunakan di tampilan/filter agar konsisten dengan nilai di DB.\n     * @return array\n     */\n    public static function getStatusMap(): array\n    {\n        return [\n            self::STATUS_VERIFIKATOR_1_TUNGGU    => 'Belum Diverifikasi',\n            self::STATUS_VERIFIKATOR_1_TOLAK     => 'Ditolak Verifikator 1',\n            self::STATUS_VERIFIKATOR_1_REVISI    => 'Direvisi Verifikator 1',\n            self::STATUS_VERIFIKATOR_2_TUNGGU    => 'Proses Verifikasi Tahap 2',\n            self::STATUS_PERMOHONAN_DITERIMA     => 'Verifikasi Selesai',\n        ];\n    }\n}\n\n\n--- File: 659 # models/forms/PesanNamaForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse yii\\base\\Model;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\components\\RegexHelper;\n\nclass PesanNamaForm extends Model {\n    public $nama_koperasi;\n    public $preview_nama;\n    public $jenis_koperasi;\n    public $subjenis_koperasi;\n    public $hidSubJenis_koperasi;\n    public $nama_pelabuhan;\n    public $ahu_notaris_id;\n    public $nama_lengkap;\n    public $no_hp;\n    public $email;\n    public $m_pola_id;\n    public $model_koperasi = 0;\n    public $ksop;\n    public $tmp_ksop;\n    public $surat_kuasa;\n    public $tmp_surat_kuasa;\n\n    public static $listModelKoperasi = [\n        0 => 'Tidak Multi Pihak',\n        1 => 'Multi Pihak',\n    ];\n    \n    public function rules() {\n        return [\n            [['nama_koperasi','jenis_koperasi'], 'required','message' => 'Nama Koperasi Tidak Boleh Kosong.'],\n            [['nama_koperasi'],'filter','filter' => 'strtoupper'],\n            [['nama_koperasi'], 'string', \n            'max' => 100,\n            'tooLong' => \"Nama Koperasi Tidak Boleh Melebihi 100 Karakter\"],\n            //REGEX Nama Koperasi\n            [['nama_koperasi'],\n            'match', 'pattern' => RegexHelper::LETTER_AND_SPACES,\n            'message' => 'Terdapat Karakter Selain Huruf Latin Pada Nama Koperasi'],\n            [['nama_koperasi'],'trim'],\n\n            //Rules Pelabuhan\n            // ['nama_pelabuhan','required',\n            //     'when' => function($model) {\n            //     return JenisKoperasi::isTKBM($model->subjenis_koperasi) && $model->nama_pelabuhan;\n            // },\n            // 'whenClient' => \"function(attribute, value) {\n            //     return $('#pesannamaform-nama_pelabuhan').is(':visible');\n            // }\",\n            // 'message' => 'Nama Pelabuhan Tidak Boleh Kosong.'],\n\n            // Rules Upload KSOP\n            // ['ksop','required',\n            // 'when' => function($model) {\n            //     return JenisKoperasi::isTKBM($model->subjenis_koperasi) && $model->ksop;\n            // },\n            // 'whenClient' => \"function(attribute, value) {\n            //     return $('#pesannamaform-ksop').is(':visible') && ($('#pesannamaform-ksop').val() != '');\n            // }\",\n            // 'message' => 'KSOP Harus diupload.'],\n\n            // Custom validation untuk surat kuasa - always run even when fields are empty\n            [['surat_kuasa', 'tmp_surat_kuasa'], 'validateSuratKuasaRequired', 'skipOnEmpty' => false],\n            \n            [\n                ['surat_kuasa'], // This refers to the UploadedFile instance from the current request\n                'file',\n                'skipOnEmpty' => true, // If no new file is uploaded in this request, skip these checks.\n                'extensions' => 'pdf',\n                'maxSize' => 1024 * 1024, // 1MB\n                'tooBig' => 'Ukuran file maksimal 1MB',\n                'wrongExtension' => 'Hanya file .pdf yang diizinkan'\n            ],\n\n            [[\n                'nama_koperasi',\n                'jenis_koperasi',\n                'preview_nama',\n                'subjenis_koperasi',\n                'nama_pelabuhan',\n                'm_pola_id',\n                'ksop',\n                'tmp_ksop',\n                'ahu_notaris_id',\n                'nama_lengkap',\n                'no_hp',\n                'email',\n                'model_koperasi'],\n                'safe'],\n            [['tmp_surat_kuasa'],'safe'],\n            // [['ksop'],'file',\n            // 'skipOnEmpty' => true,\n            // 'extensions' => 'pdf',\n            // 'maxSize' => 5000 * 1024],\n        ];\n    }\n\n    public function validateSuratKuasaRequired($attribute, $params)\n    {\n        // Check for new uploaded file (UploadedFile instance)\n        $hasNewFile = ($this->surat_kuasa instanceof \\yii\\web\\UploadedFile) && $this->surat_kuasa->error === UPLOAD_ERR_OK;\n        \n        // Check for previously uploaded file (file path string)\n        $hasExistingFile = !empty($this->tmp_surat_kuasa) && is_string($this->tmp_surat_kuasa);\n        \n        // Always validate - ensure error shows when no file is provided\n        if (!$hasNewFile && !$hasExistingFile) {\n            // Add error to the main surat_kuasa field for user visibility\n            $this->addError('surat_kuasa', 'Surat Kuasa wajib diupload.');\n        }\n    }\n\n    public function normalizeData()\n    {\n        $this->nama_koperasi = preg_replace('/\\s+/', ' ',$this->nama_koperasi);\n        $this->preview_nama = preg_replace('/\\s+/', ' ',$this->preview_nama);\n    }\n}\n?>\n\n\n--- File: 658 # models/forms/PerbaikanDataForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse app\\components\\helper\\PerbaikanDataHelper;\nuse Mpdf\\Mpdf;\nuse Mpdf\\Output\\Destination;\nuse Yii;\nuse yii\\base\\Model;\nuse yii\\helpers\\FileHelper;\nuse yii\\web\\UploadedFile;\n\nclass PerbaikanDataForm extends Model\n{\n\n    const SCENARIO_DATA_KOPERASI = 'scenario_data_koperasi';\n    const SCENARIO_DATA_PEMOHON = 'scenario_data_pemohon';\n    const SCENARIO_SURAT_PERMOHONAN = 'scenario_surat_permohonan';\n    const SCENARIO_CHECKLIST = 'scenario_checklist';\n\n    const REMINDER_DOWNLOAD_MANUAL_BOOK = 'reminder_download_manual_book';\n    const REMINDER_BERHASIL = 'reminder_berhasil';\n\n    // Data Koperasi\n    public $full_nama_koperasi;\n    public $no_sk_koperasi;\n    public $tanggal_sk_koperasi;\n\n\n    // Data Pemohon\n    public $nama_pemohon;\n    public $nik_pemohon;\n    public $jabatan_pemohon;\n    public $email_pemohon;\n    public $no_telp_pemohon;\n\n\n    // Surat Permohonan\n    public $file_surat_permohonan;\n\n    // Checklist\n    public $checklist;\n    public $data_diperbaiki_list;\n\n    public $file_surat_pernyataan;\n    public $file_surat_keterangan_domisili;\n    public $file_lain_lain;\n\n    // Additional Data\n    public $t_koperasi_id;\n\n    public function beforeValidate()\n    {\n        if (!parent::beforeValidate()) {\n            return false;\n        }\n\n        if ($this->scenario == self::SCENARIO_SURAT_PERMOHONAN && !empty($this->file_surat_permohonan)) {\n            $this->file_surat_permohonan = PerbaikanDataHelper::uploadSuratPermohonan($this->file_surat_permohonan);\n        }\n\n        if ($this->scenario == self::SCENARIO_CHECKLIST) {\n            foreach (PerbaikanDataHelper::getFileAttributes($this) as $attribute) {\n                $uploadedFile = UploadedFile::getInstance($this, $attribute);\n                if ($uploadedFile !== null) {\n                    $this->$attribute = $uploadedFile;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public function afterValidate()\n    {\n        parent::afterValidate();\n\n        if ($this->scenario == self::SCENARIO_SURAT_PERMOHONAN && !empty($this->file_surat_permohonan)) {\n            Yii::$app->session->set('file_surat_permohonan', $this->file_surat_permohonan);\n        }\n\n        if ($this->scenario == self::SCENARIO_CHECKLIST) {\n            foreach (PerbaikanDataHelper::getFileAttributes($this) as $attribute) {\n                Yii::$app->session->set($attribute, $this->$attribute);\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['full_nama_koperasi', 'no_sk_koperasi', 'tanggal_sk_koperasi'], 'required', 'on' => self::SCENARIO_DATA_KOPERASI],\n            [['full_nama_koperasi'], 'string', 'max' => 255],\n            [['no_sk_koperasi'], 'string', 'max' => 50],\n            [['tanggal_sk_koperasi'], 'date', 'format' => 'php:Y-m-d'],\n            [['nama_pemohon', 'nik_pemohon', 'jabatan_pemohon', 'email_pemohon', 'no_telp_pemohon'], 'required', 'on' => self::SCENARIO_DATA_PEMOHON],\n\n            [['file_surat_permohonan'], 'required', 'on' => self::SCENARIO_SURAT_PERMOHONAN],\n            [['file_surat_permohonan'], 'file', 'extensions' => 'pdf', 'checkExtensionByMimeType' => true, 'on' => self::SCENARIO_SURAT_PERMOHONAN],\n\n            [\n                ['file_surat_pernyataan', 'file_surat_keterangan_domisili'],\n                'file',\n                'skipOnEmpty' => false,\n                'extensions' => 'pdf',\n                'maxSize' => 10 * 1024 * 1024, // 10 MB\n                'tooBig' => 'Ukuran file maksimal 10MB.',\n                'wrongExtension' => 'Hanya file PDF yang diperbolehkan.',\n                'on' => self::SCENARIO_CHECKLIST\n            ],\n            [\n                ['file_lain_lain'],\n                'file',\n                'skipOnEmpty' => false, // optional ?\n                'extensions' => 'pdf',\n                'maxSize' => 10 * 1024 * 1024, // 10 MB\n                'tooBig' => 'Ukuran file maksimal 10MB.',\n                'wrongExtension' => 'Hanya file PDF yang diperbolehkan.',\n                'on' => self::SCENARIO_CHECKLIST\n            ],\n            [['data_diperbaiki_list'], 'safe']\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'full_nama_koperasi' => 'Nama Koperasi',\n            'no_sk_koperasi' => 'Nomor SKT/SKP',\n            'tanggal_sk_koperasi' => 'Tanggal SKT/SKP',\n            'nama_pemohon' => 'Nama Pemohon',\n            'nik_pemohon' => 'NIK / Nomor Identitas',\n            'jabatan_pemohon' => 'Jabatan di Yayasan',\n            'email_pemohon' => 'Email Aktif',\n            'no_telp_pemohon' => 'No. Telepon / WhatsApp',\n            'file_surat_permohonan' => 'Surat Permohonan',\n            'file_surat_pernyataan' => 'Surat Pernyataan',\n            'file_surat_keterangan_domisili' => 'Surat Keterangan Domisili',\n            'file_lain_lain' => 'Lain-Lain'\n        ];\n    }\n\n    public static function removeFormSessions()\n    {\n        $session = Yii::$app->session;\n        $session->remove('file_surat_permohonan');\n        $session->remove('file_surat_pernyataan');\n        $session->remove('file_surat_keterangan_domisili');\n        $session->remove('file_lain_lain');\n        $session->remove('data_diperbaiki_list');\n        $session->remove('no_checklist');\n    }\n\n    public function uploadFormFiles()\n    {\n        foreach (PerbaikanDataHelper::getFileAttributes($this) as $attribute) {\n            if ($this->$attribute instanceof UploadedFile) {\n                $this->$attribute = PerbaikanDataHelper::uploadFile($this->$attribute, $attribute);\n            }\n        }\n    }\n}\n\n\n--- File: 662 # models/notariat/Notaris.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\n\n/**\n * This is the model class for table \"ahu_notaris\".\n *\n * @property int $id_notaris\n * @property string $username\n * @property string $email\n * @property string $email_alternatif\n * @property string $nama_lengkap\n * @property string $nama_prefix\n * @property string $nama_suffix\n * @property string $nama_gelar\n * @property string $nama_kecil\n * @property string $nama_alias\n * @property string $nama_sementara\n * @property string $tanggal_lahir\n * @property string $tempat_lahir\n * @property string $jenis_kelamin\n * @property int $id_agama\n * @property int $id_status_perkawinan\n * @property string $alamat_rt\n * @property string $alamat_rw\n * @property string $alamat_jalan\n * @property string $alamat_kelurahan\n * @property string $alamat_kecamatan_id\n * @property string $alamat_kabupaten_id\n * @property int $alamat_provinsi_id\n * @property int $alamat_kodepos\n * @property string $nomor_hp_json\n * @property string $nomor_ktp\n * @property string $nomor_telpon_json\n * @property string $npwp\n * @property string $nomor_sk\n * @property string $nomor_sk_pelantikan_tmp\n * @property string $nomor_sk_pelantikan\n * @property string $tanggal_sk_pelantikan\n * @property string $nomor_setifikat_kodetik\n * @property string $tanggal_sertifikat_kodetik\n * @property string $almamater_json\n * @property string $pengalaman_magang_json\n * @property string $pengalaman_kerja_json\n * @property int $id_wilayah\n * @property string $nama_kabupaten_penempatan\n * @property string $nama_provinsi_penempatan\n * @property string $path_foto\n * @property string $id_persyaratan\n * @property int $status -- cron dari hery (perpanjangan dan pensiun)\n * @property string $tanggal_aktivasi\n * @property string $sisa_cuti\n * @property string $ADDITIONAL\n * @property string $created_date\n * @property string $created_by\n * @property int $ID_NOTARIS_SABH\n * @property int $ID_NOTARIS_NOTARIAT\n * @property int $flag_edit\n * @property string $no_hp\n * @property string $json_verifikasi\n * @property int $flag_pensiun\n * @property int $flag_skck\n * @property int $is_polling\n * @property int $cid_wilayah wilayah terakhir notaris berdasarkan sk dan sk manual\n * @property int $flag_upn 0 = tidak 1 = bisa\n * @property int $flag_ujian\n * @property int $status_sblm_blokir\n * @property int $id_wilayah_kedudukan\n */\nclass Notaris extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'ahu_notaris';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['nama_prefix', 'nama_suffix', 'almamater_json', 'pengalaman_magang_json', 'pengalaman_kerja_json', 'id_persyaratan', 'ADDITIONAL', 'json_verifikasi'], 'string'],\n            [['tanggal_lahir', 'tanggal_sk_pelantikan', 'tanggal_sertifikat_kodetik', 'tanggal_aktivasi', 'created_date'], 'safe'],\n            [['id_agama', 'id_status_perkawinan', 'alamat_provinsi_id', 'alamat_kodepos', 'id_wilayah', 'status', 'ID_NOTARIS_SABH', 'ID_NOTARIS_NOTARIAT', 'flag_edit', 'flag_pensiun', 'flag_skck', 'is_polling', 'cid_wilayah', 'flag_upn', 'flag_ujian', 'status_sblm_blokir', 'id_wilayah_kedudukan'], 'integer'],\n            [['nomor_sk_pelantikan_tmp', 'json_verifikasi'], 'required'],\n            [['username', 'created_by', 'no_hp'], 'string', 'max' => 50],\n            [['email', 'email_alternatif', 'nama_lengkap', 'nama_kecil', 'nama_sementara', 'tempat_lahir', 'nomor_hp_json', 'nomor_ktp', 'npwp'], 'string', 'max' => 100],\n            [['nama_gelar'], 'string', 'max' => 150],\n            [['nama_alias', 'alamat_jalan', 'alamat_kelurahan', 'alamat_kecamatan_id', 'alamat_kabupaten_id', 'nomor_sk_pelantikan_tmp', 'nomor_sk_pelantikan', 'nama_kabupaten_penempatan', 'nama_provinsi_penempatan', 'path_foto'], 'string', 'max' => 255],\n            [['jenis_kelamin'], 'string', 'max' => 1],\n            [['alamat_rt', 'alamat_rw'], 'string', 'max' => 10],\n            [['nomor_telpon_json', 'nomor_setifikat_kodetik'], 'string', 'max' => 200],\n            [['nomor_sk'], 'string', 'max' => 32],\n            [['sisa_cuti'], 'string', 'max' => 5],\n            [['username'], 'unique'],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id_notaris' => 'Id Notaris',\n            'username' => 'Username',\n            'email' => 'Email',\n            'email_alternatif' => 'Email Alternatif',\n            'nama_lengkap' => 'Nama Lengkap',\n            'nama_prefix' => 'Nama Prefix',\n            'nama_suffix' => 'Nama Suffix',\n            'nama_gelar' => 'Nama Gelar',\n            'nama_kecil' => 'Nama Kecil',\n            'nama_alias' => 'Nama Alias',\n            'nama_sementara' => 'Nama Sementara',\n            'tanggal_lahir' => 'Tanggal Lahir',\n            'tempat_lahir' => 'Tempat Lahir',\n            'jenis_kelamin' => 'Jenis Kelamin',\n            'id_agama' => 'Id Agama',\n            'id_status_perkawinan' => 'Id Status Perkawinan',\n            'alamat_rt' => 'Alamat Rt',\n            'alamat_rw' => 'Alamat Rw',\n            'alamat_jalan' => 'Alamat Jalan',\n            'alamat_kelurahan' => 'Alamat Kelurahan',\n            'alamat_kecamatan_id' => 'Alamat Kecamatan ID',\n            'alamat_kabupaten_id' => 'Alamat Kabupaten ID',\n            'alamat_provinsi_id' => 'Alamat Provinsi ID',\n            'alamat_kodepos' => 'Alamat Kodepos',\n            'nomor_hp_json' => 'Nomor Hp Json',\n            'nomor_ktp' => 'Nomor Ktp',\n            'nomor_telpon_json' => 'Nomor Telpon Json',\n            'npwp' => 'Npwp',\n            'nomor_sk' => 'Nomor Sk',\n            'nomor_sk_pelantikan_tmp' => 'Nomor Sk Pelantikan Tmp',\n            'nomor_sk_pelantikan' => 'Nomor Sk Pelantikan',\n            'tanggal_sk_pelantikan' => 'Tanggal Sk Pelantikan',\n            'nomor_setifikat_kodetik' => 'Nomor Setifikat Kodetik',\n            'tanggal_sertifikat_kodetik' => 'Tanggal Sertifikat Kodetik',\n            'almamater_json' => 'Almamater Json',\n            'pengalaman_magang_json' => 'Pengalaman Magang Json',\n            'pengalaman_kerja_json' => 'Pengalaman Kerja Json',\n            'id_wilayah' => 'Id Wilayah',\n            'nama_kabupaten_penempatan' => 'Nama Kabupaten Penempatan',\n            'nama_provinsi_penempatan' => 'Nama Provinsi Penempatan',\n            'path_foto' => 'Path Foto',\n            'id_persyaratan' => 'Id Persyaratan',\n            'status' => 'Status',\n            'tanggal_aktivasi' => 'Tanggal Aktivasi',\n            'sisa_cuti' => 'Sisa Cuti',\n            'ADDITIONAL' => 'A D D I T I O N A L',\n            'created_date' => 'Created Date',\n            'created_by' => 'Created By',\n            'ID_NOTARIS_SABH' => 'I D N O T A R I S S A B H',\n            'ID_NOTARIS_NOTARIAT' => 'I D N O T A R I S N O T A R I A T',\n            'flag_edit' => 'Flag Edit',\n            'no_hp' => 'No Hp',\n            'json_verifikasi' => 'Json Verifikasi',\n            'flag_pensiun' => 'Flag Pensiun',\n            'flag_skck' => 'Flag Skck',\n            'is_polling' => 'Is Polling',\n            'cid_wilayah' => 'Cid Wilayah',\n            'flag_upn' => 'Flag Upn',\n            'flag_ujian' => 'Flag Ujian',\n            'status_sblm_blokir' => 'Status Sblm Blokir',\n            'id_wilayah_kedudukan' => 'Id Wilayah Kedudukan',\n        ];\n    }\n\n    public static function getIdNotarisByLastSk($nomor_sk)\n    {\n        $list_id_aksi = [1, 3, 9, 13, 14, 15, 25];\n        $data = TransaksiNotaris::find()\n                    ->where([\n                        'id_aksi_transaksi' => $list_id_aksi,\n                        'status_lolos_gagal' => 1,\n                        'nomor_sk' => $nomor_sk,\n                    ])->orderBy(['modified_date' => SORT_DESC])\n                    ->one();\n\n        if ($data) {\n            $sk_last = TransaksiNotaris::find()\n                        ->where([\n                            'id_aksi_transaksi' => $list_id_aksi,\n                            'status_lolos_gagal' => 1,\n                            'id_notaris' => $data->id_notaris,\n                        ])->orderBy(['modified_date' => SORT_DESC])\n                        ->one();\n\n            // cek apakah nomor sk nomor terakhir\n            if ($sk_last && $nomor_sk == $sk_last->nomor_sk) {\n                return $sk_last->id_notaris;\n            }\n        } else {\n            $data = MsSkAdditional::find()\n                        ->where(['ID_AKSI' => $list_id_aksi])\n                        ->andWhere(['LIKE', 'DATA_SK', $nomor_sk])\n                        ->orderBy(['TIMESTAMP_SK' => SORT_DESC])\n                        ->one();\n\n            if ($data) {\n                $sk_last = MsSkAdditional::find()\n                            ->where(['ID_AKSI' => $list_id_aksi])\n                            ->andWhere(['ID_NOTARIS' => $data->ID_NOTARIS])\n                            ->orderBy(['TIMESTAMP_SK' => SORT_DESC])\n                            ->one();\n\n                if ($sk_last) {\n                    $data_sk = json_decode($sk_last->DATA_SK);\n\n                    // cek apakah nomor sk nomor terakhir\n                    if (strtolower($nomor_sk) == strtolower(trim($data_sk->Nomor_SK))) {\n                        return $sk_last->ID_NOTARIS;   \n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static function getLastSkNotaris($id_notaris)\n    {\n        $list_id_aksi = [1, 3, 9, 13, 14, 15, 25];\n        $sk_last = null;\n        $data = TransaksiNotaris::find()\n                    ->where([\n                        'id_aksi_transaksi' => $list_id_aksi,\n                        'status_lolos_gagal' => 1,\n                        'id_notaris' => $id_notaris,\n                    ])->orderBy(['modified_date' => SORT_DESC])\n                    ->one();\n\n        if ($data) {\n            $sk_last = $data[\"nomor_sk\"];\n        } else {\n            $data = MsSkAdditional::find()\n                        ->where(['ID_AKSI' => $list_id_aksi])\n                        ->andWhere(['ID_NOTARIS' => $id_notaris])\n                        ->orderBy(['TIMESTAMP_SK' => SORT_DESC])\n                        ->one();\n\n            if ($data) {\n                $sk_last = $data[\"NOMOR_SK\"];\n            }\n        }\n\n        return $sk_last;\n    }\n}\n\n\n--- File: 49 # controllers/PesanNamaController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse app\\components\\BaseController;\nuse app\\components\\KoperasiHelper;\nuse app\\models\\forms\\PesanNamaForm;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\Pelabuhan;\nuse yii\\helpers\\Url;\nuse yii\\web\\NotFoundHttpException;\nuse app\\models\\notariat\\Notaris;\nuse app\\components\\Helpers;\nuse yii\\data\\ActiveDataProvider;\nuse yii\\web\\MethodNotAllowedHttpException;\nuse app\\models\\Wilayah;\nuse app\\components\\ActionHelper;\nuse app\\components\\helper\\BoHelper;\nuse yii\\web\\UploadedFile;\nuse app\\models\\search\\PesanNamaSearch;\nuse app\\models\\PolaPengelolaan;\n\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\NpakHelper;\n\nclass PesanNamaController extends BaseController\n{\n\n    public function beforeAction($action)\n    {\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"/site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionIndex()\n    {\n        $model = new PesanNamaForm();\n        $listModelKop = ActionHelper::getDDListModelKoperasi();\n        $listJenisKop = ActionHelper::getDDListJenisKop();\n        Yii::$app->view->title = \"Pesan Nama\";\n        // $listPelabuhan = ActionHelper::getDDListPelabuhan($this->dummy_login['wilayah_id']);\n        $listPola = ActionHelper::getDDListPola();\n        $err = $step2 = $SearchData =  null;\n        $listSubJenis = [];\n        $isMerahPutih = false;\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        \n        // Clear surat kuasa session when accessing index page without POST data\n        if (!Yii::$app->request->isPost) {\n            $session->remove('uploaded_surat_kuasa');\n        }\n        $idNotaris = $user['value']['id_notaris'];\n        if (!NpakHelper::isNpak($idNotaris)) {\n            $isMerahPutih = true;\n            $listJenisKop = ActionHelper::getDDListJenisKopMerahPutih();\n        }\n\n        if ($model->load(Yii::$app->request->post())) {\n            $model->normalizeData();\n            // Jika Memilih Sub Jenis\n            if ($model->subjenis_koperasi) {\n                $listSubJenis = ActionHelper::getDDSubJenisById($model->jenis_koperasi);\n            }\n            if (JenisKoperasi::isMerahPutih($model->jenis_koperasi)) {\n                $model->model_koperasi = 0;\n                $isMerahPutih = true;\n            }\n\n            $post = Yii::$app->request->post();\n            if (!isset($post['submit-pratinjau'])) {\n                // Clear previous session data for new pesan nama workflow\n                $session->remove('uploaded_surat_kuasa');\n                \n                $model->ksop = UploadedFile::getInstance($model, 'ksop');\n                if ($model->ksop) {\n                    $model->ksop->tempName = $this->UploadKSOP($model->ksop, true);\n                    $model->tmp_ksop = $model->ksop->tempName;\n                }\n\n                $model->surat_kuasa = UploadedFile::getInstance($model, 'surat_kuasa');\n                if ($model->surat_kuasa) {\n                    // Upload new surat kuasa file\n                    $model->surat_kuasa->tempName = $this->UploadFile($model->surat_kuasa, 'surat-kuasa', true);\n                    $model->tmp_surat_kuasa = $model->surat_kuasa->tempName;\n                    $session->set('uploaded_surat_kuasa', $model->tmp_surat_kuasa);\n                }\n                // Don't restore from session if no new file uploaded - let validation handle it\n            } else {\n                // Jika submit pratinjau, restore dari session dan POST data\n                $model->tmp_surat_kuasa = $session->get('uploaded_surat_kuasa');\n                \n                // Juga ambil dari POST data jika ada\n                if (!empty($post['PesanNamaForm']['tmp_surat_kuasa'])) {\n                    $model->tmp_surat_kuasa = $post['PesanNamaForm']['tmp_surat_kuasa'];\n                }\n            }\n            if ($model->validate()) {\n                //Cek Apakah Bukan Jenis TKBM\n                if (!JenisKoperasi::isTKBM($model->subjenis_koperasi)) {\n                    $model->nama_pelabuhan = null;\n                }\n\n\n                //Cek Apakah Nama Sudah Ada\n                $jenis_kop = $model->subjenis_koperasi ? $model->subjenis_koperasi : $model->jenis_koperasi;\n                $err = PesanNama::checkPesanNama($model->nama_koperasi, $jenis_kop, $model->nama_pelabuhan);\n\n                // Jika sudah submit pratinjau pesan nama\n                if (isset($post['submit-pratinjau']) && !$err) {\n                    $model->ahu_notaris_id = $user['value']['id_notaris'];\n                    $model->nama_lengkap = $user['value']['nama_gelar'];\n                    $model->no_hp = $user['value']['no_hp'];\n                    $model->email = $user['value']['email'];\n                    $model->tmp_surat_kuasa = $session->get('uploaded_surat_kuasa');\n                    $sukses = $this->savePesanNama($model);\n                    // Clear session data after successful submission\n                    $session->remove('uploaded_surat_kuasa');\n                    Yii::$app->response->redirect(\"/pesan-nama/sukses?no_pesan={$sukses}\");\n                }\n\n                $step2 = !$err ? true : false;\n                if ($step2) {\n                    $SearchData = KoperasiHelper::generateFuzzyNamaKoperasi($model->nama_koperasi, 10);\n                }\n            }\n        }\n\n        $dataNotaris = [\n            'nama_notaris' => $user['value']['nama_gelar'],\n            'telepon' => $user['value']['no_hp'],\n            'email' => $user['value']['email'],\n        ];\n\n        return $this->render('index', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            // 'listPelabuhan' => $listPelabuhan,\n            'listPola' => $listPola,\n            'listSubJenis' => $listSubJenis,\n            'isMerahPutih' => $isMerahPutih,\n            'err' => $err,\n            'step2' => $step2,\n            'SearchData' => $SearchData,\n            'dataNotaris' => $dataNotaris,\n            'listModelKop' => $listModelKop\n        ]);\n    }\n\n    public function UploadKSOP($file, $temp = false)\n    {\n        $path = $temp ? 'uploads/temp/' : 'uploads/pesan-nama/ksop/';\n        return ActionHelper::Upload($path, $file);\n    }\n\n    public function UploadFile($file, $subfolder, $temp = false)\n    {\n        $basePath = $temp ? 'uploads/temp/' : 'uploads/pesan-nama/';\n        $path = $basePath . $subfolder . '/';\n        return ActionHelper::Upload($path, $file);\n    }\n\n    public function actionGetChildJenis($id = null)\n    {\n        if ($id) {\n            $arr = JenisKoperasi::find()->where(['parent_id' => $id])->all();\n            $jml =  JenisKoperasi::find()->where(['parent_id' => $id])->count();\n            $jenis = [];\n            foreach ($arr as $val) {\n                $jenis[] = [\n                    'id' => $val['id'],\n                    'nama' => $val['nama']\n                ];\n            }\n            $res = [\n                'count' => $jml,\n                'data' => $jenis\n            ];\n            return json_encode($res);\n        }\n    }\n\n    public function actionSukses($no_pesan = null)\n    {\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        Yii::$app->view->title = \"Pesan Nama\";\n        if ($no_pesan) {\n            $data = PesanNama::find()\n                ->where(['no_pesan' => $no_pesan])\n                ->andWhere(['ahu_notaris_id' => $user['value']['id_notaris']])\n                ->one();\n            if ($data) {\n                return $this->render('sukses', [\n                    'data' => $data,\n                    'namaKopLengkap' => $data->full_nama,\n                    'jenis_koperasi' => JenisKoperasi::getJenisKop($data->jenis_koperasi_id),\n                    'pola_pengelolaan' => PolaPengelolaan::getPolaKop($data->m_pola_id),\n                    'model_koperasi' => ActionHelper::getDDListModelKoperasi($data->model_koperasi),\n                ]);\n            }\n            throw new NotFoundHttpException;\n        }\n        throw new NotFoundHttpException;\n    }\n\n    public function savePesanNama($model)\n    {\n        $PesanNama = new PesanNama();\n        $PesanNama->attributes = $model->attributes;\n        // $PesanNama->nama_koperasi = $PesanNama->cleanFullNamaKoperasi($model->preview_nama);\n        $PesanNama->full_nama = $model->preview_nama;\n        // $PesanNama->nama_koperasi = $PesanNama->cleanNamaKoperasi($model->nama_koperasi);\n        $PesanNama->nama_koperasi = $model->nama_koperasi;\n        $PesanNama->jenis_koperasi_id = $model->jenis_koperasi;\n        $PesanNama->c_jenis_koperasi_id = $model->subjenis_koperasi;\n        $PesanNama->m_pelabuhan_id = $model->nama_pelabuhan;\n        $PesanNama->m_pola_id = $model->m_pola_id;\n        $PesanNama->model_koperasi = $model->model_koperasi;\n        $PesanNama->file_tkbm = $model->tmp_ksop;\n        $PesanNama->nama_lengkap = $model->nama_lengkap;\n        $PesanNama->no_hp = $model->no_hp;\n        $PesanNama->email = $model->email;\n        $PesanNama->file_surat_kuasa = $model->tmp_surat_kuasa;\n\n        $this->normalizePesanNama($PesanNama);\n        if ($PesanNama->savePesanNama()) {\n            return $PesanNama->no_pesan;\n        }\n        return false;\n    }\n\n    public function normalizePesanNama($pesanNama)\n    {\n        if ($pesanNama->c_jenis_koperasi_id) {\n            $cekJenis = JenisKoperasi::findOne($pesanNama->c_jenis_koperasi_id);\n            if (!$cekJenis) {\n                return false;\n            }\n            if ($cekJenis->parent_id != $pesanNama->jenis_koperasi_id) {\n                $pesanNama->c_jenis_koperasi_id = null;\n            }\n            return true;\n        }\n    }\n\n    public function actionBukti($no_pesan = null)\n    {\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        if ($no_pesan) {\n            $data = PesanNama::find()\n                ->where(['no_pesan' => $no_pesan])\n                ->andWhere(['ahu_notaris_id' => $user['value']['id_notaris']])\n                ->one();\n            $dataJenis = $data->jenis;\n            $dataPola = $data->pola;\n            if ($data && $dataJenis) {\n                $content = $this->renderPartial('_bukti_pdf', [\n                    'nama_koperasi' => $data->full_nama,\n                    'jenis_koperasi' => $dataJenis->nama_koperasi,\n                    'pola_pengelolaan' => $dataPola->nama,\n                    'no_pesan' => $data->no_pesan,\n                    'tgl_pesan' => Helpers::dateIndo($data->created_date),\n                    'tgl_exp' => Helpers::dateIndo($data->end_date),\n                    'nama_notaris' => $data->nama_lengkap,\n                    'telp_notaris' => $data->no_hp,\n                    'email_notaris' => $data->email,\n                    'model_koperasi' => ActionHelper::getDDListModelKoperasi($data->model_koperasi),\n                ]);\n                $file_name = \"bukti_pesan_nama_\" . $data->no_pesan;\n                return Helpers::pdf($content, $file_name);\n            }\n        }\n        throw new NotFoundHttpException;\n    }\n\n    public function actionListPesan()\n    {\n        // $data = PesanNama::find()->one();\n        // var_dump($data->attributes);\n        // exit;\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        Yii::$app->view->title = \"Daftar Pesan Nama\";\n        $data = PesanNama::find()\n            ->where(['ahu_notaris_id' => $id_notaris])\n            ->andWhere(['is_deleted' => '0']);\n        $post = Yii::$app->request->post();\n        if ($post) {\n            $data->andFilterWhere(['no_pesan' => $post['no_pesan']]);\n        }\n        $searchModel = new PesanNamaSearch();\n        $provider = new ActiveDataProvider([\n            'query' => $data,\n            'pagination' => [\n                'pageSize' => 20,\n            ],\n            'sort' => [\n                'attributes' => [\n                    'nama_koperasi',\n                    'created_date',\n                ],\n                'defaultOrder' => [\n                    'created_date' => SORT_DESC,\n                ],\n            ]\n        ]);\n        return $this->render('listPesan', [\n            'model' => $provider,\n            'searchModel' => $searchModel,\n        ]);\n    }\n\n\n    public function actionPerpanjang($id = null)\n    {\n        $request = Yii::$app->request;\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        if ($request->isPost) {\n            $id_notaris = $user['value']['id_notaris'];\n            if ($id) {\n                $data = PesanNama::find()\n                    ->where(['id' => $id])\n                    ->andWhere(['ahu_notaris_id' => $id_notaris])\n                    ->one();\n                if ($data) {\n                    $data->is_perpanjang = 1;\n                    $data->end_date = date(\"Y-m-d\", strtotime($data->end_date . \"+30 days\"));\n                    if ($data->save(false)) {\n                        $res = [\n                            'status' => 200,\n                            'message' => 'Berhasil Perpanjang',\n                        ];\n                        echo json_encode($res);\n                    }\n                }\n                return Yii::$app->response->redirect('/pesan-nama/list-pesan');\n            }\n            throw new NotFoundHttpException;\n        }\n        throw new MethodNotAllowedHttpException(\"Harap Hubungi Kemenkop\");\n    }\n    public function actionDownloadSuratKuasa()\n    {\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        \n        // Cek apakah pesan nama milik notaris yang login\n        $pesanNama = PesanNama::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$pesanNama) {\n            throw new \\yii\\web\\HttpException(404, 'Data pesan nama tidak ditemukan.');\n        }\n\n        // Cek apakah ada file surat kuasa\n        if (empty($pesanNama->file_surat_kuasa)) {\n            throw new \\yii\\web\\HttpException(404, 'Surat Kuasa tidak ditemukan.');\n        }\n\n        $filePath = $pesanNama->file_surat_kuasa;\n        $fullPath = Yii::$app->basePath . '/web/' . $filePath;\n\n        // Cek apakah file exist\n        if (!file_exists($fullPath)) {\n            throw new \\yii\\web\\HttpException(404, 'File Surat Kuasa tidak ditemukan.');\n        }\n\n        // Extract filename dari path\n        $fileName = basename($filePath);\n        \n        return Yii::$app->response->sendFile($fullPath, $fileName, [\n            'mimeType' => 'application/pdf',\n            'inline' => true\n        ]);\n    }\n}\n\n\n--- File: 634 # models/MasterTransaction.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\KoperasiBlokir;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\SK;\n\nclass MasterTransaction extends ActiveRecord\n{\n    public static function tableName()\n    {\n        return '{{%master_transaksi}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getTransaksiKoperasi()\n    {\n        return $this->hasOne(TransaksiKoperasi::className(), ['id' => 'id_transaksi']);\n    }\n\n    public function getListTransaksi()\n    {\n        return $this->hasMany(TransaksiKoperasi::className(), ['id_master' => 'id']);\n    }\n\n    public function getBlokir()\n    {\n        return $this->hasOne(KoperasiBlokir::className(), ['id' => 'id_master']);\n    }\n\n    public function getDataSK()\n    {\n        return $this->hasOne(SK::className(), ['id' => 'id_sk']);\n    }\n\n    public function getSurat()\n    {\n        return $this->hasOne(SK::className(), ['id' => 'id_sk']);\n    }\n\n    public static function getDaftarKoperasi($pid, $kid, $filter)\n    {\n\n        $where = [\n            'status' => 1,\n            'kop_master_transaksi.is_deleted' => 0\n        ];\n\n        if (!empty($pid)) {\n            $where['provinsi_id'] = $pid;\n        }\n\n        if (!empty($kid)) {\n            $where['kab_kota_id'] = $kid;\n        }\n\n        $query = self::find()->joinWith(['transaksiKoperasi'])->joinWith(['dataSK'])->where($where);\n\n        if (!empty($filter)) {\n\n            if (!empty($filter['nama_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $filter['nama_koperasi']]);\n            }\n\n            if (!empty($filter['TransaksiKoperasi']['jenis_koperasi'])) {\n\n                $query->andFilterWhere(['jenis_koperasi' => $filter['TransaksiKoperasi']['jenis_koperasi']]);\n            }\n\n            if (!empty($filter['TransaksiKoperasi']['kab_kota_id'])) {\n\n                $query->andFilterWhere(['like', 'nama_kabupaten', strtoupper($filter['TransaksiKoperasi']['kab_kota_id'])]);\n            }\n\n            if (!empty($filter['nama_notaris'])) {\n\n                $query->andFilterWhere(['like', 'nama_notaris', $filter['nama_notaris']]);\n            }\n\n            if (!empty($filter['nomor_transaksi'])) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $filter['nomor_transaksi']]);\n            }\n\n            if (!empty($filter['no_sk_koperasi'])) {\n\n                $query->andFilterWhere(['kop_sk.no_sk_koperasi' => $filter['no_sk_koperasi']]);\n            }\n\n            if (!empty($filter['status_koperasi'])) {\n                if ($filter['status_koperasi'] == 1) {\n                    $query->andFilterWhere(['is_active' => 1])\n                        ->andFilterWhere(['is_gabung' => 0]);\n                } else if ($filter['status_koperasi'] == 2) {\n                    $query->andFilterWhere(['is_active' => 0])\n                        ->andFilterWhere(['is_gabung' => 0]);\n                } else if ($filter['status_koperasi'] == 3) {\n                    $query->andFilterWhere(['is_gabung' => 1]);\n                }\n            }\n        } else {\n            $query->orderBy(['nama_koperasi' => SORT_ASC]);\n        }\n        $query->orderBy(['nama_koperasi' => SORT_ASC]);\n\n        return $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ],\n        ]);\n    }\n\n    // public static function findExistTransactionWithSK($post)\n    // {\n    //     $return = [\n    //         'status' => false,\n    //         'data' => null,\n    //         'err' => [\n    //             'nik' => null,\n    //             'nama' => null,\n    //             'no_sk' => null,\n    //             'notaris' => null,\n    //         ],\n    //     ];\n\n    //     $flag_err = false;\n\n    //     if (!empty($post)) {\n\n    //         $post['nik'] = ltrim(rtrim($post['nik']));\n    //         $post['no_sk_koperasi'] = ltrim(rtrim($post['no_sk_koperasi']));\n    //         $post['full_nama'] = ltrim(rtrim($post['full_nama']));\n\n    //         $nik = $post['nik'];\n    //         $full_nama = $post['full_nama'];\n    //         $nama_notaris = $post['nama_notaris'];\n    //         $no_sk_koperasi = $post['no_sk_koperasi'];\n\n    //         $data = self::find()\n    //         ->joinWith(['transaksiKoperasi'])\n    //         ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n    //         ->limit(1)\n    //         ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n    //         ->where(['full_nama' => $full_nama, 'no_sk_koperasi' => $no_sk_koperasi])\n    //         ->andWhere(['is_finish' => 1])\n    //         // ->andWhere(['is_active' => 1])\n    //         ->one();\n\n    //         if (empty($data)) {\n\n    //             $data = self::find()\n    //             ->joinWith(['transaksiKoperasi'])\n    //             ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n    //             ->limit(1)\n    //             ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n    //             ->where(['nik' => $post['nik'], 'full_nama' => $post['full_nama']])\n    //             ->andWhere(['is_finish' => 1])\n    //             ->one();\n\n    //             if (empty($data)) {\n    //                 $return['err']['no_sk'] = \"Nomor SK yang anda masukan tidak sesuai\";\n    //                 $flag_err = true;\n    //             }\n    //         }\n\n    //         if (!empty($data)) {\n    //             $transKop = $data->transaksiKoperasi;\n\n    //             if ($transKop->nik != $nik) {\n    //                 $return['err']['nik'] = \"NIK yang anda masukan tidak sesuai\";\n    //                 $flag_err = true;\n    //             }\n\n    //             if ($data->dataSK->no_sk_koperasi != $no_sk_koperasi) {\n    //                 $return['err']['no_sk'] = \"Nomor SK yang anda masukan tidak sesuai\";\n    //                 $flag_err = true;\n    //             }\n\n    //             if ($transKop->is_migrasi != 1) {\n    //                 if (empty($nama_notaris)) {\n    //                     $return['err']['notaris'] = \"Notaris tidak boleh kosong\";\n    //                     $flag_err = true;\n    //                 } else if ($transKop->nama_notaris != $nama_notaris) {\n    //                     $return['err']['notaris'] = \"Notaris yang anda masukan tidak sesuai\";\n    //                     $flag_err = true;\n    //                 }\n    //             }\n\n    //             if (!$flag_err) {\n    //                 $return['status'] = true;\n    //                 $return['data'] = $data;\n    //             }\n    //         }\n    //     }\n\n    //     return $return;\n    // }\n    public static function findExistTransactionWithSK($post)\n    {\n        $return = [\n            'status' => false,\n            'data' => null,\n            'err' => [\n                'nik' => null,\n                'nama' => null,\n                'no_sk' => null,\n                'notaris' => null,\n            ],\n        ];\n\n        $flag_err = false;\n\n        if (!empty($post)) {\n\n            $post['nik'] = ltrim(rtrim($post['nik']));\n            $post['no_sk_koperasi'] = ltrim(rtrim($post['no_sk_koperasi']));\n            $post['full_nama'] = ltrim(rtrim($post['full_nama']));\n\n            $nik = $post['nik'];\n            $full_nama = $post['full_nama'];\n            $nama_notaris = $post['nama_notaris'];\n            $id_notaris = $post['ahu_notaris_id'];\n            unset($post['nama_notaris']);\n            unset($post['ahu_notaris_id']);\n            $no_sk_koperasi = $post['no_sk_koperasi'];\n\n            $data = null;\n            $data1 = self::find()\n                ->joinWith(['transaksiKoperasi'])\n                ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['full_nama' => $full_nama, 'no_sk_koperasi' => $no_sk_koperasi])\n                ->andWhere(['is_finish' => 1])\n                ->one();\n\n            $data2 = self::find()\n                ->joinWith(['transaksiKoperasi'])\n                ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['nik' => $nik, 'full_nama' => $full_nama])\n                ->andWhere(['is_finish' => 1])\n                ->one();\n\n            $data3 = self::find()\n                ->joinWith(['transaksiKoperasi'])\n                ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['nik' => $nik, 'no_sk_koperasi' => $no_sk_koperasi])\n                ->andWhere(['is_finish' => 1])\n                ->one();\n\n            $trans_last_notaris = TransaksiKoperasi::find()\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['nik' => $nik])\n                ->andWhere(['is_finish' => 1])\n                ->andWhere('ahu_notaris_id IS NOT NULL')\n                ->one();\n\n            if (!empty($data1)) {\n                $transKop = $data1->transaksiKoperasi;\n                //check apakah di master benar benar transaksi terakhir\n                $dataLastTrans = TransaksiKoperasi::find()\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where(['nik' => $nik])\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                if (!empty($dataLastTrans) && $dataLastTrans->id != $transKop->id) {\n                    $transKop = $dataLastTrans;\n                    $data1->id_transaksi = $dataLastTrans->id;\n                }\n                if (empty($trans_last_notaris)) {\n                    $trans_last_notaris = $transKop;\n                }\n\n                if ($transKop->nik != $nik) {\n                    $return['err']['nik'] = \"NIK yang anda masukan tidak sesuai\";\n                    $flag_err = true;\n                }\n\n                if ($transKop->is_migrasi != 1) {\n                    if ($id_notaris) {\n                        if ($trans_last_notaris->ahu_notaris_id != $id_notaris) {\n                            $return['err']['notaris'] = \"Nama Notaris yang anda masukan tidak sesuai\";\n                            $flag_err = true;\n                            // return false;\n                        }\n                    }\n                }\n\n                if (!$flag_err) {\n                    $data = $data1;\n                }\n            } else if (!empty($data2)) {\n                $transKop = $data2->transaksiKoperasi;\n                //check apakah di master benar benar transaksi terakhir\n                $dataLastTrans = TransaksiKoperasi::find()\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where(['nik' => $nik])\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                if (!empty($dataLastTrans) && $dataLastTrans->id != $transKop->id) {\n                    $transKop = $dataLastTrans;\n                    $data2->id_transaksi = $dataLastTrans->id;\n                }\n                if (empty($trans_last_notaris)) {\n                    $trans_last_notaris = $transKop;\n                }\n\n                if ($data2->dataSK->no_sk_koperasi != $no_sk_koperasi) {\n                    $return['err']['no_sk'] = \"Nomor SK yang anda masukan tidak sesuai\";\n                    $flag_err = true;\n                }\n\n                if ($transKop->is_migrasi != 1) {\n                    if (empty($nama_notaris)) {\n                        $return['err']['notaris'] = \"Notaris tidak boleh kosong\";\n                        $flag_err = true;\n                    } else if ($trans_last_notaris->nama_notaris != $nama_notaris) {\n                        $return['err']['notaris'] = \"Notaris yang anda masukan tidak sesuai\";\n                        $flag_err = true;\n                    }\n                }\n\n                if (!$flag_err) {\n                    $data = $data2;\n                }\n            } else if (!empty($data3)) {\n                $transKop = $data3->transaksiKoperasi;\n                //check apakah di master benar benar transaksi terakhir\n                $dataLastTrans = TransaksiKoperasi::find()\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where(['nik' => $nik])\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                if (!empty($dataLastTrans) && $dataLastTrans->id != $transKop->id) {\n                    $transKop = $dataLastTrans;\n                    $data3->id_transaksi = $dataLastTrans->id;\n                }\n                if (empty($trans_last_notaris)) {\n                    $trans_last_notaris = $transKop;\n                }\n\n                if ($transKop->full_nama != $full_nama) {\n                    $return['err']['nama'] = \"Nama Koperasi yang anda masukan tidak sesuai\";\n                    $flag_err = true;\n                }\n\n                if ($transKop->is_migrasi != 1) {\n                    if (empty($nama_notaris)) {\n                        $return['err']['notaris'] = \"Notaris tidak boleh kosong\";\n                        $flag_err = true;\n                    } else if ($trans_last_notaris->nama_notaris != $nama_notaris) {\n                        $return['err']['notaris'] = \"Notaris yang anda masukan tidak sesuai\";\n                        $flag_err = true;\n                    }\n                }\n\n                if (!$flag_err) {\n                    $data = $data3;\n                }\n            } else {\n                $return['err']['no_sk'] = \"Data yang anda masukan tidak sesuai\";\n                $flag_err = true;\n            }\n\n            if (!$flag_err && $data) {\n                $return['status'] = true;\n                $return['data'] = $data;\n            }\n        }\n\n        return $return;\n    }\n\n    public static function findExistTransactionWithDoc($post, $state)\n    {\n\n        unset($post['no_sk_koperasi']);\n        unset($post['nama_notaris']);\n\n        $post['nik'] = ltrim(rtrim($post['nik']));\n        $post['full_nama'] = ltrim(rtrim($post['full_nama']));\n\n        $data = self::find()\n            ->joinWith(['transaksiKoperasi'])\n            ->leftJoin('kop_t_pendirian_dokumen pd', 'pd.transaction_id = kop_t_koperasi.id')\n            ->where($post)\n            ->andWhere(['is_finish' => $state])\n            // ->andWhere(['is_active' => 1])\n            ->one();\n\n        if (!empty($data)) {\n\n            if (!empty($data['dokumenKoperasi'])) {\n\n                return $data;\n            } else {\n\n                return -2;\n            }\n        } else {\n\n            return -1;\n        }\n    }\n\n    // TODO : validate only last transaction, validate notaris non npak must match notaris id\n    public static function findExistTransactionForPerbaikan(\n        $no_sk_koperasi,\n        $tanggal_sk_koperasi,\n        $full_nama_koperasi,\n        $id_notaris\n    ) {\n        $result = [\n            'status' => false,\n            'data' => null,\n            'err' => [\n                'nama' => null,\n                'no_sk' => null,\n                'notaris' => null,\n                'is_perbaikan' => null,\n            ],\n        ];\n\n        $data = null;\n        $masterTransaksi = self::find()\n            ->joinWith(['transaksiKoperasi'])\n            ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n            ->limit(1)\n            ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n            ->where(['full_nama' => $full_nama_koperasi])\n            ->andWhere(['ahu_notaris_id' => $id_notaris])\n            ->andWhere(['is_finish' => 1])\n            ->one();\n\n        // echo '<pre>';\n        // print_r($masterTransaksi->transaksiKoperasi->attributes);\n        // echo '</pre>';\n        // exit;\n\n        if (empty($masterTransaksi)) {\n            $result['err']['nama'] = \"Data Koperasi tidak ditemukan\";\n            return $result;\n        }\n\n        $transaksiKoperasi = $masterTransaksi['transaksiKoperasi'] ?? null;\n\n        if ($transaksiKoperasi === null) {\n            $result['err']['nama'] = \"Transaksi Koperasi tidak ditemukan\";\n            return $result;\n        }\n\n        if (!empty($transaksiKoperasi->is_perbaikan)) {\n            $result['err']['nama'] = \"Data Koperasi sedang dalam perbaikan\";\n            return $result;\n        }\n\n        // tanggal dataSk created date between 00.00.0000 and 23.59.59\n        $tanggalSk = date('Y-m-d', strtotime($tanggal_sk_koperasi));\n        $startDate = $tanggalSk . ' 00:00:00';\n        $endDate = $tanggalSk . ' 23:59:59';\n\n        // var_dump($startDate, $endDate);\n        // exit;\n\n        $transaksiKoperasi = TransaksiKoperasi::find()\n            ->joinWith(['dataSK'])\n            ->where(['no_sk_koperasi' => $no_sk_koperasi])\n            ->andWhere(['between', 'kop_sk.created_date', $startDate, $endDate])\n            ->andWhere(['id_master' => $masterTransaksi->id])\n            ->andWhere(['is_finish' => 1])\n            ->one();\n\n        if (empty($transaksiKoperasi)) {\n            $result['err']['no_sk'] = \"Nomor SK Koperasi atau Tanggal SK Koperasi tidak sesuai\";\n            return $result;\n        }\n\n        $data = $transaksiKoperasi;\n        $result['status'] = true;\n        $result['data'] = $data;\n        return $result;\n    }\n}\n\n\n--- File: 635 # models/PesanNama.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse docotel\\dcms\\components\\Helper;\nuse yii\\helpers\\ArrayHelper;\nuse app\\components\\KoperasiHelper;\nuse yii\\helpers\\FileHelper;\n\n/**\n * This is the model class for table \"{{%pesan_nama}}\".\n *\n * @property int $id\n * @property string $no_pesan\n * @property string $nama_koperasi\n * @property int $jenis_koperasi_id\n * @property int $c_jenis_koperasi_id\n * @property int $m_pelabuhan_id\n * @property int $ahu_notaris_id\n * @property string $end_date\n * @property int $is_perpanjang 0:Tidak\n * @property int $status 0:Belum Pendirian, 1:Sudah Pendirian\n * @property string $is_deleted 0:Tidak, 1: Ya\n * @property string $created_by\n * @property string $created_date\n * @property string $updated_by\n * @property string $updated_date\n * @property string $deleted_by\n * @property string $deleted_date\n * @property string $file_surat_kuasa\n */\nclass PesanNama extends \\yii\\db\\ActiveRecord\n{\n    public static $modelKoperasi = [\n        0 => 'tidak multi pihak',\n        1 => 'multi pihak'\n    ];\n\n    public $ksop;\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%pesan_nama}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['no_pesan', 'nama_koperasi', 'jenis_koperasi_id', 'ahu_notaris_id', 'end_date', 'created_by'], 'required'],\n            [['jenis_koperasi_id', 'c_jenis_koperasi_id', 'm_pelabuhan_id', 'ahu_notaris_id', 'is_perpanjang', 'status'], 'integer'],\n            [['end_date', 'created_date', 'updated_date', 'deleted_date', 'score', 'file_surat_kuasa'], 'safe'],\n            [['is_deleted'], 'string'],\n            [['no_pesan', 'nama_koperasi'], 'string', 'max' => 100],\n            [['created_by', 'updated_by', 'deleted_by'], 'string', 'max' => 36],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'no_pesan' => 'No Pesan',\n            'nama_koperasi' => 'Nama Koperasi',\n            'jenis_koperasi_id' => 'Jenis Koperasi ID',\n            'c_jenis_koperasi_id' => 'C Jenis Koperasi ID',\n            'm_pelabuhan_id' => 'M Pelabuhan ID',\n            'ahu_notaris_id' => 'Ahu Notaris ID',\n            'end_date' => 'End Date',\n            'is_perpanjang' => 'Is Perpanjang',\n            'status' => 'Status',\n            'is_deleted' => 'Is Deleted',\n            'created_by' => 'Created By',\n            'created_date' => 'Created Date',\n            'updated_by' => 'Updated By',\n            'updated_date' => 'Updated Date',\n            'deleted_by' => 'Deleted By',\n            'deleted_date' => 'Deleted Date',\n            'file_surat_kuasa' => 'File Surat Kuasa',\n        ];\n    }\n\n    public static function checkNama($nama)\n    {\n\n        $data = self::find()\n            ->where(['nama_koperasi' => $nama])\n            ->andWhere(['is_deleted' => '0'])\n            ->orderBy('created_date DESC')\n            ->one();\n\n        $now = Date(\"Y-m-d H:i:s\");\n\n        if ($data) {\n\n            // Jika ada pesan nama di antrian\n            if ($data->status == 0) {\n\n                // Jika Belum Pendirian Tetapi Sudah Expired\n                if ($data->end_date < $now) {\n\n                    //Dito, 31-03-2020, Penambahan untuk pengecekan transaksi di bawah yang expired\n                    $expired = self::find()\n                        ->where(['nama_koperasi' => $nama])\n                        ->andWhere(['is_deleted' => '0'])\n                        ->andWhere(['status' => '1'])\n                        ->orderBy('created_date DESC')\n                        ->one();\n\n                    //Jika ada yang statusnya 1 dibawah yang sudah expired, maka tidak bisa dipesan namanya\n                    if ($expired) {\n\n                        return [\n                            'status' => true,\n                            'jenis_err' => 'NamaSudahAda',\n                            'nama_koperasi' => $nama,\n                        ];\n                    }\n\n                    return false;\n                }\n\n                return [\n                    'status' => true,\n                    'jenis_err' => 'NamaSudahAda',\n                    'nama_koperasi' => $nama,\n                ];\n            }\n\n            $dataTrans = ArrayHelper::getColumn(TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $data->id])->all(), 'id');\n\n            // Jika Tidak Ada Data Transaksi Yang Menggunakan Pesan Nama Tersebut\n            if (!$dataTrans) {\n                return false;\n            }\n\n            if (sizeof($dataTrans) == 1) {\n                $cekData = TransaksiKoperasi::find()->where(['id' => $dataTrans[0]])->one();\n                // Perbaikan validasi jika masih dalam tahap pendirian dan belum expired\n                if ($cekData->is_finish == 0) {\n                    return [\n                        'status' => true,\n                        'jenis_err' => 'NamaSudahAda',\n                        'nama_koperasi' => $nama\n                    ];\n                }\n            }\n\n            $dataMaster = MasterTransaction::find()->where(['id_transaksi' => $dataTrans])->one();\n\n            // Jika Tidak Ada Data Master Koperasi Yang Menggunakan Pesan Nama Tersebut\n            if (!$dataMaster) {\n                return false;\n            }\n\n            // Jika Data Master Koperasi Yang Ditemukan Sudah Melakukan Penggabungan\n            if ($dataMaster->is_gabung == 1) {\n                return false;\n            }\n\n            if ($dataMaster->is_active == 0) {\n                return false;\n            }\n\n            return [\n                'status' => true,\n                'jenis_err' => 'NamaSudahAda',\n                'nama_koperasi' => $nama,\n            ];\n        }\n        return false;\n    }\n\n    // Fungsi untuk cek Nama ada atau tidak di tabel transaksi\n    // Dito, 31-03-2020\n    // Parameter $nama untuk cek ke transaksi koperasi\n    public static function CekAvailablePesanNama($nama)\n    {\n\n        if ($nama) {\n            // Cek apakah punya nama yang sama di table transaksi\n            $cek = TransaksiKoperasi::find()->where(['nama_koperasi' => $nama, 'is_finish' => 1])->one();\n            if ($cek) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'NamaSudahAda',\n                    'nama_koperasi' => $nama,\n                ];\n            }\n        }\n        return false;\n    }\n\n    public function getPelabuhan()\n    {\n        return $this->hasOne(Pelabuhan::className(), ['id' => 'm_pelabuhan_id']);\n    }\n\n    public function getJenis()\n    {\n        $jenis = $this->c_jenis_koperasi_id ? 'c_jenis_koperasi_id' : 'jenis_koperasi_id';\n        return $this->hasOne(JenisKoperasi::className(), ['id' => $jenis]);\n    }\n\n    public function getPola()\n    {\n        return $this->hasOne(PolaPengelolaan::className(), ['id' => 'm_pola_id']);\n    }\n\n    public function getFullNamaKop()\n    {\n        $getJenisFrom = 'jenis_koperasi_id';\n        $subJenis = $this->c_jenis_koperasi_id;\n        if ($subJenis) {\n            $getJenisFrom = 'c_jenis_koperasi_id';\n        }\n        $jenis = strtoupper(JenisKoperasi::GetPrefixNamaKop($this->$getJenisFrom));\n        $pola = strtoupper(PolaPengelolaan::GetPrefixNamaKop($this->m_pola_id));\n        $pre = '';\n        // if($pola) {\n        //     $str = $jenis.' DAN '.$pola . \" \" . $this->nama_koperasi;\n        // }\n        // else {\n        //     $str = $jenis.' '.$this->nama_koperasi;\n        // }\n\n        $model = $this->model_koperasi == 1 ? \"MULTI PIHAK \" : \"\";\n        // Tiket #601011 - Hanya koperasi dengan jenis simpan pinjam dengan pola pengelolaan syariah yang menggunakan \"DAN PEMBIAYAAN SYARIAH\"\n        if ($this->$getJenisFrom == '6' && $pola) {\n            $pre = $jenis . ' DAN ' . $pola;\n            // $str = $pre . \" \" . $model . $this->nama_koperasi;\n        } else {\n            if ($this->m_pola_id == '2') {\n                $pre = $jenis . ' SYARIAH';\n                // $str = $pre .' '. $model . $this->nama_koperasi;\n            } else {\n                $pre = $jenis;\n                // $str = $pre .' '. $model . $this->nama_koperasi;\n            }\n        }\n\n        $str = $this->cleanNamaJenisKoperasi($this->nama_koperasi);\n        $str = $pre . ' ' . $model . $str;\n\n        // $str = $this->cleanFullNamaKoperasi($str);\n        return strtoupper($str);\n    }\n\n    public static function checkPesanNama($nama, $jenis, $pelabuhan)\n    {\n        // Jika Terdapat di black list\n        if (self::checkWhitelist($nama, $jenis)) {\n            return false;\n        }\n\n        // Min 3 Kata\n        if (!JenisKoperasi::isMerahPutih($jenis) && self::cek3Kata($nama)) {\n            return [\n                'status' => true,\n                'jenis_err' => 'Min3Kata',\n            ];\n        }\n\n        if ($kata = self::cekNamaLarang($nama, $jenis)) {\n            return [\n                'status' => true,\n                'jenis_err' => 'BanName',\n                'nama_koperasi' => $nama,\n                'ban' => $kata['ban'],\n            ];\n        }\n\n        if ($kata = self::checkKalimatLarang($nama, $jenis)) {\n            if ($kata['tipe'] == 'ban') {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'BanFullName',\n                    'nama_koperasi' => $nama,\n                    'ban' => $kata['ban'],\n                ];\n            } else if ($kata['tipe'] == 'ban_kalimat') {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'BanKombinasi',\n                    'nama_koperasi' => $nama,\n                    'ban' => $kata['ban'],\n                ];\n            }\n        }\n\n        // Nama Sudah Tersedia\n        if ($err = self::checkNama($nama)) {\n            return $err;\n        }\n\n        //Jika Ada Pelabuhan\n        if ($pelabuhan) {\n            // Ketersediaan pelabuhan\n            if ($kata = self::checkAvailablePelabuhan($pelabuhan)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'PelabuhanSudahAda',\n                    'pelabuhan' => $kata['pelabuhan']\n                ];\n            }\n        }\n\n        // Dito, 31-03-2020, Penambahan pengecekan ke transaksi\n        if ($err = self::CekAvailablePesanNama($nama)) {\n            return $err;\n        }\n\n        return false;\n    }\n\n    public static function checkWhitelist($nama, $jenis)\n    {\n        $data = MMatch::find()->where(['name' => $nama])->andWhere(['base' => $jenis])->one();\n\n        if (!$data) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function checkKalimatLarang($nama, $jenis)\n    {\n\n        // Cek Kalimat Ban\n        $dataBan = MasterBanKalimat::find()\n            ->where(['blokir' => $nama])\n            ->andWhere(['m_jenis_koperasi_id' => $jenis])\n            ->andWhere(['is_deleted' => null])\n            ->one();\n\n        if ($dataBan) {\n            $ban = $dataBan->blokir;\n            return [\n                'status' => true,\n                'tipe' => 'ban',\n                'ban' => $ban,\n            ];\n        }\n\n        // Jika tidak Ada Cek Nama Kombinasi\n        $dataKomb = Kombinasi::find()->where(['kombinasi' => $nama])->one();\n\n        if ($dataKomb) {\n            $ban = $dataKomb->origin;\n            $dataBan = MasterBanKalimat::find()\n                ->where(['blokir' => $ban])\n                ->andWhere(['m_jenis_koperasi_id' => $jenis])\n                ->andWhere(['is_deleted' => null])\n                ->one();\n\n            if ($dataBan) {\n                return [\n                    'status' => true,\n                    'tipe' => 'ban_kalimat',\n                    'ban' => $ban,\n                ];\n            }\n        }\n\n        return false;\n    }\n\n    public static function cekNamaLarang($nama, $jenis)\n    {\n        $BanName = MasterBan::getArrayListBan($jenis);\n\n        foreach ($BanName as $ban) {\n            if (strpos($nama, strtoupper($ban)) !== false) {\n                return ['status' => true, 'ban' => $ban];\n            }\n        }\n    }\n\n    public static function cek3Kata($nama)\n    {\n        return sizeof(explode(' ', $nama)) < 3;\n    }\n\n    public  static function checkAvailablePelabuhan($id)\n    {\n        $data = self::find()\n            ->where(['m_pelabuhan_id' => $id])\n            ->andFilterWhere(['not', ['m_pelabuhan_id' => null]])\n            ->andWhere(['is_deleted' => '0'])\n            ->one();\n        if ($data) {\n            $pelabuhan = $data->pelabuhan;\n            return ['status' => true, 'pelabuhan' => $pelabuhan->nama];\n        }\n    }\n\n    public static function getMatchSearch($str = null)\n    {\n        $data = null;\n        $arrstr = preg_split('/\\s/', $str, -1, PREG_SPLIT_NO_EMPTY);\n        if ($str) {\n            $tmp = KoperasiHelper::generateData($str);\n            $tmp = KoperasiHelper::FilterZero($tmp, 'score');\n            $data = KoperasiHelper::searchLevenshtein($str, $tmp);\n        }\n        return $data;\n    }\n\n    public function savePesanNama()\n    {\n        try {\n            $this->no_pesan = KoperasiHelper::randomCodeByTime();\n            if ($this->file_tkbm) {\n                $pecah_path = explode('/', $this->file_tkbm);\n                $new_path_ksop = 'uploads/pesan-nama/ksop/' . $this->no_pesan . \"_\" . $pecah_path[count($pecah_path) - 1];\n                FileHelper::createDirectory(dirname($new_path_ksop)); // Ensure directory exists\n                rename($this->file_tkbm, $new_path_ksop);\n                $this->file_tkbm = $new_path_ksop;\n            }\n            if ($this->file_surat_kuasa) {\n                $pecah_path_sk = explode('/', $this->file_surat_kuasa);\n                $new_path_sk = 'uploads/pesan-nama/surat-kuasa/' . $this->no_pesan . \"_\" . $pecah_path_sk[count($pecah_path_sk) - 1];\n                FileHelper::createDirectory(dirname($new_path_sk)); // Ensure directory exists\n                rename($this->file_surat_kuasa, $new_path_sk);\n                $this->file_surat_kuasa = $new_path_sk;\n            }\n            $hariExp = Setting::getValue('tgl_expired', 30);\n            $this->end_date = date(\"Y-m-d\", strtotime(\"+{$hariExp} days\"));\n            $this->is_perpanjang = 0;\n            $this->status = 0;\n            $this->is_deleted = '0';\n            $this->created_by = Yii::$app->user->identity->id;\n            $this->created_date = date(\"Y-m-d H:i:s\");\n            // var_dump($this,$this->validate(),$this->getErrors());exit;\n            if ($this->save(false)) {\n                return true;\n            }\n        } catch (Exception $e) {\n            return false;\n        }\n        return false;\n    }\n\n    public static function getPrimaryByNoPesan($no)\n    {\n        $data = self::find()\n            ->where(['no_pesan' => $no])\n            ->one();\n\n        if (!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function getByNoPesan($no, $id_notaris)\n    {\n        return self::find()\n            ->where(['no_pesan' => $no])\n            // ->andWhere(['ahu_notaris_id' => $id_notaris])\n            ->andWhere(['is_deleted' => '0'])\n            ->andWhere(['status' => 0])\n            ->one();\n    }\n\n    public static function UpdateStatusKop($id, $status)\n    {\n        $data = self::find()\n            ->where(['id' => $id])\n            ->one();\n        $data->status = $status;\n        if ($data->save(false)) {\n            return true;\n        }\n        return false;\n    }\n\n    public function getDescJenisKoperasi()\n    {\n        $jenis_id = $this->c_jenis_koperasi_id ? $this->c_jenis_koperasi_id : $this->jenis_koperasi_id;\n\n        if ($this->c_jenis_koperasi_id) {\n            $cekChildJenis = JenisKoperasi::find()->where(['id' => $this->c_jenis_koperasi_id])->one();\n            if ($cekChildJenis) {\n                if (!($cekChildJenis->parent_id == $this->jenis_koperasi_id)) {\n                    $jenis_id = $this->jenis_koperasi_id;\n                }\n            }\n        }\n\n        return JenisKoperasi::getJenisKop($jenis_id);\n    }\n\n    public function cleanNamaKoperasi($nama)\n    {\n        if ($nama && is_string($nama)) {\n            $jn = new JenisKoperasi;\n            $jn_list = $jn->getDDListJenisKop();\n            if ($jn_list) {\n                $nama = strtoupper($nama);\n                //$nama = trim(str_replace(\"KOPERASI\", \"\", $nama));\n                $nama = preg_replace('/^KOPERASI /', '', $nama);\n\n                $jn_list = array_map('strtoupper', $jn_list);\n                $pattern = '/^(' . implode('|', $jn_list) . ') /';\n                $nama = preg_replace($pattern, '', $nama);\n\n                // foreach($jn_list as $jnd) {\n                //     $jnd = strtoupper($jnd);\n                //     if(strpos($nama, $jnd) !== false && $jnd != 'Produsen') {\n                //         $nama = trim(str_replace($jnd, \"\", $nama));\n                //     }\n                // }\n            }\n        }\n        return $nama;\n    }\n\n    public function cleanFullNamaKoperasi($nama)\n    {\n        if ($nama && is_string($nama)) {\n            $nama = trim(strtoupper($nama));\n            $explode = explode(\" \", $nama);\n            if ($explode && is_array($explode)) {\n                $a_kop = 'KOPERASI';\n                $f_name = [];\n                foreach ($explode as $k => $e) {\n                    if ($k == 1 && $e == $a_kop) {\n                        continue;\n                    }\n                    $f_name[] = $e;\n                }\n                $jn = new JenisKoperasi;\n                $jn_list = $jn->getDDListJenisKop();\n                if ($jn_list) {\n                    foreach ($jn_list as $jnd) {\n                        $jnd = strtoupper($jnd);\n                        $c_j = 0;\n                        foreach ($f_name as $k => $e) {\n                            if ($jnd == $e) {\n                                $c_j++;\n                            }\n                            if ($c_j == 2) {\n                                unset($f_name[$k]);\n                                $c_j = 0;\n                            }\n                        }\n                    }\n                }\n                if ($f_name)\n                    $nama = implode($f_name, \" \");\n            }\n        }\n        return $nama;\n    }\n\n    public function cleanNamaJenisKoperasi($nama)\n    {\n        if ($nama && is_string($nama)) {\n            $nama = trim(strtoupper($nama));\n            $jn = new JenisKoperasi;\n            $jn_list = $jn->getDDListJenisKop('all', 'nama_koperasi');\n\n            if ($jn_list) {\n                foreach ($jn_list as $jnd) {\n                    // Regex buat hapus prefix \"$pre\"\n                    $pattern = '/^' . strtoupper($jnd) . '\\b/';\n\n                    $nama = preg_replace($pattern, '', $nama);\n                    $nama = trim(preg_replace('/\\s+/', ' ', $nama));\n                }\n            }\n        }\n\n        return $nama;\n    }\n\n    public static function checkIsValidModelKoperasi($modelKoperasi)\n    {\n        if (in_array(strtolower($modelKoperasi), self::$modelKoperasi)) {\n            return true;\n        }\n        return false;\n    }\n\n    public static function checkIsKoperasiMultiPihak($modelKoperasi)\n    {\n        if (strtolower($modelKoperasi) == strtolower(self::$modelKoperasi[1])) {\n            return true;\n        }\n        return false;\n    }\n}\n\n\n--- File: 636 # models/TransaksiKoperasi.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse app\\models\\MKbli;\nuse app\\models\\PesanNama;\nuse app\\models\\Disclaimer;\nuse app\\models\\DataAnggota;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\AktifitasUsaha;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\JenisTransaksi;\nuse app\\models\\WilayahNotariat;\nuse yii\\data\\ArrayDataProvider;\nuse app\\models\\KoperasiSekunder;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\bakum\\WilayahSABH;\nuse app\\models\\TPendirianDokumen;\n\n/**\n * This is the model class for table \"{{%t_koperasi}}\".\n *\n * @property int $id\n * @property int $jenis_transaksi_id\n * @property int $m_tingkat_wilayah_id\n * @property int $b_koperasi_id\n * @property int $provinsi_id\n * @property int $kab_kota_id\n * @property int $kecamatan_id\n * @property int $kel_desa_id\n * @property string $alamat_koperasi\n * @property string $rt\n * @property string $rw\n * @property string $kode_pos\n * @property string $email\n * @property string $telepon\n * @property int $ahu_notaris_id\n * @property string $akta_koperasi\n * @property string $tanggal_akta\n * @property string $taggal_rapat\n * @property string $alamat_rapat\n * @property string $jumlah_rapat\n * @property int $modal_usaha\n * @property int $simpanan_pokok_anggota\n * @property int $simpanan_wajib_anggota\n * @property int $modal_lain\n * @property string $jumlah_anggota\n * @property string $usaha_utama\n * @property string $usaha_pendukung\n * @property string $usaha_tambahan\n * @property int $is_minuta\n * @property int $is_beria_acara\n * @property int $is_surat_bukti\n * @property int $is_rencana_kerja\n * @property string $file_akta\n * @property string $file_berita_acara\n * @property int $is_redaksi_persetujuan\n * @property int $is_confirm 0:Tidak, 1: Ya\n * @property string $tanggal_confirm\n * @property string $tanggal_akhir\n * @property string $is_deleted 0:Tidak,1:Ya\n * @property string $created_by\n * @property string $created_date\n * @property string $updated_by\n * @property string $updated_date\n * @property string $deleted_by\n * @property string $deleted_date\n * @property int $id_notaris_pengganti\n * @property string $no_sk_notaris_pengganti\n * @property int $is_perbaikan 0:Tidak, 1: Ya\n */\nclass TransaksiKoperasi extends \\yii\\db\\ActiveRecord\n{\n    const DISC_PERSETUJUAN_PENDIRIAN = \"persetujuan_pendirian\";\n    const DISC_PERSETUJUAN_PERUBAHAN = \"persetujuan_perubahan\";\n    const BEFORE_LATEST = 1;\n    const LATEST = 0;\n    const JANGKA_WAKTU_TERBATAS =  \"Terbatas\";\n    const JANGKA_WAKTU_TIDAK_TERBATAS =  \"Tidak Terbatas\";\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%t_koperasi}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getJenisTransaksi()\n    {\n        return $this->hasOne( JenisTransaksi::className(), ['id' => 'jenis_transaksi_id'] );\n    }\n\n    public function getJeniskoperasi()\n    {\n        return $this->hasOne( JenisKoperasi::className(), ['id' => 'id'] );\n    }\n\n    public function getPesanNama()\n    {\n        return $this->hasOne( PesanNama::className(), ['id' => 't_pesan_nama_id'] );\n    }\n\n    public function getBakumsekunder()\n    {\n        return $this->hasMany(KoperasiSekunder::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getAktifitasusaha()\n    {\n        return $this->hasMany(AktifitasUsaha::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getDataanggota()\n    {\n        return $this->hasMany(DataAnggota::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getDokumenKoperasi()\n    {\n        return $this->hasMany(TPendirianDokumen::className(),['transaction_id' => 'id']);\n    }\n\n    public function getDataPerubahan() {\n        return $this->hasMany(ChecklistPerubahan::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getDataMaster() {\n        return $this->hasOne(MasterTransaction::className(),['id' => 'id_master']);\n    }\n\n    public function getDataSK() {\n        return $this->hasOne(SK::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getTingkatWilayah() {\n        return $this->hasOne(TingkatWilayah::className(),['id' => 'm_tingkat_wilayah_id']);\n    }\n\n    public function getBentukKoperasi() {\n        return $this->hasOne(BentukKoperasi::className(),['id' => 'b_koperasi_id']);\n    }\n\n    public function getPemilikManfaat() {\n        return $this->hasMany(PemilikManfaat::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getBakumGabung() {\n        return $this->hasMany(BHPenggabungan::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getBakumPisah() {\n        return $this->hasMany(BHPembagian::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getTransaksiPerbaikan() {\n        return $this->hasOne(TransaksiPerbaikan::class,['t_koperasi_id' => 'id']);\n    }\n\n    /**\n     * Defines relation to WilayahSabh model using kel_desa_id.\n     * Assumes kel_desa_id in t_koperasi corresponds to ID_WIL in WILAYAH_SABH.\n     * @return \\yii\\db\\ActiveQuery\n     */\n    public function getWilayahSabh()\n    {\n        return $this->hasOne(WilayahSabh::className(), ['ID_WIL' => 'kel_desa_id']);\n    }\n\n    /**\n     * Retrieves the KD_WIL (Kode Wilayah) from WILAYAH_SABH related to this transaction.\n     * This KD_WIL can then be used as the base for NIK generation.\n     *\n     * @return string|null The KD_WIL value, or null if the relation is not found.\n     */\n    public function getKdWilForNikBase()\n    {\n        if ($this->wilayahSabh) {\n            return $this->wilayahSabh->KD_WIL;\n        }\n        return null;\n    }\n\n    /**\n     * Generates a new NIK for this TransaksiKoperasi instance and assigns it.\n     * Ensures the generated NIK is unique within the 'nik' column of the t_koperasi table.\n     * Retries NIK generation up to a maximum number of attempts if a duplicate is found.\n     *\n     * 1. Retrieves the KD_WIL from the associated WilayahSabh data.\n     * 2. In a loop, uses the KD_WIL as a base to generate a unique sequential NIK via BaseNik::generateNik().\n     * 3. Validates the generated NIK for uniqueness within TransaksiKoperasi.nik.\n     * 4. Assigns the generated NIK to the 'nik' attribute of this TransaksiKoperasi model.\n     * 5. Saves the TransaksiKoperasi model, ensuring the update only happens if NIK is currently NULL or empty.\n     *\n     * @param int $maxAttempts The maximum number of times to retry NIK generation if duplicates are found.\n     * @return bool True if NIK was successfully generated and assigned, false otherwise.\n     */\n    public function generateAndAssignNik($maxAttempts = 999)\n    {\n        // If NIK already exists and this is not a new record, no need to generate\n        if (!$this->isNewRecord && (!empty($this->nik))) {\n            Yii::info(\"NIK already exists for TransaksiKoperasi ID: {$this->id}. Skipping generation.\", __METHOD__);\n            return true;\n        }\n\n        // 1. Get KD_WIL from TransaksiKoperasi via WilayahSabh relation\n        $kdWil = $this->getKdWilForNikBase();\n\n        if (empty($kdWil)) {\n            Yii::error(\"Could not retrieve KD_WIL for TransaksiKoperasi ID: {$this->id}. Cannot generate NIK.\", __METHOD__);\n            $this->addError('nik', 'Tidak dapat mengambil data wilayah untuk NIK.'); // Add a model error\n            return false;\n        }\n\n        $generatedNik = null;\n        $attempt = 0;\n        $isUnique = false;\n\n        // Loop to generate NIK until a unique one is found or max attempts are reached\n        while ($attempt < $maxAttempts && !$isUnique) {\n            $attempt++;\n            Yii::info(\"Attempt {$attempt}/{$maxAttempts} to generate unique NIK for KD_WIL: {$kdWil}.\", __METHOD__);\n\n            // 2. Use the KD_WIL to generate NIK from BaseNik\n            $newNik = BaseNik::generateNik($kdWil);\n\n            if ($newNik === false) {\n                Yii::error(\"Failed to generate new NIK using BaseNik for KD_WIL: {$kdWil} on attempt {$attempt}. Check BaseNik logs.\", __METHOD__);\n                // It's possible BaseNik::generateNik had an internal error; stop trying\n                $this->addError('nik', 'Gagal menghasilkan NIK baru dari generator.');\n                return false;\n            }\n\n            // Validate uniqueness in TransaksiKoperasi table\n            // Ensure we don't compare against the current model's own NIK if it exists and is being re-assigned (unlikely for NIK generation)\n            $existingTransaksi = self::find()->where(['nik' => $newNik])->one();\n\n            if ($existingTransaksi === null) {\n                $generatedNik = $newNik;\n                $isUnique = true;\n                Yii::info(\"Unique NIK '{$generatedNik}' found on attempt {$attempt}.\", __METHOD__);\n            } else {\n                Yii::warning(\"Generated NIK '{$newNik}' already exists in TransaksiKoperasi. Retrying...\", __METHOD__);\n            }\n        }\n\n        if (!$isUnique) {\n            Yii::error(\"Failed to generate a unique NIK for TransaksiKoperasi ID: {$this->id} after {$maxAttempts} attempts. Last generated NIK was '{$newNik}' (duplicate).\", __METHOD__);\n            $this->addError('nik', 'Tidak dapat menghasilkan NIK unik setelah beberapa percobaan.');\n            return false;\n        }\n\n        // 3. Assign the generated unique NIK to TransaksiKoperasi.nik\n        $this->nik = $generatedNik;\n\n        // 4. Save the TransaksiKoperasi model\n        // We only save if the NIK field was genuinely empty or null before this process.\n        // getOldAttribute('nik') checks the original value before any changes in the current model instance.\n        if (empty($this->getOldAttribute('nik')) || $this->getOldAttribute('nik') === null) {\n            if ($this->save(false, ['nik'])) { // Save only the 'nik' attribute, skipping validation for other attributes\n                Yii::info(\"NIK '{$this->nik}' successfully assigned to TransaksiKoperasi ID: {$this->id}.\", __METHOD__);\n                return true;\n            } else {\n                Yii::error(\"Failed to save NIK '{$this->nik}' to TransaksiKoperasi ID: {$this->id}. Errors: \" . json_encode($this->getErrors()), __METHOD__);\n                $this->addError('nik', 'Gagal menyimpan NIK ke transaksi koperasi.');\n                return false;\n            }\n        } else {\n            Yii::warning(\"TransaksiKoperasi ID: {$this->id} already had an NIK: {$this->getOldAttribute('nik')} but generation was attempted. Skipping assignment.\", __METHOD__);\n            return true;\n        }\n    }\n\n    public function isMerahPutih() {\n        return strpos(strtoupper($this->jenis_koperasi), JenisKoperasi::NAME_MERAH_PUTIH) !== false;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['jenis_transaksi_id', 'm_tingkat_wilayah_id', 'b_koperasi_id', 'm_pola_id', 'provinsi_id', 'kab_kota_id', 'kecamatan_id', 'kel_desa_id', 'alamat_koperasi', 'ahu_notaris_id', 'akta_koperasi', 'tanggal_akta', 'taggal_rapat', 'alamat_rapat', 'jumlah_rapat', 'modal_usaha', 'simpanan_pokok_anggota', 'simpanan_wajib_anggota', 'usaha_utama', 'file_akta', 'file_berita_acara', 'tanggal_akhir', 'created_by'], 'required'],\n            [['jenis_transaksi_id', 'm_tingkat_wilayah_id', 'b_koperasi_id', 'm_pola_id', 'provinsi_id', 'kab_kota_id', 'kecamatan_id', 'kel_desa_id', 'ahu_notaris_id', 'modal_usaha', 'simpanan_pokok_anggota', 'simpanan_wajib_anggota', 'modal_lain', 'is_minuta', 'is_beria_acara', 'is_surat_bukti', 'is_rencana_kerja', 'is_redaksi_persetujuan', 'is_confirm'], 'integer'],\n            [['created_date','deleted_date','t_pesan_nama_id', 'nomor_transaksi', 'nama_koperasi', 'nama_notaris', 'jenis_koperasi','id_master','t_pesan_nama_id','full_nama','tanggal_jangka_waktu','nik'], 'safe'],\n            [['usaha_utama', 'usaha_pendukung', 'usaha_tambahan', 'is_deleted'], 'string'],\n            [['alamat_koperasi', 'alamat_rapat', 'jumlah_rapat', 'jumlah_anggota'], 'string', 'max' => 250],\n            [['rt', 'rw'], 'string', 'max' => 3],\n            [['kode_pos'], 'string', 'max' => 10],\n            [['email'], 'string', 'max' => 100],\n            [['telepon', 'akta_koperasi'], 'string', 'max' => 50],\n            [['file_akta', 'file_berita_acara'], 'string', 'max' => 255],\n            [['created_by', 'updated_by', 'deleted_by'], 'string', 'max' => 36],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'jenis_transaksi_id' => 'Jenis Transaksi ID',\n            't_pesan_nama_id' => 'Pesan Nama ID',\n            'm_tingkat_wilayah_id' => 'M Tingkat Wilayah ID',\n            'b_koperasi_id' => 'B Koperasi ID',\n            'provinsi_id' => 'Provinsi ID',\n            'kab_kota_id' => 'Kab Kota ID',\n            'kecamatan_id' => 'Kecamatan ID',\n            'kel_desa_id' => 'Kel Desa ID',\n            'alamat_koperasi' => 'Alamat Koperasi',\n            'rt' => 'Rt',\n            'rw' => 'Rw',\n            'kode_pos' => 'Kode Pos',\n            'email' => 'Email',\n            'telepon' => 'Telepon',\n            'ahu_notaris_id' => 'Ahu Notaris ID',\n            'akta_koperasi' => 'Akta Koperasi',\n            'tanggal_akta' => 'Tanggal Akta',\n            'taggal_rapat' => 'Taggal Rapat',\n            'alamat_rapat' => 'Alamat Rapat',\n            'jumlah_rapat' => 'Jumlah Rapat',\n            'modal_usaha' => 'Modal Usaha',\n            'simpanan_pokok_anggota' => 'Simpanan Pokok Anggota',\n            'simpanan_wajib_anggota' => 'Simpanan Wajib Anggota',\n            'modal_lain' => 'Dana Hibah',\n            'jumlah_anggota' => 'Jumlah Anggota',\n            'usaha_utama' => 'Usaha Utama',\n            'usaha_pendukung' => 'Usaha Pendukung',\n            'usaha_tambahan' => 'Usaha Tambahan',\n            'is_minuta' => 'Is Minuta',\n            'is_beria_acara' => 'Is Beria Acara',\n            'is_surat_bukti' => 'Is Surat Bukti',\n            'is_rencana_kerja' => 'Is Rencana Kerja',\n            'file_akta' => 'File Akta',\n            'file_berita_acara' => 'File Berita Acara',\n            'is_redaksi_persetujuan' => 'Is Redaksi Persetujuan',\n            'is_confirm' => 'Is Confirm',\n            'tanggal_confirm' => 'Tanggal Confirm',\n            'tanggal_akhir' => 'Tanggal Akhir',\n            'is_deleted' => 'Is Deleted',\n            'created_by' => 'Created By',\n            'created_date' => 'Created Date',\n            'updated_by' => 'Updated By',\n            'updated_date' => 'Updated Date',\n            'deleted_by' => 'Deleted By',\n            'deleted_date' => 'Deleted Date',\n            'id_notaris_pengganti' => 'ID Notaris Pengganti',\n            'no_sk_notaris_pengganti' => 'No SK notaris Pengganti'\n        ];\n    }\n\n    public static function checkPendirian($model) {\n        if($model) {\n\n            if (empty($model->no_pesan)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'PesanNamaKosong',\n                    'no_pesan' => $model->no_pesan,\n                ];\n            }\n\n            // Cek Available Nomor Pesan Nama\n            if (!self::CekAvailablePesanNama($model)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'PesanNamaNotAvailable',\n                    'no_pesan' => $model->no_pesan,\n                ];\n            }\n\n            //Cek Expire\n            if (self::CekExpire($model)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'ExpireTanggal',\n                    'no_pesan' => $model->no_pesan,\n                ];\n            }\n        }\n    }\n\n    public static function CekExpire($model) {\n        $data = self::getDataPesanNama($model);\n        if($data) {\n            $tgl_exp = $data->end_date;\n            $now = date(\"Y-m-d\");\n            return $now > $tgl_exp;\n        }\n    }\n\n    public static function getDataPesanNama($model) {\n        if($model) {\n            return PesanNama::find()\n                    ->where(['no_pesan' => $model->no_pesan])\n                    // ->andWhere(['ahu_notaris_id' => $model->ahu_notaris_id])\n                    ->andWhere(['is_deleted' => '0'])\n                    ->andWhere(['status' => 0])\n                    ->one();\n        }\n    }\n\n    public static function CekAvailablePesanNama($model) {\n        $data = self::getDataPesanNama($model);\n        if($data) {\n\n            // Cek apakah punya nama yang sama di table transaksi\n            $cek = self::find()->where(['nama_koperasi' => $data->nama_koperasi, 'is_finish' => 1])->one();\n            if (!$cek) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static function getWilayahNotariat( $data ) {\n\n        extract( $data );\n\n        $arr = array();\n\n        $raw1 = WilayahNotariat::find()\n            ->where('wilayah_id in ('.$provinsi.', '.$kabupaten.', '.$kecamatan.')')\n            ->orderBy(['TINGKAT_WILAYAH' => SORT_ASC])\n            ->all();\n\n        $raw2 = WilayahSABH::find()->where(['ID_WIL' => $kelurahan, 'ID_WILAYAH_M' => $kecamatan])->one();\n\n        return $arr = [\n            'provinsi' => $raw1[0]->NAMA,\n            'kabupaten' => $raw1[1]->NAMA,\n            'kecamatan' => $raw1[2]->NAMA,\n            'kelurahan' => !empty($raw2) ? $raw2->NM_KELURAHAN : \"\",\n        ];\n    }\n\n    public static function getKBLIType( $id, $type ) {\n\n        $ids = array();\n        $raw = AktifitasUsaha::find()->select('kbli_id')->where(['t_koperasi_id' => $id, 'jenis_kbli' => $type])->asArray()->all();\n\n\n        foreach ($raw as $list) {\n\n            array_push($ids, $list['kbli_id']);\n        }\n\n        return $ids;\n    }\n\n    public static function getPreviewData( $id, $disclaimerType = self::DISC_PERSETUJUAN_PENDIRIAN ) {\n\n        $data = self::find()\n            ->select('kop_t_koperasi.id as koperasi_id, kop_t_koperasi.nomor_transaksi, kop_t_koperasi.tanggal_akta, kop_t_koperasi.tanggal_rapat as tanggal_rapat, kop_t_koperasi.alamat_rapat, kop_t_koperasi.jumlah_peserta_rapat, kop_t_koperasi.modal_koperasi, kop_t_koperasi.simpanan_pokok, kop_t_koperasi.simpanan_wajib, kop_t_koperasi.dana_hibah, kop_t_koperasi.dana_cadangan, kop_t_koperasi.is_finish, kop_t_koperasi.provinsi_id, kop_t_koperasi.kab_kota_id, kop_t_koperasi.kecamatan_id, kop_t_koperasi.kel_desa_id, kop_t_koperasi.alamat_koperasi, kop_t_koperasi.rw, kop_t_koperasi.rt, kop_t_koperasi.kode_pos, kop_t_koperasi.telepon, kop_t_koperasi.email, kop_t_koperasi.akta_koperasi, kop_t_koperasi.t_pesan_nama_id, kop_t_koperasi.created_date, kop_t_koperasi.jangka_waktu, kop_t_koperasi.periode_pengurus_awal,kop_t_koperasi.periode_pengurus_akhir, kop_t_koperasi.full_nama, kop_t_koperasi.jumlah_jangka_waktu,\n                    nm_koperasi.*,\n                    w.nama as nama_wilayah,\n                    kp.nama as bentuk_koperasi,\n                    nn.nama_lengkap')\n            ->leftJoin('(select\n                            pn.id, pn.nama_koperasi,\n                            jk.nama as jenis_koperasi,\n                            pk.nama as pola_pengelolaan,\n                            pn.model_koperasi as model_koperasi\n                        from\n                            kop_pesan_nama pn\n                        left join\n                            kop_jenis_koperasi jk on\n                                case\n                                    when pn.c_jenis_koperasi_id is null then pn.jenis_koperasi_id = jk.id\n                                    else pn.c_jenis_koperasi_id = jk.id\n                                end\n                        left join\n                            kop_pola_pengelolaan pk on pn.m_pola_id = pk.id) as nm_koperasi on nm_koperasi.id = kop_t_koperasi.t_pesan_nama_id'\n                        )\n            ->leftJoin('kop_tingkat_wilayah w', 'kop_t_koperasi.m_tingkat_wilayah_id = w.id')\n            ->leftJoin('kop_b_koperasi kp', 'kop_t_koperasi.b_koperasi_id = kp.id')\n            ->leftJoin('kop_notaris_npak nn', 'kop_t_koperasi.ahu_notaris_id = nn.id_notaris')\n            // ->orderBy(['created_date' => SORT_DESC])\n            ->where(['kop_t_koperasi.id' => $id])\n            ->asArray()\n            ->one();\n\n        $data['BHPenggabungan'] = new ArrayDataProvider([\n                'allModels' => BHPenggabungan::find()->where(['t_koperasi_id' => $id])->asArray()->all()\n            ]);\n\n        $data['BHPembagian'] = new ArrayDataProvider([\n            'allModels' => BHPembagian::find()->where(['t_koperasi_id' => $id])->asArray()->all()\n        ]);\n\n        $dataKBLI = [\n            'KBLIUtama' => new ArrayDataProvider([\n                'allModels' => MKbli::getAktifitasUsaha(self::getKBLIType($id,'Utama')),\n            ]),\n            'KBLIPendukung' => new ArrayDataProvider([\n                'allModels' => MKbli::getAktifitasUsaha(self::getKBLIType($id,'Pendukung'))\n            ]),\n            'KBLITambahan' => new ArrayDataProvider([\n                'allModels' => MKbli::getAktifitasUsaha(self::getKBLIType($id,'Tambahan'))\n            ])\n        ];\n\n        $dataPengawasDanPengurus = new ArrayDataProvider([\n            'allModels' => DataAnggota::getAnggotaByID( $data['koperasi_id'] )\n        ]);\n\n        $dataBO = new ArrayDataProvider([\n            'allModels' => PemilikManfaat::getPemilikManfaatByID( $data['koperasi_id'] )\n        ]);\n\n        $caller = strtolower( debug_backtrace()[1]['class'] );\n        $type = [];\n\n        if( strpos($caller, 'pendirian') ) {\n            $type = [\n                1,\n                2,\n                3, \n                TPendirianDokumen::TYPE_MAPPING['PENDIRIAN_HASIL_MUSYAWARAH_DESA']\n            ];\n        }\n        else if ( strpos($caller, 'perubahan') ) {\n            $type = [\n                4,\n                5,\n                6, \n                TPendirianDokumen::TYPE_MAPPING['PERUBAHAN_HASIL_MUSYAWARAH_DESA']\n            ];\n        }\n        else if ( strpos($caller, 'pembubaran') ) {\n            $type = [7];\n        }\n\n        $dokumen = TPendirianDokumen::getDocumentByID( $data['koperasi_id'], $type );\n\n        $data['dataKBLI'] = $dataKBLI;\n        $data['dataAnggota'] = $dataPengawasDanPengurus;\n        $data['dataBO'] = $dataBO;\n        $data['bo_from_api'] = PemilikManfaat::isFromApi($data['koperasi_id']);\n        $data['dokumen'] = $dokumen;\n\n        $rawWilayah = self::getWilayahNotariat([\n            'provinsi' => $data['provinsi_id'],\n            'kabupaten' => $data['kab_kota_id'],\n            'kecamatan' => $data['kecamatan_id'],\n            'kelurahan' => $data['kel_desa_id']\n        ]);\n\n        extract($rawWilayah);\n\n        $data['provinsi'] = $provinsi;\n        $data['kabupaten'] = $kabupaten;\n        $data['kecamatan'] = $kecamatan;\n        $data['kelurahan'] = $kelurahan;\n        $data['disclaimer'] = Disclaimer::find()->where(['parent' => $disclaimerType])->all();\n\n        return $data;\n    }\n\n    public static function getStatusTrans($id) {\n        return self::findOne($id)->is_finish;\n    }\n\n    public function getDaftarTransaksiKoperasi( $get ) {\n\n        $query = self::find()->joinWith(['jenisTransaksi'])->where(['id_master' => Yii::$app->getRequest()->get('id')]);\n\n        if ( ! empty( $get ) ) {\n\n            if ( ! empty( $get['nama_koperasi'] ) ) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $get['nama_koperasi']]);\n            }\n\n            if ( ! empty( $get['jenis_koperasi'] ) ) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if ( ! empty( $get['jenis_koperasi'] ) ) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if ( ! empty( $get['nama_notaris'] ) ) {\n\n                $query->andFilterWhere(['like', 'nama_notaris', $get['nama_notaris']]);\n            }\n\n            if ( ! empty( $get['nomor_transaksi'] ) ) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $get['nomor_transaksi']]);\n            }\n\n            if ( Yii::$app->getRequest()->getQueryParam('created_date') ) {\n\n                $date = Yii::$app->getRequest()->getQueryParam('created_date');\n\n                $query->andFilterWhere(['between', 'created_date', date('Y-m-d', strtotime( $date )), date('Y-m-d', strtotime( \"+1 day\", strtotime( $date) ) ) ]);\n            }\n\n            if ( ! empty( $get['jenis_transaksi_id'] ) ) {\n\n                $query->andFilterWhere(['jenis_transaksi_id' => $get['jenis_transaksi_id']]);\n            }\n\n            if ( ! empty( $get['no_sk_koperasi'] ) ) {\n\n                $query->andFilterWhere(['kop_sk.no_sk_koperasi' => $get['no_sk_koperasi']]);\n            }\n\n        }\n\n        return $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ]\n        ]);\n    }\n\n    public static function findLastTransaction( $type, $id ) {\n\n        $data = self::find()->where(['id_master' => $id])->orderBy(['created_date' => SORT_ASC])->asArray()->all();\n        $c = count( $data );\n\n        switch ( $type ) {\n\n            case 1:\n\n                $cBeforeLatest = $c - 2;\n                return $data[$cBeforeLatest];\n\n                break;\n\n            case 0:\n\n                $last = 0;\n                return $data[$last];\n\n                break;\n        }\n    }\n    /**\n     * Mendapatkan Transaksi Terakhir Berdasarkan NIK\n     *\n     * @param Integer Nomor Induk Koperasi\n     *\n     * @return TransaksiKoperasi Data Transaksi Koperasi\n     */\n    public static function getLastTransByNik($nik) {\n        if(!$nik) {\n            return false;\n        }\n\n        $data = self::find()\n                ->where(['nik' => $nik])\n                ->andWhere(['is_deleted' => '0'])\n                ->andWhere(['is_finish' => 1])\n                ->orderBy(['id' => SORT_DESC])->one();\n\n        if(!$data) {\n            return false;\n        }\n\n        return $data;\n    }\n    /**\n     * Mendapatkan Data Pendirian dari Pesan Nama\n     *\n     * @param Integer id_pesan_nama\n     *\n     * @return TransaksiKoperasi Data Transaksi Koperasi\n     * Waktu : 2019-12-06\n     * Keterangan : search semua transaksi baik selesai maupun belum issue https://gitlab.docotel.net/ws/koperasi/issues/173 oleh Dito\n     */\n    public static function checkStatusPendirian($id_pesan)\n    {\n        $data = TransaksiKoperasi::find()\n            ->where(['t_pesan_nama_id' => $id_pesan])\n            ->andWhere(['is_deleted' => '0'])->one();\n\n        return $data;\n    }\n\n    public static function checkNikByNama($nama_koperasi)\n    {\n        $res = [\n            'data' => null,\n            'error' => '',\n        ];\n\n        if ($nama_koperasi) {\n\n            $data = self::find()\n                ->where(['nama_koperasi' => $nama_koperasi])\n                ->andWhere(['is_deleted' => '0', 'is_finish' => '1'])\n                ->andWhere(['jenis_transaksi' => 'PENDIRIAN'])\n                ->one();\n\n            if ($data) {\n                $master = $data->dataMaster;\n\n                $list_transaksi = $master->getListTransaksi()->where(['is_deleted' => '0', 'is_finish' => '1'])->all();\n\n                foreach ($list_transaksi as $transaksi) {\n                    if (!empty($transaksi->nik)) {\n                        $res['error'] = \"Sudah Ada NIK dengan nomor {$transaksi->nik} di koperasi ini\";\n                        return $res;\n                    }\n                }\n\n                $res['data'] = $data;\n                return $res;\n            }\n\n            $res['error'] = \"Nama Koperasi Tidak Ditemukan\";\n            return $res;\n        }\n\n        $res['error'] = 'Nama Koperasi Kosong';\n        return $res;\n    }\n\n    public static function getNikById($id)\n    {\n        $data = self::find()\n            ->where(['id_master' => $id])\n            ->orderBy(['id' => SORT_DESC])\n            ->one();\n\n        if ($data) {\n            return $data->nik;\n        }\n\n        return null;\n    }\n}\n\n\n--- File: 47 # controllers/PerbaikanDataController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\components\\ApiHelper;\nuse Yii;\nuse Mpdf\\Mpdf;\n\nuse app\\components\\BaseController;\nuse app\\components\\KoperasiHelper;\nuse app\\components\\helper\\EncryptHelper;\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\helper\\PerbaikanDataHelper;\nuse app\\components\\TransaksiHelper;\nuse app\\models\\ChecklistPerbaikan;\nuse app\\models\\ChecklistPerbaikanForm;\nuse app\\models\\ChecklistPerubahan;\nuse app\\models\\ChecklistPerubahanForm;\nuse app\\models\\DataAnggota;\nuse app\\models\\MasterPerubahan;\nuse app\\models\\PesanNama;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\forms\\PendirianForm;\nuse app\\models\\MasterPerbaikan;\nuse app\\models\\MasterTransaction;\nuse app\\models\\forms\\PerbaikanDataForm;\nuse app\\models\\TransaksiPerbaikan;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\search\\KBLIBakumSearch;\nuse app\\models\\MappingKBLI;\nuse Exception;\nuse Mpdf\\Output\\Destination;\nuse PDO;\nuse yii\\data\\ActiveDataProvider;\nuse yii\\db\\Expression;\nuse yii\\web\\BadRequestHttpException;\nuse yii\\web\\Response;\n\nclass PerbaikanDataController extends BaseController\n{\n\n    public $key; // temporary\n\n    public function beforeAction($action)\n    {\n        $this->key = \"D0c0spArT@n\";\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionIndex()\n    {\n        Yii::$app->view->title = \"Perbaikan Data\";\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $idNotaris = $user['value']['id_notaris'];\n\n        $model = new PerbaikanDataForm();\n        $model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n\n        $confirmStep = null;\n        $err = [];\n\n        if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n\n            $confirmStepFlag = Yii::$app->request->post('confirmStepFlag', 0);\n\n            $transaksiKoperasi = MasterTransaction::findExistTransactionForPerbaikan(\n                $model->no_sk_koperasi,\n                $model->tanggal_sk_koperasi,\n                $model->full_nama_koperasi,\n                $idNotaris\n            );\n\n            $status = $transaksiKoperasi['status'];\n            $trans = $transaksiKoperasi['data'];\n            $err = $transaksiKoperasi['err'];\n\n            if (!empty($err['nama'])) {\n                $model->addError('full_nama_koperasi', $err['nama']);\n            }\n            if (!empty($err['no_sk'])) {\n                $model->addError('no_sk_koperasi', $err['no_sk']);\n                $model->addError('tanggal_sk_koperasi', $err['no_sk']);\n            }\n\n            if ($status) {\n                if ($confirmStepFlag == 1) {\n                    $payload = base64_encode(EncryptHelper::encrypt($trans->id, $this->key));\n                    return $this->redirect('data-pemohon?id=' . $payload);\n                }\n\n                $confirmStep = 1;\n            } else {\n                $confirmStep = 0;\n            }\n        }\n\n        return $this->render('index', [\n            'model' => $model,\n            'confirmStep' => $confirmStep,\n            'err' => isset($err) ? $err : [],\n        ]);\n    }\n\n    public function actionDataPemohon()\n    {\n        $payload = Yii::$app->request->get();\n        if (!isset($payload['id'])) return $this->redirect('index');\n\n        $transactionId = EncryptHelper::decrypt(base64_decode($payload['id']), $this->key);\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris', []);\n\n        $nama      = isset($user['value']['nama_gelar']) ? $user['value']['nama_gelar'] : '';\n        $nik       = isset($user['value']['nik']) ? $user['value']['nik'] : '';\n        $jabatan   = '';\n        $email     = isset($user['value']['email']) ? $user['value']['email'] : '';\n        $noTelp    = isset($user['value']['no_telp']) ? $user['value']['no_telp'] : '';\n\n        $model = new PerbaikanDataForm();\n        $model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n\n        $model->nama_pemohon = $nama;\n        $model->nik_pemohon = $nik;\n        $model->jabatan_pemohon = $jabatan;\n        $model->email_pemohon = $email;\n        $model->no_telp_pemohon = preg_replace('/\\D/', '', $noTelp);\n\n        if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n            $payload = base64_encode(EncryptHelper::encrypt($transactionId, $this->key));\n            return $this->redirect('surat-permohonan?id=' . $payload);\n        }\n\n        return $this->render('formStepDataPemohon', [\n            'model' => $model\n        ]);\n    }\n\n    public function actionSuratPermohonan()\n    {\n        $payload = Yii::$app->request->get();\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n\n        if (isset($payload['id'])) {\n            $transactionId = EncryptHelper::decrypt(base64_decode($payload['id']), $this->key);\n            $no_checklist = uniqid('', true);\n        }\n\n        $isChecklist = isset($payload['isChecklist']) ? $payload['isChecklist'] : false;\n\n        $checks = [];\n\n        $model = new PerbaikanDataForm();\n        $model->scenario = $isChecklist ? PerbaikanDataForm::SCENARIO_CHECKLIST : PerbaikanDataForm::SCENARIO_SURAT_PERMOHONAN;\n\n        $checklistModel = new ChecklistPerbaikanForm();\n\n        $masterTransaction = MasterTransaction::find()\n            ->joinWith(['transaksiKoperasi'])\n            ->joinwith(['transaksiKoperasi.dataSK'])\n            ->where(['kop_t_koperasi.id' => $transactionId])->one();\n\n        $transaksiKoperasiModel = $masterTransaction->transaksiKoperasi;\n\n        if ($isChecklist) {\n            if ($session->has('file_surat_permohonan')) {\n                $model->file_surat_permohonan = $session->get('file_surat_permohonan');\n            }\n        } else {\n            foreach (PerbaikanDataHelper::getFileAttributes($model) as $attribute) {\n                if ($session->has($attribute)) {\n                    $model->$attribute = $session->get($attribute);\n                }\n            }\n        }\n\n        // Handle KBLI add/remove into session when in checklist step\n        if ($isChecklist && Yii::$app->request->isPost) {\n            $post = Yii::$app->request->post();\n            $session = Yii::$app->session;\n            $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n            if (!isset($dataDiperbaiki['kegiatan_usaha'])) {\n                $dataDiperbaiki['kegiatan_usaha'] = ['data' => ['utama' => [], 'pendukung' => [], 'tambahan' => []]];\n            } elseif (!isset($dataDiperbaiki['kegiatan_usaha']['data'])) {\n                $dataDiperbaiki['kegiatan_usaha']['data'] = ['utama' => [], 'pendukung' => [], 'tambahan' => []];\n            }\n\n            $section = null;\n            if (isset($post['JenisUsaha'])) {\n                if ($post['JenisUsaha'] === 'UsahaUtama') $section = 'utama';\n                if ($post['JenisUsaha'] === 'UsahaPendukung') $section = 'pendukung';\n                if ($post['JenisUsaha'] === 'UsahaTambahan') $section = 'tambahan';\n            }\n\n            if ($section) {\n                // Tambah KBLI\n                if (isset($post['SaveKBLI'])) {\n                    // Ambil pilihan dari checkbox langsung atau dari hidden cek_kbli_value\n                    $ids = isset($post['cek_kbli']) ? (array)$post['cek_kbli'] : [];\n                    if (empty($ids) && !empty($post['cek_kbli_value'])) {\n                        $ids = array_filter(explode(',', $post['cek_kbli_value']));\n                    }\n                    if (!empty($ids)) {\n                        $kbliList = KBLIBakum::find()->where(['id_kbli' => $ids])->all();\n                        foreach ($kbliList as $d) {\n                            $dataDiperbaiki['kegiatan_usaha']['data'][$section][$d->id_kbli] = [\n                                'id' => $d->id_kbli,\n                                'kode' => $d->kode,\n                                'kategori' => $d->kategori,\n                                'judul' => $d->judul,\n                                'uraian' => $d->uraian,\n                            ];\n                        }\n                    }\n                    $session->set('data_diperbaiki_list', $dataDiperbaiki);\n                }\n                // Hapus KBLI\n                if (isset($post['HapusKBLI'])) {\n                    $key = $post['HapusKBLI'];\n                    if (isset($dataDiperbaiki['kegiatan_usaha']['data'][$section][$key])) {\n                        unset($dataDiperbaiki['kegiatan_usaha']['data'][$section][$key]);\n                        $session->set('data_diperbaiki_list', $dataDiperbaiki);\n                    }\n                }\n            }\n\n            // Jika aksi dari tombol Tambah/Hapus KBLI, render ulang tanpa validasi (hindari error upload)\n            if (isset($post['SaveKBLI']) || isset($post['HapusKBLI'])) {\n                // Provider KBLI (sinkron dengan pendirian)\n                $tahun_kbli = '2020';\n                $kbli_search = new KBLIBakumSearch();\n\n                $jenisKopKbli = null; $polaKopKbli = 1; $bentukKopKbli = 1;\n                if ($transaksiKoperasiModel && $transaksiKoperasiModel->pesanNama) {\n                    $jenisKopKbli = $transaksiKoperasiModel->pesanNama->c_jenis_koperasi_id ?: $transaksiKoperasiModel->pesanNama->jenis_koperasi_id;\n                    if (isset($transaksiKoperasiModel->pesanNama->m_pola_id)) { $polaKopKbli = $transaksiKoperasiModel->pesanNama->m_pola_id ?: 1; }\n                }\n                if ($transaksiKoperasiModel && isset($transaksiKoperasiModel->b_koperasi_id)) { $bentukKopKbli = $transaksiKoperasiModel->b_koperasi_id ?: 1; }\n                if (!$jenisKopKbli) { $jenisKopKbli = 1; }\n\n                $mappingKBLIAll = MappingKBLI::find();\n                $KBLI_all = KBLIBakum::find()->where(['id_kbli' => \\yii\\helpers\\ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n                $kbli_sp_lain_konvensional_p = ['64145', '64147', '64142', '64144', '64146', '64148', '64143'];\n                $kbli_sp_lain_konvensional_s = ['64145', '64147', '64142', '64144', '64146', '64148', '64141'];\n                $kbli_sp_lain_syariah_p = ['64141', '64143', '64142', '64144', '64146', '64148', '64147'];\n                $kbli_sp_lain_syariah_s = ['64141', '64143', '64142', '64144', '64146', '64148', '64145'];\n                $kbli_ex_lain_konvensional_p = ['64141', '64143', '64145', '64147', '64146', '64148', '64144'];\n                $kbli_ex_lain_konvensional_s = ['64141', '64143', '64145', '64147', '64146', '64148', '64142'];\n                $kbli_ex_lain_syariah_p = ['64141', '64143', '64145', '64147', '64142', '64144', '64148'];\n                $kbli_ex_lain_syariah_s = ['64141', '64143', '64145', '64147', '64142', '64144', '64146'];\n\n                if ((string)$jenisKopKbli === '6') {\n                    if ((string)$polaKopKbli === '1') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    }\n                } else {\n                    if ((string)$polaKopKbli === '1') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    }\n                }\n\n                $search = Yii::$app->request->get('KBLIBakumSearch');\n                if ($search && isset($search['judul'])) {\n                    $searchKode = $search['judul'];\n                    if ($searchKode !== '') {\n                        if ((string)$jenisKopKbli === '6') {\n                            if ((string)$polaKopKbli === '1') {\n                                $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000'; }\n                            } else {\n                                $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000'; }\n                            }\n                        } else {\n                            if ((string)$polaKopKbli === '1') {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000'; }\n                            } else {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000'; }\n                            }\n                        }\n                        $KBLI->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n                        $KBLI_all->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n                    }\n                }\n\n                $kbli_provider = [\n                    'byJenis' => new \\yii\\data\\ActiveDataProvider([\n                        'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                        'pagination' => ['pageSize' => 5],\n                        'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n                    ]),\n                    'all' => new \\yii\\data\\ActiveDataProvider([\n                        'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                        'pagination' => ['pageSize' => 5],\n                        'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n                    ]),\n                ];\n\n                // pertahankan pilihan checklist dari POST\n                $checks = Yii::$app->request->post('checks', $checks);\n                if (!in_array(MasterPerbaikan::KEGIATAN_USAHA, array_map('intval', (array)$checks), true)) {\n                    $checks[] = MasterPerbaikan::KEGIATAN_USAHA;\n                }\n\n                return $this->render('formStepPermohonan', [\n                    'isChecklist' => $isChecklist,\n                    'namaKoperasi' => $masterTransaction['transaksiKoperasi']['full_nama'],\n                    'nomorSk' => $masterTransaction['transaksiKoperasi']['dataSK']['no_sk_koperasi'],\n                    'tanggalSk' => $masterTransaction['transaksiKoperasi']['dataSK']['created_date'],\n                    'idMaster' => $transactionId,\n                    'no_checklist' => $no_checklist,\n                    'checks' => $checks,\n                    'checklists' => MasterPerbaikan::find()->all(),\n                    'model' => $model,\n                    'checklistModel' => $checklistModel,\n                    'transaksiKoperasiModel' => $transaksiKoperasiModel,\n                    'kbli_provider' => $kbli_provider,\n                    'kbli_search' => $kbli_search,\n                    'tahun_kbli' => $tahun_kbli,\n                ]);\n            }\n        }\n\n        $modelLoadedAndValid = $model->load(Yii::$app->request->post()) && $model->validate();\n        $checklistModelLoadedAndValid = !$isChecklist || ($checklistModel->load(Yii::$app->request->post()) && $checklistModel->validate());\n\n        if ($modelLoadedAndValid && $checklistModelLoadedAndValid) {\n            if (!$isChecklist) {\n                $payload = base64_encode(EncryptHelper::encrypt($transactionId, $this->key));\n                return $this->redirect('surat-permohonan?id=' . $payload . '&isChecklist=1');\n            } else {\n\n                $transactionDb = TransaksiPerbaikan::getDb();\n                $transactionObj = $transactionDb->beginTransaction();\n\n                try {\n\n                    $model->uploadFormFiles();\n                    $model->t_koperasi_id = $transactionId;\n\n                    $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n                    // Fallback: merge usulan BO yang ikut diposting sebagai hidden JSON (bisa dalam bentuk HTML-encoded)\n                    $hasPostedBo = false;\n                    $postedBoJson = Yii::$app->request->post('pemilik_manfaat_edits');\n                    if (!empty($postedBoJson)) {\n                        $raw = (string)$postedBoJson;\n                        $candidates = [$raw, html_entity_decode($raw, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8')];\n                        foreach ($candidates as $cand) {\n                            $decoded = json_decode($cand, true);\n                            if (json_last_error() === JSON_ERROR_NONE && is_array($decoded) && !empty($decoded)) {\n                                $dataDiperbaiki['pemilik_manfaat'] = $decoded;\n                                $hasPostedBo = true;\n                                break;\n                            }\n                            // Coba decode lagi setelah stripslashes jika diperlukan\n                            $decoded2 = json_decode(stripslashes($cand), true);\n                            if (json_last_error() === JSON_ERROR_NONE && is_array($decoded2) && !empty($decoded2)) {\n                                $dataDiperbaiki['pemilik_manfaat'] = $decoded2;\n                                $hasPostedBo = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    $postData = Yii::$app->request->post('ChecklistPerbaikanForm');\n                    $selectedPerbaikanIds = [];\n\n                    if (!empty($postData['m_perbaikan_id']) && is_array($postData['m_perbaikan_id'])) {\n                        foreach ($postData['m_perbaikan_id'] as $check) {\n                            if (!empty($check)) {\n                                $selectedPerbaikanIds[] = $check;\n                            }\n                        }\n                        // Normalisasi tipe ke integer agar cocok dengan konstanta MasterPerbaikan\n                        $selectedPerbaikanIds = array_map('intval', $selectedPerbaikanIds);\n                        $selectedPerbaikanIds = array_values(array_unique($selectedPerbaikanIds));\n                    }\n\n                    // Jangan auto-include pengawas_pengurus dari session agar tidak ikut ketika hanya memilih pemilik_manfaat\n                    // Jika ada usulan kegiatan_usaha di session, pastikan checklist terkait ikut terpilih\n                    if (!empty($dataDiperbaiki['kegiatan_usaha'])\n                        && !in_array(\\app\\models\\MasterPerbaikan::KEGIATAN_USAHA, $selectedPerbaikanIds)) {\n                        $selectedPerbaikanIds[] = \\app\\models\\MasterPerbaikan::KEGIATAN_USAHA;\n                    }\n\n                    // Gabungkan juga dari POST checks[] agar perubahan pilihan di UI ikut terbaca\n                    $postedChecks = Yii::$app->request->post('checks', []);\n                    if (is_array($postedChecks) && !empty($postedChecks)) {\n                        foreach ($postedChecks as $c) {\n                            if ($c !== '' && $c !== null) { $selectedPerbaikanIds[] = $c; }\n                        }\n                        $selectedPerbaikanIds = array_map('intval', $selectedPerbaikanIds);\n                        $selectedPerbaikanIds = array_values(array_unique($selectedPerbaikanIds));\n                    }\n                    // Jangan auto-include Pemilik Manfaat: hanya ikut jika user mencentang di checklist\n\n                    $dataDiperbaiki = PerbaikanDataHelper::filterChecklistPerbaikan($selectedPerbaikanIds, $dataDiperbaiki);\n\n                    // Snapshot data master (current) untuk item yang akan diubah\n                    $dataKoperasiSnapshot = PerbaikanDataHelper::buildMasterSnapshot($transaksiKoperasiModel, $dataDiperbaiki, $selectedPerbaikanIds);\n\n                    // Kurangi data diperbaiki hanya pada field yang berubah (khusus pengawas_pengurus)\n                    $dataDiperbaiki = PerbaikanDataHelper::reduceEditedToDelta($dataDiperbaiki, $dataKoperasiSnapshot);\n\n                    // Hapus data pemilik_manfaat jika tidak dicentang; tidak dipulihkan otomatis\n\n                    $model->data_diperbaiki_list = json_encode($dataDiperbaiki);\n                    $entity = PerbaikanDataHelper::mapToTransakasiPerbaikan($model);\n                    // Simpan snapshot data master ke kolom data_koperasi_list (jika tersedia di DB)\n                    $entity->data_koperasi_list = json_encode($dataKoperasiSnapshot);\n\n                    $transaksiKoperasiModel->is_perbaikan = 1;\n                    if (!$transaksiKoperasiModel->save(false)) {\n                        throw new Exception('Gagal update transaski koperasi');\n                    }\n\n                    if (!$entity->save()) {\n                        $errors = $entity->getErrors();\n                        $errorMessages = [];\n                        foreach ($errors as $attribute => $messages) {\n                            $errorMessages[] = $attribute . ': ' . implode(', ', $messages);\n                        }\n                        throw new Exception(implode(' | ', $errorMessages));\n                    }\n\n                    $batch = [];\n                    $d_koperasi_id = $masterTransaction->id;\n                    $no_checklist = Yii::$app->request->post('no_checklist');\n\n                    if (!empty($no_checklist)) {\n                        ChecklistPerbaikan::deleteAll('no_checklist = :no_checklist', [':no_checklist' => $no_checklist]);\n                    }\n\n                    foreach ($selectedPerbaikanIds as $num => $check) {\n                        $batch[$num]['no_checklist'] = $no_checklist;\n                        $batch[$num]['d_koperasi_id'] = $d_koperasi_id;\n                        $batch[$num]['t_perbaikan_id'] = $entity->id;\n                        $batch[$num]['m_perbaikan_id'] = $check;\n                    }\n\n                    if (!empty($batch)) {\n                        ChecklistPerbaikan::getDb()->createCommand()\n                            ->batchInsert(\n                                'kop_c_perbaikan',\n                                ['no_checklist', 'd_koperasi_id', 't_perbaikan_id', 'm_perbaikan_id'],\n                                $batch\n                            )->execute();\n                    }\n\n                    $transactionObj->commit();\n\n                    PerbaikanDataForm::removeFormSessions();\n\n                    $payload = base64_encode(EncryptHelper::encrypt($entity->id, $this->key));\n                    return $this->redirect('detail-permohonan?id=' . $payload);\n                } catch (Exception $e) {\n                    $transactionObj->rollBack();\n                    throw $e;\n                }\n            }\n        }\n\n        // Build KBLI providers for modal selector (samakan dengan pendirian)\n        $tahun_kbli = '2020';\n        $kbli_search = new KBLIBakumSearch();\n\n        // Tentukan jenis/pola/bentuk dari data transaksi yang ada\n        $jenisKopKbli = null;\n        $polaKopKbli = 1;\n        $bentukKopKbli = 1;\n        if ($transaksiKoperasiModel && $transaksiKoperasiModel->pesanNama) {\n            $jenisKopKbli = $transaksiKoperasiModel->pesanNama->c_jenis_koperasi_id ?: $transaksiKoperasiModel->pesanNama->jenis_koperasi_id;\n            // fallback pola ke 1 jika tidak tersedia\n            if (isset($transaksiKoperasiModel->pesanNama->m_pola_id)) { $polaKopKbli = $transaksiKoperasiModel->pesanNama->m_pola_id ?: 1; }\n        }\n        if ($transaksiKoperasiModel && isset($transaksiKoperasiModel->b_koperasi_id)) { $bentukKopKbli = $transaksiKoperasiModel->b_koperasi_id ?: 1; }\n\n        // Default jenis jika belum terdefinisi\n        if (!$jenisKopKbli) {\n            $jenisKopKbli = 1; // fallback aman\n        }\n\n        // Mapping basis\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => \\yii\\helpers\\ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        // Daftar kode khusus (disalin dari pendirian)\n        $kbli_sp_lain_konvensional_p = ['64145', '64147', '64142', '64144', '64146', '64148', '64143'];\n        $kbli_sp_lain_konvensional_s = ['64145', '64147', '64142', '64144', '64146', '64148', '64141'];\n        $kbli_sp_lain_syariah_p = ['64141', '64143', '64142', '64144', '64146', '64148', '64147'];\n        $kbli_sp_lain_syariah_s = ['64141', '64143', '64142', '64144', '64146', '64148', '64145'];\n        $kbli_ex_lain_konvensional_p = ['64141', '64143', '64145', '64147', '64146', '64148', '64144'];\n        $kbli_ex_lain_konvensional_s = ['64141', '64143', '64145', '64147', '64146', '64148', '64142'];\n        $kbli_ex_lain_syariah_p = ['64141', '64143', '64145', '64147', '64142', '64144', '64148'];\n        $kbli_ex_lain_syariah_s = ['64141', '64143', '64145', '64147', '64142', '64144', '64146'];\n\n        // Query dasar sesuai jenis/pola/bentuk seperti pendirian\n        if ((string)$jenisKopKbli === '6') { // simpan pinjam\n            if ((string)$polaKopKbli === '1') { // konvensional\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') { // sekunder\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else { // syariah\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') { // sekunder\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        } else { // jenis lainnya\n            if ((string)$polaKopKbli === '1') { // konvensional\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else { // syariah\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        }\n\n        // Pencarian judul/kode (batasi sesuai jenis/pola/bentuk)\n        $search = Yii::$app->request->get('KBLIBakumSearch');\n        if ($search && isset($search['judul'])) {\n            $searchKode = $search['judul'];\n            if ($searchKode !== '') {\n                if ((string)$jenisKopKbli === '6') {\n                    if ((string)$polaKopKbli === '1') {\n                        $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000'; }\n                    } else {\n                        $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000'; }\n                    }\n                } else {\n                    if ((string)$polaKopKbli === '1') {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000'; }\n                    } else {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000'; }\n                    }\n                }\n                $KBLI->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n                $KBLI_all->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n            }\n        }\n\n        $kbli_provider = [\n            'byJenis' => new \\yii\\data\\ActiveDataProvider([\n                'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                'pagination' => ['pageSize' => 5],\n                'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n            ]),\n            'all' => new \\yii\\data\\ActiveDataProvider([\n                'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                'pagination' => ['pageSize' => 5],\n                'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n            ]),\n        ];\n\n        return $this->render('formStepPermohonan', [\n            'isChecklist' => $isChecklist,\n            'namaKoperasi' => $masterTransaction['transaksiKoperasi']['full_nama'],\n            'nomorSk' => $masterTransaction['transaksiKoperasi']['dataSK']['no_sk_koperasi'],\n            'tanggalSk' => $masterTransaction['transaksiKoperasi']['dataSK']['created_date'],\n            'idMaster' => $transactionId,\n            'no_checklist' => $no_checklist,\n            'checks' => $checks,\n            'checklists' => MasterPerbaikan::find()->all(),\n            'model' => $model,\n            'checklistModel' => $checklistModel,\n            'transaksiKoperasiModel' => $transaksiKoperasiModel,\n            'kbli_provider' => $kbli_provider,\n            'kbli_search' => $kbli_search,\n            'tahun_kbli' => $tahun_kbli,\n        ]);\n    }\n\n    public function actionDetailPermohonan($id)\n    {\n        $transactionPerbaikanId = EncryptHelper::decrypt(base64_decode($id), $this->key);\n\n        $model = TransaksiPerbaikan::findOne($transactionPerbaikanId);\n\n        if (!$model) return $this->redirect('index');\n\n        $jenisPerbaikan = PerbaikanDataHelper::getDisplayChecklistPerbaikan($model->checklistPerbaikan);\n\n        $dataDiperbaiki = json_decode($model->data_diperbaiki_list, true);\n\n        $pengawasPengurus = [];\n\n        $sessionKey = MasterPerbaikan::getSessionKey(MasterPerbaikan::PENGURUS_DAN_PENGAWAS);\n        if (isset($dataDiperbaiki[$sessionKey]) && PerbaikanDataHelper::hasChecklistPerbaikan($model->checklistPerbaikan, MasterPerbaikan::PENGURUS_DAN_PENGAWAS)) {\n            foreach ($dataDiperbaiki[$sessionKey] as $rowData) {\n                $anggota = new DataAnggota();\n                foreach ($rowData as $field => $value) {\n                    if ($anggota->hasAttribute($field)) {\n                        $anggota->$field = $value;\n                    }\n                }\n                $pengawasPengurus[] = $anggota;\n            }\n        }\n\n        return $this->render('detailPermohonan', [\n            'namaKoperasi' => $model->transaksiKoperasi->full_nama,\n            'nomorSk' =>  $model->transaksiKoperasi->dataSK->no_sk_koperasi,\n            'tanggalSk' => $model->transaksiKoperasi->dataSK->created_date,\n            'model' => $model,\n            'jenisPerbaikan' => $jenisPerbaikan,\n            'pengawasPengurus' => $pengawasPengurus\n        ]);\n    }\n\n    public function actionDaftarPermohonan($tahun = null)\n    {\n        $years = TransaksiPerbaikan::find()\n            ->select([new Expression('YEAR(created_date) AS year')])\n            ->groupBy('year')\n            ->orderBy(['year' => SORT_DESC])\n            ->column();\n\n        $query = TransaksiPerbaikan::find()->joinWith('transaksiKoperasi');\n\n        if ($tahun) {\n            $query->andWhere(['YEAR(transaksi_koperasi.created_date)' => $tahun]);\n        }\n\n        $dataProvider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 25,\n            ],\n            'sort' => [\n                'defaultOrder' => ['id' => SORT_DESC],\n            ],\n        ]);\n\n        return $this->render('daftarPermohonan', [\n            'dataProvider' => $dataProvider,\n            'tahun' => $tahun ?: date('Y'),\n            'years' => $years,\n        ]);\n    }\n\n    public function actionEditPengawasPengurus()\n    {\n        $request = Yii::$app->request;\n\n        if ($request->isPost) {\n            $key = $request->post('key');\n            $id = $request->post('id');\n            $data = $request->post();\n\n            unset($data['key'], $data['id']);\n\n            $transaksiKoperasi = TransaksiKoperasi::findOne($id);\n            if (!$transaksiKoperasi) {\n                return json_encode(['status' => 'error', 'message' => 'Transaksi not found']);\n            }\n\n            $anggotaList = $transaksiKoperasi->dataanggota;\n\n            if (!isset($anggotaList[$key])) {\n                return json_encode(['status' => 'error', 'message' => 'Row not found']);\n            }\n\n            $anggota = $anggotaList[$key];\n            $fullRow = $anggota->attributes; // id = id anggota, t_koperasi_id = id transaksi (sesuai tabel)\n\n            $postData = $request->post();\n            foreach ($postData as $field => $value) {\n                $fullRow[$field] = $value;\n            }\n            // Pastikan id & t_koperasi_id konsisten sesuai tabel (jangan terubah dari frontend)\n            $fullRow['id'] = (string)$anggota->id;\n            $fullRow['t_koperasi_id'] = (string)$anggota->t_koperasi_id;\n\n            $session = Yii::$app->session;\n            $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n\n            if (!isset($dataDiperbaiki['pengawas_pengurus'])) {\n                $dataDiperbaiki['pengawas_pengurus'] = [];\n            }\n\n            $dataDiperbaiki['pengawas_pengurus'][$key] = $fullRow;\n            $session->set('data_diperbaiki_list', $dataDiperbaiki);\n\n            return json_encode(['status' => 'success', 'data' => $fullRow]);\n        }\n\n        return json_encode(['status' => 'error', 'message' => 'Invalid request']);\n    }\n\n    public function actionEditPemilikManfaat()\n    {\n        $request = \\Yii::$app->request;\n\n        if ($request->isPost) {\n            $key = $request->post('key');         // index baris dalam tabel (0-based)\n            $id = $request->post('id');           // t_koperasi_id\n            $rowId = $request->post('row_id');    // primary key id baris (opsional)\n            $data = $request->post();\n\n            unset($data['key'], $data['id']);\n\n            $transaksiKoperasi = \\app\\models\\TransaksiKoperasi::findOne($id);\n            if (!$transaksiKoperasi) {\n                return json_encode(['status' => 'error', 'message' => 'Transaksi not found']);\n            }\n\n            // Temukan baris BO: coba berdasarkan row_id dahulu, fallback ke index array\n            $bo = null;\n            if (!empty($rowId)) {\n                $bo = \\app\\models\\PemilikManfaat::find()->where(['id' => $rowId, 't_koperasi_id' => $id])->one();\n            }\n            if (!$bo) {\n                $boList = \\app\\models\\PemilikManfaat::find()->where(['t_koperasi_id' => $id])->all();\n                if (!isset($boList[$key])) {\n                    return json_encode(['status' => 'error', 'message' => 'Row not found']);\n                }\n                $bo = $boList[$key];\n            }\n            $fullRow = $bo->attributes; // id & t_koperasi_id sesuai tabel\n\n            $postData = $request->post();\n            foreach ($postData as $field => $value) {\n                $fullRow[$field] = $value;\n            }\n\n            // Jaga id & t_koperasi_id tetap asli\n            $fullRow['id'] = (string)$bo->id;\n            $fullRow['t_koperasi_id'] = (string)$bo->t_koperasi_id;\n\n            // Tidak menambahkan field turunan agar seragam dengan pengawas_pengurus\n\n            $session = \\Yii::$app->session;\n            $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n            if (!isset($dataDiperbaiki['pemilik_manfaat'])) {\n                $dataDiperbaiki['pemilik_manfaat'] = [];\n            }\n            // Simpan dengan key index array (selaras pengawas_pengurus)\n            $dataDiperbaiki['pemilik_manfaat'][$key] = $fullRow;\n            $session->set('data_diperbaiki_list', $dataDiperbaiki);\n\n            return json_encode(['status' => 'success', 'data' => $fullRow]);\n        }\n\n        return json_encode(['status' => 'error', 'message' => 'Invalid request']);\n    }\n\n\n    public function actionSuratPermohonanDownload()\n    {\n        $suratContent = Yii::$app->request->post('suratPermohonan');\n        if (!$suratContent) {\n            throw new BadRequestHttpException('Tidak ada konten surat.');\n        }\n\n        PerbaikanDataHelper::uploadSuratPermohonan($suratContent, Destination::DOWNLOAD);\n        Yii::$app->end();\n    }\n\n    public function actionSuratPermohonanPreview()\n    {\n        $suratContent = Yii::$app->request->post('suratPermohonan');\n        if (!$suratContent) {\n            throw new BadRequestHttpException('Tidak ada konten surat.');\n        }\n\n        PerbaikanDataHelper::uploadSuratPermohonan($suratContent, Destination::INLINE);\n        Yii::$app->end();\n    }\n}\n\n\n--- File: 46 # controllers/PendirianController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\models\\ChecklistPerubahan;\nuse app\\models\\forms\\KuisionerForm;\nuse app\\models\\master\\Settings;\nuse app\\models\\MKbli;\nuse app\\models\\notariat\\Negara;\nuse app\\models\\PemilikManfaat;\nuse app\\models\\Setting;\nuse yii\\web\\Response;\nuse Yii;\nuse Mpdf\\Mpdf;\nuse app\\models\\SK;\nuse Da\\QrCode\\QrCode;\nuse app\\models\\Command;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\Wilayah;\nuse app\\models\\PesanNama;\nuse yii\\web\\UploadedFile;\nuse app\\models\\Disclaimer;\nuse app\\models\\MappingKBLI;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\JenisIdentitas;\nuse app\\models\\StatusPengurus;\nuse app\\components\\RegexHelper;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\WilayahNotariat;\nuse app\\components\\ActionHelper;\nuse app\\models\\notariat\\Notaris;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TPendirianDokumen;\nuse app\\models\\TransaksiKoperasi;\nuse app\\components\\BaseController;\nuse app\\components\\helper\\BoHelper;\nuse yii\\web\\NotFoundHttpException;\nuse app\\components\\TransaksiHelper;\nuse app\\models\\forms\\PendirianForm;\nuse app\\models\\StatementDisclaimer;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\FormatDate;\nuse app\\models\\search\\KBLIBakumSearch;\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\nuse app\\components\\HelperDukcapil;\nuse app\\components\\Helpers;\nuse app\\components\\KoperasiHelper;\nuse app\\components\\NotariatHelper;\nuse app\\components\\QrCodeHelper;\n\nclass PendirianController extends BaseController\n{\n    public function beforeAction($action)\n    {\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"/site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionIndex()\n    {\n        Yii::$app->view->title = \"Pendirian\";\n        $model = new PendirianForm();\n        $model->scenario = 'form-dasar';\n        $judul = \"PENDIRIAN KOPERASI\";\n        $err = $step2 = $data = $SearchData = $dataNotaris = null;\n        $session = Yii::$app->session;\n        $session->remove('NoPesanPendirian');\n        $user = $session->get('data_notaris');\n\n        if ($model->load(Yii::$app->request->post())) {\n            $post = Yii::$app->request->post();\n            $model->ahu_notaris_id = $user['value']['id_notaris'];\n            if ($model->validate()) {\n                $err = TransaksiKoperasi::checkPendirian($model);\n                $LanjutTrans = TransaksiKoperasi::find()->where(['t_pesan_nama_id' => PesanNama::getPrimaryByNoPesan($model->no_pesan)])->one();\n                if ($LanjutTrans) {\n                    $id = PesanNama::getPrimaryByNoPesan($model->no_pesan);\n                    $data = TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $id])->one();\n                    if ($data->is_finish == -1) {\n                        return Yii::$app->response->redirect('/pendirian/edit?id=' . $data->id);\n                    }\n                }\n\n                // Tampil Step 2 : Preview Pendirian\n                if (!$err) {\n                    $data = TransaksiKoperasi::getDataPesanNama($model);\n                    $step2 = true;\n                    $judul = \"CEK NAMA KOPERASI\";\n                    $SearchData = KoperasiHelper::generateFuzzyNamaKoperasi($model->nama_koperasi, 10);\n                    $session->set('NoPesanPendirian', $model->no_pesan);\n                }\n            }\n        }\n        return $this->render('index', [\n            'model' => $model,\n            'data' => $data,\n            'SearchData' => $SearchData,\n            'nama_pemohon' => $step2 ? $data->nama_lengkap : null,\n            'email_pemohon' => $step2 ? $data->email : null,\n            'err' => $err,\n            'step2' => $step2,\n            'judul' => $judul,\n        ]);\n    }\n\n    public function actionFormPendirian($id = null)\n    {\n        $tahunModalKbli = '2020';\n        $listNotarisPengganti = [];\n\n        // if(!Yii::$app->request->isPost && !Yii::$app->request->isAjax) {\n        //     return Yii::$app->response->redirect('/pendirian');\n        // }\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $post = Yii::$app->request->post();\n        Yii::$app->view->title = \"Form Pendirian\";\n        // Init Data Json\n        $usaha_utama = $usaha_pendukung = $usaha_tambahan = $json_pengawas_pengurus = $json_bakum = $json_pemilik_manfaat = [];\n\n        if ($id) {\n            $data = TransaksiKoperasi::findOne($id);\n            if ($data->is_finish == -1) {\n                return Yii::$app->response->redirect(\"/pendirian/edit?id=\" . $id);\n            }\n        }\n\n        if (!$session->has('NoPesanPendirian')) {\n            return Yii::$app->response->redirect('/pendirian');\n        }\n        $no_pesan = $session->get('NoPesanPendirian');\n        $id_notaris = $user['value']['id_notaris'];\n        $dataKop = PesanNama::getByNoPesan($no_pesan, $id_notaris);\n        if ($dataKop) {\n            // Init Model\n            $model = new PendirianForm();\n\n            // Set Scenario\n            $model->scenario = 'form-pendirian';\n\n            // Set Data Model\n            $model->attributes = $dataKop->attributes;\n            $model->nama_notaris = $user['value']['nama_gelar'];\n            $model->email = null;\n            $model->is_submit = false;\n            if ($model->load(Yii::$app->request->post())) {\n\n                $model->is_notaris_pengganti = isset($post['PendirianForm']['is_notaris_pengganti']) ? 1 : 0;\n                if (!$model->is_notaris_pengganti) {\n                    $model->id_notaris_pengganti = null;\n                    $model->no_sk_notaris_pengganti = null;\n                }\n                if ($model->id_notaris_pengganti) {\n                    $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                    \n                    if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                        $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                    } else {\n                        // Handle jika data tidak ditemukan\n                        Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                        $model->id_notaris_pengganti = null;\n                        $model->no_sk_notaris_pengganti = null;\n                    }\n                }\n                // Set Json Bakum\n                $json_bakum = $this->json_bakum($post, $model);\n                if ($json_bakum) {\n                    $model->json_bakum_sekunder = json_encode($json_bakum);\n                }\n\n                // Set Json Aktifitas Usaha\n                $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n                if ($json_aktifitas_usaha) {\n                    $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n                }\n                $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n                $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n                $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n                // Set Json Pengawas Pengurus\n                $json_pengawas_pengurus = $this->json_pengawas_pengurus($post, $model);\n                if ($json_pengawas_pengurus) {\n                    $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n                }\n\n                // Set Json Pemilik Manfaat\n                $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n                if ($json_pemilik_manfaat) {\n                    $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n                }\n                if (isset($post['submit-form'])) {\n                    $model->is_submit = true;\n\n                    if (empty($model->getErrors())) {\n                        if ($model->validate()) {\n                            // Lanjut proses\n                            $id_transaksi = $model->savePendirian();\n                            if ($id_transaksi) {\n                                return $this->redirect(['/pendirian/uploaddocument', 'id' => $id_transaksi]);\n                            }\n                        }\n                    }\n                }\n            }\n            // Set Dropdown Data\n            $listJenisKop = ActionHelper::getDDListJenisKop('all');\n            $listModelKop = ActionHelper::getDDListModelKoperasi();\n            $listPola = ActionHelper::getDDListPola();\n            $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n            $listBentukKop = ActionHelper::getDDListBentukKop();\n            $listProvinsi = ActionHelper::getDDListProvinsi();\n            $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n            $listCheckbox = ActionHelper::getListCheckbox('dokumen_form_pendiran');\n            $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n            $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n            $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n            $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n\n            // set KBLI\n            $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n            $polaKopKbli = $model->m_pola_id ? $model->m_pola_id : 1; // Tiket #186604\n            $bentukKopKbli = isset(Yii::$app->request->get('KBLISearch')['bentuk']) ? Yii::$app->request->get('KBLISearch')['bentuk'] : 1;\n            $bentukKopKbli = $model->b_koperasi_id ? $model->b_koperasi_id : $bentukKopKbli;\n            $KBLISearch = new KBLIBakumSearch();\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n            // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n            $koperasi_sekunder = 0;\n            if ($model->jenis_koperasi_id == '6') {\n                if (Yii::$app->request->get('KBLISearch')) {\n                    if (isset(Yii::$app->request->get('KBLISearch')['bentuk'])) {\n                        if (Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $koperasi_sekunder = 2;\n                        }\n                    }\n                }\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id + $koperasi_sekunder]);\n            }\n\n            // Set KBLI\n            // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n            $mappingKBLIAll = MappingKBLI::find();\n            $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n            $kbli_simpan_pinjam = ['1776', '1777'];\n            $kbli_tkbm = ['1601'];\n            $kbli_jasa = ['7050'];\n\n            //Tiket #186604 >> #675530 Fix\n            //INC-AHU-112024-02343 - KBLI 64146 tidak tampil\n            //Perbaikan value kbli yang terbalik antara primer dan sekunder\n            $kbli_sp_lain_konvensional_p = ['64145', '64147', '64142', '64144', '64146', '64148', '64143']; //simpan pinjam konvensional primer\n            $kbli_sp_lain_konvensional_s = ['64145', '64147', '64142', '64144', '64146', '64148', '64141']; //simpan pinjam konvensional sekunder\n            $kbli_sp_lain_syariah_p = ['64141', '64143', '64142', '64144', '64146', '64148', '64147']; //simpan pinjam syariah primer\n            $kbli_sp_lain_syariah_s = ['64141', '64143', '64142', '64144', '64146', '64148', '64145']; //simpan pinjam syariah sekunder\n            $kbli_ex_lain_konvensional_p = ['64141', '64143', '64145', '64147', '64146', '64148', '64144']; //lainnya konvensional primer \n            $kbli_ex_lain_konvensional_s = ['64141', '64143', '64145', '64147', '64146', '64148', '64142']; //lainnya konvensional sekunder\n            $kbli_ex_lain_syariah_p = ['64141', '64143', '64145', '64147', '64142', '64144', '64148']; //lainnya syariah primer\n            $kbli_ex_lain_syariah_s = ['64141', '64143', '64145', '64147', '64142', '64144', '64146']; //lainnya syariah sekunder\n\n            if ($jenisKopKbli == '6') { //jenis simpan pinjam\n                if ($polaKopKbli == '1') {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                } else {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                }\n            } else { //jenis lainnya\n                if ($polaKopKbli == '1') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                } else {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                }\n            }\n            $KBLI_all = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5]);\n\n            if (Yii::$app->request->get('KBLIBakumSearch')) {\n\n                $searchKode = Yii::$app->request->get('KBLIBakumSearch')['judul'] ? Yii::$app->request->get('KBLIBakumSearch')['judul'] : '';\n\n                //Tiket #186604\n                //Tambah validasi Pencarian result HANYA berdasarkan bentuk, jenis, dan pola koperasi\n                if ($jenisKopKbli == '6') { //jenis simpan pinjam\n                    if ($polaKopKbli == '1') {\n                        $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                        }\n                    } else {\n                        $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                        }\n                    }\n                } else { //jenis lainnya\n                    if ($polaKopKbli == '1') {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                        }\n                    } else {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                        }\n                    }\n                }\n\n                if (!empty($searchKode)) {\n                    $KBLI->andFilterWhere(['LIKE', 'judul', $searchKode]);\n                    $KBLI->orFilterWhere(['=', 'kode', $searchKode]);\n                    $KBLI_all->andFilterWhere(['LIKE', 'judul', $searchKode]);\n                    $KBLI_all->orFilterWhere(['=', 'kode', $searchKode]);\n                }\n            }\n            $KBLIProvider = [\n                'byJenis' => new ActiveDataProvider([\n                    'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                    'pagination' => [\n                        'pageSize' => 5,\n                    ],\n                    'sort' => [\n                        'defaultOrder' => [\n                            'kode' => SORT_ASC,\n                        ],\n                    ],\n                ]),\n                'all' => new ActiveDataProvider([\n                    'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                    'pagination' => [\n                        'pageSize' => 5,\n                    ],\n                    'sort' => [\n                        'defaultOrder' => [\n                            'kode' => SORT_ASC,\n                        ],\n                    ],\n                ])\n            ];\n\n            //ambil tahun kbli\n            $tahun_kbli = null;\n            if (isset($json_aktifitas_usaha)) {\n                foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                    if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                        $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                        break;\n                    } else {\n                        if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))) > 0) {\n                            $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))[0]['tahun'];\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // Set Tampilan Awal\n            $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id, 'SEKUNDER') ? '' : 'hidden';\n            $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n            $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n            $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n            $isMerahPutih = false;\n            if (JenisKoperasi::isMerahPutih($jenisKopKbli)) {\n                $model->m_tingkat_wilayah_id = 1;\n                $model->b_koperasi_id = 1;\n                $isMerahPutih = true;\n            }\n            // var_dump($model->cb_mengerti_manfaat);exit;\n            $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n            $model->bo_exist = false;\n            $model->is_submit = false;\n            // var_dump($model->getErrors());exit;\n            return $this->render('form-pendirian', [\n                'model' => $model,\n                'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n                'listJenisKop' => $listJenisKop,\n                'listModelKop' => $listModelKop,\n                'listPola' => $listPola,\n                'listTingkatWil' => $listTingkatWil,\n                'listBentukKop' => $listBentukKop,\n                'listProvinsi' => $listProvinsi,\n                'listKabupaten' => $kabTerpilih,\n                'listKecamatan' => $kecTerpilih,\n                'listKelurahan' => $kelTerpilih,\n                'listJenisKelamin' => $listJenisKelamin,\n                'listCheckbox' => $listCheckbox,\n                'listCBMengertiManfaat' => $listCBMengertiManfaat,\n                'listCBPerpresManfaat' => $listCBPerpresManfaat,\n                'listJenisIdentitas' => $listJenisIdentitas,\n                'json_bakum' => $json_bakum,\n                'kbli_provider' => $KBLIProvider,\n                'kbli_search' => $KBLISearch,\n                'usaha_utama' => $usaha_utama,\n                'usaha_pendukung' => $usaha_pendukung,\n                'usaha_tambahan' => $usaha_tambahan,\n                'pengawas_pengurus' => $json_pengawas_pengurus,\n                'json_pemilik_manfaat' => $json_pemilik_manfaat,\n                'showBakumSekunder' => $showBakumSekunder,\n                'show_pemilik_manfaat' => $show_pemilik_manfaat,\n                'tahun_kbli' => $tahun_kbli,\n                'tahunModalKbli' => $tahunModalKbli,\n                'isMerahPutih' => $isMerahPutih\n            ]);\n        }\n        return Yii::$app->response->redirect('/pendirian');\n    }\n\n    public function actionGetNamaKop($q)\n    {\n        if (Yii::$app->request->isAjax) {\n            $arr = [];\n\n            $data = Yii::$app->db_koperasi->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi LIKE :namakop \")\n                ->bindValue(':namakop', $q . '%')\n                ->queryAll();\n\n            foreach ($data as $d) {\n                $arr[] = ['value' => $d['nama_koperasi']];\n            }\n            return json_encode($arr);\n        }\n    }\n\n    public function SaveBakumSekunder($model, $post)\n    {\n        if ($model->load($post)) {\n            // Required\n            if (!$model->nama_bakum_kop || !$model->sk_bakum_kop || !$model->npwp_bakum_kop) {\n                $model->addError('json_bakum_sekunder', \"Nama Koperasi, NPWP & Nomor SK Koperasi Tidak Boleh Kosong.\");\n            }\n            // Hanya angka\n            if (!preg_match(RegexHelper::NUMBER_ONLY, $model->npwp_bakum_kop)) {\n                $model->addError('json_bakum_sekunder', \"Kolom NPWP Wajib berupa angka.\");\n            }\n            // Cek Nama Badan Hukum Koperasi Sudah terdaftar dan memiliki SK yg benar\n            $nama_kop = $model->nama_bakum_kop ? $model->nama_bakum_kop : null;\n            // $cekKop = PesanNama::find()->where(['nama_koperasi' => $nama_kop])->one();\n            $cekKop = Yii::$app->db_koperasi->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi = :namakop \")\n                ->bindValue(':namakop', $nama_kop)\n                ->queryOne();\n\n            if (!$cekKop) {\n                $model->addError('json_bakum_sekunder', \"Nama Koperasi Tidak Terdaftar Pada Sistem.\");\n            }\n            $json = $model->json_bakum_sekunder;\n            if ($json) {\n                $json = json_decode($json, true);\n                if (!empty($json['data'])) {\n                    foreach ($json['data'] as $key => $val) {\n                        if (strtolower($model->nama_bakum_kop) == strtolower($val['nama_bakum_kop'])) {\n                            $model->addError('json_bakum_sekunder', \"'{$model->nama_bakum_kop}' Sudah Terdaftar.\");\n                            return json_encode($json);\n                        }\n                    }\n                }\n            } else {\n                $json = ['count' => 0];\n            }\n            if (!empty($model->getErrors())) {\n                return json_encode($json);\n            }\n            $file_sk = UploadedFile::getInstance($model, 'file_sk_bakum_kop');\n            // 25 FEB 2019 HAPUS UPLOAD FILE SK BAKUM SEKUNDER\n            // Comment code dibawah jika menggunakan UPLOAD SK kembali\n            $file_sk = true;\n            if ($file_sk) {\n                // $temp = ActionHelper::Upload('uploads/temp/',$file_sk);\n                $temp = true;\n                if ($temp) {\n                    $json['count']++;\n                    $json['data'][] = [\n                        'id' => null,\n                        'id_master_sekunder' => $cekKop['id_master'],\n                        'nik' => $cekKop['nik'],\n                        'nama_bakum_kop' => $model->nama_bakum_kop,\n                        'sk_bakum_kop' => $model->sk_bakum_kop,\n                        'npwp_bakum_kop' => $model->npwp_bakum_kop,\n                        'file_sk_bakum_kop' => '', //$temp,\n                    ];\n                    $model->nama_bakum_kop = null;\n                    $model->sk_bakum_kop = null;\n                    $model->file_sk_bakum_kop = null;\n                    $model->npwp_bakum_kop = null;\n                }\n            }\n            return json_encode($json);\n        }\n    }\n\n\n\n    private function uploadAndSave($id, TPendirianDokumen &$model)\n    {\n\n        $model->akta = UploadedFile::getInstance($model, 'akta');\n        $model->berita_acara = UploadedFile::getInstance($model, 'berita_acara');\n        $model->surat_rekomendasi = UploadedFile::getInstance($model, 'surat_rekomendasi');\n        $model->hasil_musyawarah_desa = UploadedFile::getInstance($model, 'hasil_musyawarah_desa');\n\n        // Validate mimetype files\n        $model->akta = Helpers::validateFiles($model->akta, 'pdf');\n        $model->berita_acara = Helpers::validateFiles($model->berita_acara, 'pdf');\n\n        if ($model->surat_rekomendasi) {\n            $model->surat_rekomendasi = Helpers::validateFiles($model->surat_rekomendasi, 'pdf');\n        }\n\n        if ($model->hasil_musyawarah_desa) {\n            $model->hasil_musyawarah_desa = Helpers::validateFiles($model->hasil_musyawarah_desa, 'pdf');\n        }\n\n        if (!$model->validate()) {\n            return false;\n        }\n\n        $rawQuery = $model->upload($id);\n\n        $pass = true;\n\n        if ($rawQuery) {\n\n            foreach ($rawQuery as $key => $query) {\n\n                if (Yii::$app->db_koperasi->createCommand($query)->execute()) {\n\n                    $pass = true;\n                } else {\n\n                    return false;\n                }\n            }\n        } else {\n\n            return false;\n        }\n\n        return $pass;\n    }\n\n    public function checkDocumentUpload($id)\n    {\n\n        $data = TPendirianDokumen::find()->where('transaction_id = ' . $id . ' and (type = 1 or type = 2 or type = 3 or type = 7)')->all();\n\n        if (!empty($data)) {\n\n            Yii::$app->db_koperasi->createCommand('\n                DELETE FROM kop_t_pendirian_dokumen \n                WHERE transaction_id = ' . $id . ' and (type = 1 or type = 2 or type = 3 or type = 7)\n            ')->execute();\n\n            foreach ($data as $detail) {\n\n                if (file_exists(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name)) {\n\n                    unlink(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name);\n                }\n            }\n        }\n    }\n\n    // uploading document\n    public function actionUploaddocument()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n        $data = TransaksiKoperasi::getPreviewData($id);\n\n        if (empty($id) || $data['is_finish'] !== \"-1\") {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $model = new TPendirianDokumen();\n        $model->jenis_koperasi = $data['jenis_koperasi'];\n        $model->pola_pengelolaan = $data['pola_pengelolaan'];\n\n        if (Yii::$app->request->isPost) {\n\n            $this->checkDocumentUpload($id);\n\n            $done = $this->uploadAndSave($id, $model);\n\n            if ($done) {\n                $done = DisclaimerHelper::generateValues('disclaimer', 'upload_document_pendirian', $data['koperasi_id'], $data['t_pesan_nama_id'])->save();\n\n                $this->redirect('/pendirian/preview?id=' . $id);\n            }\n        }\n\n        $disclaimer = new Disclaimer();\n        $disclaimer = $disclaimer->find()->where(['parent' => 'upload_document_pendirian'])->all();\n\n        return $this->render('uploadDocument', [\n            'id' => $id,\n            'model' => $model,\n            'data' => $data,\n            'disclaimer' => $disclaimer\n        ]);\n    }\n\n    public function actionPreview($document_title = \"\")\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $data = TransaksiKoperasi::getPreviewData($id);\n        $data['isQuestionnaire'] = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        if (isset($data['is_finish'])) {\n\n            if ((empty($id) || $data['is_finish'] == \"1\")) {\n\n                // if ( Yii::$app->user->identity->username !== \"notaris-sabh\" ) {\n\n                throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n                // }\n            }\n\n            $data['confirmationOnly'] = false;\n            $data['isAdmin'] = false;\n\n            if ($data['is_finish'] == \"0\") {\n\n                // Yii::$app->session->setFlash('confirmationOnly', 'yes');\n                $data['confirmationOnly'] = true;\n            } else if (Yii::$app->user->identity->username == \"notaris-sabh\") {\n                $data['isAdmin'] = true;\n            }\n\n            // var_dump( $data );\n\n            if (!empty($document_title)) {\n\n                $data['document_title'] = $document_title;\n            }\n\n            if ($data['model_koperasi'] == null) {\n                $data['model_koperasi'] = '0';\n            }\n\n            $data['model_koperasi'] = ActionHelper::getDDListModelKoperasi($data['model_koperasi']);\n            if ($cekTrans->id_notaris_pengganti) {\n                $data['nama_notaris_pengganti'] = NotariatHelper::getNotarisPenggantiNameById($cekTrans->id_notaris_pengganti, $id_notaris);\n            } else {\n                $data['nama_notaris_pengganti'] = NULL;\n            }\n\n            return $this->render('preview', $data);\n        } else {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n\n    public function actionApprovetransaction()\n    {\n\n        $post = Yii::$app->request->post();\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        \n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        $kuisionerForm = !empty($post['KuisionerForm']) ? $post['KuisionerForm'] : null;\n        $masterLembagaKuisionerForm = !empty($post['MasterLembagaKuesionerForm']) ? $post['MasterLembagaKuesionerForm'] : null;\n        $postKuisioner = array('KuisionerForm' => $kuisionerForm, 'MasterLembagaKuesionerForm' => $masterLembagaKuisionerForm);\n        $isQuestionnaire = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        // Prevent jika sudah konfirmasi\n        if ($transaksi->is_finish == 1) {\n            return true;\n        }\n\n        if ($transaksi->is_finish == -1) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_pendirian', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        } else {\n            $transaksi->is_finish = 1;\n\n            // save it to master transaction\n            $SKins = new SK();\n            $SKins->t_koperasi_id = $transaksi->id;\n            $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPendirian();\n\n            $SKins->save();\n\n            $mTrans = new MasterTransaction();\n            $mTrans->id_transaksi = $transaksi->id;\n            $mTrans->id_sk = $SKins->id;\n            $mTrans->is_deleted = !empty($transaksi->deleted_date) ? 1 : 0;\n            $mTrans->status = 1;\n\n            $mTrans->save();\n\n            $transaksi->id_master = $mTrans->id;\n            $transaksi->tanggal_jangka_waktu = !empty($transaksi->jumlah_jangka_waktu) ? date(\"Y-m-d\", strtotime(date(\"Y-m-d\") . \" + \" . $transaksi->jumlah_jangka_waktu . \" year\")) : null;\n\n            // add task to cron job\n            $command = new Command();\n            $command->task = $id;\n            $command->command_type = \"ODS_API_OUTCOMING\";\n            //takeout hit cron\n            $command->save();\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n\n        $resSave = $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'id_master', 'tanggal_jangka_waktu'));\n\n        if ($transaksi->is_finish == 1) {\n            $bo = BoHelper::sendBoData($id, $postKuisioner);\n        }\n\n        if ($isQuestionnaire) {\n            return json_encode(['isConfirmed' => $resSave, 'questionnaire' => $bo]);\n        }\n\n        return $resSave;\n    }\n\n    public function actionListtransaction()\n    {\n\n        Yii::$app->view->title = \"List Transaksi\";\n        $dataNotaris = Yii::$app->session->get('data_notaris');\n        $id_notaris = $dataNotaris['value']['id_notaris'];\n\n        $query = TransaksiKoperasi::find()->where(['ahu_notaris_id' => $id_notaris, 'jenis_transaksi_id' => 2])->andWhere(['<>', 'is_finish', -1])->orderBy(['created_date' => SORT_DESC]);\n\n        $get = Yii::$app->getRequest()->getQueryParam('TransaksiKoperasi');\n\n        if (!empty($get)) {\n\n            if (!empty($get['nomor_transaksi'])) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $get['nomor_transaksi']]);\n            }\n\n            if (!empty($get['jenis_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if (!empty($get['nama_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $get['nama_koperasi']]);\n            }\n\n            if (!empty($get['nik'])) {\n\n                $query->andFilterWhere(['like', 'nik', $get['nik']]);\n            }\n\n            if (Yii::$app->getRequest()->getQueryParam('created_date')) {\n\n                $date = Yii::$app->getRequest()->getQueryParam('created_date');\n\n                $query->andFilterWhere(['between', 'created_date', date('Y-m-d', strtotime($date)), date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))]);\n            }\n        }\n\n        if (Yii::$app->getRequest()->getQueryParam('rentang_awal')) {\n\n            $date_awal = Yii::$app->getRequest()->getQueryParam('rentang_awal');\n            $date_akhir = Yii::$app->getRequest()->getQueryParam('rentang_akhir');\n\n            $query->andFilterWhere(['between', 'DATE(created_date)', date('Y-m-d', strtotime($date_awal)), date('Y-m-d', strtotime($date_akhir))]);\n        }\n\n        $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ]\n        ]);\n\n        return $this->render('listTransaction', [\n            'model' => new TransaksiKoperasi(),\n            'provider' => $provider\n        ]);\n    }\n\n    public function actionConfirmation()\n    {\n\n        return $this->actionPreview();\n    }\n\n    public function json_bakum($post, $model)\n    {\n        if (isset($post['SaveBakumSekunder'])) {\n            $model->json_bakum_sekunder = $this->SaveBakumSekunder($model, $post);\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n\n        if (isset($post['EditBakumSekunder'])) {\n            // Edit Json Bakum\n            $model->json_bakum_sekunder = $this->EditBakumSekunder($model, $post);\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n\n        if (isset($post['HapusBakumSekunder'])) {\n            $model->json_bakum_sekunder = $this->HapusBakumSekunder($model, $post);\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n        if ($model->json_bakum_sekunder) {\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n    }\n\n    public function EditBakumSekunder($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_bakum_sekunder;\n            if (!$json) {\n                return null;\n            }\n            $json = json_decode($json, true);\n\n            $nama_kop = $model->nama_bakum_kop ? $model->nama_bakum_kop : null;\n            $cekKop = Yii::$app->db_koperasi->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi = :namakop \")\n                ->bindValue(':namakop', $nama_kop)\n                ->queryOne();\n\n            $selected_data = $post['EditBakumSekunder'];\n            $json['data'][$selected_data]['id_master_sekuder'] = $cekKop['id_master'];\n            $json['data'][$selected_data]['nik'] = $cekKop['nik'];\n            $json['data'][$selected_data]['nama_bakum_kop'] = $model->nama_bakum_kop;\n            $json['data'][$selected_data]['sk_bakum_kop'] = $model->sk_bakum_kop;\n            $json['data'][$selected_data]['npwp_bakum_kop'] = $model->npwp_bakum_kop;\n\n            $file_sk = UploadedFile::getInstance($model, 'file_sk_bakum_kop');\n            if ($file_sk) {\n                // unlink($model->hidden_file_sk_bakum_kop);\n                $json['data'][$selected_data]['file_sk_bakum_kop'] = ActionHelper::Upload('uploads/temp/', $file_sk);\n            }\n            return json_encode($json);\n        }\n    }\n\n    public function HapusBakumSekunder($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_bakum_sekunder;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusBakumSekunder'];\n            $json = json_decode($json, true);\n            // unlink($json['data'][$selected_data]['file_sk_bakum_kop']);\n            unset($json['data'][$selected_data]);\n            $json['count']--;\n            if ($json['count'] <= 0) {\n                return null;\n            }\n            // var_dump($json);exit;\n            return json_encode($json);\n        }\n    }\n\n\n    public function actionGetChildWilayah($id, $tipe)\n    {\n        if (!$id || !Yii::$app->request->isAjax) {\n            return json_encode([['id' => '0', 'nama' => 'Tidak Ditemukan']]);\n        }\n\n        $data = Wilayah::getChildWilayah($id, $tipe);\n\n        if (!$data) {\n            return json_encode([['id' => '0', 'nama' => 'Tidak Ditemukan']]);\n        }\n\n        $arr = [];\n        foreach ($data as $d) {\n            if ($tipe == 'Kelurahan') {\n                if ($d['ID_WIL'] != '' && $d['ID_WIL'] != 0 && $d['ID_WIL'] != null) {\n                    $arr[] = [\n                        'id' => $d['ID_WIL'],\n                        'nama' => $d['NM_KELURAHAN'],\n                    ];\n                    continue;\n                }\n            }\n\n            if (!empty($d['WILAYAH_ID'])) {\n                $arr[] = [\n                    'id' => $d['WILAYAH_ID'],\n                    'nama' => $d['NAMA'],\n                ];\n            }\n        }\n\n        return json_encode($arr);\n    }\n\n    public function json_aktifitas_usaha($post, $model)\n    {\n        if (isset($post['SaveKBLI'])) {\n            $model->json_aktifitas_usaha = $this->SaveKBLI($model, $post);\n            return json_decode($model->json_aktifitas_usaha, true);\n        }\n        // if(isset($post['EditKBLI'])) {\n        //     // Edit Json Bakum\n        //     $model->json_aktifitas_usaha = $this->EditKBLI($model,$post);\n        //     return json_decode($model->json_aktifitas_usaha,true);\n        // }\n\n        if (isset($post['HapusKBLI'])) {\n            $model->json_aktifitas_usaha = $this->HapusKBLI($model, $post);\n            return json_decode($model->json_aktifitas_usaha, true);\n        }\n        if ($model->json_aktifitas_usaha) {\n            return json_decode($model->json_aktifitas_usaha, true);\n        }\n    }\n\n    public function saveKBLI($model, $post)\n    {\n        // Set Json / Init Json\n        if ($model->load($post)) {\n            $json = $model->json_aktifitas_usaha;\n            if ($json) {\n                $json = json_decode($json, true);\n                $json_utama = $json['data']['utama'];\n                $json_pendukung = $json['data']['pendukung'];\n                $json_tambahan = $json['data']['tambahan'];\n            } else {\n                $json = [\n                    'data' => [\n                        'utama' => [],\n                        'pendukung' => [],\n                        'tambahan' => [],\n                    ],\n                ];\n            }\n\n            // Select Data Json Aktifitas Usaha\n            if ($post['JenisUsaha'] == 'UsahaUtama') {\n                $jsonData = 'utama';\n            } else if ($post['JenisUsaha'] == 'UsahaPendukung') {\n                $jsonData = 'pendukung';\n            } else if ($post['JenisUsaha'] == 'UsahaTambahan') {\n                $jsonData = 'tambahan';\n            } else {\n                return null;\n            }\n\n            $dataKBLI = KBLIBakum::find()->where(['id_kbli' => $post['cek_kbli']])->all();\n            if (!$dataKBLI) {\n                return null;\n            }\n            $inputPola = ArrayHelper::getColumn(MappingKBLI::find()->where(['kode' => $post['cek_kbli']])->andWhere(['NOT', ['m_pola_id' => null]])->all(), 'm_pola_id');\n            // var_dump($inputPola);exit;\n            if ($inputPola) {\n                $listPolaKBLI = $model->getPolaKBLI();\n                if ($listPolaKBLI) {\n                    foreach ($inputPola as $d) {\n                        if (!in_array($d, $listPolaKBLI)) {\n                            $model->addError('json_aktifitas_usaha', 'Hanya Dapat Memilih Satu Jenis Pola Pengelolaan KBLI');\n                            return json_encode($json);\n                        }\n                    }\n                }\n            }\n            foreach ($dataKBLI as $d) {\n                $json['data'][$jsonData][$d->id_kbli] = [\n                    'id' => null,\n                    'kode' => $d->kode,\n                    'kategori' => $d->kategori,\n                    'judul' => $d->judul,\n                    'uraian' => $d->uraian,\n                ];\n            }\n            return json_encode($json);\n        }\n    }\n\n    public function HapusKBLI($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_aktifitas_usaha;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusKBLI'];\n            $json = json_decode($json, true);\n\n            // Select Data Json Aktifitas Usaha\n            if ($post['JenisUsaha'] == 'UsahaUtama') {\n                $jsonData = 'utama';\n            } else if ($post['JenisUsaha'] == 'UsahaPendukung') {\n                $jsonData = 'pendukung';\n            } else if ($post['JenisUsaha'] == 'UsahaTambahan') {\n                $jsonData = 'tambahan';\n            } else {\n                return null;\n            }\n            // return null;\n            unset($json['data'][$jsonData][$selected_data]);\n            // var_dump($json);exit;\n            return json_encode($json);\n        }\n    }\n\n    public function json_pengawas_pengurus($post, $model)\n    {\n        if (isset($post['SavePengawasPengurus'])) {\n            $model->json_pengawas_pengurus = $this->SavePengawasPengurus($model, $post);\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n        if (isset($post['EditPengawasPengurus'])) {\n            // Edit Json Bakum\n            $model->json_pengawas_pengurus = $this->EditPengawasPengurus($model, $post);\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n\n        if (isset($post['HapusPengawasPengurus'])) {\n            $model->json_pengawas_pengurus = $this->HapusPengawasPengurus($model, $post);\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n\n        if ($model->json_pengawas_pengurus) {\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n    }\n\n    public function SavePengawasPengurus($model, $post)\n    {\n        if ($model->load($post)) {\n            if (!$model->nik_anggota || !$model->nama_anggota || !$model->jenis_kelamin_anggota || !$model->jabatan_anggota || !$model->no_hp_anggota) {\n                $model->addError('json_pengawas_pengurus', \"Kolom NIK, Nama, Jenis Kelamin, No HP dan Jabatan Wajib Di isi.\");\n            }\n            if (!preg_match(RegexHelper::NUMBER_ONLY, $model->npwp_anggota) || !preg_match(RegexHelper::NUMBER_ONLY, $model->no_hp_anggota) || !preg_match(RegexHelper::NUMBER_ONLY, $model->nik_anggota)) {\n                $model->addError('json_pengawas_pengurus', \"Kolom NIK, NPWP, No HP Wajib berupa angka.\");\n            }\n            $json = $model->json_pengawas_pengurus;\n            if ($json) {\n                $json = json_decode($json, true);\n                if (isset($json['data'])) {\n                    foreach ($json['data'] as $key => $val) {\n                        if (strtolower($model->nik_anggota) == strtolower($val['nik'])) {\n                            $model->addError('json_pengawas_pengurus', \"NIK dengan nomor '{$model->nik_anggota}' Sudah Terdaftar.\");\n                            return json_encode($json);\n                        }\n                    }\n                }\n            } else {\n                $json = ['count' => 0];\n            }\n            if (!empty($model->getErrors())) {\n                return json_encode($json);\n            }\n            $json['count']++;\n            $json['data'][] = [\n                'id' => null,\n                'status' => $model->status_anggota,\n                'nama_status' => StatusPengurus::getNama($model->status_anggota),\n                'nik' => $model->nik_anggota,\n                'nama' => $model->nama_anggota,\n                'jenis_kelamin' => $model->jenis_kelamin_anggota,\n                'jabatan' => $model->jabatan_anggota,\n                'npwp' => $model->npwp_anggota,\n                'no_hp' => $model->no_hp_anggota,\n            ];\n\n            $model->nik_anggota = $model->nama_anggota = $model->jenis_kelamin_anggota = $model->jabatan_anggota = $model->npwp_anggota = $model->no_hp_anggota = null;\n            return json_encode($json);\n        }\n    }\n\n    public function EditPengawasPengurus($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pengawas_pengurus;\n            if (!$json) {\n                return null;\n            }\n            $json = json_decode($json, true);\n\n            $selected_data = $post['EditPengawasPengurus'];\n            $json['data'][$selected_data]['status'] = $model->status_anggota;\n            $json['data'][$selected_data]['nama_status'] = StatusPengurus::getNama($model->status_anggota);\n            $json['data'][$selected_data]['nik'] = $model->nik_anggota;\n            $json['data'][$selected_data]['nama'] = $model->nama_anggota;\n            $json['data'][$selected_data]['jenis_kelamin'] = $model->jenis_kelamin_anggota;\n            $json['data'][$selected_data]['jabatan'] = $model->jabatan_anggota;\n            $json['data'][$selected_data]['npwp'] = $model->npwp_anggota;\n            $json['data'][$selected_data]['no_hp'] = $model->no_hp_anggota;\n\n            return json_encode($json);\n        }\n    }\n\n    public function HapusPengawasPengurus($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pengawas_pengurus;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusPengawasPengurus'];\n            $json = json_decode($json, true);\n\n            unset($json['data'][$selected_data]);\n            $json['count']--;\n            if ($json['count'] <= 0) {\n                return null;\n            }\n\n            return json_encode($json);\n        }\n    }\n\n    public function actionDownloadsk()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n        $session = Yii::$app->session;\n        $user_session = $session->get('data_notaris');\n        $id_notaris = $user_session['value']['id_notaris'];\n\n        $sk = SK::find()->where(['t_koperasi_id' => $id])->one();\n        // $number = Numbering::getCounter(['id' => 1])->generateSKPendirian();\n        $kodeQrCode = QrCodeHelper::generateQrCodeHash($sk->id);\n        $qrCodePath = QrCodeHelper::generateQrCodeFile($kodeQrCode);\n        $number = $sk->no_sk_koperasi;\n        $number_tanggal = $sk->created_date;\n        $namaKoperasi = $transaksi->full_nama;\n        $isMerahPutih = $transaksi->isMerahPutih();\n        $tanggalAkta = FormatDate::formatDateIndonesia(date('Y-m-d', strtotime($transaksi->tanggal_akta)));\n        $nomorAkta = $transaksi->akta_koperasi;\n        $kabupaten = WilayahNotariat::find()->where(['wilayah_id' => $transaksi->kab_kota_id])->one()->NAMA;\n        $namaNotaris = $transaksi->nama_notaris;\n        $kedudukanNotaris = $transaksi->kedudukan_notaris;\n        //Jika di session ada kedudukan notaris, maka dicek apakah berbeda atau tidak, jika beda ganti value di kedudukan_notaris tabel t_kop \n        if (!empty($user_session['value']['id_kedudukan_profile'])) {\n            if (Wilayah::getNama($user_session['value']['id_kedudukan_profile']) == $transaksi->kedudukan_notaris) {\n                $kedudukanNotaris = $transaksi->kedudukan_notaris;\n            } else {\n                $kedudukanNotaris = Wilayah::getNama($user_session['value']['id_kedudukan_profile']);\n                $transaksi->kedudukan_notaris = $kedudukanNotaris;\n                $transaksi->save(false);\n            }\n        }\n        $isNotarisPengganti = false;\n        $namaNotarisPengganti = \"\";\n        if ($transaksi->id_notaris_pengganti != NULL) {\n            $isNotarisPengganti = true;\n            $namaNotarisPengganti = NotariatHelper::getNotarisPenggantiNameById( $transaksi->id_notaris_pengganti, $id_notaris);\n        }\n\n        $mpdf = new Mpdf(['format' => 'folio']);\n        $mpdf->SetImportUse();\n\n        $mpdf->AddPage();\n\n        $mpdf->SetDefaultFont('Arial');\n        $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n        $tplid = $mpdf->ImportPage($template);\n        $actualsize = $mpdf->UseTemplate($tplid);\n\n        header('Content-Type: application/pdf');\n\n        if ($isMerahPutih) {\n            $html = $this->renderPartial('sk_pendirian_merah_putih', [\n                'dataTransaksi' => $transaksi,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $number,\n                'number_tanggal' => $number_tanggal,\n                'tanggal_pendirian' => $transaksi->created_date,\n                'namaKoperasi' => $namaKoperasi,\n                'tanggalAkta' => $tanggalAkta,\n                'nomorAkta' => $nomorAkta,\n                'kabupaten' => $kabupaten,\n                'namaNotaris' => $namaNotaris,\n                'kedudukanNotaris' => $kedudukanNotaris,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n        } else {\n            $html = $this->renderPartial('sk_pendirian', [\n                'dataTransaksi' => $transaksi,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $number,\n                'number_tanggal' => $number_tanggal,\n                'tanggal_pendirian' => $transaksi->created_date,\n                'namaKoperasi' => $namaKoperasi,\n                'tanggalAkta' => $tanggalAkta,\n                'nomorAkta' => $nomorAkta,\n                'kabupaten' => $kabupaten,\n                'namaNotaris' => $namaNotaris,\n                'kedudukanNotaris' => $kedudukanNotaris,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n        }\n\n\n        $html = Helpers::ttdReplacement($html, $number_tanggal);\n\n        $html = Helpers::replaceMenkumham($html, $number_tanggal);\n\n        $mpdf->WriteHTML($html);\n        $mpdf->Output('pendirian_' . $namaKoperasi . '.pdf', 'I');\n        exit;\n    }\n    public function actionEdit($id)\n    {\n        $tahunModalKbli = 2020;\n\n        if (!$id) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        // Cek Jika Yang Mengedit adalah notaris yang bertanggung jawab\n        $notaris = Yii::$app->session->get('data_notaris');\n        $id_notaris = $notaris['value']['id_notaris'];\n        $data = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n\n        if (!$data) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        // Tidak Dapat Edit Data Jika Sudah Selesai Transaksi\n        if ($data->is_finish == 1) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        $model = new PendirianForm();\n        Yii::$app->view->title = \"Edit Transaksi\";\n        $model->scenario = 'edit-pendirian';\n        $model->id_trans = $id;\n        $arrayChkboxPilih = StatementDisclaimer::getTelahCeklisAll('dokumen_form_pendiran', $id);\n\n        if (Yii::$app->request->isPost) {\n            $model->load(Yii::$app->request->post());\n            $post = Yii::$app->request->post();\n\n            $model->is_notaris_pengganti = isset($post['PendirianForm']['is_notaris_pengganti']) ? 1 : 0;\n            if ($model->is_notaris_pengganti) {\n                $model->id_notaris_pengganti = isset($post['PendirianForm']['id_notaris_pengganti']) ? $post['PendirianForm']['id_notaris_pengganti'] : null;\n                $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                \n                if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                    $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                } else {\n                    // Handle jika data tidak ditemukan\n                    Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                }\n            } else {\n                $model->no_sk_notaris_pengganti = null;\n                $model->id_notaris_pengganti    = null;\n            }\n            // var_dump($post);exit;\n            // Set Json Bakum\n            $json_bakum = $this->json_bakum($post, $model);\n            if ($json_bakum) {\n                $model->json_bakum_sekunder = json_encode($json_bakum);\n            }\n\n            // Set Json Aktifitas Usaha\n            $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n            if ($json_aktifitas_usaha) {\n                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n            }\n            $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n            $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n            $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n            // Set Json Pengawas Pengurus\n            $json_pengawas_pengurus = $this->json_pengawas_pengurus($post, $model);\n            if ($json_pengawas_pengurus) {\n                $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n            }\n\n            // Set Json Pemilik Manfaat\n            $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n            if ($json_pemilik_manfaat) {\n                $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n            }\n\n            if (isset($post['submit-form'])) {\n                if ($model->validate()) {\n                    $sukses = $model->savePerbaikanData();\n                    if ($sukses) {\n                        // redirect after edit data\n                        $targetUrl = TransaksiKoperasi::getStatusTrans($id) == '-1' ? '/pendirian/uploaddocument?id=' . $id : '/pendirian/listtransaction';\n                        return Yii::$app->response->redirect($targetUrl);\n                    }\n                }\n            }\n        } else {\n            $sukses = $model->setEditData($id);\n            if (!$sukses) {\n                throw new NotFoundHttpException();\n            }\n        }\n\n\n        $listModelKop = ActionHelper::getDDListModelKoperasi();\n        $listJenisKop = ActionHelper::getDDListJenisKop('all');\n        $listPola = ActionHelper::getDDListPola();\n        $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n        $listBentukKop = ActionHelper::getDDListBentukKop();\n        $listProvinsi = ActionHelper::getDDListProvinsi();\n        $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n        $listCheckbox = ActionHelper::getListCheckbox('dokumen_form_pendiran');\n        $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n        $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n        $listJenisIdentitas = ActionHelper::getListJenisIdentitas();\n        $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n        // set KBLI\n        $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n        $KBLISearch = new KBLIBakumSearch();\n        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n        // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n        if ($model->jenis_koperasi_id == '6') {\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id]);\n        }\n\n        // Set KBLI\n        // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        $kbli_simpan_pinjam = ['1776', '1777'];\n        $kbli_tkbm = ['1601'];\n\n        if ($jenisKopKbli == '4') {\n            $KBLI = KBLIBakum::find()->where(['not in', 'id_kbli', $kbli_simpan_pinjam])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n            $KBLI_all = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5]);\n        } else if ($jenisKopKbli == '6') {\n            $KBLI = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLI->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n        } else {\n            $KBLI = KBLIBakum::find()->where(['not in', 'id_kbli', array_merge($kbli_simpan_pinjam, $kbli_tkbm)])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n            $KBLI_all = KBLIBakum::find()->where(['not in', 'id_kbli', $kbli_tkbm])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n        }\n\n        if (Yii::$app->request->get('KBLIBakumSearch')) {\n            $KBLI->andFilterWhere(['LIKE', 'judul', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n            $KBLI->orFilterWhere(['=', 'kode', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n            $KBLI_all->andFilterWhere(['LIKE', 'judul', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n            $KBLI_all->orFilterWhere(['=', 'kode', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n        }\n        $KBLIProvider = [\n            'byJenis' => new ActiveDataProvider([\n                'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => '2020']),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ]),\n            'all' => new ActiveDataProvider([\n                'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => '2020']),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ])\n        ];\n        $json_bakum = json_decode($model->json_bakum_sekunder, true);\n\n        $json_pengawas_pengurus = json_decode($model->json_pengawas_pengurus, true);\n\n        $json_aktifitas_usaha = json_decode($model->json_aktifitas_usaha, true);\n        $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n        $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n        $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n        $json_pemilik_manfaat = json_decode($model->json_pemilik_manfaat, true);\n\n        if (isset($json_pemilik_manfaat['data'])) {\n            $model->cb_mengerti_manfaat = true;\n            $model->cb_perpres_manfaat = ['22', '23'];\n        }\n\n        // Set Tampilan Awal\n        $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id, 'SEKUNDER') ? '' : 'hidden';\n        $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n        $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n        $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n        $model->is_submit = false;\n        $model->dokumen_form_pendiran = $arrayChkboxPilih;\n        $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n        $isMerahPutih = false;\n        if (JenisKoperasi::isMerahPutih($jenisKopKbli)) {\n            $model->m_tingkat_wilayah_id = 1;\n            $model->b_koperasi_id = 1;\n            $isMerahPutih = true;\n        }\n        //ambil tahun kbli\n        $tahun_kbli = null;\n        if (isset($json_aktifitas_usaha)) {\n            foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                    $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                    break;\n                } else {\n                    if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))) > 0) {\n                        $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))[0]['tahun'];\n                        break;\n                    }\n                }\n            }\n        }\n\n        return $this->render('form-pendirian', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            'listModelKop' => $listModelKop,\n            'listPola' => $listPola,\n            'listTingkatWil' => $listTingkatWil,\n            'listBentukKop' => $listBentukKop,\n            'listProvinsi' => $listProvinsi,\n            'listKabupaten' => $kabTerpilih,\n            'listKecamatan' => $kecTerpilih,\n            'listKelurahan' => $kelTerpilih,\n            'listJenisKelamin' => $listJenisKelamin,\n            'listCheckbox' => $listCheckbox,\n            'listCBMengertiManfaat' => $listCBMengertiManfaat,\n            'listCBPerpresManfaat' => $listCBPerpresManfaat,\n            'listJenisIdentitas' => $listJenisIdentitas,\n            'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n            'json_bakum' => $json_bakum,\n            'json_pemilik_manfaat' => $json_pemilik_manfaat,\n            'kbli_provider' => $KBLIProvider,\n            'kbli_search' => $KBLISearch,\n            'usaha_utama' => $usaha_utama,\n            'usaha_pendukung' => $usaha_pendukung,\n            'usaha_tambahan' => $usaha_tambahan,\n            'pengawas_pengurus' => $json_pengawas_pengurus,\n            'showBakumSekunder' => $showBakumSekunder,\n            'show_pemilik_manfaat' => $show_pemilik_manfaat,\n            'tahun_kbli' => $tahun_kbli,\n            'tahunModalKbli' => $tahunModalKbli,\n            'isMerahPutih' => $isMerahPutih\n        ]);\n    }\n\n    public function json_pemilik_manfaat($post, $model)\n    {\n        if (isset($post['SavePemilikManfaat'])) {\n            $model->json_pemilik_manfaat = $this->SavePemilikManfaat($model, $post);\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n        if (isset($post['EditPemilikManfaat'])) {\n            // Edit Json Bakum\n            $model->json_pemilik_manfaat = $this->EditPemilikManfaat($model, $post);\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n\n        if (isset($post['HapusPemilikManfaat'])) {\n            $model->json_pemilik_manfaat = $this->HapusPemilikManfaat($model, $post);\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n\n        if ($model->json_pemilik_manfaat) {\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n    }\n\n    public function SavePemilikManfaat($model, $post)\n    {\n        if ($model->load($post)) {\n            if (!$model->nama_bo || is_null($model->jenis_identitas_bo) || !$model->no_identitas_bo || !$model->tanggal_lahir_bo || !$model->alamat_bo || is_null($model->kewarganegaraan_bo) || !$model->npwp_bo) {\n                $model->addError('json_pemilik_manfaat', \"Kolom Nama, Jenis Identitas, No Identitas, Tanggal Lahir, Alamat Bo, Kewarganegaraan dan NPWP Wajib Di isi.\");\n            }\n            if (!preg_match(RegexHelper::NUMBER_ONLY, $model->npwp_bo) || !preg_match(RegexHelper::NUMBER_ONLY, $model->no_identitas_bo)) {\n                $model->addError('json_pemilik_manfaat', \"Kolom NPWP dan No Identitas Wajib berupa angka.\");\n            }\n            $json = $model->json_pemilik_manfaat;\n            if ($json) {\n                $json = json_decode($json, true);\n                if (isset($json['data'])) {\n                    foreach ($json['data'] as $key => $val) {\n                        if (strtolower($model->no_identitas_bo) == strtolower($val['no_identitas']) && $model->jenis_identitas_bo == $val['jenis_identitas']) {\n                            $model->addError('json_pemilik_manfaat', \"{$val['nama_jenis_identitas']} dengan nomor '{$model->no_identitas_bo}' Sudah Terdaftar.\");\n                            return json_encode($json);\n                        }\n                    }\n                }\n            } else {\n                $json = ['count' => 0];\n            }\n            if (!empty($model->getErrors())) {\n                return json_encode($json);\n            }\n\n            $json['count']++;\n            $json['data'][] = [\n                'id' => null,\n                'nama' => $model->nama_bo,\n                'jenis_identitas' => $model->jenis_identitas_bo,\n                'nama_jenis_identitas' => JenisIdentitas::getNama($model->jenis_identitas_bo),\n                'no_identitas' => $model->no_identitas_bo,\n                'tempat_lahir' => $model->tempat_lahir_bo,\n                'tanggal_lahir' => $model->tanggal_lahir_bo,\n                'alamat' => $model->alamat_bo,\n                'kewarganegaraan' => $model->kewarganegaraan_bo,\n                'nama_kewarganegaraan' => $model->kewarganegaraan_bo == '0' ? 'WNA' : 'WNI',\n                'npwp' => $model->npwp_bo,\n                'hubungan' => $model->hubungan_bo,\n                'cbox' => [\n                        'cb_modal1' => isset($post['cb_modal1']) ? true : false,\n                        'cb_modal2' => isset($post['cb_modal2']) ? true : false,\n                        'cb_modal3' => isset($post['cb_modal3']) ? true : false,\n                        'cb_modal4' => isset($post['cb_modal4']) ? true : false,\n                        'cb_modal5' => isset($post['cb_modal5']) ? true : false,\n                        'cb_modal_bawah' => isset($post['cb_modal_bawah']) ? true : false,\n                    ]\n            ];\n\n            $model->nama_bo = $model->no_identitas_bo = $model->jenis_identitas_bo = $model->tempat_lahir_bo = $model->tanggal_lahir_bo = $model->alamat_bo = $model->kewarganegaraan_bo = $model->npwp_bo = $model->hubungan_bo = null;\n            return json_encode($json);\n        }\n    }\n\n    public function EditPemilikManfaat($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pemilik_manfaat;\n            if (!$json) {\n                return null;\n            }\n            $json = json_decode($json, true);\n\n            $selected_data = $post['EditPemilikManfaat'];\n            $json['data'][$selected_data]['nama'] = $model->nama_bo;\n            $json['data'][$selected_data]['jenis_identitas'] = $model->jenis_identitas_bo;\n            $json['data'][$selected_data]['nama_jenis_identitas'] = JenisIdentitas::getNama($model->jenis_identitas_bo);\n            $json['data'][$selected_data]['no_identitas'] = $model->no_identitas_bo;\n            $json['data'][$selected_data]['tempat_lahir'] = $model->tempat_lahir_bo;\n            $json['data'][$selected_data]['tanggal_lahir'] = $model->tanggal_lahir_bo;\n            $json['data'][$selected_data]['alamat'] = $model->alamat_bo;\n            $json['data'][$selected_data]['kewarganegaraan'] = $model->kewarganegaraan_bo;\n            $json['data'][$selected_data]['nama_kewarganegaraan'] = $model->kewarganegaraan_bo == '0' ? 'WNA' : 'WNI';\n            $json['data'][$selected_data]['npwp'] = $model->npwp_bo;\n            $json['data'][$selected_data]['hubungan'] = $model->hubungan_bo;\n\n            return json_encode($json);\n        }\n    }\n\n    public function HapusPemilikManfaat($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pemilik_manfaat;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusPemilikManfaat'];\n            $json = json_decode($json, true);\n\n            unset($json['data'][$selected_data]);\n            $json['count']--;\n            if ($json['count'] <= 0) {\n                return null;\n            }\n\n            return json_encode($json);\n        }\n    }\n\n    public function actionValidasiNik()\n    {\n        Yii::$app->response->format = Response::FORMAT_JSON;\n\n        if (Yii::$app->user->isGuest) {\n            return ['error' => 'Anda harus masuk untuk mengakses aksi ini'];\n        }\n\n        try {\n\n            $postData = Yii::$app->request->post();\n\n            $status = HelperDukcapil::CheckIsActiveValidateDukcapil();\n            if($status){\n                $validate = new HelperDukcapil($postData);\n                $validate->curlValidDukcapil();\n                $result = $validate->response();\n            }else{\n                $result = HelperDukcapil::AllowValidation();\n            }\n\n            if ($result['status'] === 0) {\n                throw new \\Exception(end($result['data']));\n            }\n\n            return $result;\n        }\n        catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        if ($errorMessage) {\n            Yii::$app->response->statusCode = 400;\n            return ['message' => $errorMessage];\n        }\n    }\n\n    public function actionKuisioner($id) {\n        if ($id) {\n            $model = new KuisionerForm();\n\n            $lembagaKuesionerDetail = BoHelper::questionnaire(BoHelper::GET_QUESTIONNAIRE);\n            $BOTrans = PemilikManfaat::getPemilikManfaatByID($id);\n\n            $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n            $listKW = ActionHelper::getListKewarganegaraan();\n            $listProvinsi = Wilayah::getDDListProvinsi();\n            $flagDukcapil = Setting::getIsCekDukcapil();\n            $listNegara = Negara::getListNegara();\n\n            $backUrl = '/pendirian/confirmation?id=' . $id;\n\n            $namaBo = [];\n            $existingAnggota = [];\n\n            foreach ($BOTrans as $bo) {\n                $namaBo[] = ucfirst(strtolower($bo['nama']));\n                $existingAnggota[] = [\n                    'id' => $bo['id'],\n                    'nama_lengkap' => $bo['nama'],\n                    'id_jenis_identitas' => $bo['m_jenis_identitas_id'],\n                    'nomor_identitas' => $bo['no_identitas'],\n                ];\n            }\n\n            $csrf = Yii::$app->request->csrfToken;\n            $sessionId = Yii::$app->session->id;\n\n            return $this->render('kuisioner', [\n                'csrf' => $csrf,\n                'model' => $model,\n                'listKw' => $listKW,\n                'backUrl' => $backUrl,\n                'sessionId' => $sessionId,\n                'koperasiId' => $id,\n                'listNegara' => $listNegara,\n                'listProvinsi' => $listProvinsi,\n                'flagDukcapil' => $flagDukcapil,\n                'namaBo' => ActionHelper::getNamaBo($namaBo),\n                'existingAnggota' => json_encode($existingAnggota),\n                'listJenisIdentitas' => $listJenisIdentitas,\n                'lembagaKuesionerDetail' => $lembagaKuesionerDetail['data'],\n            ]);\n        } else {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n}\n\n// pendirian <nama koperasi>\n\n\n--- File: 48 # controllers/PerubahanController.php (truncated) ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\models\\forms\\KuisionerForm;\nuse app\\models\\MKbli;\nuse app\\models\\notariat\\Negara;\nuse app\\models\\Setting;\nuse Yii;\nuse Mpdf\\Mpdf;\nuse app\\models\\Wilayah;\nuse app\\models\\SK;\nuse Da\\QrCode\\QrCode;\nuse app\\models\\PesanNama;\nuse yii\\web\\Response;\nuse yii\\web\\UploadedFile;\nuse app\\models\\Disclaimer;\nuse app\\models\\MappingKBLI;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\MasterPerubahan;\nuse app\\models\\WilayahNotariat;\nuse app\\components\\ActionHelper;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TPendirianDokumen;\nuse app\\models\\TransaksiKoperasi;\nuse app\\components\\BaseController;\nuse app\\components\\helper\\BoHelper;\nuse app\\models\\ChecklistPerubahan;\nuse yii\\web\\NotFoundHttpException;\nuse app\\components\\TransaksiHelper;\nuse app\\models\\forms\\PerubahanForm;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\FormatDate;\nuse app\\models\\ChecklistPerubahanForm;\nuse app\\models\\search\\KBLIBakumSearch;\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\nuse app\\components\\helper\\EncryptHelper;\nuse app\\components\\HelperDukcapil;\nuse app\\components\\Helpers;\nuse app\\components\\NpakHelper;\nuse app\\models\\Command;\nuse app\\models\\notariat\\Notaris;\nuse app\\models\\NotarisNpak;\nuse app\\models\\TPerubahanDokumen;\nuse app\\models\\PemilikManfaat;\nuse app\\components\\NotariatHelper;\nuse app\\components\\QrCodeHelper;\n\nclass PerubahanController extends BaseController\n{\n    private $key;\n\n    public function beforeAction($action)\n    {\n\n        $this->key = \"D0c0spArT@n\";\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"/site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionAnggarandasar()\n    {\n        Yii::$app->view->title = \"Perubahan Anggaran Dasar\";\n        $post = [];\n        $err = [];\n        if (!empty(Yii::$app->request->post())) {\n\n            $post = Yii::$app->request->post();\n            unset($post['_csrf']);\n\n            if (empty(trim($post['nik']))) {\n                Yii::$app->session->setFlash('error', \"NIK tidak boleh kosong\");\n                return $this->redirect('anggarandasar');\n            }\n\n            if (empty(trim($post['no_sk_koperasi']))) {\n                Yii::$app->session->setFlash('error', \"Nomor SK tidak boleh kosong\");\n                return $this->redirect('anggarandasar');\n            }\n\n            if (empty(trim($post['full_nama']))) {\n                Yii::$app->session->setFlash('error', \"Nama Koperasi tidak boleh kosong\");\n                return $this->redirect('anggarandasar');\n            }\n\n            // pencarian di db\n            $find = MasterTransaction::findExistTransactionWithSK($post);\n\n            $status = $find['status'];\n            $trans = $find['data'];\n            $err = $find['err'];\n\n            $check = MasterTransaction::findExistTransactionWithDoc($post, -1);\n            // bypass klo ods\n            if ($status) {\n\n                if ($trans->transaksiKoperasi->is_migrasi == 1) {\n                    $check = $trans;\n                }\n            }\n\n            if ($trans and $status !== false and $check !== \"-1\") {\n                // block transaction if is gabung = 1\n                $MT = MasterTransaction::find()->where(['id' => $trans->id])->one();\n\n                if ($MT->is_active == 0) {\n                    Yii::$app->session->setFlash('error', \"Tidak dapat melakukan transaksi Perubahan karena status Koperasi Tidak Aktif. Silakan menghubungi Dinas Koperasi Setempat\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($MT->is_blokir == 1) {\n\n                    Yii::$app->session->setFlash('error', \"Perubahan tidak dapat dilakukan karena status Koperasi Terblokir, silahkan hubungi Dinas Koperasi setempat\");\n\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($MT->is_gabung == 1) {\n\n                    Yii::$app->session->setFlash('error', \"Koperasi sudah melakukan penggabungan\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($MT->is_bubar == 1) {\n\n                    Yii::$app->session->setFlash('error', \"Koperasi sudah melakukan pembubaran\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($trans->id != $trans->transaksiKoperasi->id_master) {\n                    Yii::$app->session->setFlash('error', \"Data Koperasi yang diinput bukan data transaksi terakhir\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                 if ($trans->transaksiKoperasi->is_perbaikan) {\n                    Yii::$app->session->setFlash('error', \"Data Koperasi sedang dalam perbaikan\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($check == \"-2\") { // data already submitted but not yet upload documents\n\n                    return $this->redirect('uploadDocument?id=' . $trans->transaksiKoperasi->id);\n                }\n\n                $payload = base64_encode(EncryptHelper::encrypt($trans->id, $this->key));\n                // $payload = base64_encode( EncryptHelper::encrypt('15c8752bd3418dasda', $this->key) );\n\n                return $this->redirect('checklist-form?id=' . $payload);\n                // return $this->redirect('checklist-form?check='.$payload);\n            } else {\n                $master = MasterTransaction::find()\n                    ->joinWith(['transaksiKoperasi'])\n                    ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where($post)\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                $str = '';\n                if (!$master) {\n\n                    // $str = \"Data tidak ditemukan\";\n                } else {\n\n                    if ($master->is_gabung == 1) {\n                        $str = \"Koperasi sudah melakukan penggabungan\";\n                    }\n\n                    if ($master->is_bubar == 1) {\n                        $str = \"Koperasi sudah melakukan pembubaran\";\n                    }\n                }\n                if ($str) {\n                    Yii::$app->session->setFlash('error', $str);\n                }\n            }\n        }\n\n        return $this->render('anggaranDasar', [\n            'tModel' => new TransaksiKoperasi(),\n            'npakModel' => new NotarisNpak(),\n            'post' => $post,\n            'err' => $err,\n        ]);\n    }\n\n    public function actionChecklistForm()\n    {\n\n        $payload = Yii::$app->request->get();\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $idNotaris = $user['value']['id_notaris'];\n        $isNpak = NpakHelper::isNpak($idNotaris);\n\n        $checks = [];\n        if (isset($payload['id'])) {\n\n            $payload = EncryptHelper::decrypt(base64_decode($payload['id']), $this->key);\n\n            $idMaster = $payload;\n            $no_checklist = uniqid(\"\", true);\n        } else if (isset($payload['check'])) {\n\n            $payload = EncryptHelper::decrypt(base64_decode($payload['check']), $this->key);\n\n            if (!$payload) {\n                Yii::$app->session->setFlash('error', \"Terjadi Kesalahan saat menampilkan data ceklist jenis perubahan.\");\n                return $this->redirect('anggarandasar');\n            }\n\n            $rChecks = ChecklistPerubahan::find()->where(['no_checklist' => $payload])->all();\n\n            $idMaster = $rChecks[0]->d_koperasi_id;\n            $no_checklist = $payload;\n\n            foreach ($rChecks as $check) {\n\n                array_push($checks, $check->m_perubahan_id);\n            }\n        }\n\n        $trans = MasterTransaction::find()->joinWith(['transaksiKoperasi'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n        $isMerahPutih = false;\n        $jenisKoperasi = $trans['transaksiKoperasi']['jenis_koperasi'] ?? null;\n\n        if ($jenisKoperasi) {\n            $jenisKoperasiId = JenisKoperasi::getPrimaryByNama($jenisKoperasi)['id'] ?? null;\n\n            if ($jenisKoperasiId && JenisKoperasi::isMerahPutih($jenisKoperasiId)) {\n                $isMerahPutih = true;\n            }\n        }\n\n        return $this->render('checklistPerubahan', [\n            'namaKoperasi' => $trans['transaksiKoperasi']['full_nama'],\n            'idMaster' => $idMaster,\n            'no_checklist' => $no_checklist,\n            'checks' => $checks,\n            'checklists' => MasterPerubahan::find()->all(),\n            'isMerahPutih' => $isMerahPutih,\n            'isNpak' => $isNpak,\n            'model' => new ChecklistPerubahanForm()\n        ]);\n    }\n\n    public function actionChecklistprocess()\n    {\n\n        if (!empty(Yii::$app->request->post())) {\n\n\n            $model = new ChecklistPerubahanForm();\n            $model->load(Yii::$app->request->post());\n\n            if ($model->validate()) {\n\n                $batch = [];\n                $no_checklist = uniqid('', true);\n                $d_koperasi_id = Yii::$app->request->post('id_master');\n                $no_checklist = Yii::$app->request->post('no_checklist');\n\n                if (!empty($no_checklist)) {\n\n                    $dModel = ChecklistPerubahan::deleteAll('no_checklist = :no_checklist', [':no_checklist' => $no_checklist]);\n                }\n\n                foreach (Yii::$app->request->post('ChecklistPerubahanForm')['m_perubahan_id'] as $num => $check) {\n\n                    if (!empty($check)) {\n\n                        $batch[$num]['no_checklist'] = $no_checklist;\n                        $batch[$num]['d_koperasi_id'] = $d_koperasi_id;\n                        $batch[$num]['m_perubahan_id'] = $check;\n                    }\n                }\n\n                $res = Yii::$app->db_koperasi->createCommand()->batchInsert('kop_c_perubahan', ['no_checklist', 'd_koperasi_id', 'm_perubahan_id'], $batch)->execute();\n\n                if ($res) {\n\n                    Yii::$app->session->set('no_checklist', $no_checklist);\n                    return $this->redirect('form-perubahan');\n                }\n            } else {\n\n                Yii::$app->session->setFlash('error', \"Pilih salah satu jenis perubahan\");\n                return $this->redirect(Yii::$app->request->referrer);\n            }\n        }\n    }\n\n    public function actionFormPerubahan($id = null)\n    {\n        $tahunModalKbli = '2020';\n        $arrayBidangUsaha = array('jenis_koperasi', 'aktivitas_usaha', 'simpanan_pokok', 'pola_pengelolaan', 'simpanan_wajib', 'dana_hibah');\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $nama_notaris = $user['value']['nama_gelar'];\n        $id_notaris = $user['value']['id_notaris'];\n        $no_checklist = $session->get('no_checklist');\n\n        if ($id) {\n            $data = TransaksiKoperasi::findOne($id);\n            if ($data->is_finish == -1) {\n                return Yii::$app->response->redirect(\"/perubahan/edit?id=\" . $id);\n            }\n        }\n\n        if (!$no_checklist) {\n            Yii::$app->session->setFlash('error', \"Terjadi Kesalahan Pada Data Ceklis Jenis Perubahan.\");\n            return Yii::$app->response->redirect('/perubahan/anggarandasar');\n        }\n\n        $mustCheck = true;\n        $payload = base64_encode(EncryptHelper::encrypt($no_checklist, $this->key));\n        $back = \"/perubahan/checklist-form?check={$payload}\";\n        $dataMaster = ChecklistPerubahan::getDataMasterByChecklist($no_checklist);\n        if (!$dataMaster) {\n            Yii::$app->session->setFlash('error', \"Terjadi Kesalahan Pada Proses Data Ceklis Jenis Perubahan.\");\n            return Yii::$app->response->redirect('/perubahan/anggarandasar');\n        }\n        $model = new PerubahanForm();\n        $model->scenario = \"form-perubahan\";\n        Yii::$app->view->title = \"Form Perubahan\";\n        $judul = \"FORM PERMOHONAN PERUBAHAN\";\n        $model->setEditData($dataMaster->id_transaksi, true);\n        $model->old_id = $dataMaster->id_transaksi;\n        $model->cklist = $no_checklist;\n        $model->nama_notaris = $nama_notaris;\n\n        // Clear Must Null Field\n        if (!Yii::$app->request->isPost) {\n            $session->set('bagi_hapus_kbli', 0);\n            $model->tgl_rapat = null;\n            $model->alamat_rapat = null;\n            $model->jumlah_peserta_rapat = null;\n            $model->no_akta = null;\n            $model->tgl_akta = null;\n        }\n\n        // Normalisasi Rules Koperasi\n\n        // Null Kan Sub Jenis Jika Tidak Memiliki Parent\n        if ($model->c_jenis_koperasi_id) {\n            $cekParent = JenisKoperasi::find()->where(['id' => $model->c_jenis_koperasi_id])->one();\n            if ($cekParent) {\n                if ($model->jenis_koperasi_id != $cekParent->parent_id) {\n                    $model->c_jenis_koperasi_id = null;\n                }\n            }\n        }\n\n        $listDisabled = [\n            'aktivitas_usaha' => true,\n            'alamat_koperasi' => true,\n            'dana_hibah' => true,\n            'dana_cadangan' => true,\n            'jangka_waktu' => true,\n            'jenis_koperasi' => true,\n            'jumlah_anggota' => true,\n            'nama_koperasi' => true,\n            'pemilik_manfaat' => true,\n            'pengurus_pengawas' => true,\n            'periode_pengurus' => true,\n            'pola_pengelolaan' => true,\n            'simpanan_pokok' => true,\n            'simpanan_wajib' => true,\n            'tingkat_wilayah' => true,\n            'usaha_pendukung' => true,\n            'usaha_tambahan' => true,\n            'wilayah' => true,\n            'full_nama' => true,\n            'bentuk_koperasi' => true,\n            'bh_penggabungan' => true,\n            'bh_pembagian' => true,\n            'model_koperasi' => true,\n        ];\n        $listEnabled = ChecklistPerubahan::getKolomPerubahan($no_checklist);\n\n        // Menonaktifkan disabled\n        foreach ($listEnabled as $value) {\n            $listDisabled[$value] = false;\n        }\n\n        $slicedPerubahan = array_slice(ChecklistPerubahan::getKolomPerubahan($no_checklist), 0, count($arrayBidangUsaha));\n        $isBidangUsaha = ($slicedPerubahan === $arrayBidangUsaha);\n\n        if (!empty($dataMaster->transaksiKoperasi->is_migrasi) && $dataMaster->transaksiKoperasi->is_migrasi == 1) {\n            $listDisabled = TransaksiHelper::openFieldMigrasi($listDisabled);\n        }\n\n        $model->listDisabled = $listDisabled;\n\n        if ($model->load(Yii::$app->request->post())) {\n            $post = Yii::$app->request->post();\n            // var_dump($post);exit;\n            // Set Json Bakum\n            // $json_bakum = TransaksiHelper::json_bakum($post,$model);\n            // if($json_bakum) {\n            //     $model->json_bakum_sekunder = json_encode($json_bakum);\n            // }\n            $model->is_notaris_pengganti = isset($post['PerubahanForm']['is_notaris_pengganti']) ? 1 : 0;\n            if (!$model->is_notaris_pengganti) {\n                $model->id_notaris_pengganti = null;\n                $model->no_sk_notaris_pengganti = null;\n            }\n            if ($model->id_notaris_pengganti) {\n                $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                \n                if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                    $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                } else {\n                    // Handle jika data tidak ditemukan\n                    Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                    $model->id_notaris_pengganti = null;\n                    $model->no_sk_notaris_pengganti = null;\n                }\n            }\n            // Set Json Gabung\n            $json_gabung = TransaksiHelper::json_gabung($post, $model);\n            if ($json_gabung) {\n                $model->json_gabung = json_encode($json_gabung);\n            }\n\n            // Set Json Pisah\n            $json_pisah = TransaksiHelper::json_pisah($post, $model);\n            if ($json_pisah) {\n                $model->json_pisah = json_encode($json_pisah);\n            }\n\n            // Set Json Aktifitas Usaha\n            if (isset($post['cek_kbli'])) {\n                if (count($post['cek_kbli'])) {\n                    $json_aktifitas_usaha_utama = json_decode($post['PerubahanForm']['json_aktifitas_usaha'], true)['data']['utama'];\n                    if (count($json_aktifitas_usaha_utama) > 0) {\n                        $aktifitas_usaha = MKbli::getAktifitasUsaha(array_keys($json_aktifitas_usaha_utama)[0])[0];\n                        if ($aktifitas_usaha['tahun'] == 2017 && !$isBidangUsaha) {\n                            if (MKbli::getAktifitasUsaha($post['cek_kbli'][0])[0]['tahun']  == 2020) {\n                                $json_aktifitas_usaha = [\n                                    'data' => [\n                                        'utama' => [],\n                                        'pendukung' => [],\n                                        'tambahan' => []\n                                    ]\n                                ];\n\n                                $post['PerubahanForm']['json_aktifitas_usaha'] = json_encode($json_aktifitas_usaha);\n\n                                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n                            }\n                        }\n                    }\n                }\n            }\n\n            $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n            if ($json_aktifitas_usaha) {\n                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n                $mustCheck = false;\n            }\n\n            $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n            $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n            $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n            // Set Json Pengawas Pengurus\n            $json_pengawas_pengurus = TransaksiHelper::json_pengawas_pengurus($post, $model);\n            if ($json_pengawas_pengurus) {\n                $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n            }\n\n            // Set Json Pemilik Manfaat\n            $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n            if ($json_pemilik_manfaat) {\n                $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n            }\n            // var_dump($model->attributes,$post);exit;\n            if (isset($post['submit-form'])) {\n                $model->is_submit = true;\n\n                if (empty($model->getErrors())) {\n                    if ($model->validate()) {\n                        // Lanjut proses\n                        $id_transaksi = $model->savePerubahan();\n                        if ($id_transaksi) {\n                            return $this->redirect(['/perubahan/upload-document', 'id' => $id_transaksi]);\n                        }\n                    }\n                }\n            }\n        }\n\n\n        // Set List\n        $listJenisKop = ActionHelper::getDDListJenisKop();\n        $listSubJenisKop = ArrayHelper::map(JenisKoperasi::find()->where(['parent_id' => $model->jenis_koperasi_id])->all(), 'id', 'nama');\n        $listPola = ActionHelper::getDDListPola();\n        $listModelKop = ActionHelper::getDDListModelKoperasi();\n        $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n        $openIdTingkatWil = ActionHelper::$exceptIdTingkatWilayah;\n        $listBentukKop = ActionHelper::getDDListBentukKop();\n        $listProvinsi = ActionHelper::getDDListProvinsi();\n        $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n        $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n        $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n        $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n        $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n        // set KBLI\n        $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n        $polaKopKbli = $model->m_pola_id ? $model->m_pola_id : 1; // Tiket #186604\n        $bentukKopKbli = isset(Yii::$app->request->get('KBLISearch')['bentuk']) ? Yii::$app->request->get('KBLISearch')['bentuk'] : 1;\n        $bentukKopKbli = $model->b_koperasi_id ? $model->b_koperasi_id : $bentukKopKbli;\n        $KBLISearch = new KBLIBakumSearch();\n        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n        // CEK KOPERASI MERAH PUTIH\n        $isMerahPutih = ChecklistPerubahan::isPerubahanKoperasiMerahPutih($no_checklist);\n        if ($isMerahPutih) {\n\n            $listJenisKopMerahPutih = [];\n            foreach ($listJenisKop as $id => $name) {\n                if (stripos($name, JenisKoperasi::NAME_MERAH_PUTIH) !== false) {\n                    $listJenisKopMerahPutih[$id] = $name;\n                }\n            }\n\n            // MAKE SURE SET VALUE [CAN BE REMOVED], karena secara default telah select value pertama dari list\n            $model->m_tingkat_wilayah_id = 1; // Kabupaten / Kota -> disabled\n            $model->model_koperasi = 0; // Tidak Multi Pihak -> disabled\n            $model->b_koperasi_id = 1; // Primer -> disabled\n\n            // DISABLE OPTIONS\n            $listDisabled['tingkat_wilayah'] = true;\n            $listDisabled['model_koperasi'] = true;\n            $listDisabled['bentuk_koperasi'] = true;\n\n            $listJenisKop = $listJenisKopMerahPutih;\n        }\n\n        // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n        if ($model->jenis_koperasi_id == '6' && !Yii::$app->request->get('KBLISearch')['jenis']) {\n            $koperasi_sekunder  = $model->b_koperasi_id == '2' ? 2 : 0;\n            $mappingKBLI        = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id + $koperasi_sekunder]);\n        }\n\n        if (Yii::$app->request->get('KBLISearch')['jenis'] && Yii::$app->request->get('KBLIBakumSearch')['judul']) {\n            $jenisKopKbli = Yii::$app->request->get('KBLISearch')['jenis'];\n        }\n\n        if (Yii::$app->request->get('KBLISearch')) {\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']]);\n\n            // SET default pola id ke konvensional jika jenis koperasi diganti ke simpan pinjam\n            if (Yii::$app->request->get('KBLISearch')['jenis'] == '6' && !isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => 1]);\n            }\n\n            if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => Yii::$app->request->get('KBLISearch')['pola']]);\n\n                // 2021-12-06 - CEK BENTUK KOPERASI +2 DARI POLA (3 = SEKUNDER KONVENSIONAL | 4 = SEKUNDER SYARIAH)\n                if (isset(Yii::$app->request->get('KBLISearch')['bentuk'])) {\n                    if (Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => Yii::$app->request->get('KBLISearch')['pola'] + 2]);\n                    }\n                }\n            }\n        }\n\n        // Set KBLI\n        // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        $kbli_simpan_pinjam = KBLIBakum::listKodeSimpanPinjam();\n        $kbli_tkbm = KBLIBakum::listKodeTkbm();\n        $kbli_jasa = ['7050'];\n\n        //Tiket #186604 >> #675530 Fix\n        //INC-AHU-112024-02343 - KBLI 64146 tidak tampil\n        //Perbaikan value kbli yang terbalik antara primer dan sekunder\n        $kbli_sp_lain_konvensional_p  = ['64145', '64147', '64142', '64144', '64146', '64148', '64143']; //simpan pinjam konvensional primer\n        $kbli_sp_lain_konvensional_s  = ['64145', '64147', '64142', '64144', '64146', '64148', '64141']; //simpan pinjam konvensional sekunder\n        $kbli_sp_lain_syariah_p       = ['64141', '64143', '64142', '64144', '64146', '64148', '64147']; //simpan pinjam syariah primer\n        $kbli_sp_lain_syariah_s       = ['64141', '64143', '64142', '64144', '64146', '64148', '64145']; //simpan pinjam syariah sekunder\n        $kbli_ex_lain_konvensional_p  = ['64141', '64143', '64145', '64147', '64146', '64148', '64144']; //lainnya konvensional primer \n        $kbli_ex_lain_konvensional_s  = ['64141', '64143', '64145', '64147', '64146', '64148', '64142']; //lainnya konvensional sekunder\n        $kbli_ex_lain_syariah_p       = ['64141', '64143', '64145', '64147', '64142', '64144', '64148']; //lainnya syariah primer\n        $kbli_ex_lain_syariah_s       = ['64141', '64143', '64145', '64147', '64142', '64144', '64146']; //lainnya syariah sekunder\n\n        if ($jenisKopKbli == '6') { //jenis simpan pinjam\n            if ($polaKopKbli == '1') {\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else {\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        } else { //jenis lainnya\n            if ($polaKopKbli == '1') {\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else {\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        }\n\n        //Khusus perubahan\n        if (isset(Yii::$app->request->get('KBLISearch')['jenis'])) {\n            if (Yii::$app->request->get('KBLISearch')['jenis'] == '6') { //jenis simpan pinjam\n                if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                    if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                } else {\n                    if ($polaKopKbli == '1') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                }\n            } else { //jenis lainnya\n                if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                    if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                } else {\n                    if ($polaKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                }\n            }\n        }\n\n        $KBLI_all   = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5])->andWhere(['tahun' => $tahunModalKbli]);\n\n        if (Yii::$app->request->get('KBLIBakumSearch')) {\n\n            $searchKode = Yii::$app->request->get('KBLIBakumSearch')['judul'] ? Yii::$app->request->get('KBLIBakumSearch')['judul'] : '';\n\n            //Tiket #186604\n            //Tambah validasi Pencarian result HANYA berdasarkan bentuk, jenis, dan pola koperasi\n            // var_dump($model->jenis_koperasi_id, $jenisKopKbli, $searchKode, $polaKopKbli, $bentukKopKbli);exit;\n            if (!empty($searchKode)) {\n                if ($jenisKopKbli == '6') { //jenis simpan pinjam\n                    if ($polaKopKbli == '1') {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                        }\n                    } else {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                        }\n                    }\n                } else { //jenis lainnya                \n                    if ($polaKopKbli == '1') {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                        }\n                    } else {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                        }\n                    }\n                }\n\n                //Khusus perubahan\n                if (isset(Yii::$app->request->get('KBLISearch')['jenis'])) {\n                    if (Yii::$app->request->get('KBLISearch')['jenis'] == '6') { //jenis simpan pinjam\n                        if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                            if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                                }\n                            } else {\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                                }\n                            }\n                        } else {\n                            if ($polaKopKbli == '2') {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                                }\n                            } else {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                                }\n                            }\n                        }\n                    } else { //jenis lainnya\n                        if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                            if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                                }\n                            } else {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                                }\n                            }\n                        } else {\n                            if ($polaKopKbli == '2') {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                                }\n                            } else {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                                }\n                            }\n                        }\n                    }\n                }\n\n                $KBLI->andWhere(['tahun' => $tahunModalKbli])\n                    ->andFilterWhere([\n                        'OR',\n                        ['LIKE', 'judul', $searchKode],\n                        ['=', 'kode', $searchKode],\n                    ]);\n                $KBLI_all->andWhere(['tahun' => $tahunModalKbli])\n                    ->andFilterWhere([\n                        'OR',\n                        ['LIKE', 'judul', $searchKode],\n                        ['=', 'kode', $searchKode],\n                    ]);\n            }\n        }\n\n        $KBLIProvider = [\n            'byJenis' => new ActiveDataProvider([\n                'query' => $jenisKopKbli == '4' || $jenisKopKbli == '6' ? $KBLI->andWhere(['status' => 1]) : $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ]),\n            'all' => new ActiveDataProvider([\n                'query' => $jenisKopKbli == '4' || $jenisKopKbli == '6' ? $KBLI_all->andWhere(['status' => 1]) : $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ])\n        ];\n\n        $json_bakum = json_decode($model->json_bakum_sekunder, true);\n        $json_gabung = json_decode($model->json_gabung, true);\n        $json_pisah = json_decode($model->json_pisah, true);\n        $json_pengawas_pengurus = json_decode($model->json_pengawas_pengurus, true);\n        $json_aktifitas_usaha = json_decode($model->json_aktifitas_usaha, true);\n        $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n        $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n        $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n        $json_pemilik_manfaat = json_decode($model->json_pemilik_manfaat, true);\n\n        if (isset($json_pemilik_manfaat['data'])) {\n            $model->cb_mengerti_manfaat = true;\n            $model->cb_perpres_manfaat = ['22', '23'];\n        }\n\n        // Set Tampilan Awal\n        // $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id,'SEKUNDER') ? '' : 'hidden';\n        $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n        $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n        $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n        $model->is_submit = false;\n        $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n\n        // Normalize Data\n        if (!Yii::$app->request->isPost) {\n            // Kosongkan KBLI Jika Perubahan Jenis Koperasi\n            if (!$listDisabled['jenis_koperasi']) {\n                $usaha_utama = null;\n                $usaha_pendukung = null;\n                $usaha_tambahan = null;\n                $kbli = json_decode($model->json_aktifitas_usaha, true);\n                $kbli['data']['utama'] = [];\n                $kbli['data']['pendukung'] = [];\n                $kbli['data']['tambahan'] = [];\n                $model->json_aktifitas_usaha = json_encode($kbli);\n            }\n\n            if (!$listDisabled['jangka_waktu']) {\n                $model->jumlah_jangka_waktu = 0;\n            }\n        }\n\n        //ambil tahun kbli\n        $tahun_kbli = null;\n        if (!$mustCheck) {\n            foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                    $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                    break;\n                } else {\n                    if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))) > 0) {\n                        $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))[0]['tahun'];\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))) > 0) {\n                $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))[0]['tahun'];\n            }\n        }\n\n        //cek apakah masih menggunakan aktifitas usaha tahun 2017\n        $isShowTahunKbli = true;\n        if ($mustCheck) {\n            if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))) > 0) {\n                $aktifitas_usaha = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))[0];\n                if ($aktifitas_usaha['tahun'] == 2017 && $isBidangUsaha) {\n                    $isShowTahunKbli = false;\n                    $tahun_kbli = null;\n                    $model->json_aktifitas_usaha = json_encode(\n                        [\n                            'data' => [\n                                'utama' => [],\n                                'pendukung' => [],\n                                'tambahan' => []\n                            ]\n                        ]\n                    );\n                    $usaha_utama = [];\n                    $usaha_pendukung = [];\n                    $usaha_tambahan = [];\n                }\n            }\n        }\n\n        $tingkatWilayah = \"\";\n        $transKoperasiDetail = !$isMerahPutih ? TransaksiKoperasi::find()->where(['id' => $dataMaster->id_transaksi])->one() : null; // PREVENT ENABLE OPTIONS WHEN CHANGING TO KOPERASI MERAH PUTIH\n        if ($transKoperasiDetail) {\n            $tingkatWilayah = $transKoperasiDetail->m_tingkat_wilayah_id;\n        }\n\n\n        return $this->render('form-perubahan', [\n            'model' => $model,\n            'judul' => $judul,\n            'listProvinsi' => $listProvinsi,\n            'listKabupaten' => $kabTerpilih,\n            'listKecamatan' => $kecTerpilih,\n            'listKelurahan' => $kelTerpilih,\n            'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n            'kbli_provider' => $KBLIProvider,\n            'kbli_search' => $KBLISearch,\n            'show_pemilik_manfaat' => true,\n            'listCBPerpresManfaat' => [],\n            'listJenisKop' => $listJenisKop,\n            'listSubJenisKop' => $listSubJenisKop,\n            'listPola' => $listPola,\n            'listTingkatWil' => $listTingkatWil,\n            'listBentukKop' => $listBentukKop,\n            'listJenisKelamin' => $listJenisKelamin,\n            'listCBPerpresManfaat' => $listCBPerpresManfaat,\n            'listCBMengertiManfaat' => $listCBMengertiManfaat,\n            'listJenisIdentitas' => $listJenisIdentitas,\n            'json_gabung' => $json_gabung,\n            'json_pisah' => $json_pisah,\n            'pengawas_pengurus' => $json_pengawas_pengurus,\n            'usaha_utama' => $usaha_utama,\n            'usaha_pendukung' => $usaha_pendukung,\n            'usaha_tambahan' => $usaha_tambahan,\n            'show_pemilik_manfaat' => $show_pemilik_manfaat,\n            'json_pemilik_manfaat' => $json_pemilik_manfaat,\n            'listDisabled' => $listDisabled,\n            'backUrl' => $back,\n            'tahun_kbli' => $tahun_kbli,\n            'tahunModalKbli' => $tahunModalKbli,\n            'isShowTahunKbli' => $isShowTahunKbli,\n            'listModelKop' => $listModelKop,\n            'openIdTingkatWil' => $openIdTingkatWil,\n            'tingkatWilayah' => $tingkatWilayah,\n        ]);\n    }\n\n    private function uploadAndSave($id, $post, TPerubahanDokumen &$model)\n    {\n\n        // $model = new TPerubahanDokumen();\n        $model->load($post);\n        $model->akta = UploadedFile::getInstance($model, 'akta');\n        $model->berita_acara = UploadedFile::getInstance($model, 'berita_acara');\n        $model->surat_rekomendasi = UploadedFile::getInstance($model, 'surat_rekomendasi');\n        $model->hasil_musyawarah_desa = UploadedFile::getInstance($model, 'hasil_musyawarah_desa');\n\n        // Validate mimetype files\n        $model->akta = Helpers::validateFiles($model->akta, 'pdf');\n        $model->berita_acara = Helpers::validateFiles($model->berita_acara, 'pdf');\n\n        if ($model->surat_rekomendasi) {\n            $model->surat_rekomendasi = Helpers::validateFiles($model->surat_rekomendasi, 'pdf');\n        }\n\n        if ($model->hasil_musyawarah_desa) {\n            $model->hasil_musyawarah_desa = Helpers::validateFiles($model->hasil_musyawarah_desa, 'pdf');\n        }\n\n        if (!$model->validate()) {\n            return false;\n        }\n\n        $rawQuery = $model->upload($id);\n\n        $pass = true;\n\n        if ($rawQuery) {\n\n            foreach ($rawQuery as $key => $query) {\n\n                if (Yii::$app->db_koperasi->createCommand($query)->execute()) {\n\n                    $pass = true;\n                } else {\n\n                    return false;\n                }\n            }\n        } else {\n\n            return false;\n        }\n\n        return $pass;\n    }\n\n    public function checkDocumentUpload($id)\n    {\n\n        $data = TPendirianDokumen::find()->where('transaction_id = ' . $id . ' and (type = 4 or type = 5 or type = 6 or type = 8)')->all();\n\n        if (!empty($data)) {\n\n            Yii::$app->db_koperasi->createCommand('\n                DELETE FROM kop_t_pendirian_dokumen\n                WHERE transaction_id = ' . $id . ' and (type = 4 or type = 5 or type = 6 or type = 8)\n            ')->execute();\n\n            foreach ($data as $detail) {\n\n                if (file_exists(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name)) {\n\n                    unlink(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name);\n                }\n            }\n        }\n    }\n\n    public function actionUploadDocument()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $data = TransaksiKoperasi::getPreviewData($id);\n\n        if (empty($id) || $data['is_finish'] !== \"-1\") {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $model = new TPerubahanDokumen();\n        $model->jenis_koperasi = $data['jenis_koperasi'];\n        $model->pola_pengelolaan = $data['pola_pengelolaan'];\n\n        if (Yii::$app->request->isPost) {\n            $post = Yii::$app->request->post();\n            $this->checkDocumentUpload($id);\n\n            $done = $this->uploadAndSave($id, $post, $model);\n\n            if ($done) {\n                $done = DisclaimerHelper::generateValues('disclaimer', 'upload_document_pendirian', $data['koperasi_id'], $data['t_pesan_nama_id'])->save();\n                return $this->redirect('/perubahan/preview?id=' . $id);\n            }\n        }\n\n        $disclaimer = new Disclaimer();\n        $disclaimer = $disclaimer->find()->where(['parent' => 'upload_document_pendirian'])->all();\n\n        return $this->render('UploadDocument', [\n            'id' => $id,\n            'model' => $model,\n            'data' => $data,\n            'disclaimer' => $disclaimer\n        ]);\n    }\n\n    public function actionPreview()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $data = TransaksiKoperasi::getPreviewData($id, TransaksiKoperasi::DISC_PERSETUJUAN_PERUBAHAN);\n        $data['isQuestionnaire'] = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        $last_bo_trans = TransaksiKoperasi::find()->innerJoinWith(['pemilikManfaat'])\n            ->where(['kop_t_koperasi.id_master' => $cekTrans->id_master])\n            ->andWhere(['is_finish' => '1'])\n            ->orderBy(['kop_t_koperasi.id' => SORT_DESC])\n            ->one();\n\n        $data['isExistBo'] = !empty($last_bo_trans) && !empty($last_bo_trans->pemilikManfaat) && count($last_bo_trans->pemilikManfaat) > 0; // cek apakah transaksi sebelumnya sudah ada BO / belum\n\n        if($data['jenis_koperasi'] !== $cekTrans['jenis_koperasi']){\n            $data['jenis_koperasi'] = $cekTrans['jenis_koperasi'];\n        }\n\n        if (isset($data['is_finish'])) {\n\n            if ((empty($id) || $data['is_finish'] == \"1\")) {\n\n                // if ( Yii::$app->user->identity->username !== \"notaris-sabh\" ) {\n\n                throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n                // }\n            }\n\n            $data['confirmationOnly'] = false;\n\n            if ($data['is_finish'] == \"0\") {\n\n                // Yii::$app->session->setFlash('confirmationOnly', 'yes');\n                $data['confirmationOnly'] = true;\n            }\n\n            if ($data['model_koperasi'] == null) {\n                $data['model_koperasi'] = '0';\n            }\n\n            $data['model_koperasi'] = ActionHelper::getDDListModelKoperasi($data['model_koperasi']);\n            if ($cekTrans->id_notaris_pengganti) {\n                $data['nama_notaris_pengganti'] = NotariatHelper::getNotarisPenggantiNameById($cekTrans->id_notaris_pengganti, $id_notaris);\n            } else {\n                $data['nama_notaris_pengganti'] = NULL;\n            }\n            \n            return $this->render('preview', $data);\n        } else {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n\n    public function getLastSK($idMaster)\n    {\n\n        // $raw = MasterTransaction::find()->joinWith(['surat'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n        // Melakukan perbaikan agar ambil SK dari transaksi terakhir, 2023-09-05\n        $last_trans = TransaksiKoperasi::find()->innerJoinWith(['dataSK'])\n            ->where(['kop_t_koperasi.id_master' => $idMaster])\n            ->andWhere(['is_finish' => '1'])\n            ->orderBy(['kop_t_koperasi.id' => SORT_DESC])\n            ->one();\n\n        return $last_trans->dataSK->no_sk_koperasi;\n    }\n\n    public function generateSurat($group, $transaksi)\n    {\n        if (empty(SK::find()->where(['t_koperasi_id' => $transaksi->id])->one())) {\n\n            $SKins = new SK();\n            if (count($group) < 2) {\n\n                $SKins->t_koperasi_id = $transaksi->id;\n                $SKins->no_sk_koperasi = $group[0] == 1 ? Numbering::getCounter(['id' => SK::SK_PERUBAHAN, 'description' => SK::SK_PERUBAHAN_DESC], 7)->generateSKPerubahan() : $this->getLastSK($transaksi->id_master);\n                $SKins->no_sp_koperasi = $group[0] == 2 ? Numbering::getCounter(['id' => SK::SP_PERUBAHAN, 'description' => SK::SP_PERUBAHAN_DESC], 7)->generateSKPelaporan() : NULL;\n            } else {\n\n                $SKins->t_koperasi_id = $transaksi->id;\n                $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PERUBAHAN, 'description' => SK::SK_PERUBAHAN_DESC], 7)->generateSKPerubahan();\n                $SKins->no_sp_koperasi = Numbering::getCounter(['id' => SK::SP_PERUBAHAN, 'description' => SK::SP_PERUBAHAN_DESC], 7)->generateSKPelaporan();\n            }\n        } else {\n\n            $SKins = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n        }\n\n        $SKins->save();\n\n        return $SKins;\n    }\n\n    public function changePesanNama($transaksi, $idMaster)\n    {\n\n        // change status of new name\n        PesanNama::updateAll(['status' => 1], ['id' => $transaksi->t_pesan_nama_id]);\n\n        // change is delete on before latest transaction\n        $raw = TransaksiKoperasi::findLastTransaction(TransaksiKoperasi::BEFORE_LATEST, $idMaster);\n        $lastID = $raw['id'];\n        $idPesanNama = $raw['t_pesan_nama_id'];\n\n        PesanNama::updateAll(['is_deleted' => 1], ['id' => $idPesanNama]);\n    }\n\n    public function changeMasterTransactionIsGabung($id)\n    {\n\n        // code goes here\n        $raw = BHPenggabungan::find()->where(['t_koperasi_id' => $id])->all();\n\n        // update master\n        foreach ($raw as $key) {\n\n            MasterTransaction::updateAll(['is_gabung' => 1], ['id' => $key->d_koperasi_id]);\n        }\n    }\n\n    public function actionApprovetransaction()\n    {\n        $post = Yii::$app->request->post();\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        $kuisionerForm = !empty($post['KuisionerForm']) ? $post['KuisionerForm'] : null;\n        $masterLembagaKuisionerForm = !empty($post['MasterLembagaKuesionerForm']) ? $post['MasterLembagaKuesionerForm'] : null;\n        $postKuisioner = array('KuisionerForm' => $kuisionerForm, 'MasterLembagaKuesionerForm' => $masterLembagaKuisionerForm);\n        $isQuestionnaire = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        // Prevent jika sudah konfirmasi\n        if ($transaksi->is_finish == 1) {\n            return true;\n        }\n\n        if ($transaksi->is_finish == -1) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_perubahan', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        } else {\n            $transaksi->is_finish = 1;\n\n            $pnID = [4]; // group of ids which needs to change pesan nama table\n            $bhPenggabungan = [2];\n            $group = [];\n            $idMaster = $transaksi->id_master;\n            $raw = ChecklistPerubahan::find()->joinWith(['masterPerubahan'])->where(['t_koperasi_id' => $id])->all();\n\n            if (empty($raw)) {\n\n                echo 0; //data not found\n                exit();\n            }\n\n            $changePesanNama = false;\n            $changePenggabungan = false;\n            foreach ($raw as $checks) {\n\n                if (empty($group) or !in_array($checks->masterPerubahan->groups, $group)) {\n\n                    array_push($group, $checks->masterPerubahan->groups);\n                }\n\n                if (in_array($checks->masterPerubahan->id, $pnID)) {\n\n                    $changePesanNama = true;\n                }\n\n                if (in_array($checks->masterPerubahan->id, $bhPenggabungan)) {\n\n                    $changePenggabungan = true;\n                }\n            }\n\n            $SKins = $this->generateSurat($group, $transaksi);\n\n            // change pesan nama status if master perubahan = 4 / Nama Koperasi\n            if ($changePesanNama) {\n                // var_dump('pesan');\n                $this->changePesanNama($transaksi, $idMaster);\n            }\n\n            // change is gabung if perubahan master id = 2 / penggabungan\n            if ($changePenggabungan) {\n                // var_dump( 'gabung' );\n                $this->changeMasterTransactionIsGabung($id);\n            }\n\n            // exit();\n\n            MasterTransaction::updateAll(['id_transaksi' => $id, 'id_sk' => $SKins->id], ['id' => $idMaster]);\n\n            // add task to cron job\n            $command = new Command();\n            $command->task = $id;\n            $command->command_type = \"ODS_API_OUTCOMING\";\n            $command->save();\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n        $transaksi->tanggal_jangka_waktu = !empty($transaksi->jumlah_jangka_waktu) ? date(\"Y-m-d\", strtotime($transaksi->tanggal_jangka_waktu . \" + \" . $transaksi->jumlah_jangka_waktu . \" year\")) : $transaksi->tanggal_jangka_waktu;\n\n        $resSave = $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'tanggal_jangka_waktu'));\n\n        if ($transaksi->is_migrasi == 1) {\n            $transaksi->is_migrasi = 0;\n            $transaksi->save();\n        }\n\n        if ($transaksi->is_finish == 1) {\n            $bo = BoHelper::sendBoData($id, $postKuisioner);\n            HelperDukcapil::DataBalikan($id, $transaksi);\n        }\n\n        if ($isQuestionnaire) {\n            return json_encode(['isConfirmed' => $resSave, 'questionnaire' => $bo]);\n        }\n\n        return $resSave;\n    }\n\n    public function actionListtransaction()\n    {\n\n        Yii::$app->view->title = \"List Transaksi\";\n        $dataNotaris = Yii::$app->session->get('data_notaris');\n        $id_notaris = $dataNotaris['value']['id_notaris'];\n\n        $query = TransaksiKoperasi::find()->where(['ahu_notaris_id' => $id_notaris, 'jenis_transaksi_id' => 3])->andWhere(['<>', 'is_finish', -1])->orderBy(['created_date' => SORT_DESC]);\n\n        $get = Yii::$app->getRequest()->getQueryParam('TransaksiKoperasi');\n\n        if (!empty($get)) {\n\n            if (!empty($get['nomor_transaksi'])) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $get['nomor_transaksi']]);\n            }\n\n            if (!empty($get['jenis_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if (!empty($get['nama_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $get['nama_koperasi']]);\n            }\n\n            if (!empty($get['nik'])) {\n\n                $query->andFilterWhere(['like', 'nik', $get['nik']]);\n            }\n\n            if (Yii::$app->getRequest()->getQueryParam('created_date')) {\n\n                $date = Yii::$app->getRequest()->getQueryParam('created_date');\n\n                $query->andFilterWhere(['between', 'created_date', date('Y-m-d', strtotime($date)), date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))]);\n            }\n        }\n\n        if (Yii::$app->getRequest()->getQueryParam('rentang_awal')) {\n\n            $date_awal = Yii::$app->getRequest()->getQueryParam('rentang_awal');\n            $date_akhir = Yii::$app->getRequest()->getQueryParam('rentang_akhir');\n\n            $query->andFilterWhere(['between', 'DATE(created_date)', date('Y-m-d', strtotime($date_awal)), date('Y-m-d', strtotime($date_akhir))]);\n        }\n\n        $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ]\n        ]);\n\n        return $this->render('listTransaction', [\n            'model' => new TransaksiKoperasi(),\n            'provider' => $provider\n        ]);\n    }\n\n    public function actionConfirmation()\n    {\n\n        return $this->actionPreview();\n    }\n\n    public function actionDownloadsk()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        // $number = Numbering::getCounter(['id' => 1])->generateSKPendirian();\n        // $number = SK::find()->where(['t_koperasi_id' => $id])->one()->no_sk_koperasi;\n        $numbers = SK::find()->where(['t_koperasi_id' => $id])->one();\n        $namaKoperasi = $transaksi->full_nama;\n        $tanggalAkta = FormatDate::formatDateIndonesia(date('Y-m-d', strtotime($transaksi->tanggal_akta)));\n        $nomorAkta = $transaksi->akta_koperasi;\n... (truncated)\n\nPlease provide:\n1. A high-level `summary` of the project's main purpose and functionality in a few beginner-friendly sentences. Use markdown formatting with **bold** and *italic* text to highlight important concepts.\n2. A list (`relationships`) describing the key interactions between these abstractions. For each relationship, specify:\n    - `from_abstraction`: Index of the source abstraction (e.g., `0 # AbstractionName1`)\n    - `to_abstraction`: Index of the target abstraction (e.g., `1 # AbstractionName2`)\n    - `label`: A brief label for the interaction **in just a few words** (e.g., \"Manages\", \"Inherits\", \"Uses\").\n    Ideally the relationship should be backed by one abstraction calling or passing parameters to another.\n    Simplify the relationship and exclude those non-important ones.\n\nIMPORTANT: Make sure EVERY abstraction is involved in at least ONE relationship (either as source or target). Each abstraction index must appear at least once across all relationships.\n\nFormat the output as YAML:\n\n```yaml\nsummary: |\n  A brief, simple explanation of the project.\n  Can span multiple lines with **bold** and *italic* for emphasis.\nrelationships:\n  - from_abstraction: 0 # AbstractionName1\n    to_abstraction: 1 # AbstractionName2\n    label: \"Manages\"\n  - from_abstraction: 2 # AbstractionName3\n    to_abstraction: 0 # AbstractionName1\n    label: \"Provides config\"\n  # ... other relationships\n```\n\nNow, provide the YAML output:\n": "```yaml\nsummary: |\n  A **cooperative management system** for Indonesia that handles the entire lifecycle of cooperatives from establishment to dissolution. The system allows *notaries* to register new cooperatives by **reserving unique names**, submitting establishment documents, and managing member data. It integrates with government systems to *validate citizen identities* and business classifications. The platform tracks all changes through a **transaction ledger**, manages regional organization, and ensures proper authentication for all operations.\nrelationships:\n  - from_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    to_abstraction: 1 # Pesan Nama (Name Reservation)\n    label: \"Uses reserved name\"\n  - from_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    to_abstraction: 4 # Master Transaction Management\n    label: \"Updates status\"\n  - from_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    to_abstraction: 7 # Data Anggota (Member Data)\n    label: \"Contains members\"\n  - from_abstraction: 2 # API Authentication & JWT\n    to_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    label: \"Secures access\"\n  - from_abstraction: 3 # Dukcapil Integration\n    to_abstraction: 7 # Data Anggota (Member Data)\n    label: \"Validates identities\"\n  - from_abstraction: 4 # Master Transaction Management\n    to_abstraction: 6 # Wilayah (Regional) Management\n    label: \"Tracks location\"\n  - from_abstraction: 5 # Notaris Integration\n    to_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    label: \"Authorizes establishment\"\n  - from_abstraction: 8 # Perbaikan Data (Data Correction)\n    to_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    label: \"Corrects records\"\n  - from_abstraction: 9 # KBLI Business Activity\n    to_abstraction: 0 # Transaksi Koperasi (Cooperative Transaction)\n    label: \"Defines activities\"\n  - from_abstraction: 1 # Pesan Nama (Name Reservation)\n    to_abstraction: 5 # Notaris Integration\n    label: \"Requires notary\"\n  - from_abstraction: 6 # Wilayah (Regional) Management\n    to_abstraction: 2 # API Authentication & JWT\n    label: \"Provides regional data\"\n```", "\nGiven the following project abstractions and their relationships for the project ```` koperasi ````:\n\nAbstractions (Index # Name):\n- 0 # Transaksi Koperasi (Cooperative Transaction)\n\n- 1 # Pesan Nama (Name Reservation)\n\n- 2 # API Authentication & JWT\n\n- 3 # Dukcapil Integration\n\n- 4 # Master Transaction Management\n\n- 5 # Notaris Integration\n\n- 6 # Wilayah (Regional) Management\n\n- 7 # Data Anggota (Member Data)\n\n- 8 # Perbaikan Data (Data Correction)\n\n- 9 # KBLI Business Activity\n\n\nContext about relationships and project summary:\nProject Summary:\nA **cooperative management system** for Indonesia that handles the entire lifecycle of cooperatives from establishment to dissolution. The system allows *notaries* to register new cooperatives by **reserving unique names**, submitting establishment documents, and managing member data. It integrates with government systems to *validate citizen identities* and business classifications. The platform tracks all changes through a **transaction ledger**, manages regional organization, and ensures proper authentication for all operations.\n\n\nRelationships (Indices refer to abstractions above):\n- From 0 (Transaksi Koperasi (Cooperative Transaction)\n) to 1 (Pesan Nama (Name Reservation)\n): Uses reserved name\n- From 0 (Transaksi Koperasi (Cooperative Transaction)\n) to 4 (Master Transaction Management\n): Updates status\n- From 0 (Transaksi Koperasi (Cooperative Transaction)\n) to 7 (Data Anggota (Member Data)\n): Contains members\n- From 2 (API Authentication & JWT\n) to 0 (Transaksi Koperasi (Cooperative Transaction)\n): Secures access\n- From 3 (Dukcapil Integration\n) to 7 (Data Anggota (Member Data)\n): Validates identities\n- From 4 (Master Transaction Management\n) to 6 (Wilayah (Regional) Management\n): Tracks location\n- From 5 (Notaris Integration\n) to 0 (Transaksi Koperasi (Cooperative Transaction)\n): Authorizes establishment\n- From 8 (Perbaikan Data (Data Correction)\n) to 0 (Transaksi Koperasi (Cooperative Transaction)\n): Corrects records\n- From 9 (KBLI Business Activity\n) to 0 (Transaksi Koperasi (Cooperative Transaction)\n): Defines activities\n- From 1 (Pesan Nama (Name Reservation)\n) to 5 (Notaris Integration\n): Requires notary\n- From 6 (Wilayah (Regional) Management\n) to 2 (API Authentication & JWT\n): Provides regional data\n\n\nIf you are going to make a tutorial for ```` koperasi ````, what is the best order to explain these abstractions, from first to last?\nIdeally, first explain those that are the most important or foundational, perhaps user-facing concepts or entry points. Then move to more detailed, lower-level implementation details or supporting concepts.\n\nOutput the ordered list of abstraction indices, including the name in a comment for clarity. Use the format `idx # AbstractionName`.\n\n```yaml\n- 2 # FoundationalConcept\n- 0 # CoreClassA\n- 1 # CoreClassB (uses CoreClassA)\n- ...\n```\n\nNow, provide the YAML output:\n": "Looking at the project structure and dependencies, I'll order the abstractions from foundational/user-facing concepts to supporting/implementation details:\n\n```yaml\n- 0 # Transaksi Koperasi (Cooperative Transaction)\n- 1 # Pesan Nama (Name Reservation)\n- 7 # Data Anggota (Member Data)\n- 5 # Notaris Integration\n- 4 # Master Transaction Management\n- 8 # Perbaikan Data (Data Correction)\n- 9 # KBLI Business Activity\n- 6 # Wilayah (Regional) Management\n- 3 # Dukcapil Integration\n- 2 # API Authentication & JWT\n```\n\nThis order follows a logical flow:\n1. Start with the **core concept** (Cooperative Transaction) - what the system is all about\n2. Explain the **first step** in creating a cooperative (Name Reservation)\n3. Cover **member management** as a key component of cooperatives\n4. Introduce the **notary role** who authorizes these processes\n5. Explain how transactions are **tracked and managed**\n6. Cover **data correction** capabilities for maintaining accuracy\n7. Explain **business classification** system\n8. Describe **regional organization** of cooperatives\n9. Detail **government integration** for validation\n10. End with **technical infrastructure** (authentication/security)", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Transaksi Koperasi (Cooperative Transaction)\n\". This is Chapter 1.\n\nConcept Details:\n- Name: Transaksi Koperasi (Cooperative Transaction)\n\n- Description:\nThe heart of the cooperative system that manages all transactions like establishment, changes, and dissolution of cooperatives. \nIt's like a ledger that records every important event in a cooperative's lifecycle, from birth to any modifications.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\nThis is the first chapter.\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 636 # models/TransaksiKoperasi.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse app\\models\\MKbli;\nuse app\\models\\PesanNama;\nuse app\\models\\Disclaimer;\nuse app\\models\\DataAnggota;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\AktifitasUsaha;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\JenisTransaksi;\nuse app\\models\\WilayahNotariat;\nuse yii\\data\\ArrayDataProvider;\nuse app\\models\\KoperasiSekunder;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\bakum\\WilayahSABH;\nuse app\\models\\TPendirianDokumen;\n\n/**\n * This is the model class for table \"{{%t_koperasi}}\".\n *\n * @property int $id\n * @property int $jenis_transaksi_id\n * @property int $m_tingkat_wilayah_id\n * @property int $b_koperasi_id\n * @property int $provinsi_id\n * @property int $kab_kota_id\n * @property int $kecamatan_id\n * @property int $kel_desa_id\n * @property string $alamat_koperasi\n * @property string $rt\n * @property string $rw\n * @property string $kode_pos\n * @property string $email\n * @property string $telepon\n * @property int $ahu_notaris_id\n * @property string $akta_koperasi\n * @property string $tanggal_akta\n * @property string $taggal_rapat\n * @property string $alamat_rapat\n * @property string $jumlah_rapat\n * @property int $modal_usaha\n * @property int $simpanan_pokok_anggota\n * @property int $simpanan_wajib_anggota\n * @property int $modal_lain\n * @property string $jumlah_anggota\n * @property string $usaha_utama\n * @property string $usaha_pendukung\n * @property string $usaha_tambahan\n * @property int $is_minuta\n * @property int $is_beria_acara\n * @property int $is_surat_bukti\n * @property int $is_rencana_kerja\n * @property string $file_akta\n * @property string $file_berita_acara\n * @property int $is_redaksi_persetujuan\n * @property int $is_confirm 0:Tidak, 1: Ya\n * @property string $tanggal_confirm\n * @property string $tanggal_akhir\n * @property string $is_deleted 0:Tidak,1:Ya\n * @property string $created_by\n * @property string $created_date\n * @property string $updated_by\n * @property string $updated_date\n * @property string $deleted_by\n * @property string $deleted_date\n * @property int $id_notaris_pengganti\n * @property string $no_sk_notaris_pengganti\n * @property int $is_perbaikan 0:Tidak, 1: Ya\n */\nclass TransaksiKoperasi extends \\yii\\db\\ActiveRecord\n{\n    const DISC_PERSETUJUAN_PENDIRIAN = \"persetujuan_pendirian\";\n    const DISC_PERSETUJUAN_PERUBAHAN = \"persetujuan_perubahan\";\n    const BEFORE_LATEST = 1;\n    const LATEST = 0;\n    const JANGKA_WAKTU_TERBATAS =  \"Terbatas\";\n    const JANGKA_WAKTU_TIDAK_TERBATAS =  \"Tidak Terbatas\";\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%t_koperasi}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getJenisTransaksi()\n    {\n        return $this->hasOne( JenisTransaksi::className(), ['id' => 'jenis_transaksi_id'] );\n    }\n\n    public function getJeniskoperasi()\n    {\n        return $this->hasOne( JenisKoperasi::className(), ['id' => 'id'] );\n    }\n\n    public function getPesanNama()\n    {\n        return $this->hasOne( PesanNama::className(), ['id' => 't_pesan_nama_id'] );\n    }\n\n    public function getBakumsekunder()\n    {\n        return $this->hasMany(KoperasiSekunder::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getAktifitasusaha()\n    {\n        return $this->hasMany(AktifitasUsaha::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getDataanggota()\n    {\n        return $this->hasMany(DataAnggota::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getDokumenKoperasi()\n    {\n        return $this->hasMany(TPendirianDokumen::className(),['transaction_id' => 'id']);\n    }\n\n    public function getDataPerubahan() {\n        return $this->hasMany(ChecklistPerubahan::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getDataMaster() {\n        return $this->hasOne(MasterTransaction::className(),['id' => 'id_master']);\n    }\n\n    public function getDataSK() {\n        return $this->hasOne(SK::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getTingkatWilayah() {\n        return $this->hasOne(TingkatWilayah::className(),['id' => 'm_tingkat_wilayah_id']);\n    }\n\n    public function getBentukKoperasi() {\n        return $this->hasOne(BentukKoperasi::className(),['id' => 'b_koperasi_id']);\n    }\n\n    public function getPemilikManfaat() {\n        return $this->hasMany(PemilikManfaat::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getBakumGabung() {\n        return $this->hasMany(BHPenggabungan::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getBakumPisah() {\n        return $this->hasMany(BHPembagian::className(),['t_koperasi_id' => 'id']);\n    }\n\n    public function getTransaksiPerbaikan() {\n        return $this->hasOne(TransaksiPerbaikan::class,['t_koperasi_id' => 'id']);\n    }\n\n    /**\n     * Defines relation to WilayahSabh model using kel_desa_id.\n     * Assumes kel_desa_id in t_koperasi corresponds to ID_WIL in WILAYAH_SABH.\n     * @return \\yii\\db\\ActiveQuery\n     */\n    public function getWilayahSabh()\n    {\n        return $this->hasOne(WilayahSabh::className(), ['ID_WIL' => 'kel_desa_id']);\n    }\n\n    /**\n     * Retrieves the KD_WIL (Kode Wilayah) from WILAYAH_SABH related to this transaction.\n     * This KD_WIL can then be used as the base for NIK generation.\n     *\n     * @return string|null The KD_WIL value, or null if the relation is not found.\n     */\n    public function getKdWilForNikBase()\n    {\n        if ($this->wilayahSabh) {\n            return $this->wilayahSabh->KD_WIL;\n        }\n        return null;\n    }\n\n    /**\n     * Generates a new NIK for this TransaksiKoperasi instance and assigns it.\n     * Ensures the generated NIK is unique within the 'nik' column of the t_koperasi table.\n     * Retries NIK generation up to a maximum number of attempts if a duplicate is found.\n     *\n     * 1. Retrieves the KD_WIL from the associated WilayahSabh data.\n     * 2. In a loop, uses the KD_WIL as a base to generate a unique sequential NIK via BaseNik::generateNik().\n     * 3. Validates the generated NIK for uniqueness within TransaksiKoperasi.nik.\n     * 4. Assigns the generated NIK to the 'nik' attribute of this TransaksiKoperasi model.\n     * 5. Saves the TransaksiKoperasi model, ensuring the update only happens if NIK is currently NULL or empty.\n     *\n     * @param int $maxAttempts The maximum number of times to retry NIK generation if duplicates are found.\n     * @return bool True if NIK was successfully generated and assigned, false otherwise.\n     */\n    public function generateAndAssignNik($maxAttempts = 999)\n    {\n        // If NIK already exists and this is not a new record, no need to generate\n        if (!$this->isNewRecord && (!empty($this->nik))) {\n            Yii::info(\"NIK already exists for TransaksiKoperasi ID: {$this->id}. Skipping generation.\", __METHOD__);\n            return true;\n        }\n\n        // 1. Get KD_WIL from TransaksiKoperasi via WilayahSabh relation\n        $kdWil = $this->getKdWilForNikBase();\n\n        if (empty($kdWil)) {\n            Yii::error(\"Could not retrieve KD_WIL for TransaksiKoperasi ID: {$this->id}. Cannot generate NIK.\", __METHOD__);\n            $this->addError('nik', 'Tidak dapat mengambil data wilayah untuk NIK.'); // Add a model error\n            return false;\n        }\n\n        $generatedNik = null;\n        $attempt = 0;\n        $isUnique = false;\n\n        // Loop to generate NIK until a unique one is found or max attempts are reached\n        while ($attempt < $maxAttempts && !$isUnique) {\n            $attempt++;\n            Yii::info(\"Attempt {$attempt}/{$maxAttempts} to generate unique NIK for KD_WIL: {$kdWil}.\", __METHOD__);\n\n            // 2. Use the KD_WIL to generate NIK from BaseNik\n            $newNik = BaseNik::generateNik($kdWil);\n\n            if ($newNik === false) {\n                Yii::error(\"Failed to generate new NIK using BaseNik for KD_WIL: {$kdWil} on attempt {$attempt}. Check BaseNik logs.\", __METHOD__);\n                // It's possible BaseNik::generateNik had an internal error; stop trying\n                $this->addError('nik', 'Gagal menghasilkan NIK baru dari generator.');\n                return false;\n            }\n\n            // Validate uniqueness in TransaksiKoperasi table\n            // Ensure we don't compare against the current model's own NIK if it exists and is being re-assigned (unlikely for NIK generation)\n            $existingTransaksi = self::find()->where(['nik' => $newNik])->one();\n\n            if ($existingTransaksi === null) {\n                $generatedNik = $newNik;\n                $isUnique = true;\n                Yii::info(\"Unique NIK '{$generatedNik}' found on attempt {$attempt}.\", __METHOD__);\n            } else {\n                Yii::warning(\"Generated NIK '{$newNik}' already exists in TransaksiKoperasi. Retrying...\", __METHOD__);\n            }\n        }\n\n        if (!$isUnique) {\n            Yii::error(\"Failed to generate a unique NIK for TransaksiKoperasi ID: {$this->id} after {$maxAttempts} attempts. Last generated NIK was '{$newNik}' (duplicate).\", __METHOD__);\n            $this->addError('nik', 'Tidak dapat menghasilkan NIK unik setelah beberapa percobaan.');\n            return false;\n        }\n\n        // 3. Assign the generated unique NIK to TransaksiKoperasi.nik\n        $this->nik = $generatedNik;\n\n        // 4. Save the TransaksiKoperasi model\n        // We only save if the NIK field was genuinely empty or null before this process.\n        // getOldAttribute('nik') checks the original value before any changes in the current model instance.\n        if (empty($this->getOldAttribute('nik')) || $this->getOldAttribute('nik') === null) {\n            if ($this->save(false, ['nik'])) { // Save only the 'nik' attribute, skipping validation for other attributes\n                Yii::info(\"NIK '{$this->nik}' successfully assigned to TransaksiKoperasi ID: {$this->id}.\", __METHOD__);\n                return true;\n            } else {\n                Yii::error(\"Failed to save NIK '{$this->nik}' to TransaksiKoperasi ID: {$this->id}. Errors: \" . json_encode($this->getErrors()), __METHOD__);\n                $this->addError('nik', 'Gagal menyimpan NIK ke transaksi koperasi.');\n                return false;\n            }\n        } else {\n            Yii::warning(\"TransaksiKoperasi ID: {$this->id} already had an NIK: {$this->getOldAttribute('nik')} but generation was attempted. Skipping assignment.\", __METHOD__);\n            return true;\n        }\n    }\n\n    public function isMerahPutih() {\n        return strpos(strtoupper($this->jenis_koperasi), JenisKoperasi::NAME_MERAH_PUTIH) !== false;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['jenis_transaksi_id', 'm_tingkat_wilayah_id', 'b_koperasi_id', 'm_pola_id', 'provinsi_id', 'kab_kota_id', 'kecamatan_id', 'kel_desa_id', 'alamat_koperasi', 'ahu_notaris_id', 'akta_koperasi', 'tanggal_akta', 'taggal_rapat', 'alamat_rapat', 'jumlah_rapat', 'modal_usaha', 'simpanan_pokok_anggota', 'simpanan_wajib_anggota', 'usaha_utama', 'file_akta', 'file_berita_acara', 'tanggal_akhir', 'created_by'], 'required'],\n            [['jenis_transaksi_id', 'm_tingkat_wilayah_id', 'b_koperasi_id', 'm_pola_id', 'provinsi_id', 'kab_kota_id', 'kecamatan_id', 'kel_desa_id', 'ahu_notaris_id', 'modal_usaha', 'simpanan_pokok_anggota', 'simpanan_wajib_anggota', 'modal_lain', 'is_minuta', 'is_beria_acara', 'is_surat_bukti', 'is_rencana_kerja', 'is_redaksi_persetujuan', 'is_confirm'], 'integer'],\n            [['created_date','deleted_date','t_pesan_nama_id', 'nomor_transaksi', 'nama_koperasi', 'nama_notaris', 'jenis_koperasi','id_master','t_pesan_nama_id','full_nama','tanggal_jangka_waktu','nik'], 'safe'],\n            [['usaha_utama', 'usaha_pendukung', 'usaha_tambahan', 'is_deleted'], 'string'],\n            [['alamat_koperasi', 'alamat_rapat', 'jumlah_rapat', 'jumlah_anggota'], 'string', 'max' => 250],\n            [['rt', 'rw'], 'string', 'max' => 3],\n            [['kode_pos'], 'string', 'max' => 10],\n            [['email'], 'string', 'max' => 100],\n            [['telepon', 'akta_koperasi'], 'string', 'max' => 50],\n            [['file_akta', 'file_berita_acara'], 'string', 'max' => 255],\n            [['created_by', 'updated_by', 'deleted_by'], 'string', 'max' => 36],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'jenis_transaksi_id' => 'Jenis Transaksi ID',\n            't_pesan_nama_id' => 'Pesan Nama ID',\n            'm_tingkat_wilayah_id' => 'M Tingkat Wilayah ID',\n            'b_koperasi_id' => 'B Koperasi ID',\n            'provinsi_id' => 'Provinsi ID',\n            'kab_kota_id' => 'Kab Kota ID',\n            'kecamatan_id' => 'Kecamatan ID',\n            'kel_desa_id' => 'Kel Desa ID',\n            'alamat_koperasi' => 'Alamat Koperasi',\n            'rt' => 'Rt',\n            'rw' => 'Rw',\n            'kode_pos' => 'Kode Pos',\n            'email' => 'Email',\n            'telepon' => 'Telepon',\n            'ahu_notaris_id' => 'Ahu Notaris ID',\n            'akta_koperasi' => 'Akta Koperasi',\n            'tanggal_akta' => 'Tanggal Akta',\n            'taggal_rapat' => 'Taggal Rapat',\n            'alamat_rapat' => 'Alamat Rapat',\n            'jumlah_rapat' => 'Jumlah Rapat',\n            'modal_usaha' => 'Modal Usaha',\n            'simpanan_pokok_anggota' => 'Simpanan Pokok Anggota',\n            'simpanan_wajib_anggota' => 'Simpanan Wajib Anggota',\n            'modal_lain' => 'Dana Hibah',\n            'jumlah_anggota' => 'Jumlah Anggota',\n            'usaha_utama' => 'Usaha Utama',\n            'usaha_pendukung' => 'Usaha Pendukung',\n            'usaha_tambahan' => 'Usaha Tambahan',\n            'is_minuta' => 'Is Minuta',\n            'is_beria_acara' => 'Is Beria Acara',\n            'is_surat_bukti' => 'Is Surat Bukti',\n            'is_rencana_kerja' => 'Is Rencana Kerja',\n            'file_akta' => 'File Akta',\n            'file_berita_acara' => 'File Berita Acara',\n            'is_redaksi_persetujuan' => 'Is Redaksi Persetujuan',\n            'is_confirm' => 'Is Confirm',\n            'tanggal_confirm' => 'Tanggal Confirm',\n            'tanggal_akhir' => 'Tanggal Akhir',\n            'is_deleted' => 'Is Deleted',\n            'created_by' => 'Created By',\n            'created_date' => 'Created Date',\n            'updated_by' => 'Updated By',\n            'updated_date' => 'Updated Date',\n            'deleted_by' => 'Deleted By',\n            'deleted_date' => 'Deleted Date',\n            'id_notaris_pengganti' => 'ID Notaris Pengganti',\n            'no_sk_notaris_pengganti' => 'No SK notaris Pengganti'\n        ];\n    }\n\n    public static function checkPendirian($model) {\n        if($model) {\n\n            if (empty($model->no_pesan)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'PesanNamaKosong',\n                    'no_pesan' => $model->no_pesan,\n                ];\n            }\n\n            // Cek Available Nomor Pesan Nama\n            if (!self::CekAvailablePesanNama($model)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'PesanNamaNotAvailable',\n                    'no_pesan' => $model->no_pesan,\n                ];\n            }\n\n            //Cek Expire\n            if (self::CekExpire($model)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'ExpireTanggal',\n                    'no_pesan' => $model->no_pesan,\n                ];\n            }\n        }\n    }\n\n    public static function CekExpire($model) {\n        $data = self::getDataPesanNama($model);\n        if($data) {\n            $tgl_exp = $data->end_date;\n            $now = date(\"Y-m-d\");\n            return $now > $tgl_exp;\n        }\n    }\n\n    public static function getDataPesanNama($model) {\n        if($model) {\n            return PesanNama::find()\n                    ->where(['no_pesan' => $model->no_pesan])\n                    // ->andWhere(['ahu_notaris_id' => $model->ahu_notaris_id])\n                    ->andWhere(['is_deleted' => '0'])\n                    ->andWhere(['status' => 0])\n                    ->one();\n        }\n    }\n\n    public static function CekAvailablePesanNama($model) {\n        $data = self::getDataPesanNama($model);\n        if($data) {\n\n            // Cek apakah punya nama yang sama di table transaksi\n            $cek = self::find()->where(['nama_koperasi' => $data->nama_koperasi, 'is_finish' => 1])->one();\n            if (!$cek) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static function getWilayahNotariat( $data ) {\n\n        extract( $data );\n\n        $arr = array();\n\n        $raw1 = WilayahNotariat::find()\n            ->where('wilayah_id in ('.$provinsi.', '.$kabupaten.', '.$kecamatan.')')\n            ->orderBy(['TINGKAT_WILAYAH' => SORT_ASC])\n            ->all();\n\n        $raw2 = WilayahSABH::find()->where(['ID_WIL' => $kelurahan, 'ID_WILAYAH_M' => $kecamatan])->one();\n\n        return $arr = [\n            'provinsi' => $raw1[0]->NAMA,\n            'kabupaten' => $raw1[1]->NAMA,\n            'kecamatan' => $raw1[2]->NAMA,\n            'kelurahan' => !empty($raw2) ? $raw2->NM_KELURAHAN : \"\",\n        ];\n    }\n\n    public static function getKBLIType( $id, $type ) {\n\n        $ids = array();\n        $raw = AktifitasUsaha::find()->select('kbli_id')->where(['t_koperasi_id' => $id, 'jenis_kbli' => $type])->asArray()->all();\n\n\n        foreach ($raw as $list) {\n\n            array_push($ids, $list['kbli_id']);\n        }\n\n        return $ids;\n    }\n\n    public static function getPreviewData( $id, $disclaimerType = self::DISC_PERSETUJUAN_PENDIRIAN ) {\n\n        $data = self::find()\n            ->select('kop_t_koperasi.id as koperasi_id, kop_t_koperasi.nomor_transaksi, kop_t_koperasi.tanggal_akta, kop_t_koperasi.tanggal_rapat as tanggal_rapat, kop_t_koperasi.alamat_rapat, kop_t_koperasi.jumlah_peserta_rapat, kop_t_koperasi.modal_koperasi, kop_t_koperasi.simpanan_pokok, kop_t_koperasi.simpanan_wajib, kop_t_koperasi.dana_hibah, kop_t_koperasi.dana_cadangan, kop_t_koperasi.is_finish, kop_t_koperasi.provinsi_id, kop_t_koperasi.kab_kota_id, kop_t_koperasi.kecamatan_id, kop_t_koperasi.kel_desa_id, kop_t_koperasi.alamat_koperasi, kop_t_koperasi.rw, kop_t_koperasi.rt, kop_t_koperasi.kode_pos, kop_t_koperasi.telepon, kop_t_koperasi.email, kop_t_koperasi.akta_koperasi, kop_t_koperasi.t_pesan_nama_id, kop_t_koperasi.created_date, kop_t_koperasi.jangka_waktu, kop_t_koperasi.periode_pengurus_awal,kop_t_koperasi.periode_pengurus_akhir, kop_t_koperasi.full_nama, kop_t_koperasi.jumlah_jangka_waktu,\n                    nm_koperasi.*,\n                    w.nama as nama_wilayah,\n                    kp.nama as bentuk_koperasi,\n                    nn.nama_lengkap')\n            ->leftJoin('(select\n                            pn.id, pn.nama_koperasi,\n                            jk.nama as jenis_koperasi,\n                            pk.nama as pola_pengelolaan,\n                            pn.model_koperasi as model_koperasi\n                        from\n                            kop_pesan_nama pn\n                        left join\n                            kop_jenis_koperasi jk on\n                                case\n                                    when pn.c_jenis_koperasi_id is null then pn.jenis_koperasi_id = jk.id\n                                    else pn.c_jenis_koperasi_id = jk.id\n                                end\n                        left join\n                            kop_pola_pengelolaan pk on pn.m_pola_id = pk.id) as nm_koperasi on nm_koperasi.id = kop_t_koperasi.t_pesan_nama_id'\n                        )\n            ->leftJoin('kop_tingkat_wilayah w', 'kop_t_koperasi.m_tingkat_wilayah_id = w.id')\n            ->leftJoin('kop_b_koperasi kp', 'kop_t_koperasi.b_koperasi_id = kp.id')\n            ->leftJoin('kop_notaris_npak nn', 'kop_t_koperasi.ahu_notaris_id = nn.id_notaris')\n            // ->orderBy(['created_date' => SORT_DESC])\n            ->where(['kop_t_koperasi.id' => $id])\n            ->asArray()\n            ->one();\n\n        $data['BHPenggabungan'] = new ArrayDataProvider([\n                'allModels' => BHPenggabungan::find()->where(['t_koperasi_id' => $id])->asArray()->all()\n            ]);\n\n        $data['BHPembagian'] = new ArrayDataProvider([\n            'allModels' => BHPembagian::find()->where(['t_koperasi_id' => $id])->asArray()->all()\n        ]);\n\n        $dataKBLI = [\n            'KBLIUtama' => new ArrayDataProvider([\n                'allModels' => MKbli::getAktifitasUsaha(self::getKBLIType($id,'Utama')),\n            ]),\n            'KBLIPendukung' => new ArrayDataProvider([\n                'allModels' => MKbli::getAktifitasUsaha(self::getKBLIType($id,'Pendukung'))\n            ]),\n            'KBLITambahan' => new ArrayDataProvider([\n                'allModels' => MKbli::getAktifitasUsaha(self::getKBLIType($id,'Tambahan'))\n            ])\n        ];\n\n        $dataPengawasDanPengurus = new ArrayDataProvider([\n            'allModels' => DataAnggota::getAnggotaByID( $data['koperasi_id'] )\n        ]);\n\n        $dataBO = new ArrayDataProvider([\n            'allModels' => PemilikManfaat::getPemilikManfaatByID( $data['koperasi_id'] )\n        ]);\n\n        $caller = strtolower( debug_backtrace()[1]['class'] );\n        $type = [];\n\n        if( strpos($caller, 'pendirian') ) {\n            $type = [\n                1,\n                2,\n                3, \n                TPendirianDokumen::TYPE_MAPPING['PENDIRIAN_HASIL_MUSYAWARAH_DESA']\n            ];\n        }\n        else if ( strpos($caller, 'perubahan') ) {\n            $type = [\n                4,\n                5,\n                6, \n                TPendirianDokumen::TYPE_MAPPING['PERUBAHAN_HASIL_MUSYAWARAH_DESA']\n            ];\n        }\n        else if ( strpos($caller, 'pembubaran') ) {\n            $type = [7];\n        }\n\n        $dokumen = TPendirianDokumen::getDocumentByID( $data['koperasi_id'], $type );\n\n        $data['dataKBLI'] = $dataKBLI;\n        $data['dataAnggota'] = $dataPengawasDanPengurus;\n        $data['dataBO'] = $dataBO;\n        $data['bo_from_api'] = PemilikManfaat::isFromApi($data['koperasi_id']);\n        $data['dokumen'] = $dokumen;\n\n        $rawWilayah = self::getWilayahNotariat([\n            'provinsi' => $data['provinsi_id'],\n            'kabupaten' => $data['kab_kota_id'],\n            'kecamatan' => $data['kecamatan_id'],\n            'kelurahan' => $data['kel_desa_id']\n        ]);\n\n        extract($rawWilayah);\n\n        $data['provinsi'] = $provinsi;\n        $data['kabupaten'] = $kabupaten;\n        $data['kecamatan'] = $kecamatan;\n        $data['kelurahan'] = $kelurahan;\n        $data['disclaimer'] = Disclaimer::find()->where(['parent' => $disclaimerType])->all();\n\n        return $data;\n    }\n\n    public static function getStatusTrans($id) {\n        return self::findOne($id)->is_finish;\n    }\n\n    public function getDaftarTransaksiKoperasi( $get ) {\n\n        $query = self::find()->joinWith(['jenisTransaksi'])->where(['id_master' => Yii::$app->getRequest()->get('id')]);\n\n        if ( ! empty( $get ) ) {\n\n            if ( ! empty( $get['nama_koperasi'] ) ) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $get['nama_koperasi']]);\n            }\n\n            if ( ! empty( $get['jenis_koperasi'] ) ) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if ( ! empty( $get['jenis_koperasi'] ) ) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if ( ! empty( $get['nama_notaris'] ) ) {\n\n                $query->andFilterWhere(['like', 'nama_notaris', $get['nama_notaris']]);\n            }\n\n            if ( ! empty( $get['nomor_transaksi'] ) ) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $get['nomor_transaksi']]);\n            }\n\n            if ( Yii::$app->getRequest()->getQueryParam('created_date') ) {\n\n                $date = Yii::$app->getRequest()->getQueryParam('created_date');\n\n                $query->andFilterWhere(['between', 'created_date', date('Y-m-d', strtotime( $date )), date('Y-m-d', strtotime( \"+1 day\", strtotime( $date) ) ) ]);\n            }\n\n            if ( ! empty( $get['jenis_transaksi_id'] ) ) {\n\n                $query->andFilterWhere(['jenis_transaksi_id' => $get['jenis_transaksi_id']]);\n            }\n\n            if ( ! empty( $get['no_sk_koperasi'] ) ) {\n\n                $query->andFilterWhere(['kop_sk.no_sk_koperasi' => $get['no_sk_koperasi']]);\n            }\n\n        }\n\n        return $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ]\n        ]);\n    }\n\n    public static function findLastTransaction( $type, $id ) {\n\n        $data = self::find()->where(['id_master' => $id])->orderBy(['created_date' => SORT_ASC])->asArray()->all();\n        $c = count( $data );\n\n        switch ( $type ) {\n\n            case 1:\n\n                $cBeforeLatest = $c - 2;\n                return $data[$cBeforeLatest];\n\n                break;\n\n            case 0:\n\n                $last = 0;\n                return $data[$last];\n\n                break;\n        }\n    }\n    /**\n     * Mendapatkan Transaksi Terakhir Berdasarkan NIK\n     *\n     * @param Integer Nomor Induk Koperasi\n     *\n     * @return TransaksiKoperasi Data Transaksi Koperasi\n     */\n    public static function getLastTransByNik($nik) {\n        if(!$nik) {\n            return false;\n        }\n\n        $data = self::find()\n                ->where(['nik' => $nik])\n                ->andWhere(['is_deleted' => '0'])\n                ->andWhere(['is_finish' => 1])\n                ->orderBy(['id' => SORT_DESC])->one();\n\n        if(!$data) {\n            return false;\n        }\n\n        return $data;\n    }\n    /**\n     * Mendapatkan Data Pendirian dari Pesan Nama\n     *\n     * @param Integer id_pesan_nama\n     *\n     * @return TransaksiKoperasi Data Transaksi Koperasi\n     * Waktu : 2019-12-06\n     * Keterangan : search semua transaksi baik selesai maupun belum issue https://gitlab.docotel.net/ws/koperasi/issues/173 oleh Dito\n     */\n    public static function checkStatusPendirian($id_pesan)\n    {\n        $data = TransaksiKoperasi::find()\n            ->where(['t_pesan_nama_id' => $id_pesan])\n            ->andWhere(['is_deleted' => '0'])->one();\n\n        return $data;\n    }\n\n    public static function checkNikByNama($nama_koperasi)\n    {\n        $res = [\n            'data' => null,\n            'error' => '',\n        ];\n\n        if ($nama_koperasi) {\n\n            $data = self::find()\n                ->where(['nama_koperasi' => $nama_koperasi])\n                ->andWhere(['is_deleted' => '0', 'is_finish' => '1'])\n                ->andWhere(['jenis_transaksi' => 'PENDIRIAN'])\n                ->one();\n\n            if ($data) {\n                $master = $data->dataMaster;\n\n                $list_transaksi = $master->getListTransaksi()->where(['is_deleted' => '0', 'is_finish' => '1'])->all();\n\n                foreach ($list_transaksi as $transaksi) {\n                    if (!empty($transaksi->nik)) {\n                        $res['error'] = \"Sudah Ada NIK dengan nomor {$transaksi->nik} di koperasi ini\";\n                        return $res;\n                    }\n                }\n\n                $res['data'] = $data;\n                return $res;\n            }\n\n            $res['error'] = \"Nama Koperasi Tidak Ditemukan\";\n            return $res;\n        }\n\n        $res['error'] = 'Nama Koperasi Kosong';\n        return $res;\n    }\n\n    public static function getNikById($id)\n    {\n        $data = self::find()\n            ->where(['id_master' => $id])\n            ->orderBy(['id' => SORT_DESC])\n            ->one();\n\n        if ($data) {\n            return $data->nik;\n        }\n\n        return null;\n    }\n}\n\n\n--- File: 685 # modules/Api/controllers/TransaksiController.php ---\n<?php \nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Url;\nuse yii\\helpers\\Json;\nuse yii\\rest\\Controller;\nuse yii\\filters\\VerbFilter;\nuse app\\components\\ApiHelper;\nuse app\\components\\LogHelper;\nuse app\\models\\TransaksiKoperasi;\nuse app\\modules\\Api\\components\\AuthHelper;\nuse app\\modules\\Api\\components\\TimeHelper;\nuse app\\modules\\Api\\components\\TransaksiHelper;\nuse app\\modules\\Api\\models\\JWTToken;\nuse yii\\base\\Exception;\nuse app\\models\\bakum\\LogCodex;\nuse app\\components\\helper\\TelegramHelper;\nuse app\\models\\Setting;\nuse Firebase\\JWT\\JWT;\n\nclass TransaksiController extends Controller\n{\n\n    public function behaviors()\n    {\n        return [\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    // 'index' => ['POST'],\n                    'dummy' => ['POST'],\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * Function untuk Output Response sekaligus Save Logging\n     * \n     * @param Array Data Request\n     * \n     * @return JSON/XML Output Response Berdasarkan\n     */\n    public function responseAndSaveLog(Array $data, $typeFormat = 'JSON')\n    {\n        $this->saveLog($data);\n\n        return $this->showResponse($data['response'], $typeFormat);\n    }\n\n    /**\n     * Function untuk save Log\n     * \n     * @param Array Data Request\n     * \n     * @return Boolean Hasil Dari Saving Log\n     */\n    public function saveLog(Array $data)\n    {\n        return LogHelper::saveLog([\n            'service_uri' => $data['url'],\n            'request' => $data['request'],\n            'response' => $data['response'],\n            'nik' => $data['nik'],\n            'additional_data' => json_encode($data['additional_data']),\n            'is_error' => $data['is_error'],\n            'type' => $data['type'],\n            'execution_time' => TimeHelper::getElapsedTime($data['startTime']),\n        ]);\n    }\n\n    /**\n     * Function untuk menampilkan response berdasarkan format\n     * \n     * @param Array Response Array\n     * @param String Format Type untuk Response\n     * \n     * @return JSON/XML Return response sesuai type\n     */\n    public function showResponse(Array $res, $type = 'JSON')\n    {\n        if(!$res || !$type) {\n            throw new \\Exception;\n        }\n        // Normalize Param Type\n        $type = strtoupper($type);\n        \n        if ($type == 'XML') {\n            return $this->asXml($res);\n        }\n        elseif ($type == 'JSON') {\n            return $this->asJson($res);\n        }\n        else {\n            throw new \\Exception;\n        }\n    }\n\n    /**\n     * Function untuk menerima hit perubahan transaksi dari ODS\n     * \n     * @param AUTH_KEY\n     * @param XML_DATA\n     * \n     * @return JSON\n     */\n    public function actionIndex()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        }   \n        catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        $nik = $dataJson['data']['nik'];\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        $createTrans = TransaksiHelper::createTrans($dataJson);\n\n        if(!$createTrans['status']) {\n            $res = [\n                'code' => '05',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $createTrans['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson,'data.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson,'data.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Action API untuk url hit sendData Api Dennis\n     * \n     * @param AUTH_KEY\n     * @param JSON_DATA\n     * \n     * @return Json\n     */\n    public function actionDummy()\n    {\n        \n        $headers = Yii::$app->request->headers;\n        if($headers['Content-Type'] != 'application/json') {\n            $res = [\n                'code' => '01',\n                'message' => 'Format Must Be In Json',\n                'status' => 415\n            ];\n\n            return $this->asJson($res);\n        }\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n        $dataJson = json_decode($data, true);\n        $authKey = $headers['auth'];\n        $nik =  $dataJson['data']['koperasi']['nik'];\n        if(!$dataJson) {\n            $res = [\n                'code' => '02',\n                'message' => 'Json Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->asJson($res);\n        }\n\n        $auth = AuthHelper::checkAuth($authKey, $nik);\n\n        if(!$auth) {\n            $res = [\n                'code' => '03',\n                'message' => 'Authentication failed',\n                'status' => 401\n            ];\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->asJson($res);\n    }\n\n    /**\n     * Action API untuk url hit Update NIK dari ODS\n     * \n     * @param AUTH_KEY\n     * @param JSON_DATA\n     * \n     * @return Json\n     */\n    public function actionUpdate()\n    { \n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        $nomor_transaksi = $dataJson['data']['nomor_transaksi'];\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        $updateTrans = TransaksiHelper::updateTrans($dataJson);\n\n        if(!$updateTrans['status']) {\n            $res = [\n                'code' => '05',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $updateTrans['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson,'data.nomor_transaksi'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson,'data.nomor_transaksi'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Function untuk menerima hit insert transaksi pendirian dari ODS\n     * \n     * @param AUTH_KEY JWT\n     * @param JSON_DATA\n     * \n     * @return JSON\n     */\n    public function actionInsert()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if (empty($dataJson['data'])) {\n            $res = [\n                'code' => '05',\n                'message' => 'Invalid Parameter.',\n                'additional_info' => 'Parameter Data tidak boleh kosong',\n                'status' => 400\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => '',\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        TransaksiHelper::filterEmptyArray($dataJson);\n        $insertTransMigrasi = TransaksiHelper::insertTransMigrasi($dataJson['data']);\n\n        if (!$insertTransMigrasi['status']) {\n            $res = [\n                'code' => '06',\n                'message' => 'Failed To Create Transaction.',\n                'additional_info' => $insertTransMigrasi['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    /**\n     * Function untuk menerima hit edit transaksi dari ODS\n     * ODS hanya bisa mengedit transaksi yang is_migrasi = 1\n     * \n     * @param AUTH_KEY\n     * @param JSON\n     * \n     * @return JSON\n     */\n    public function actionEdit()\n    {\n        // Start Exec Time\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"ODS_API_INCOMMING\";\n        // Get Headers\n        $headers = Yii::$app->request->headers;\n        // Get Raw Body\n        $data = Yii::$app->request->rawBody;\n\n        if (!Yii::$app->request->isPost) {\n            $res = [\n                'code' => '01',\n                'message' => 'Method Not Allowed',\n                'status' => 405\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if ($headers['Content-Type'] != 'application/xml') {\n            $res = [\n                'code' => '02',\n                'message' => 'Content Type Is Not application/xml',\n                'status' => 415\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $dataXml = simplexml_load_string($data);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '03',\n                'message' => 'XML Format Is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $json = json_encode($dataXml);\n        $dataJson = json_decode($json, true);\n\n        // Cek Auth\n        if (empty($headers['AuthJWT'])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Empty Headers',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n        $auth_jwt = explode(\"Bearer \", $headers['AuthJWT']);\n\n        if (empty($auth_jwt[1])) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication Failed - Header Format is Not Valid',\n                'status' => 400\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        try {\n            $token = new JWT;\n            $hashKey = Setting::getValue('jwt_key');\n            $secretKey = base64_encode($hashKey);\n            $token = $token::decode($auth_jwt[1], $secretKey, ['HS256']);\n        } catch(\\Exception $e) {\n            $res = [\n                'code' => '04',\n                'message' => 'Authentication failed - ' . $e->getMessage(),\n                'status' => 401\n            ];\n\n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => null,\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        if (empty($dataJson['nik']) || empty($dataJson['data'])) {\n            $res = [\n                'code' => '05',\n                'message' => 'Invalid Parameter.',\n                'additional_info' => 'Parameter NIK / Data tidak boleh kosong',\n                'status' => 400\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => '',\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n        TransaksiHelper::filterEmptyArray($dataJson);\n        $editTransMigrasi = TransaksiHelper::editTransMigrasi($dataJson['nik'], $dataJson['data']);\n\n        if (!$editTransMigrasi['status']) {\n            $res = [\n                'code' => '06',\n                'message' => 'Failed To Edit Transaction.',\n                'additional_info' => $editTransMigrasi['info'],\n                'status' => 500\n            ];\n    \n            return $this->responseAndSaveLog([\n                'url' => $url,\n                'request' => $data,\n                'response' => $res,\n                'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n                'additional_data' => $headers->toArray(),\n                'is_error' => 1,\n                'type' => $type_api,\n                'startTime' => $start,\n            ]);\n        }\n\n\n        $res = [\n            'code' => '00',\n            'message' => 'Success',\n            'status' => 200\n        ];\n\n        return $this->responseAndSaveLog([\n            'url' => $url,\n            'request' => $data,\n            'response' => $res,\n            'nik' => TransaksiHelper::getData($dataJson, 'data.koperasi.nik'),\n            'additional_data' => $headers->toArray(),\n            'is_error' => 0,\n            'type' => $type_api,\n            'startTime' => $start,\n        ]);\n    }\n\n    public function actionSandbox() {\n        return ApiHelper::getKoperasiJson(155);\n    }\n}\n?>\n\n--- File: 682 # modules/Api/components/TransaksiHelper.php ---\n<?php\nnamespace app\\modules\\Api\\components;\n\nuse Yii;\nuse yii\\base\\Component;\nuse app\\models\\BHPembagian;\nuse app\\models\\DataAnggota;\nuse app\\models\\AktifitasUsaha;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\JenisTransaksi;\nuse app\\models\\PemilikManfaat;\nuse app\\models\\KoperasiSekunder;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\MasterTransaction;\nuse app\\models\\SK;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\TingkatWilayah;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\PolaPengelolaan;\nuse app\\models\\WilayahOds;\nuse app\\components\\KoperasiHelper;\nuse app\\models\\ChecklistPerubahan;\nuse app\\modules\\Api\\components\\SKHelper;\nuse app\\modules\\Api\\components\\DataAnggotaHelper;\nuse yii\\base\\Exception;\nuse app\\components\\ApiHelper;\nuse yii\\helpers\\ArrayHelper;\n\nclass TransaksiHelper extends Component\n{\n\n    public static function createTrans($data)\n    {\n        if(!$data) {\n            return [\n                'status' => false,\n                'info' => 'Data tidak Boleh Kosong',\n            ];\n        }\n\n        $nik = $data['data']['nik'];\n\n        if(!$nik) {\n            return [\n                'status' => false,\n                'info' => 'NIK Tidak Ditemukan',\n            ];\n        }\n\n        $transaction = Yii::$app->db_koperasi->beginTransaction();\n        try {\n\n            $cekValidateAnggota = self::validateDataAnggota($data);\n            if(!$cekValidateAnggota['status']) {\n                return [\n                    'status' => false,\n                    'info' => $cekValidateAnggota['info']\n                ];\n            }\n            $newId = self::createNewTrans($nik, $data);\n            if(!$newId) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Membuat Transaksi Baru'\n                ];\n            }\n\n            $updateAnggota = self::updateDataAnggota($newId,$data);\n            if(!$updateAnggota) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Melakukan Perubahan Data Anggota'\n                ];\n            }\n\n            $transaction->commit();\n        }\n        catch(\\Exception $e) {\n            $transaction->rollback();\n            return [\n                'status' => false,\n                'info' => 'Terjadi Kesalahan Saat Membuat Transaksi'\n            ];\n        }\n\n        if(!$updateAnggota) {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n            try {\n                // Create / Generate Surat SK / SP\n                $generateSurat = self::sendPushPerubahan($newId);\n                if(!$generateSurat) {\n                    return [\n                        'status' => false,\n                        'info' => 'Gagal Melakukan Generate Surat SK/SP'\n                    ];\n                }\n\n                $transaction->commit();\n            }\n            catch(\\Exception $e) {\n                $transaction->rollback();\n                $transHapus = TransaksiKoperasi::find()->where(['id' => $newId ])->one();\n                if($transHapus) {\n                    $transHapus->delete();\n                }\n                return [\n                    'status' => false,\n                    'info' => 'Terjadi Kesalahan Saat Melakukan Generate Surat SK/SP'\n                ];\n            }\n        }\n\n       return [\n           'status' => true,\n           'info' => null\n       ];\n    }\n\n    public static function updateTrans($data)\n    {\n        if(!$data) {\n            return [\n                'status' => false,\n                'info' => 'Data tidak Boleh Kosong',\n            ];\n        }\n\n        $nomor_transaksi = $data['data']['nomor_transaksi'];\n\n        if(!$nomor_transaksi) {\n            return [\n                'status' => false,\n                'info' => 'NIK Tidak Ditemukan',\n            ];\n        }\n        $transaction = Yii::$app->db_koperasi->beginTransaction();\n        try {\n\n            $updateNik = self::updateKoperasi($nomor_transaksi, $data);\n            if(!$updateNik) {\n                return [\n                    'status' => false,\n                    'info' => 'Gagal Melakukan Perubahan Data Koperasi'\n                ];\n            }\n\n            $transaction->commit();\n        }\n        catch(\\Exception $e) {\n            $transaction->rollback();\n            return [\n                'status' => false,\n                'info' => 'Terjadi Kesalahan Saat Membuat Transaksi'\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function createNewTrans($nik, $data)\n    {\n        $dataTrans = TransaksiKoperasi::find()->where(['nik' => $nik])->orderBy(['id' => SORT_DESC])->one();\n        $newTrans = new TransaksiKoperasi();\n        $newTrans->setAttributes($dataTrans->attributes, false);\n        $newTrans->id = null;\n        //$newTrans->nomor_transaksi = KoperasiHelper::getNoTrans('koperasi','perubahan', ['no_wilayah' => $dataTrans->nomor_transaksi]);\n        $newTrans->nomor_transaksi = '';\n        $newTrans->jenis_transaksi_id = JenisTransaksi::getPrimaryByNama(\"PERUBAHAN\");\n        $newTrans->nama_notaris = null;\n        $newTrans->ahu_notaris_id = null;\n        $newTrans->jenis_transaksi = \"PERUBAHAN\";\n        $newTrans->jumlah_jangka_waktu = 0;\n        $newTrans->tanggal_rapat = date(\"Y-m-d\");\n        $newTrans->tanggal_akta = date(\"Y-m-d\");\n        $newTrans->is_ods = 1;\n        $newTrans->created_date = date(\"Y-m-d H:i:s\");\n        $newTrans->updated_date = null;\n        $newTrans->updated_by = null;\n        $newTrans->deleted_date = null;\n        $newTrans->deleted_by = null;\n        $newTrans->is_deleted = '0';\n        $newTrans->is_finish = 1;\n\n        $saveTrans = $newTrans->save(false);\n        $newId = $newTrans->getPrimaryKey();\n        $oldId = $dataTrans->id;\n\n        $saveAU = self::saveRelationData(AktifitasUsaha::className(),$oldId, $newId,'t_koperasi_id');\n        $savePembagian = self::saveRelationData(BHPembagian::className(),$oldId, $newId, 't_koperasi_id');\n        $savePenggabungan = self::saveRelationData(BHPenggabungan::className(),$oldId,$newId, 't_koperasi_id');\n        $saveBO = self::saveRelationData(PemilikManfaat::className(), $oldId, $newId, 't_koperasi_id');\n        $saveSekunder = self::saveRelationData(KoperasiSekunder::className(), $oldId, $newId, 't_koperasi_id');\n        $saveAnggota = self::saveRelationData(DataAnggota::className(), $oldId, $newId, 't_koperasi_id');\n\n        // Create Checklist Perubahan\n        $saveDataPerubahan = self::createDataPerubahan($newId, $newTrans->id_master, $data);\n\n        $saveData = $saveTrans && $saveAU && $savePembagian && $savePenggabungan && $saveBO && $saveSekunder && $saveAnggota && $saveDataPerubahan;\n        if(!$saveData) {\n            return false;\n        }\n\n        return $newId;\n    }\n\n    public static function validateDataAnggota($data)\n    {\n        $jumlah = 3;\n        $jumlahPengurus = $jumlahPengawas = 0;\n        $dataAnggota = (Array) self::getData($data,'data.perubahan.data_anggota.anggota');\n        if(!$dataAnggota) {\n            return [\n                'status' => false,\n                'info' => 'Data Anggota Tidak Ditemukan'\n            ];\n        }\n        if(!empty($dataAnggota['nik'])){\n            return [\n                'status' => false,\n                'info' => \"Pengurus Minimal {$jumlah} Orang.\"\n            ];\n        }\n        if(empty($dataAnggota['nik'])){\n            $coulumnnik = array_column($dataAnggota, 'nik');\n            $unique = array_unique($coulumnnik);\n            $duplicates = array_diff_assoc($coulumnnik, $unique);\n            if ($duplicates) {\n                foreach ($duplicates as $d){\n                    return [\n                        'status' => false,\n                        'info' => 'Duplikat NIK ' . $d\n                    ];\n                }\n            }\n        }\n        foreach ($dataAnggota as $anggota) {\n            if ($anggota['status'] == \"PENGURUS\") {\n                $jumlahPengurus++;\n            }\n            \n            if ($anggota['status'] == \"PENGAWAS\") {\n                $jumlahPengawas++;\n            }\n        }\n\n        if (($jumlahPengurus < $jumlah)) {\n            return [\n                'status' => false,\n                'info' => \"Pengurus Minimal {$jumlah} Orang.\"\n            ];\n        }\n        \n        if (($jumlahPengawas <= 0)) {\n            return [\n                'status' => false,\n                'info' => \"Pengawas Tidak Ditemukan.\"\n            ];\n        }\n\n        if (( ($jumlahPengurus % 2) == 0 )) {\n            return [\n                'status' => false,\n                'info' => \"Pengurus Harus Memiliki Jumlah Ganjil.\"\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function saveRelationData($class, $oldId, $newId, $relationField)\n    {\n        $data = $class::find()->where([$relationField => $oldId])->all();\n\n        if(!$data) {\n            return true;\n        }\n\n        try {\n            foreach($data as $d) {\n                $newData = new $class($d);\n                $newData->id = null;\n                $newData->$relationField = $newId;\n                $newData->save();\n            }\n\n            return true;\n        }\n        catch(\\Exception $e) {\n            return false;\n        }\n    }\n\n    public static function updateDataAnggota($id, $data)\n    {\n        $dataAnggota = (Array) self::getData($data,'data.perubahan.data_anggota.anggota');\n\n        if(!$dataAnggota) {\n            return false;\n        }\n        $oldData = DataAnggota::find()->where(['t_koperasi_id' => $id])->all();\n\n        foreach ($oldData as $val) {\n            $val->delete();\n        }\n\n        foreach($dataAnggota as $data) {\n            $newData = new DataAnggota();\n            $newData->t_koperasi_id = $id;\n            $idStatus = DataAnggotaHelper::getIdStatusPengurus($data['status']);\n            if(!$idStatus) {\n                throw new \\Exception;\n            }\n            $newData->m_status_pengurus_id = $idStatus;\n            $newData->nama_status = !empty($data['status'])? $data['status'] : \"\";\n            $newData->nik = !empty($data['nik'])? $data['nik'] : \"\";\n            $newData->nama = !empty($data['nama'])? $data['nama'] : \"\";\n            $idJK = DataAnggotaHelper::getIdJenisKelamin($data['jenis_kelamin']);\n            if(!$idJK) {\n                throw new \\Exception;\n            }\n            $newData->jenis_kelamin_id = $idJK;\n            $newData->jabatan = !empty($data['jabatan'])? $data['jabatan'] : \"\";\n            $newData->npwp = !empty($data['npwp'])? $data['npwp'] : \"\";\n            $newData->hp = !empty($data['no_hp'])? $data['no_hp'] : \"\";\n\n            if(!$newData->save(false)) {\n                return false;\n            }        \n        }\n\n        return true;\n    }\n\n    public static function updateKoperasi($nomor_transaksi, $data)\n    {\n        //Get Data Koperasi Lama\n        $dataOld = (Array) self::getData($data,'data.nomor_transaksi');\n        $dataNew = (Array) self::getData($data,'data.perubahan.nik');\n\n        if(!Yii::$app->db_koperasi->createCommand()->update('kop_t_koperasi', ['nik' => $dataNew[0]], 'nomor_transaksi = :nomor_transaksi AND jenis_transaksi_id = 2', [':nomor_transaksi' => $nomor_transaksi])->execute()){\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function getData($data, $search)\n    {\n        $listKey = explode(\".\",$search);\n        $walk = $data;\n        foreach($listKey as $key) {\n            try{\n                $walk = $walk[$key];\n            }\n            catch(\\Exception $e) {\n                return false;\n            }\n        }\n\n        return $walk;\n    }\n\n    public static function sendPushPerubahan($id)\n    {\n        if(!$id) {\n            return false;\n        }\n\n        return SKHelper::pushPerubahan($id);\n    }\n\n    public static function createDataPerubahan($idTrans, $idMaster, $data)\n    {\n        $idPerubahan = (Array) self::getData($data, 'data.perubahan_id.id');\n\n        foreach($idPerubahan as $id) {\n            $newData = new ChecklistPerubahan();\n            $newData->no_checklist = uniqid(\"\", true);\n            $newData->d_koperasi_id = $idMaster;\n            $newData->t_koperasi_id = $idTrans;\n            $newData->m_perubahan_id = $id;\n\n            if(!$newData->save()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static function getDataKoperasi($nik, $nama, $asArray = false)\n    {\n        $transFind = TransaksiKoperasi::find()\n            ->alias('t')\n            ->where(['t.nik' => $nik])\n            ->innerJoinWith('dataMaster m',false)\n            // ->innerJoinWith('dataSK sk',false)\n            ->andWhere(['m.is_active' => 1])\n            ->andWhere(['t.is_finish' => 1])\n            ->orderBy(['t.id' => SORT_DESC])\n            ->one();\n        if( !$transFind ) {\n            throw new Exception(\"Data Koperasi Tidak Ditemukan\");\n        }\n    \n        $latestId = $transFind->id;\n\n        return ApiHelper::getKoperasiJson($latestId, $asArray);\n    }\n\n    public static function insertTransMigrasi($data)\n    {\n        try {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n            if (!$data) {\n                throw new Exception('Data tidak Boleh Kosong');\n            }\n\n            $validate = self::validateInsertMigrasi($data);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $validate = self::validateExist($data);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $insertPesanNama = self::insertPesanNama($data);\n            if (!$insertPesanNama) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Pesan Nama');\n            }\n\n            $checkNik = self::checkNikKoperasi($data, $insertPesanNama);\n            if (!$checkNik) {\n                throw new Exception('Terjadi Kesalahan Saat Memasukkan NIK');\n            }\n\n            $insertTrans = self::insertTransKoperasi($data, $insertPesanNama);\n            if(!$insertTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Transaksi');\n            }\n\n            $insertMaster = self::insertMasterKoperasi($data, $insertTrans);\n            if (!$insertMaster) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat Master');\n            }\n\n            $updateTrans = self::updateTransKoperasi($insertTrans, $insertMaster);\n            if (!$updateTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Update Transaksi');\n            }\n\n\n            $insertSk = self::insertSkKoperasi($data, $insertTrans);\n            if (!$insertSk) {\n                throw new Exception('Terjadi Kesalahan Saat Membuat SK');\n            }\n\n            $updateMaster = self::updateMasterKoperasi($insertMaster, $insertSk);\n            if (!$updateMaster) {\n                throw new Exception('Terjadi Kesalahan Saat Update Master');\n            }\n\n            $transaction->commit();\n\n        } catch(\\Exception $e) {\n            $transaction->rollBack();\n            return [\n                'status' => false,\n                'info' => 'Error : ' . $e->getMessage(),\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function getFields($data)\n    {\n        $nik = self::getData($data, 'koperasi.nik');\n        $nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $nama_sk = self::getData($data, 'koperasi.nama_sk');\n        $jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $pola_pengelolaan = self::getData($data, 'koperasi.pola_pengelolaan');\n        $wilayah_keanggotaan = self::getData($data, 'koperasi.wilayah_keanggotaan');\n        $bentuk_koperasi = self::getData($data, 'koperasi.bentuk_koperasi');\n        $jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n        $model_koperasi = self::getData($data, 'koperasi.model_koperasi');\n\n\n        $nomor_sk = self::getData($data, 'transaksi.nomor_sk');\n        $tanggal_sk = self::getData($data, 'transaksi.tanggal_sk');\n\n        $kelurahan = self::getData($data, 'kedudukan.kelurahan');\n        $alamat = self::getData($data, 'kedudukan.alamat');\n\n        $nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $no_akta = self::getData($data, 'akta_notaris.no_akta');\n        $tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $alamat_rapat = self::getData($data, 'rapat.alamat_rapat');\n        $jumlah_peserta = self::getData($data, 'rapat.jumlah_peserta');\n\n        $total_modal = self::getData($data, 'modal_koperasi.total_modal');\n        $simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n\n        $datas = compact(\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok', 'model_koperasi'\n        );\n\n        return $datas;\n    }\n\n    public static function validateInsertMigrasi($data)\n    {\n        $required_fields = [\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok'\n        ];\n\n        $datas = self::getFields($data);\n\n        // Validasi key kosong / tidak ada\n        foreach ($required_fields as $field) {\n            if (empty($datas[$field])) {\n                $errors[$field] = ucwords(str_replace(\"_\", \" \", $field)) . \" Tidak Boleh Kosong\";\n            }\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        $valid = self::checkValid($datas);\n\n        return $valid;\n    }\n\n    public static function validateExist($data)\n    {\n        $errors = [];\n        $datas = self::getFields($data);\n        extract($datas);\n\n        $transaksi = TransaksiKoperasi::find()\n                        //->Where(['or', ['nik' => $nik], ['full_nama' => $nama_sk]])\n                        ->Where(['nik' => $nik])\n                        ->andWhere(['full_nama' => $nama_sk])\n                        ->one();\n        if (!empty($transaksi)) {\n            $errors['nama_koperasi'] = 'Nama Koperasi ' . $nama_koperasi . ' Sudah Dipesan';\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        return false;\n    }\n\n    public static function checkValid($data, $transaksi = null)\n    {\n        $errors = [];\n        extract($data);\n\n        if (empty($transaksi) || ($transaksi && strtolower($transaksi->nama_koperasi) != strtolower($nama_koperasi))) {\n            if (self::checkNama($nama_koperasi)) {\n                $errors['nama_koperasi'] = 'Nama Koperasi ' . $nama_koperasi . ' Sudah Dipesan';\n            }\n        }\n\n        if (!empty($model_koperasi) && !PesanNama::checkIsValidModelKoperasi($model_koperasi) ){\n                $errors['nama_koperasi'] = 'Model Koperasi Tidak Valid';\n        }\n\n        if (!JenisKoperasi::getPrimaryByNama($jenis_koperasi)) {\n            $errors['jenis_koperasi'] = 'Jenis Koperasi ' . $jenis_koperasi . ' Tidak Valid';\n        }\n\n        if (!PolaPengelolaan::getPrimaryByNama($pola_pengelolaan)) {\n            $errors['pola_pengelolaan'] = 'Pola Pengelolaan ' . $pola_pengelolaan . ' Tidak Valid';\n        }\n\n        if (!TingkatWilayah::getPrimaryByNama($wilayah_keanggotaan)) {\n            $errors['wilayah_keanggotaan'] = 'Wilayah Keanggotaan ' . $wilayah_keanggotaan . ' Tidak Valid';\n        }\n\n        if (!BentukKoperasi::getPrimaryByNama($bentuk_koperasi)) {\n            $errors['bentuk_koperasi'] = 'Bentuk Koperasi ' . $bentuk_koperasi . ' Tidak Valid';\n        }\n\n        // if (!WilayahOds::getWilayah($kelurahan)) {\n        //     $errors['kelurahan'] = 'Kode Kelurahan Tidak Valid';\n        // }\n\n        // if (!in_array(strtolower($jangka_waktu), ['terbatas', 'tidak terbatas'])) {\n        //     $errors['jangka_waktu'] = 'Jangka Waktu Tidak Valid';\n        // }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        return false;\n    }\n\n    public static function checkNama($nama)\n    {\n        $data = PesanNama::find()\n            ->where(['nama_koperasi' => $nama])\n            ->andWhere(['is_deleted' => '0'])\n            ->orderBy('created_date DESC')\n            ->one();\n        $now = Date(\"Y-m-d H:i:s\");\n        if($data) {\n\n            // Jika ada pesan nama di antrian\n            if($data->status == 0) {\n\n                // Jika Belum Pendirian Tetapi Sudah Expired\n                if($data->end_date < $now) {\n                    return false;\n                }\n\n                return true;\n            }\n\n            $dataTrans = ArrayHelper::getColumn(TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $data->id])->all(),'id');\n\n            // Jika Tidak Ada Data Transaksi Yang Menggunakan Pesan Nama Tersebut\n            if(!$dataTrans) {\n                return false;\n            }\n\n            if(sizeof($dataTrans) == 1) {\n                $cekData = TransaksiKoperasi::find()->where(['id' => $dataTrans[0]])->one();\n                // Jika Dalam Masa Tahap Penddirian\n                if($cekData->is_finish != 1) {\n                    return true;\n                }\n            }\n\n            $dataMaster = MasterTransaction::find()->where(['id_transaksi' => $dataTrans])->one();\n\n            // Jika Tidak Ada Data Master Koperasi Yang Menggunakan Pesan Nama Tersebut\n            if(!$dataMaster) {\n                return false;\n            }\n\n            // Jika Data Master Koperasi Yang Ditemukan Sudah Melakukan Penggabungan\n            if($dataMaster->is_gabung == 1) {\n                return false;\n            }\n\n            if($dataMaster->is_active == 0) {\n                return false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    public static function insertPesanNama($data)\n    {\n        $pesan_nama = new PesanNama();\n        $pesan_nama->no_pesan = '';\n        // $pesan_nama->nama_koperasi = $pesan_nama->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $pesan_nama->full_nama = $pesan_nama->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $pesan_nama->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $pesan_nama->full_nama = self::getData($data, 'koperasi.nama_sk');\n\n        $jenis_koperasi = JenisKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.jenis_koperasi'));\n\n        $pesan_nama->jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['parent_id'] : $jenis_koperasi['id'];\n        $pesan_nama->c_jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['id'] : null;\n        $pesan_nama->m_pola_id = PolaPengelolaan::getPrimaryByNama(self::getData($data, 'koperasi.pola_pengelolaan'));\n        $pesan_nama->ahu_notaris_id = '-1';\n        $pesan_nama->status = '1';\n        $pesan_nama->created_by = '-1';\n        $pesan_nama->created_date = date('Y-m-d H:i:s');\n\n        if(PesanNama::checkIsKoperasiMultiPihak(self::getData($data, 'koperasi.model_koperasi'))){\n            $pesan_nama->model_koperasi = 1;\n        }\n\n        $save_pesan_nama = $pesan_nama->save(false);\n        $new_id = $pesan_nama->getPrimaryKey();\n\n        if (!$save_pesan_nama) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function insertTransKoperasi($data, $id_pesan_nama)\n    {\n        $pn = new PesanNama();\n        $transaksi = new TransaksiKoperasi();\n        $transaksi->nomor_transaksi = '';\n        $transaksi->t_pesan_nama_id = $id_pesan_nama;\n        // $transaksi->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $transaksi->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $transaksi->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $transaksi->full_nama = self::getData($data, 'koperasi.nama_sk');\n        $transaksi->jenis_transaksi_id = JenisTransaksi::getPrimaryByNama(\"PENDIRIAN\");\n        $transaksi->jenis_transaksi = \"PENDIRIAN\";\n        $transaksi->jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $transaksi->m_tingkat_wilayah_id = TingkatWilayah::getPrimaryByNama(self::getData($data, 'koperasi.wilayah_keanggotaan'));\n        $transaksi->b_koperasi_id = BentukKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.bentuk_koperasi'));\n        $transaksi->jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n\n        if (strtolower($transaksi->jangka_waktu) == \"tidak terbatas\") {\n            $transaksi->jumlah_jangka_waktu = self::getData($data, 'koperasi.jumlah_jangka_waktu');\n            $transaksi->tanggal_jangka_waktu = self::getData($data, 'koperasi.tanggal_jangka_waktu');\n        } else {\n            $transaksi->jumlah_jangka_waktu = null;\n            $transaksi->tanggal_jangka_waktu = null;\n        }\n\n        $wilayah = WilayahOds::getWilayah(self::getData($data, 'kedudukan.kelurahan'));\n\n        if ($wilayah) {\n            $transaksi->provinsi_id = $wilayah['provinsi_id'];\n            $transaksi->nama_provinsi = $wilayah['nama_provinsi'];\n            $transaksi->kab_kota_id = $wilayah['kab_kota_id'];\n            $transaksi->nama_kabupaten = $wilayah['nama_kabupaten'];\n            $transaksi->kecamatan_id = $wilayah['kecamatan_id'];\n            $transaksi->nama_kecamatan = $wilayah['nama_kecamatan'];\n            $transaksi->kel_desa_id = $wilayah['kel_desa_id'];\n            $transaksi->nama_kelurahan = $wilayah['nama_kelurahan'];\n        }\n\n        $transaksi->alamat_koperasi = self::getData($data, 'kedudukan.alamat');\n        $transaksi->rw = self::getData($data, 'kedudukan.rw');\n        $transaksi->rt = self::getData($data, 'kedudukan.rt');\n        $transaksi->kode_pos = self::getData($data, 'kedudukan.kode_pos');\n        $transaksi->telepon = self::getData($data, 'kedudukan.no_telp');\n        $transaksi->email = self::getData($data, 'kedudukan.email');\n\n        $transaksi->nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $transaksi->akta_koperasi = self::getData($data, 'akta_notaris.no_akta');\n        $transaksi->tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $transaksi->tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $transaksi->alamat_rapat = self::getData($data, 'rapat.alamat');\n        $transaksi->jumlah_peserta_rapat = self::getData($data, 'rapat.jumlah_peserta');\n\n\n        $transaksi->modal_koperasi = self::getData($data, 'modal_koperasi.total_modal');\n        $transaksi->simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $transaksi->simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n        $transaksi->dana_hibah = self::getData($data, 'modal_koperasi.dana_hibah');\n        $transaksi->dana_cadangan = self::getData($data, 'modal_koperasi.dana_cadangan');\n\n        $transaksi->periode_pengurus_awal = self::getData($data, 'periode_pengurus.tanggal_mulai');\n        $transaksi->periode_pengurus_akhir = self::getData($data, 'periode_pengurus.tanggal_selesai');\n\n        $transaksi->is_confirm = '0';\n        $transaksi->nik = self::getData($data, 'koperasi.nik');\n        $transaksi->is_deleted = '0';\n        $transaksi->created_by = '-1';\n        $transaksi->created_date = date('Y-m-d H:i:s');\n        $transaksi->is_finish = '1';\n        $transaksi->is_ods = '1';\n        $transaksi->is_migrasi = '1';\n\n        $save_transaksi = $transaksi->save(false);\n        $new_id = $transaksi->getPrimaryKey();\n\n        if (!$save_transaksi) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function insertMasterKoperasi($data, $id_transaksi)\n    {\n        $master_transaksi = new MasterTransaction();\n        $master_transaksi->id_transaksi = $id_transaksi;\n        $master_transaksi->id_sk = null;\n        $master_transaksi->is_deleted = '0';\n        $master_transaksi->status = '1';\n        $master_transaksi->is_gabung = '0';\n        $master_transaksi->is_active = '1';\n        $master_transaksi->is_bubar = '0';\n        $master_transaksi->is_blokir = '0';\n\n        $save_master = $master_transaksi->save(false);\n        $new_id = $master_transaksi->getPrimaryKey();\n\n        if (!$save_master) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function updateTransKoperasi($id_transaksi, $id_master)\n    {\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id_transaksi])->one();\n        $transaksi->id_master = $id_master;\n\n        $save_transaksi = $transaksi->save(false);\n\n        if (!$save_transaksi) {\n            return false;\n        }\n\n        return $save_transaksi;\n    }\n\n    public static function insertSkKoperasi($data, $id_transaksi)\n    {\n        $sk = new SK();\n        $sk->t_koperasi_id = $id_transaksi;\n        $sk->no_sk_koperasi = self::getData($data, 'transaksi.nomor_sk');\n        $sk->created_date = self::getData($data, 'transaksi.tanggal_sk');\n\n        $save_sk = $sk->save(false);\n        $new_id = $sk->getPrimaryKey();\n\n        if (!$save_sk) {\n            return false;\n        }\n\n        return $new_id;\n    }\n\n    public static function checkNikKoperasi($data, $id_pesan_nama)\n    {\n        $nik        = self::getData($data, 'koperasi.nik');\n        $check_nik  = TransaksiKoperasi::find()->where(['nik' => $nik])->orderBy(['id' => SORT_ASC])->one();\n\n        if($check_nik) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function updateMasterKoperasi($id_master, $id_sk)\n    {\n        $master_transaksi = MasterTransaction::find()->where(['id' => $id_master])->one();\n        $master_transaksi->id_sk = $id_sk;\n\n        $save_master = $master_transaksi->save(false);\n\n        if (!$save_master) {\n            return false;\n        }\n\n        return $save_master;\n    }\n\n    public static function validateEditMigrasi($data, $transaksi)\n    {\n        $required_fields = [\n            'nik', 'nama_koperasi', 'nama_sk', 'jenis_koperasi', 'pola_pengelolaan', 'wilayah_keanggotaan',\n            'bentuk_koperasi', 'jangka_waktu', 'nomor_sk', 'tanggal_sk', 'kelurahan', 'alamat', 'nama_notaris',\n            'no_akta', 'tanggal_akta', 'tanggal_rapat', 'alamat_rapat', 'jumlah_peserta', 'total_modal', 'simpanan_wajib',\n            'simpanan_pokok'\n        ];\n\n        $datas = self::getFields($data);\n\n        // Validasi key kosong / tidak ada\n        foreach ($required_fields as $field) {\n            if (empty($datas[$field])) {\n                $errors[$field] = ucwords(str_replace(\"_\", \" \", $field)) . \" Tidak Boleh Kosong\";\n            }\n        }\n\n        if (!empty($errors)) {\n            return implode(';', $errors);\n        }\n\n        $valid = self::checkValid($datas, $transaksi);\n\n        return $valid;\n    }\n\n    public static function editTransMigrasi($nik, $data)\n    {\n        try {\n            $transaction = Yii::$app->db_koperasi->beginTransaction();\n\n            if (!$data) {\n                throw new Exception('Data tidak Boleh Kosong');\n            }\n\n            $transaksi = TransaksiKoperasi::find()\n                            ->where(['nik' => $nik])\n                            ->andWhere(['is_finish' => 1])\n                            ->orderBy(['id' => SORT_DESC])\n                            ->one();\n\n            if ($transaksi) {\n                if ($transaksi->is_migrasi != 1) {\n                    throw new Exception(\"Koperasi tidak bisa diedit karena sudah melakukan transaksi di aplikasi AHU\");\n                }\n            } else {\n                throw new Exception(\"Koperasi dengan NIK {$nik} tidak ditemukan\");\n            }\n\n            $validate = self::validateEditMigrasi($data, $transaksi);\n            if ($validate) {\n                throw new Exception($validate);\n            }\n\n            $editPesanNama = self::editPesanNama($data, $transaksi);\n            if (!$editPesanNama) {\n                throw new Exception('Terjadi Kesalahan Saat Edit Pesan Nama');\n            }\n\n            $editTrans = self::editTransKoperasi($data, $transaksi);\n            if (!$editTrans) {\n                throw new Exception('Terjadi Kesalahan Saat Edit Transaksi');\n            }\n\n            $editSk = self::editSkKoperasi($data, $transaksi);\n            if (!$editSk) {\n                throw new Exception('Terjadi Kesalahan Saat Edit SK');\n            }\n\n            $transaction->commit();\n\n        } catch(\\Exception $e) {\n            $transaction->rollBack();\n            return [\n                'status' => false,\n                'info' => 'Error : ' . $e->getMessage(),\n            ];\n        }\n\n        return [\n            'status' => true,\n            'info' => null\n        ];\n    }\n\n    public static function editPesanNama($data, $transaksi)\n    {\n        $pesan_nama = PesanNama::findOne($transaksi->t_pesan_nama_id);\n\n        if ($pesan_nama) {\n            $pn = new PesanNama();\n            // $pesan_nama->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n            // $pesan_nama->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n            $pesan_nama->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n            $pesan_nama->full_nama = self::getData($data, 'koperasi.nama_sk');\n\n            $jenis_koperasi = JenisKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.jenis_koperasi'));\n\n            $pesan_nama->jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['parent_id'] : $jenis_koperasi['id'];\n            $pesan_nama->c_jenis_koperasi_id = !empty($jenis_koperasi['parent_id']) ? $jenis_koperasi['id'] : null;\n            $pesan_nama->m_pola_id = PolaPengelolaan::getPrimaryByNama(self::getData($data, 'koperasi.pola_pengelolaan'));\n            $pesan_nama->updated_by = '-1';\n            $pesan_nama->updated_date = date('Y-m-d H:i:s');\n\n            $model_koperasi = self::getData($data, 'koperasi.model_koperasi');\n            if(PesanNama::checkIsValidModelKoperasi($model_koperasi)){\n                $is_model_koperasi = PesanNama::checkIsKoperasiMultiPihak($model_koperasi) ? 1 : 0;\n                $pesan_nama->model_koperasi = $is_model_koperasi;\n            }\n\n            $save_pesan_nama = $pesan_nama->save(false);\n\n            return $save_pesan_nama;\n        }\n\n        return false;\n    }\n\n    public static function editTransKoperasi($data, $transaksi)\n    {\n        $pn = new PesanNama();\n        // $transaksi->nama_koperasi = $pn->cleanNamaKoperasi(self::getData($data, 'koperasi.nama_koperasi'));\n        // $transaksi->full_nama = $pn->cleanFullNamaKoperasi(self::getData($data, 'koperasi.nama_sk'));\n        $transaksi->nama_koperasi = self::getData($data, 'koperasi.nama_koperasi');\n        $transaksi->full_nama = self::getData($data, 'koperasi.nama_sk');\n        $transaksi->jenis_koperasi = self::getData($data, 'koperasi.jenis_koperasi');\n        $transaksi->m_tingkat_wilayah_id = TingkatWilayah::getPrimaryByNama(self::getData($data, 'koperasi.wilayah_keanggotaan'));\n        $transaksi->b_koperasi_id = BentukKoperasi::getPrimaryByNama(self::getData($data, 'koperasi.bentuk_koperasi'));\n        $transaksi->jangka_waktu = self::getData($data, 'koperasi.jangka_waktu');\n\n        if (strtolower($transaksi->jangka_waktu) == \"tidak terbatas\") {\n            $transaksi->jumlah_jangka_waktu = self::getData($data, 'koperasi.jumlah_jangka_waktu');\n            $transaksi->tanggal_jangka_waktu = self::getData($data, 'koperasi.tanggal_jangka_waktu');\n        } else {\n            $transaksi->jumlah_jangka_waktu = null;\n            $transaksi->tanggal_jangka_waktu = null;\n        }\n\n        $wilayah = WilayahOds::getWilayah(self::getData($data, 'kedudukan.kelurahan'));\n\n        if ($wilayah) {\n            $transaksi->provinsi_id = $wilayah['provinsi_id'];\n            $transaksi->nama_provinsi = $wilayah['nama_provinsi'];\n            $transaksi->kab_kota_id = $wilayah['kab_kota_id'];\n            $transaksi->nama_kabupaten = $wilayah['nama_kabupaten'];\n            $transaksi->kecamatan_id = $wilayah['kecamatan_id'];\n            $transaksi->nama_kecamatan = $wilayah['nama_kecamatan'];\n            $transaksi->kel_desa_id = $wilayah['kel_desa_id'];\n            $transaksi->nama_kelurahan = $wilayah['nama_kelurahan'];\n        }\n\n        $transaksi->alamat_koperasi = self::getData($data, 'kedudukan.alamat');\n        $transaksi->rw = self::getData($data, 'kedudukan.rw');\n        $transaksi->rt = self::getData($data, 'kedudukan.rt');\n        $transaksi->kode_pos = self::getData($data, 'kedudukan.kode_pos');\n        $transaksi->telepon = self::getData($data, 'kedudukan.no_telp');\n        $transaksi->email = self::getData($data, 'kedudukan.email');\n\n        $transaksi->nama_notaris = self::getData($data, 'akta_notaris.nama_notaris');\n        $transaksi->akta_koperasi = self::getData($data, 'akta_notaris.no_akta');\n        $transaksi->tanggal_akta = self::getData($data, 'akta_notaris.tanggal_akta');\n\n        $transaksi->tanggal_rapat = self::getData($data, 'rapat.tanggal_rapat');\n        $transaksi->alamat_rapat = self::getData($data, 'rapat.alamat');\n        $transaksi->jumlah_peserta_rapat = self::getData($data, 'rapat.jumlah_peserta');\n\n        $transaksi->modal_koperasi = self::getData($data, 'modal_koperasi.total_modal');\n        $transaksi->simpanan_pokok = self::getData($data, 'modal_koperasi.simpanan_pokok');\n        $transaksi->simpanan_wajib = self::getData($data, 'modal_koperasi.simpanan_wajib');\n        $transaksi->dana_hibah = self::getData($data, 'modal_koperasi.dana_hibah');\n        $transaksi->dana_cadangan = self::getData($data, 'modal_koperasi.dana_cadangan');\n\n        $transaksi->periode_pengurus_awal = self::getData($data, 'periode_pengurus.tanggal_mulai');\n        $transaksi->periode_pengurus_akhir = self::getData($data, 'periode_pengurus.tanggal_selesai');\n\n        $transaksi->nik = self::getData($data, 'koperasi.nik');\n        $transaksi->updated_by = '-1';\n        $transaksi->updated_date = date('Y-m-d H:i:s');\n        $transaksi->is_ods = '1';\n        $transaksi->is_migrasi = '1';\n\n        $save_transaksi = $transaksi->save(false);\n\n        return $save_transaksi;\n    }\n\n    public static function editSkKoperasi($data, $transaksi)\n    {\n        $sk = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n\n        $no_sk_koperasi_post = self::getData($data, 'transaksi.nomor_sk');\n        $created_date_post = self::getData($data, 'transaksi.tanggal_sk');\n\n        if ($sk) {\n            $sk->no_sk_koperasi = $no_sk_koperasi_post;\n            $sk->created_date = $created_date_post;\n\n            $save_sk = $sk->save(false);\n\n            return $save_sk;\n        } elseif (empty($sk) && !empty($no_sk_koperasi_post)) {            \n            $sk_new = new SK;\n            $sk_new->t_koperasi_id = $transaksi->id;\n            $sk_new->no_sk_koperasi = $no_sk_koperasi_post;\n            $sk_new->created_date = $created_date_post;\n\n            $save_sk = $sk_new->save(false);\n\n            return $save_sk;          \n        }\n\n        return false;\n    }\n\n    public static function filterEmptyArray(&$array)\n    {\n        foreach ($array as $k => &$v) {\n            if (empty($v) && is_array($v)) {\n                $array[$k] = \"\";\n            } else {\n                is_array($v) && self::filterEmptyArray($v);\n            }\n        }\n    }\n}\n?>\n\n\n--- File: 46 # controllers/PendirianController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\models\\ChecklistPerubahan;\nuse app\\models\\forms\\KuisionerForm;\nuse app\\models\\master\\Settings;\nuse app\\models\\MKbli;\nuse app\\models\\notariat\\Negara;\nuse app\\models\\PemilikManfaat;\nuse app\\models\\Setting;\nuse yii\\web\\Response;\nuse Yii;\nuse Mpdf\\Mpdf;\nuse app\\models\\SK;\nuse Da\\QrCode\\QrCode;\nuse app\\models\\Command;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\Wilayah;\nuse app\\models\\PesanNama;\nuse yii\\web\\UploadedFile;\nuse app\\models\\Disclaimer;\nuse app\\models\\MappingKBLI;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\JenisIdentitas;\nuse app\\models\\StatusPengurus;\nuse app\\components\\RegexHelper;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\WilayahNotariat;\nuse app\\components\\ActionHelper;\nuse app\\models\\notariat\\Notaris;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TPendirianDokumen;\nuse app\\models\\TransaksiKoperasi;\nuse app\\components\\BaseController;\nuse app\\components\\helper\\BoHelper;\nuse yii\\web\\NotFoundHttpException;\nuse app\\components\\TransaksiHelper;\nuse app\\models\\forms\\PendirianForm;\nuse app\\models\\StatementDisclaimer;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\FormatDate;\nuse app\\models\\search\\KBLIBakumSearch;\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\nuse app\\components\\HelperDukcapil;\nuse app\\components\\Helpers;\nuse app\\components\\KoperasiHelper;\nuse app\\components\\NotariatHelper;\nuse app\\components\\QrCodeHelper;\n\nclass PendirianController extends BaseController\n{\n    public function beforeAction($action)\n    {\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"/site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionIndex()\n    {\n        Yii::$app->view->title = \"Pendirian\";\n        $model = new PendirianForm();\n        $model->scenario = 'form-dasar';\n        $judul = \"PENDIRIAN KOPERASI\";\n        $err = $step2 = $data = $SearchData = $dataNotaris = null;\n        $session = Yii::$app->session;\n        $session->remove('NoPesanPendirian');\n        $user = $session->get('data_notaris');\n\n        if ($model->load(Yii::$app->request->post())) {\n            $post = Yii::$app->request->post();\n            $model->ahu_notaris_id = $user['value']['id_notaris'];\n            if ($model->validate()) {\n                $err = TransaksiKoperasi::checkPendirian($model);\n                $LanjutTrans = TransaksiKoperasi::find()->where(['t_pesan_nama_id' => PesanNama::getPrimaryByNoPesan($model->no_pesan)])->one();\n                if ($LanjutTrans) {\n                    $id = PesanNama::getPrimaryByNoPesan($model->no_pesan);\n                    $data = TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $id])->one();\n                    if ($data->is_finish == -1) {\n                        return Yii::$app->response->redirect('/pendirian/edit?id=' . $data->id);\n                    }\n                }\n\n                // Tampil Step 2 : Preview Pendirian\n                if (!$err) {\n                    $data = TransaksiKoperasi::getDataPesanNama($model);\n                    $step2 = true;\n                    $judul = \"CEK NAMA KOPERASI\";\n                    $SearchData = KoperasiHelper::generateFuzzyNamaKoperasi($model->nama_koperasi, 10);\n                    $session->set('NoPesanPendirian', $model->no_pesan);\n                }\n            }\n        }\n        return $this->render('index', [\n            'model' => $model,\n            'data' => $data,\n            'SearchData' => $SearchData,\n            'nama_pemohon' => $step2 ? $data->nama_lengkap : null,\n            'email_pemohon' => $step2 ? $data->email : null,\n            'err' => $err,\n            'step2' => $step2,\n            'judul' => $judul,\n        ]);\n    }\n\n    public function actionFormPendirian($id = null)\n    {\n        $tahunModalKbli = '2020';\n        $listNotarisPengganti = [];\n\n        // if(!Yii::$app->request->isPost && !Yii::$app->request->isAjax) {\n        //     return Yii::$app->response->redirect('/pendirian');\n        // }\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $post = Yii::$app->request->post();\n        Yii::$app->view->title = \"Form Pendirian\";\n        // Init Data Json\n        $usaha_utama = $usaha_pendukung = $usaha_tambahan = $json_pengawas_pengurus = $json_bakum = $json_pemilik_manfaat = [];\n\n        if ($id) {\n            $data = TransaksiKoperasi::findOne($id);\n            if ($data->is_finish == -1) {\n                return Yii::$app->response->redirect(\"/pendirian/edit?id=\" . $id);\n            }\n        }\n\n        if (!$session->has('NoPesanPendirian')) {\n            return Yii::$app->response->redirect('/pendirian');\n        }\n        $no_pesan = $session->get('NoPesanPendirian');\n        $id_notaris = $user['value']['id_notaris'];\n        $dataKop = PesanNama::getByNoPesan($no_pesan, $id_notaris);\n        if ($dataKop) {\n            // Init Model\n            $model = new PendirianForm();\n\n            // Set Scenario\n            $model->scenario = 'form-pendirian';\n\n            // Set Data Model\n            $model->attributes = $dataKop->attributes;\n            $model->nama_notaris = $user['value']['nama_gelar'];\n            $model->email = null;\n            $model->is_submit = false;\n            if ($model->load(Yii::$app->request->post())) {\n\n                $model->is_notaris_pengganti = isset($post['PendirianForm']['is_notaris_pengganti']) ? 1 : 0;\n                if (!$model->is_notaris_pengganti) {\n                    $model->id_notaris_pengganti = null;\n                    $model->no_sk_notaris_pengganti = null;\n                }\n                if ($model->id_notaris_pengganti) {\n                    $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                    \n                    if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                        $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                    } else {\n                        // Handle jika data tidak ditemukan\n                        Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                        $model->id_notaris_pengganti = null;\n                        $model->no_sk_notaris_pengganti = null;\n                    }\n                }\n                // Set Json Bakum\n                $json_bakum = $this->json_bakum($post, $model);\n                if ($json_bakum) {\n                    $model->json_bakum_sekunder = json_encode($json_bakum);\n                }\n\n                // Set Json Aktifitas Usaha\n                $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n                if ($json_aktifitas_usaha) {\n                    $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n                }\n                $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n                $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n                $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n                // Set Json Pengawas Pengurus\n                $json_pengawas_pengurus = $this->json_pengawas_pengurus($post, $model);\n                if ($json_pengawas_pengurus) {\n                    $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n                }\n\n                // Set Json Pemilik Manfaat\n                $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n                if ($json_pemilik_manfaat) {\n                    $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n                }\n                if (isset($post['submit-form'])) {\n                    $model->is_submit = true;\n\n                    if (empty($model->getErrors())) {\n                        if ($model->validate()) {\n                            // Lanjut proses\n                            $id_transaksi = $model->savePendirian();\n                            if ($id_transaksi) {\n                                return $this->redirect(['/pendirian/uploaddocument', 'id' => $id_transaksi]);\n                            }\n                        }\n                    }\n                }\n            }\n            // Set Dropdown Data\n            $listJenisKop = ActionHelper::getDDListJenisKop('all');\n            $listModelKop = ActionHelper::getDDListModelKoperasi();\n            $listPola = ActionHelper::getDDListPola();\n            $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n            $listBentukKop = ActionHelper::getDDListBentukKop();\n            $listProvinsi = ActionHelper::getDDListProvinsi();\n            $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n            $listCheckbox = ActionHelper::getListCheckbox('dokumen_form_pendiran');\n            $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n            $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n            $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n            $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n\n            // set KBLI\n            $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n            $polaKopKbli = $model->m_pola_id ? $model->m_pola_id : 1; // Tiket #186604\n            $bentukKopKbli = isset(Yii::$app->request->get('KBLISearch')['bentuk']) ? Yii::$app->request->get('KBLISearch')['bentuk'] : 1;\n            $bentukKopKbli = $model->b_koperasi_id ? $model->b_koperasi_id : $bentukKopKbli;\n            $KBLISearch = new KBLIBakumSearch();\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n            // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n            $koperasi_sekunder = 0;\n            if ($model->jenis_koperasi_id == '6') {\n                if (Yii::$app->request->get('KBLISearch')) {\n                    if (isset(Yii::$app->request->get('KBLISearch')['bentuk'])) {\n                        if (Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $koperasi_sekunder = 2;\n                        }\n                    }\n                }\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id + $koperasi_sekunder]);\n            }\n\n            // Set KBLI\n            // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n            $mappingKBLIAll = MappingKBLI::find();\n            $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n            $kbli_simpan_pinjam = ['1776', '1777'];\n            $kbli_tkbm = ['1601'];\n            $kbli_jasa = ['7050'];\n\n            //Tiket #186604 >> #675530 Fix\n            //INC-AHU-112024-02343 - KBLI 64146 tidak tampil\n            //Perbaikan value kbli yang terbalik antara primer dan sekunder\n            $kbli_sp_lain_konvensional_p = ['64145', '64147', '64142', '64144', '64146', '64148', '64143']; //simpan pinjam konvensional primer\n            $kbli_sp_lain_konvensional_s = ['64145', '64147', '64142', '64144', '64146', '64148', '64141']; //simpan pinjam konvensional sekunder\n            $kbli_sp_lain_syariah_p = ['64141', '64143', '64142', '64144', '64146', '64148', '64147']; //simpan pinjam syariah primer\n            $kbli_sp_lain_syariah_s = ['64141', '64143', '64142', '64144', '64146', '64148', '64145']; //simpan pinjam syariah sekunder\n            $kbli_ex_lain_konvensional_p = ['64141', '64143', '64145', '64147', '64146', '64148', '64144']; //lainnya konvensional primer \n            $kbli_ex_lain_konvensional_s = ['64141', '64143', '64145', '64147', '64146', '64148', '64142']; //lainnya konvensional sekunder\n            $kbli_ex_lain_syariah_p = ['64141', '64143', '64145', '64147', '64142', '64144', '64148']; //lainnya syariah primer\n            $kbli_ex_lain_syariah_s = ['64141', '64143', '64145', '64147', '64142', '64144', '64146']; //lainnya syariah sekunder\n\n            if ($jenisKopKbli == '6') { //jenis simpan pinjam\n                if ($polaKopKbli == '1') {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                } else {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                }\n            } else { //jenis lainnya\n                if ($polaKopKbli == '1') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                } else {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    if ($bentukKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                    }\n                }\n            }\n            $KBLI_all = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5]);\n\n            if (Yii::$app->request->get('KBLIBakumSearch')) {\n\n                $searchKode = Yii::$app->request->get('KBLIBakumSearch')['judul'] ? Yii::$app->request->get('KBLIBakumSearch')['judul'] : '';\n\n                //Tiket #186604\n                //Tambah validasi Pencarian result HANYA berdasarkan bentuk, jenis, dan pola koperasi\n                if ($jenisKopKbli == '6') { //jenis simpan pinjam\n                    if ($polaKopKbli == '1') {\n                        $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                        }\n                    } else {\n                        $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                        }\n                    }\n                } else { //jenis lainnya\n                    if ($polaKopKbli == '1') {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                        }\n                    } else {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                        }\n                    }\n                }\n\n                if (!empty($searchKode)) {\n                    $KBLI->andFilterWhere(['LIKE', 'judul', $searchKode]);\n                    $KBLI->orFilterWhere(['=', 'kode', $searchKode]);\n                    $KBLI_all->andFilterWhere(['LIKE', 'judul', $searchKode]);\n                    $KBLI_all->orFilterWhere(['=', 'kode', $searchKode]);\n                }\n            }\n            $KBLIProvider = [\n                'byJenis' => new ActiveDataProvider([\n                    'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                    'pagination' => [\n                        'pageSize' => 5,\n                    ],\n                    'sort' => [\n                        'defaultOrder' => [\n                            'kode' => SORT_ASC,\n                        ],\n                    ],\n                ]),\n                'all' => new ActiveDataProvider([\n                    'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                    'pagination' => [\n                        'pageSize' => 5,\n                    ],\n                    'sort' => [\n                        'defaultOrder' => [\n                            'kode' => SORT_ASC,\n                        ],\n                    ],\n                ])\n            ];\n\n            //ambil tahun kbli\n            $tahun_kbli = null;\n            if (isset($json_aktifitas_usaha)) {\n                foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                    if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                        $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                        break;\n                    } else {\n                        if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))) > 0) {\n                            $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))[0]['tahun'];\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // Set Tampilan Awal\n            $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id, 'SEKUNDER') ? '' : 'hidden';\n            $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n            $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n            $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n            $isMerahPutih = false;\n            if (JenisKoperasi::isMerahPutih($jenisKopKbli)) {\n                $model->m_tingkat_wilayah_id = 1;\n                $model->b_koperasi_id = 1;\n                $isMerahPutih = true;\n            }\n            // var_dump($model->cb_mengerti_manfaat);exit;\n            $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n            $model->bo_exist = false;\n            $model->is_submit = false;\n            // var_dump($model->getErrors());exit;\n            return $this->render('form-pendirian', [\n                'model' => $model,\n                'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n                'listJenisKop' => $listJenisKop,\n                'listModelKop' => $listModelKop,\n                'listPola' => $listPola,\n                'listTingkatWil' => $listTingkatWil,\n                'listBentukKop' => $listBentukKop,\n                'listProvinsi' => $listProvinsi,\n                'listKabupaten' => $kabTerpilih,\n                'listKecamatan' => $kecTerpilih,\n                'listKelurahan' => $kelTerpilih,\n                'listJenisKelamin' => $listJenisKelamin,\n                'listCheckbox' => $listCheckbox,\n                'listCBMengertiManfaat' => $listCBMengertiManfaat,\n                'listCBPerpresManfaat' => $listCBPerpresManfaat,\n                'listJenisIdentitas' => $listJenisIdentitas,\n                'json_bakum' => $json_bakum,\n                'kbli_provider' => $KBLIProvider,\n                'kbli_search' => $KBLISearch,\n                'usaha_utama' => $usaha_utama,\n                'usaha_pendukung' => $usaha_pendukung,\n                'usaha_tambahan' => $usaha_tambahan,\n                'pengawas_pengurus' => $json_pengawas_pengurus,\n                'json_pemilik_manfaat' => $json_pemilik_manfaat,\n                'showBakumSekunder' => $showBakumSekunder,\n                'show_pemilik_manfaat' => $show_pemilik_manfaat,\n                'tahun_kbli' => $tahun_kbli,\n                'tahunModalKbli' => $tahunModalKbli,\n                'isMerahPutih' => $isMerahPutih\n            ]);\n        }\n        return Yii::$app->response->redirect('/pendirian');\n    }\n\n    public function actionGetNamaKop($q)\n    {\n        if (Yii::$app->request->isAjax) {\n            $arr = [];\n\n            $data = Yii::$app->db_koperasi->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi LIKE :namakop \")\n                ->bindValue(':namakop', $q . '%')\n                ->queryAll();\n\n            foreach ($data as $d) {\n                $arr[] = ['value' => $d['nama_koperasi']];\n            }\n            return json_encode($arr);\n        }\n    }\n\n    public function SaveBakumSekunder($model, $post)\n    {\n        if ($model->load($post)) {\n            // Required\n            if (!$model->nama_bakum_kop || !$model->sk_bakum_kop || !$model->npwp_bakum_kop) {\n                $model->addError('json_bakum_sekunder', \"Nama Koperasi, NPWP & Nomor SK Koperasi Tidak Boleh Kosong.\");\n            }\n            // Hanya angka\n            if (!preg_match(RegexHelper::NUMBER_ONLY, $model->npwp_bakum_kop)) {\n                $model->addError('json_bakum_sekunder', \"Kolom NPWP Wajib berupa angka.\");\n            }\n            // Cek Nama Badan Hukum Koperasi Sudah terdaftar dan memiliki SK yg benar\n            $nama_kop = $model->nama_bakum_kop ? $model->nama_bakum_kop : null;\n            // $cekKop = PesanNama::find()->where(['nama_koperasi' => $nama_kop])->one();\n            $cekKop = Yii::$app->db_koperasi->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi = :namakop \")\n                ->bindValue(':namakop', $nama_kop)\n                ->queryOne();\n\n            if (!$cekKop) {\n                $model->addError('json_bakum_sekunder', \"Nama Koperasi Tidak Terdaftar Pada Sistem.\");\n            }\n            $json = $model->json_bakum_sekunder;\n            if ($json) {\n                $json = json_decode($json, true);\n                if (!empty($json['data'])) {\n                    foreach ($json['data'] as $key => $val) {\n                        if (strtolower($model->nama_bakum_kop) == strtolower($val['nama_bakum_kop'])) {\n                            $model->addError('json_bakum_sekunder', \"'{$model->nama_bakum_kop}' Sudah Terdaftar.\");\n                            return json_encode($json);\n                        }\n                    }\n                }\n            } else {\n                $json = ['count' => 0];\n            }\n            if (!empty($model->getErrors())) {\n                return json_encode($json);\n            }\n            $file_sk = UploadedFile::getInstance($model, 'file_sk_bakum_kop');\n            // 25 FEB 2019 HAPUS UPLOAD FILE SK BAKUM SEKUNDER\n            // Comment code dibawah jika menggunakan UPLOAD SK kembali\n            $file_sk = true;\n            if ($file_sk) {\n                // $temp = ActionHelper::Upload('uploads/temp/',$file_sk);\n                $temp = true;\n                if ($temp) {\n                    $json['count']++;\n                    $json['data'][] = [\n                        'id' => null,\n                        'id_master_sekunder' => $cekKop['id_master'],\n                        'nik' => $cekKop['nik'],\n                        'nama_bakum_kop' => $model->nama_bakum_kop,\n                        'sk_bakum_kop' => $model->sk_bakum_kop,\n                        'npwp_bakum_kop' => $model->npwp_bakum_kop,\n                        'file_sk_bakum_kop' => '', //$temp,\n                    ];\n                    $model->nama_bakum_kop = null;\n                    $model->sk_bakum_kop = null;\n                    $model->file_sk_bakum_kop = null;\n                    $model->npwp_bakum_kop = null;\n                }\n            }\n            return json_encode($json);\n        }\n    }\n\n\n\n    private function uploadAndSave($id, TPendirianDokumen &$model)\n    {\n\n        $model->akta = UploadedFile::getInstance($model, 'akta');\n        $model->berita_acara = UploadedFile::getInstance($model, 'berita_acara');\n        $model->surat_rekomendasi = UploadedFile::getInstance($model, 'surat_rekomendasi');\n        $model->hasil_musyawarah_desa = UploadedFile::getInstance($model, 'hasil_musyawarah_desa');\n\n        // Validate mimetype files\n        $model->akta = Helpers::validateFiles($model->akta, 'pdf');\n        $model->berita_acara = Helpers::validateFiles($model->berita_acara, 'pdf');\n\n        if ($model->surat_rekomendasi) {\n            $model->surat_rekomendasi = Helpers::validateFiles($model->surat_rekomendasi, 'pdf');\n        }\n\n        if ($model->hasil_musyawarah_desa) {\n            $model->hasil_musyawarah_desa = Helpers::validateFiles($model->hasil_musyawarah_desa, 'pdf');\n        }\n\n        if (!$model->validate()) {\n            return false;\n        }\n\n        $rawQuery = $model->upload($id);\n\n        $pass = true;\n\n        if ($rawQuery) {\n\n            foreach ($rawQuery as $key => $query) {\n\n                if (Yii::$app->db_koperasi->createCommand($query)->execute()) {\n\n                    $pass = true;\n                } else {\n\n                    return false;\n                }\n            }\n        } else {\n\n            return false;\n        }\n\n        return $pass;\n    }\n\n    public function checkDocumentUpload($id)\n    {\n\n        $data = TPendirianDokumen::find()->where('transaction_id = ' . $id . ' and (type = 1 or type = 2 or type = 3 or type = 7)')->all();\n\n        if (!empty($data)) {\n\n            Yii::$app->db_koperasi->createCommand('\n                DELETE FROM kop_t_pendirian_dokumen \n                WHERE transaction_id = ' . $id . ' and (type = 1 or type = 2 or type = 3 or type = 7)\n            ')->execute();\n\n            foreach ($data as $detail) {\n\n                if (file_exists(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name)) {\n\n                    unlink(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name);\n                }\n            }\n        }\n    }\n\n    // uploading document\n    public function actionUploaddocument()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n        $data = TransaksiKoperasi::getPreviewData($id);\n\n        if (empty($id) || $data['is_finish'] !== \"-1\") {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $model = new TPendirianDokumen();\n        $model->jenis_koperasi = $data['jenis_koperasi'];\n        $model->pola_pengelolaan = $data['pola_pengelolaan'];\n\n        if (Yii::$app->request->isPost) {\n\n            $this->checkDocumentUpload($id);\n\n            $done = $this->uploadAndSave($id, $model);\n\n            if ($done) {\n                $done = DisclaimerHelper::generateValues('disclaimer', 'upload_document_pendirian', $data['koperasi_id'], $data['t_pesan_nama_id'])->save();\n\n                $this->redirect('/pendirian/preview?id=' . $id);\n            }\n        }\n\n        $disclaimer = new Disclaimer();\n        $disclaimer = $disclaimer->find()->where(['parent' => 'upload_document_pendirian'])->all();\n\n        return $this->render('uploadDocument', [\n            'id' => $id,\n            'model' => $model,\n            'data' => $data,\n            'disclaimer' => $disclaimer\n        ]);\n    }\n\n    public function actionPreview($document_title = \"\")\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $data = TransaksiKoperasi::getPreviewData($id);\n        $data['isQuestionnaire'] = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        if (isset($data['is_finish'])) {\n\n            if ((empty($id) || $data['is_finish'] == \"1\")) {\n\n                // if ( Yii::$app->user->identity->username !== \"notaris-sabh\" ) {\n\n                throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n                // }\n            }\n\n            $data['confirmationOnly'] = false;\n            $data['isAdmin'] = false;\n\n            if ($data['is_finish'] == \"0\") {\n\n                // Yii::$app->session->setFlash('confirmationOnly', 'yes');\n                $data['confirmationOnly'] = true;\n            } else if (Yii::$app->user->identity->username == \"notaris-sabh\") {\n                $data['isAdmin'] = true;\n            }\n\n            // var_dump( $data );\n\n            if (!empty($document_title)) {\n\n                $data['document_title'] = $document_title;\n            }\n\n            if ($data['model_koperasi'] == null) {\n                $data['model_koperasi'] = '0';\n            }\n\n            $data['model_koperasi'] = ActionHelper::getDDListModelKoperasi($data['model_koperasi']);\n            if ($cekTrans->id_notaris_pengganti) {\n                $data['nama_notaris_pengganti'] = NotariatHelper::getNotarisPenggantiNameById($cekTrans->id_notaris_pengganti, $id_notaris);\n            } else {\n                $data['nama_notaris_pengganti'] = NULL;\n            }\n\n            return $this->render('preview', $data);\n        } else {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n\n    public function actionApprovetransaction()\n    {\n\n        $post = Yii::$app->request->post();\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        \n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        $kuisionerForm = !empty($post['KuisionerForm']) ? $post['KuisionerForm'] : null;\n        $masterLembagaKuisionerForm = !empty($post['MasterLembagaKuesionerForm']) ? $post['MasterLembagaKuesionerForm'] : null;\n        $postKuisioner = array('KuisionerForm' => $kuisionerForm, 'MasterLembagaKuesionerForm' => $masterLembagaKuisionerForm);\n        $isQuestionnaire = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        // Prevent jika sudah konfirmasi\n        if ($transaksi->is_finish == 1) {\n            return true;\n        }\n\n        if ($transaksi->is_finish == -1) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_pendirian', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        } else {\n            $transaksi->is_finish = 1;\n\n            // save it to master transaction\n            $SKins = new SK();\n            $SKins->t_koperasi_id = $transaksi->id;\n            $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPendirian();\n\n            $SKins->save();\n\n            $mTrans = new MasterTransaction();\n            $mTrans->id_transaksi = $transaksi->id;\n            $mTrans->id_sk = $SKins->id;\n            $mTrans->is_deleted = !empty($transaksi->deleted_date) ? 1 : 0;\n            $mTrans->status = 1;\n\n            $mTrans->save();\n\n            $transaksi->id_master = $mTrans->id;\n            $transaksi->tanggal_jangka_waktu = !empty($transaksi->jumlah_jangka_waktu) ? date(\"Y-m-d\", strtotime(date(\"Y-m-d\") . \" + \" . $transaksi->jumlah_jangka_waktu . \" year\")) : null;\n\n            // add task to cron job\n            $command = new Command();\n            $command->task = $id;\n            $command->command_type = \"ODS_API_OUTCOMING\";\n            //takeout hit cron\n            $command->save();\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n\n        $resSave = $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'id_master', 'tanggal_jangka_waktu'));\n\n        if ($transaksi->is_finish == 1) {\n            $bo = BoHelper::sendBoData($id, $postKuisioner);\n        }\n\n        if ($isQuestionnaire) {\n            return json_encode(['isConfirmed' => $resSave, 'questionnaire' => $bo]);\n        }\n\n        return $resSave;\n    }\n\n    public function actionListtransaction()\n    {\n\n        Yii::$app->view->title = \"List Transaksi\";\n        $dataNotaris = Yii::$app->session->get('data_notaris');\n        $id_notaris = $dataNotaris['value']['id_notaris'];\n\n        $query = TransaksiKoperasi::find()->where(['ahu_notaris_id' => $id_notaris, 'jenis_transaksi_id' => 2])->andWhere(['<>', 'is_finish', -1])->orderBy(['created_date' => SORT_DESC]);\n\n        $get = Yii::$app->getRequest()->getQueryParam('TransaksiKoperasi');\n\n        if (!empty($get)) {\n\n            if (!empty($get['nomor_transaksi'])) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $get['nomor_transaksi']]);\n            }\n\n            if (!empty($get['jenis_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if (!empty($get['nama_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $get['nama_koperasi']]);\n            }\n\n            if (!empty($get['nik'])) {\n\n                $query->andFilterWhere(['like', 'nik', $get['nik']]);\n            }\n\n            if (Yii::$app->getRequest()->getQueryParam('created_date')) {\n\n                $date = Yii::$app->getRequest()->getQueryParam('created_date');\n\n                $query->andFilterWhere(['between', 'created_date', date('Y-m-d', strtotime($date)), date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))]);\n            }\n        }\n\n        if (Yii::$app->getRequest()->getQueryParam('rentang_awal')) {\n\n            $date_awal = Yii::$app->getRequest()->getQueryParam('rentang_awal');\n            $date_akhir = Yii::$app->getRequest()->getQueryParam('rentang_akhir');\n\n            $query->andFilterWhere(['between', 'DATE(created_date)', date('Y-m-d', strtotime($date_awal)), date('Y-m-d', strtotime($date_akhir))]);\n        }\n\n        $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ]\n        ]);\n\n        return $this->render('listTransaction', [\n            'model' => new TransaksiKoperasi(),\n            'provider' => $provider\n        ]);\n    }\n\n    public function actionConfirmation()\n    {\n\n        return $this->actionPreview();\n    }\n\n    public function json_bakum($post, $model)\n    {\n        if (isset($post['SaveBakumSekunder'])) {\n            $model->json_bakum_sekunder = $this->SaveBakumSekunder($model, $post);\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n\n        if (isset($post['EditBakumSekunder'])) {\n            // Edit Json Bakum\n            $model->json_bakum_sekunder = $this->EditBakumSekunder($model, $post);\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n\n        if (isset($post['HapusBakumSekunder'])) {\n            $model->json_bakum_sekunder = $this->HapusBakumSekunder($model, $post);\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n        if ($model->json_bakum_sekunder) {\n            return json_decode($model->json_bakum_sekunder, true);\n        }\n    }\n\n    public function EditBakumSekunder($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_bakum_sekunder;\n            if (!$json) {\n                return null;\n            }\n            $json = json_decode($json, true);\n\n            $nama_kop = $model->nama_bakum_kop ? $model->nama_bakum_kop : null;\n            $cekKop = Yii::$app->db_koperasi->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi = :namakop \")\n                ->bindValue(':namakop', $nama_kop)\n                ->queryOne();\n\n            $selected_data = $post['EditBakumSekunder'];\n            $json['data'][$selected_data]['id_master_sekuder'] = $cekKop['id_master'];\n            $json['data'][$selected_data]['nik'] = $cekKop['nik'];\n            $json['data'][$selected_data]['nama_bakum_kop'] = $model->nama_bakum_kop;\n            $json['data'][$selected_data]['sk_bakum_kop'] = $model->sk_bakum_kop;\n            $json['data'][$selected_data]['npwp_bakum_kop'] = $model->npwp_bakum_kop;\n\n            $file_sk = UploadedFile::getInstance($model, 'file_sk_bakum_kop');\n            if ($file_sk) {\n                // unlink($model->hidden_file_sk_bakum_kop);\n                $json['data'][$selected_data]['file_sk_bakum_kop'] = ActionHelper::Upload('uploads/temp/', $file_sk);\n            }\n            return json_encode($json);\n        }\n    }\n\n    public function HapusBakumSekunder($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_bakum_sekunder;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusBakumSekunder'];\n            $json = json_decode($json, true);\n            // unlink($json['data'][$selected_data]['file_sk_bakum_kop']);\n            unset($json['data'][$selected_data]);\n            $json['count']--;\n            if ($json['count'] <= 0) {\n                return null;\n            }\n            // var_dump($json);exit;\n            return json_encode($json);\n        }\n    }\n\n\n    public function actionGetChildWilayah($id, $tipe)\n    {\n        if (!$id || !Yii::$app->request->isAjax) {\n            return json_encode([['id' => '0', 'nama' => 'Tidak Ditemukan']]);\n        }\n\n        $data = Wilayah::getChildWilayah($id, $tipe);\n\n        if (!$data) {\n            return json_encode([['id' => '0', 'nama' => 'Tidak Ditemukan']]);\n        }\n\n        $arr = [];\n        foreach ($data as $d) {\n            if ($tipe == 'Kelurahan') {\n                if ($d['ID_WIL'] != '' && $d['ID_WIL'] != 0 && $d['ID_WIL'] != null) {\n                    $arr[] = [\n                        'id' => $d['ID_WIL'],\n                        'nama' => $d['NM_KELURAHAN'],\n                    ];\n                    continue;\n                }\n            }\n\n            if (!empty($d['WILAYAH_ID'])) {\n                $arr[] = [\n                    'id' => $d['WILAYAH_ID'],\n                    'nama' => $d['NAMA'],\n                ];\n            }\n        }\n\n        return json_encode($arr);\n    }\n\n    public function json_aktifitas_usaha($post, $model)\n    {\n        if (isset($post['SaveKBLI'])) {\n            $model->json_aktifitas_usaha = $this->SaveKBLI($model, $post);\n            return json_decode($model->json_aktifitas_usaha, true);\n        }\n        // if(isset($post['EditKBLI'])) {\n        //     // Edit Json Bakum\n        //     $model->json_aktifitas_usaha = $this->EditKBLI($model,$post);\n        //     return json_decode($model->json_aktifitas_usaha,true);\n        // }\n\n        if (isset($post['HapusKBLI'])) {\n            $model->json_aktifitas_usaha = $this->HapusKBLI($model, $post);\n            return json_decode($model->json_aktifitas_usaha, true);\n        }\n        if ($model->json_aktifitas_usaha) {\n            return json_decode($model->json_aktifitas_usaha, true);\n        }\n    }\n\n    public function saveKBLI($model, $post)\n    {\n        // Set Json / Init Json\n        if ($model->load($post)) {\n            $json = $model->json_aktifitas_usaha;\n            if ($json) {\n                $json = json_decode($json, true);\n                $json_utama = $json['data']['utama'];\n                $json_pendukung = $json['data']['pendukung'];\n                $json_tambahan = $json['data']['tambahan'];\n            } else {\n                $json = [\n                    'data' => [\n                        'utama' => [],\n                        'pendukung' => [],\n                        'tambahan' => [],\n                    ],\n                ];\n            }\n\n            // Select Data Json Aktifitas Usaha\n            if ($post['JenisUsaha'] == 'UsahaUtama') {\n                $jsonData = 'utama';\n            } else if ($post['JenisUsaha'] == 'UsahaPendukung') {\n                $jsonData = 'pendukung';\n            } else if ($post['JenisUsaha'] == 'UsahaTambahan') {\n                $jsonData = 'tambahan';\n            } else {\n                return null;\n            }\n\n            $dataKBLI = KBLIBakum::find()->where(['id_kbli' => $post['cek_kbli']])->all();\n            if (!$dataKBLI) {\n                return null;\n            }\n            $inputPola = ArrayHelper::getColumn(MappingKBLI::find()->where(['kode' => $post['cek_kbli']])->andWhere(['NOT', ['m_pola_id' => null]])->all(), 'm_pola_id');\n            // var_dump($inputPola);exit;\n            if ($inputPola) {\n                $listPolaKBLI = $model->getPolaKBLI();\n                if ($listPolaKBLI) {\n                    foreach ($inputPola as $d) {\n                        if (!in_array($d, $listPolaKBLI)) {\n                            $model->addError('json_aktifitas_usaha', 'Hanya Dapat Memilih Satu Jenis Pola Pengelolaan KBLI');\n                            return json_encode($json);\n                        }\n                    }\n                }\n            }\n            foreach ($dataKBLI as $d) {\n                $json['data'][$jsonData][$d->id_kbli] = [\n                    'id' => null,\n                    'kode' => $d->kode,\n                    'kategori' => $d->kategori,\n                    'judul' => $d->judul,\n                    'uraian' => $d->uraian,\n                ];\n            }\n            return json_encode($json);\n        }\n    }\n\n    public function HapusKBLI($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_aktifitas_usaha;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusKBLI'];\n            $json = json_decode($json, true);\n\n            // Select Data Json Aktifitas Usaha\n            if ($post['JenisUsaha'] == 'UsahaUtama') {\n                $jsonData = 'utama';\n            } else if ($post['JenisUsaha'] == 'UsahaPendukung') {\n                $jsonData = 'pendukung';\n            } else if ($post['JenisUsaha'] == 'UsahaTambahan') {\n                $jsonData = 'tambahan';\n            } else {\n                return null;\n            }\n            // return null;\n            unset($json['data'][$jsonData][$selected_data]);\n            // var_dump($json);exit;\n            return json_encode($json);\n        }\n    }\n\n    public function json_pengawas_pengurus($post, $model)\n    {\n        if (isset($post['SavePengawasPengurus'])) {\n            $model->json_pengawas_pengurus = $this->SavePengawasPengurus($model, $post);\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n        if (isset($post['EditPengawasPengurus'])) {\n            // Edit Json Bakum\n            $model->json_pengawas_pengurus = $this->EditPengawasPengurus($model, $post);\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n\n        if (isset($post['HapusPengawasPengurus'])) {\n            $model->json_pengawas_pengurus = $this->HapusPengawasPengurus($model, $post);\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n\n        if ($model->json_pengawas_pengurus) {\n            return json_decode($model->json_pengawas_pengurus, true);\n        }\n    }\n\n    public function SavePengawasPengurus($model, $post)\n    {\n        if ($model->load($post)) {\n            if (!$model->nik_anggota || !$model->nama_anggota || !$model->jenis_kelamin_anggota || !$model->jabatan_anggota || !$model->no_hp_anggota) {\n                $model->addError('json_pengawas_pengurus', \"Kolom NIK, Nama, Jenis Kelamin, No HP dan Jabatan Wajib Di isi.\");\n            }\n            if (!preg_match(RegexHelper::NUMBER_ONLY, $model->npwp_anggota) || !preg_match(RegexHelper::NUMBER_ONLY, $model->no_hp_anggota) || !preg_match(RegexHelper::NUMBER_ONLY, $model->nik_anggota)) {\n                $model->addError('json_pengawas_pengurus', \"Kolom NIK, NPWP, No HP Wajib berupa angka.\");\n            }\n            $json = $model->json_pengawas_pengurus;\n            if ($json) {\n                $json = json_decode($json, true);\n                if (isset($json['data'])) {\n                    foreach ($json['data'] as $key => $val) {\n                        if (strtolower($model->nik_anggota) == strtolower($val['nik'])) {\n                            $model->addError('json_pengawas_pengurus', \"NIK dengan nomor '{$model->nik_anggota}' Sudah Terdaftar.\");\n                            return json_encode($json);\n                        }\n                    }\n                }\n            } else {\n                $json = ['count' => 0];\n            }\n            if (!empty($model->getErrors())) {\n                return json_encode($json);\n            }\n            $json['count']++;\n            $json['data'][] = [\n                'id' => null,\n                'status' => $model->status_anggota,\n                'nama_status' => StatusPengurus::getNama($model->status_anggota),\n                'nik' => $model->nik_anggota,\n                'nama' => $model->nama_anggota,\n                'jenis_kelamin' => $model->jenis_kelamin_anggota,\n                'jabatan' => $model->jabatan_anggota,\n                'npwp' => $model->npwp_anggota,\n                'no_hp' => $model->no_hp_anggota,\n            ];\n\n            $model->nik_anggota = $model->nama_anggota = $model->jenis_kelamin_anggota = $model->jabatan_anggota = $model->npwp_anggota = $model->no_hp_anggota = null;\n            return json_encode($json);\n        }\n    }\n\n    public function EditPengawasPengurus($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pengawas_pengurus;\n            if (!$json) {\n                return null;\n            }\n            $json = json_decode($json, true);\n\n            $selected_data = $post['EditPengawasPengurus'];\n            $json['data'][$selected_data]['status'] = $model->status_anggota;\n            $json['data'][$selected_data]['nama_status'] = StatusPengurus::getNama($model->status_anggota);\n            $json['data'][$selected_data]['nik'] = $model->nik_anggota;\n            $json['data'][$selected_data]['nama'] = $model->nama_anggota;\n            $json['data'][$selected_data]['jenis_kelamin'] = $model->jenis_kelamin_anggota;\n            $json['data'][$selected_data]['jabatan'] = $model->jabatan_anggota;\n            $json['data'][$selected_data]['npwp'] = $model->npwp_anggota;\n            $json['data'][$selected_data]['no_hp'] = $model->no_hp_anggota;\n\n            return json_encode($json);\n        }\n    }\n\n    public function HapusPengawasPengurus($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pengawas_pengurus;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusPengawasPengurus'];\n            $json = json_decode($json, true);\n\n            unset($json['data'][$selected_data]);\n            $json['count']--;\n            if ($json['count'] <= 0) {\n                return null;\n            }\n\n            return json_encode($json);\n        }\n    }\n\n    public function actionDownloadsk()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n        $session = Yii::$app->session;\n        $user_session = $session->get('data_notaris');\n        $id_notaris = $user_session['value']['id_notaris'];\n\n        $sk = SK::find()->where(['t_koperasi_id' => $id])->one();\n        // $number = Numbering::getCounter(['id' => 1])->generateSKPendirian();\n        $kodeQrCode = QrCodeHelper::generateQrCodeHash($sk->id);\n        $qrCodePath = QrCodeHelper::generateQrCodeFile($kodeQrCode);\n        $number = $sk->no_sk_koperasi;\n        $number_tanggal = $sk->created_date;\n        $namaKoperasi = $transaksi->full_nama;\n        $isMerahPutih = $transaksi->isMerahPutih();\n        $tanggalAkta = FormatDate::formatDateIndonesia(date('Y-m-d', strtotime($transaksi->tanggal_akta)));\n        $nomorAkta = $transaksi->akta_koperasi;\n        $kabupaten = WilayahNotariat::find()->where(['wilayah_id' => $transaksi->kab_kota_id])->one()->NAMA;\n        $namaNotaris = $transaksi->nama_notaris;\n        $kedudukanNotaris = $transaksi->kedudukan_notaris;\n        //Jika di session ada kedudukan notaris, maka dicek apakah berbeda atau tidak, jika beda ganti value di kedudukan_notaris tabel t_kop \n        if (!empty($user_session['value']['id_kedudukan_profile'])) {\n            if (Wilayah::getNama($user_session['value']['id_kedudukan_profile']) == $transaksi->kedudukan_notaris) {\n                $kedudukanNotaris = $transaksi->kedudukan_notaris;\n            } else {\n                $kedudukanNotaris = Wilayah::getNama($user_session['value']['id_kedudukan_profile']);\n                $transaksi->kedudukan_notaris = $kedudukanNotaris;\n                $transaksi->save(false);\n            }\n        }\n        $isNotarisPengganti = false;\n        $namaNotarisPengganti = \"\";\n        if ($transaksi->id_notaris_pengganti != NULL) {\n            $isNotarisPengganti = true;\n            $namaNotarisPengganti = NotariatHelper::getNotarisPenggantiNameById( $transaksi->id_notaris_pengganti, $id_notaris);\n        }\n\n        $mpdf = new Mpdf(['format' => 'folio']);\n        $mpdf->SetImportUse();\n\n        $mpdf->AddPage();\n\n        $mpdf->SetDefaultFont('Arial');\n        $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n        $tplid = $mpdf->ImportPage($template);\n        $actualsize = $mpdf->UseTemplate($tplid);\n\n        header('Content-Type: application/pdf');\n\n        if ($isMerahPutih) {\n            $html = $this->renderPartial('sk_pendirian_merah_putih', [\n                'dataTransaksi' => $transaksi,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $number,\n                'number_tanggal' => $number_tanggal,\n                'tanggal_pendirian' => $transaksi->created_date,\n                'namaKoperasi' => $namaKoperasi,\n                'tanggalAkta' => $tanggalAkta,\n                'nomorAkta' => $nomorAkta,\n                'kabupaten' => $kabupaten,\n                'namaNotaris' => $namaNotaris,\n                'kedudukanNotaris' => $kedudukanNotaris,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n        } else {\n            $html = $this->renderPartial('sk_pendirian', [\n                'dataTransaksi' => $transaksi,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $number,\n                'number_tanggal' => $number_tanggal,\n                'tanggal_pendirian' => $transaksi->created_date,\n                'namaKoperasi' => $namaKoperasi,\n                'tanggalAkta' => $tanggalAkta,\n                'nomorAkta' => $nomorAkta,\n                'kabupaten' => $kabupaten,\n                'namaNotaris' => $namaNotaris,\n                'kedudukanNotaris' => $kedudukanNotaris,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n        }\n\n\n        $html = Helpers::ttdReplacement($html, $number_tanggal);\n\n        $html = Helpers::replaceMenkumham($html, $number_tanggal);\n\n        $mpdf->WriteHTML($html);\n        $mpdf->Output('pendirian_' . $namaKoperasi . '.pdf', 'I');\n        exit;\n    }\n    public function actionEdit($id)\n    {\n        $tahunModalKbli = 2020;\n\n        if (!$id) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        // Cek Jika Yang Mengedit adalah notaris yang bertanggung jawab\n        $notaris = Yii::$app->session->get('data_notaris');\n        $id_notaris = $notaris['value']['id_notaris'];\n        $data = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n\n        if (!$data) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        // Tidak Dapat Edit Data Jika Sudah Selesai Transaksi\n        if ($data->is_finish == 1) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        $model = new PendirianForm();\n        Yii::$app->view->title = \"Edit Transaksi\";\n        $model->scenario = 'edit-pendirian';\n        $model->id_trans = $id;\n        $arrayChkboxPilih = StatementDisclaimer::getTelahCeklisAll('dokumen_form_pendiran', $id);\n\n        if (Yii::$app->request->isPost) {\n            $model->load(Yii::$app->request->post());\n            $post = Yii::$app->request->post();\n\n            $model->is_notaris_pengganti = isset($post['PendirianForm']['is_notaris_pengganti']) ? 1 : 0;\n            if ($model->is_notaris_pengganti) {\n                $model->id_notaris_pengganti = isset($post['PendirianForm']['id_notaris_pengganti']) ? $post['PendirianForm']['id_notaris_pengganti'] : null;\n                $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                \n                if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                    $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                } else {\n                    // Handle jika data tidak ditemukan\n                    Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                }\n            } else {\n                $model->no_sk_notaris_pengganti = null;\n                $model->id_notaris_pengganti    = null;\n            }\n            // var_dump($post);exit;\n            // Set Json Bakum\n            $json_bakum = $this->json_bakum($post, $model);\n            if ($json_bakum) {\n                $model->json_bakum_sekunder = json_encode($json_bakum);\n            }\n\n            // Set Json Aktifitas Usaha\n            $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n            if ($json_aktifitas_usaha) {\n                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n            }\n            $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n            $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n            $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n            // Set Json Pengawas Pengurus\n            $json_pengawas_pengurus = $this->json_pengawas_pengurus($post, $model);\n            if ($json_pengawas_pengurus) {\n                $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n            }\n\n            // Set Json Pemilik Manfaat\n            $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n            if ($json_pemilik_manfaat) {\n                $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n            }\n\n            if (isset($post['submit-form'])) {\n                if ($model->validate()) {\n                    $sukses = $model->savePerbaikanData();\n                    if ($sukses) {\n                        // redirect after edit data\n                        $targetUrl = TransaksiKoperasi::getStatusTrans($id) == '-1' ? '/pendirian/uploaddocument?id=' . $id : '/pendirian/listtransaction';\n                        return Yii::$app->response->redirect($targetUrl);\n                    }\n                }\n            }\n        } else {\n            $sukses = $model->setEditData($id);\n            if (!$sukses) {\n                throw new NotFoundHttpException();\n            }\n        }\n\n\n        $listModelKop = ActionHelper::getDDListModelKoperasi();\n        $listJenisKop = ActionHelper::getDDListJenisKop('all');\n        $listPola = ActionHelper::getDDListPola();\n        $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n        $listBentukKop = ActionHelper::getDDListBentukKop();\n        $listProvinsi = ActionHelper::getDDListProvinsi();\n        $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n        $listCheckbox = ActionHelper::getListCheckbox('dokumen_form_pendiran');\n        $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n        $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n        $listJenisIdentitas = ActionHelper::getListJenisIdentitas();\n        $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n        // set KBLI\n        $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n        $KBLISearch = new KBLIBakumSearch();\n        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n        // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n        if ($model->jenis_koperasi_id == '6') {\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id]);\n        }\n\n        // Set KBLI\n        // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        $kbli_simpan_pinjam = ['1776', '1777'];\n        $kbli_tkbm = ['1601'];\n\n        if ($jenisKopKbli == '4') {\n            $KBLI = KBLIBakum::find()->where(['not in', 'id_kbli', $kbli_simpan_pinjam])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n            $KBLI_all = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5]);\n        } else if ($jenisKopKbli == '6') {\n            $KBLI = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLI->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n        } else {\n            $KBLI = KBLIBakum::find()->where(['not in', 'id_kbli', array_merge($kbli_simpan_pinjam, $kbli_tkbm)])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n            $KBLI_all = KBLIBakum::find()->where(['not in', 'id_kbli', $kbli_tkbm])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n        }\n\n        if (Yii::$app->request->get('KBLIBakumSearch')) {\n            $KBLI->andFilterWhere(['LIKE', 'judul', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n            $KBLI->orFilterWhere(['=', 'kode', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n            $KBLI_all->andFilterWhere(['LIKE', 'judul', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n            $KBLI_all->orFilterWhere(['=', 'kode', Yii::$app->request->get('KBLIBakumSearch')['judul']]);\n        }\n        $KBLIProvider = [\n            'byJenis' => new ActiveDataProvider([\n                'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => '2020']),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ]),\n            'all' => new ActiveDataProvider([\n                'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => '2020']),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ])\n        ];\n        $json_bakum = json_decode($model->json_bakum_sekunder, true);\n\n        $json_pengawas_pengurus = json_decode($model->json_pengawas_pengurus, true);\n\n        $json_aktifitas_usaha = json_decode($model->json_aktifitas_usaha, true);\n        $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n        $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n        $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n        $json_pemilik_manfaat = json_decode($model->json_pemilik_manfaat, true);\n\n        if (isset($json_pemilik_manfaat['data'])) {\n            $model->cb_mengerti_manfaat = true;\n            $model->cb_perpres_manfaat = ['22', '23'];\n        }\n\n        // Set Tampilan Awal\n        $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id, 'SEKUNDER') ? '' : 'hidden';\n        $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n        $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n        $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n        $model->is_submit = false;\n        $model->dokumen_form_pendiran = $arrayChkboxPilih;\n        $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n        $isMerahPutih = false;\n        if (JenisKoperasi::isMerahPutih($jenisKopKbli)) {\n            $model->m_tingkat_wilayah_id = 1;\n            $model->b_koperasi_id = 1;\n            $isMerahPutih = true;\n        }\n        //ambil tahun kbli\n        $tahun_kbli = null;\n        if (isset($json_aktifitas_usaha)) {\n            foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                    $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                    break;\n                } else {\n                    if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))) > 0) {\n                        $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))[0]['tahun'];\n                        break;\n                    }\n                }\n            }\n        }\n\n        return $this->render('form-pendirian', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            'listModelKop' => $listModelKop,\n            'listPola' => $listPola,\n            'listTingkatWil' => $listTingkatWil,\n            'listBentukKop' => $listBentukKop,\n            'listProvinsi' => $listProvinsi,\n            'listKabupaten' => $kabTerpilih,\n            'listKecamatan' => $kecTerpilih,\n            'listKelurahan' => $kelTerpilih,\n            'listJenisKelamin' => $listJenisKelamin,\n            'listCheckbox' => $listCheckbox,\n            'listCBMengertiManfaat' => $listCBMengertiManfaat,\n            'listCBPerpresManfaat' => $listCBPerpresManfaat,\n            'listJenisIdentitas' => $listJenisIdentitas,\n            'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n            'json_bakum' => $json_bakum,\n            'json_pemilik_manfaat' => $json_pemilik_manfaat,\n            'kbli_provider' => $KBLIProvider,\n            'kbli_search' => $KBLISearch,\n            'usaha_utama' => $usaha_utama,\n            'usaha_pendukung' => $usaha_pendukung,\n            'usaha_tambahan' => $usaha_tambahan,\n            'pengawas_pengurus' => $json_pengawas_pengurus,\n            'showBakumSekunder' => $showBakumSekunder,\n            'show_pemilik_manfaat' => $show_pemilik_manfaat,\n            'tahun_kbli' => $tahun_kbli,\n            'tahunModalKbli' => $tahunModalKbli,\n            'isMerahPutih' => $isMerahPutih\n        ]);\n    }\n\n    public function json_pemilik_manfaat($post, $model)\n    {\n        if (isset($post['SavePemilikManfaat'])) {\n            $model->json_pemilik_manfaat = $this->SavePemilikManfaat($model, $post);\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n        if (isset($post['EditPemilikManfaat'])) {\n            // Edit Json Bakum\n            $model->json_pemilik_manfaat = $this->EditPemilikManfaat($model, $post);\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n\n        if (isset($post['HapusPemilikManfaat'])) {\n            $model->json_pemilik_manfaat = $this->HapusPemilikManfaat($model, $post);\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n\n        if ($model->json_pemilik_manfaat) {\n            return json_decode($model->json_pemilik_manfaat, true);\n        }\n    }\n\n    public function SavePemilikManfaat($model, $post)\n    {\n        if ($model->load($post)) {\n            if (!$model->nama_bo || is_null($model->jenis_identitas_bo) || !$model->no_identitas_bo || !$model->tanggal_lahir_bo || !$model->alamat_bo || is_null($model->kewarganegaraan_bo) || !$model->npwp_bo) {\n                $model->addError('json_pemilik_manfaat', \"Kolom Nama, Jenis Identitas, No Identitas, Tanggal Lahir, Alamat Bo, Kewarganegaraan dan NPWP Wajib Di isi.\");\n            }\n            if (!preg_match(RegexHelper::NUMBER_ONLY, $model->npwp_bo) || !preg_match(RegexHelper::NUMBER_ONLY, $model->no_identitas_bo)) {\n                $model->addError('json_pemilik_manfaat', \"Kolom NPWP dan No Identitas Wajib berupa angka.\");\n            }\n            $json = $model->json_pemilik_manfaat;\n            if ($json) {\n                $json = json_decode($json, true);\n                if (isset($json['data'])) {\n                    foreach ($json['data'] as $key => $val) {\n                        if (strtolower($model->no_identitas_bo) == strtolower($val['no_identitas']) && $model->jenis_identitas_bo == $val['jenis_identitas']) {\n                            $model->addError('json_pemilik_manfaat', \"{$val['nama_jenis_identitas']} dengan nomor '{$model->no_identitas_bo}' Sudah Terdaftar.\");\n                            return json_encode($json);\n                        }\n                    }\n                }\n            } else {\n                $json = ['count' => 0];\n            }\n            if (!empty($model->getErrors())) {\n                return json_encode($json);\n            }\n\n            $json['count']++;\n            $json['data'][] = [\n                'id' => null,\n                'nama' => $model->nama_bo,\n                'jenis_identitas' => $model->jenis_identitas_bo,\n                'nama_jenis_identitas' => JenisIdentitas::getNama($model->jenis_identitas_bo),\n                'no_identitas' => $model->no_identitas_bo,\n                'tempat_lahir' => $model->tempat_lahir_bo,\n                'tanggal_lahir' => $model->tanggal_lahir_bo,\n                'alamat' => $model->alamat_bo,\n                'kewarganegaraan' => $model->kewarganegaraan_bo,\n                'nama_kewarganegaraan' => $model->kewarganegaraan_bo == '0' ? 'WNA' : 'WNI',\n                'npwp' => $model->npwp_bo,\n                'hubungan' => $model->hubungan_bo,\n                'cbox' => [\n                        'cb_modal1' => isset($post['cb_modal1']) ? true : false,\n                        'cb_modal2' => isset($post['cb_modal2']) ? true : false,\n                        'cb_modal3' => isset($post['cb_modal3']) ? true : false,\n                        'cb_modal4' => isset($post['cb_modal4']) ? true : false,\n                        'cb_modal5' => isset($post['cb_modal5']) ? true : false,\n                        'cb_modal_bawah' => isset($post['cb_modal_bawah']) ? true : false,\n                    ]\n            ];\n\n            $model->nama_bo = $model->no_identitas_bo = $model->jenis_identitas_bo = $model->tempat_lahir_bo = $model->tanggal_lahir_bo = $model->alamat_bo = $model->kewarganegaraan_bo = $model->npwp_bo = $model->hubungan_bo = null;\n            return json_encode($json);\n        }\n    }\n\n    public function EditPemilikManfaat($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pemilik_manfaat;\n            if (!$json) {\n                return null;\n            }\n            $json = json_decode($json, true);\n\n            $selected_data = $post['EditPemilikManfaat'];\n            $json['data'][$selected_data]['nama'] = $model->nama_bo;\n            $json['data'][$selected_data]['jenis_identitas'] = $model->jenis_identitas_bo;\n            $json['data'][$selected_data]['nama_jenis_identitas'] = JenisIdentitas::getNama($model->jenis_identitas_bo);\n            $json['data'][$selected_data]['no_identitas'] = $model->no_identitas_bo;\n            $json['data'][$selected_data]['tempat_lahir'] = $model->tempat_lahir_bo;\n            $json['data'][$selected_data]['tanggal_lahir'] = $model->tanggal_lahir_bo;\n            $json['data'][$selected_data]['alamat'] = $model->alamat_bo;\n            $json['data'][$selected_data]['kewarganegaraan'] = $model->kewarganegaraan_bo;\n            $json['data'][$selected_data]['nama_kewarganegaraan'] = $model->kewarganegaraan_bo == '0' ? 'WNA' : 'WNI';\n            $json['data'][$selected_data]['npwp'] = $model->npwp_bo;\n            $json['data'][$selected_data]['hubungan'] = $model->hubungan_bo;\n\n            return json_encode($json);\n        }\n    }\n\n    public function HapusPemilikManfaat($model, $post)\n    {\n        if ($model->load($post)) {\n            $json = $model->json_pemilik_manfaat;\n            if (!$json) {\n                return null;\n            }\n            $selected_data = $post['HapusPemilikManfaat'];\n            $json = json_decode($json, true);\n\n            unset($json['data'][$selected_data]);\n            $json['count']--;\n            if ($json['count'] <= 0) {\n                return null;\n            }\n\n            return json_encode($json);\n        }\n    }\n\n    public function actionValidasiNik()\n    {\n        Yii::$app->response->format = Response::FORMAT_JSON;\n\n        if (Yii::$app->user->isGuest) {\n            return ['error' => 'Anda harus masuk untuk mengakses aksi ini'];\n        }\n\n        try {\n\n            $postData = Yii::$app->request->post();\n\n            $status = HelperDukcapil::CheckIsActiveValidateDukcapil();\n            if($status){\n                $validate = new HelperDukcapil($postData);\n                $validate->curlValidDukcapil();\n                $result = $validate->response();\n            }else{\n                $result = HelperDukcapil::AllowValidation();\n            }\n\n            if ($result['status'] === 0) {\n                throw new \\Exception(end($result['data']));\n            }\n\n            return $result;\n        }\n        catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        if ($errorMessage) {\n            Yii::$app->response->statusCode = 400;\n            return ['message' => $errorMessage];\n        }\n    }\n\n    public function actionKuisioner($id) {\n        if ($id) {\n            $model = new KuisionerForm();\n\n            $lembagaKuesionerDetail = BoHelper::questionnaire(BoHelper::GET_QUESTIONNAIRE);\n            $BOTrans = PemilikManfaat::getPemilikManfaatByID($id);\n\n            $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n            $listKW = ActionHelper::getListKewarganegaraan();\n            $listProvinsi = Wilayah::getDDListProvinsi();\n            $flagDukcapil = Setting::getIsCekDukcapil();\n            $listNegara = Negara::getListNegara();\n\n            $backUrl = '/pendirian/confirmation?id=' . $id;\n\n            $namaBo = [];\n            $existingAnggota = [];\n\n            foreach ($BOTrans as $bo) {\n                $namaBo[] = ucfirst(strtolower($bo['nama']));\n                $existingAnggota[] = [\n                    'id' => $bo['id'],\n                    'nama_lengkap' => $bo['nama'],\n                    'id_jenis_identitas' => $bo['m_jenis_identitas_id'],\n                    'nomor_identitas' => $bo['no_identitas'],\n                ];\n            }\n\n            $csrf = Yii::$app->request->csrfToken;\n            $sessionId = Yii::$app->session->id;\n\n            return $this->render('kuisioner', [\n                'csrf' => $csrf,\n                'model' => $model,\n                'listKw' => $listKW,\n                'backUrl' => $backUrl,\n                'sessionId' => $sessionId,\n                'koperasiId' => $id,\n                'listNegara' => $listNegara,\n                'listProvinsi' => $listProvinsi,\n                'flagDukcapil' => $flagDukcapil,\n                'namaBo' => ActionHelper::getNamaBo($namaBo),\n                'existingAnggota' => json_encode($existingAnggota),\n                'listJenisIdentitas' => $listJenisIdentitas,\n                'lembagaKuesionerDetail' => $lembagaKuesionerDetail['data'],\n            ]);\n        } else {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n}\n\n// pendirian <nama koperasi>\n\n\n--- File: 48 # controllers/PerubahanController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\models\\forms\\KuisionerForm;\nuse app\\models\\MKbli;\nuse app\\models\\notariat\\Negara;\nuse app\\models\\Setting;\nuse Yii;\nuse Mpdf\\Mpdf;\nuse app\\models\\Wilayah;\nuse app\\models\\SK;\nuse Da\\QrCode\\QrCode;\nuse app\\models\\PesanNama;\nuse yii\\web\\Response;\nuse yii\\web\\UploadedFile;\nuse app\\models\\Disclaimer;\nuse app\\models\\MappingKBLI;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\BentukKoperasi;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\MasterPerubahan;\nuse app\\models\\WilayahNotariat;\nuse app\\components\\ActionHelper;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TPendirianDokumen;\nuse app\\models\\TransaksiKoperasi;\nuse app\\components\\BaseController;\nuse app\\components\\helper\\BoHelper;\nuse app\\models\\ChecklistPerubahan;\nuse yii\\web\\NotFoundHttpException;\nuse app\\components\\TransaksiHelper;\nuse app\\models\\forms\\PerubahanForm;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\FormatDate;\nuse app\\models\\ChecklistPerubahanForm;\nuse app\\models\\search\\KBLIBakumSearch;\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\nuse app\\components\\helper\\EncryptHelper;\nuse app\\components\\HelperDukcapil;\nuse app\\components\\Helpers;\nuse app\\components\\NpakHelper;\nuse app\\models\\Command;\nuse app\\models\\notariat\\Notaris;\nuse app\\models\\NotarisNpak;\nuse app\\models\\TPerubahanDokumen;\nuse app\\models\\PemilikManfaat;\nuse app\\components\\NotariatHelper;\nuse app\\components\\QrCodeHelper;\n\nclass PerubahanController extends BaseController\n{\n    private $key;\n\n    public function beforeAction($action)\n    {\n\n        $this->key = \"D0c0spArT@n\";\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"/site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionAnggarandasar()\n    {\n        Yii::$app->view->title = \"Perubahan Anggaran Dasar\";\n        $post = [];\n        $err = [];\n        if (!empty(Yii::$app->request->post())) {\n\n            $post = Yii::$app->request->post();\n            unset($post['_csrf']);\n\n            if (empty(trim($post['nik']))) {\n                Yii::$app->session->setFlash('error', \"NIK tidak boleh kosong\");\n                return $this->redirect('anggarandasar');\n            }\n\n            if (empty(trim($post['no_sk_koperasi']))) {\n                Yii::$app->session->setFlash('error', \"Nomor SK tidak boleh kosong\");\n                return $this->redirect('anggarandasar');\n            }\n\n            if (empty(trim($post['full_nama']))) {\n                Yii::$app->session->setFlash('error', \"Nama Koperasi tidak boleh kosong\");\n                return $this->redirect('anggarandasar');\n            }\n\n            // pencarian di db\n            $find = MasterTransaction::findExistTransactionWithSK($post);\n\n            $status = $find['status'];\n            $trans = $find['data'];\n            $err = $find['err'];\n\n            $check = MasterTransaction::findExistTransactionWithDoc($post, -1);\n            // bypass klo ods\n            if ($status) {\n\n                if ($trans->transaksiKoperasi->is_migrasi == 1) {\n                    $check = $trans;\n                }\n            }\n\n            if ($trans and $status !== false and $check !== \"-1\") {\n                // block transaction if is gabung = 1\n                $MT = MasterTransaction::find()->where(['id' => $trans->id])->one();\n\n                if ($MT->is_active == 0) {\n                    Yii::$app->session->setFlash('error', \"Tidak dapat melakukan transaksi Perubahan karena status Koperasi Tidak Aktif. Silakan menghubungi Dinas Koperasi Setempat\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($MT->is_blokir == 1) {\n\n                    Yii::$app->session->setFlash('error', \"Perubahan tidak dapat dilakukan karena status Koperasi Terblokir, silahkan hubungi Dinas Koperasi setempat\");\n\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($MT->is_gabung == 1) {\n\n                    Yii::$app->session->setFlash('error', \"Koperasi sudah melakukan penggabungan\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($MT->is_bubar == 1) {\n\n                    Yii::$app->session->setFlash('error', \"Koperasi sudah melakukan pembubaran\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($trans->id != $trans->transaksiKoperasi->id_master) {\n                    Yii::$app->session->setFlash('error', \"Data Koperasi yang diinput bukan data transaksi terakhir\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                 if ($trans->transaksiKoperasi->is_perbaikan) {\n                    Yii::$app->session->setFlash('error', \"Data Koperasi sedang dalam perbaikan\");\n                    return $this->redirect('anggarandasar');\n                }\n\n                if ($check == \"-2\") { // data already submitted but not yet upload documents\n\n                    return $this->redirect('uploadDocument?id=' . $trans->transaksiKoperasi->id);\n                }\n\n                $payload = base64_encode(EncryptHelper::encrypt($trans->id, $this->key));\n                // $payload = base64_encode( EncryptHelper::encrypt('15c8752bd3418dasda', $this->key) );\n\n                return $this->redirect('checklist-form?id=' . $payload);\n                // return $this->redirect('checklist-form?check='.$payload);\n            } else {\n                $master = MasterTransaction::find()\n                    ->joinWith(['transaksiKoperasi'])\n                    ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where($post)\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                $str = '';\n                if (!$master) {\n\n                    // $str = \"Data tidak ditemukan\";\n                } else {\n\n                    if ($master->is_gabung == 1) {\n                        $str = \"Koperasi sudah melakukan penggabungan\";\n                    }\n\n                    if ($master->is_bubar == 1) {\n                        $str = \"Koperasi sudah melakukan pembubaran\";\n                    }\n                }\n                if ($str) {\n                    Yii::$app->session->setFlash('error', $str);\n                }\n            }\n        }\n\n        return $this->render('anggaranDasar', [\n            'tModel' => new TransaksiKoperasi(),\n            'npakModel' => new NotarisNpak(),\n            'post' => $post,\n            'err' => $err,\n        ]);\n    }\n\n    public function actionChecklistForm()\n    {\n\n        $payload = Yii::$app->request->get();\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $idNotaris = $user['value']['id_notaris'];\n        $isNpak = NpakHelper::isNpak($idNotaris);\n\n        $checks = [];\n        if (isset($payload['id'])) {\n\n            $payload = EncryptHelper::decrypt(base64_decode($payload['id']), $this->key);\n\n            $idMaster = $payload;\n            $no_checklist = uniqid(\"\", true);\n        } else if (isset($payload['check'])) {\n\n            $payload = EncryptHelper::decrypt(base64_decode($payload['check']), $this->key);\n\n            if (!$payload) {\n                Yii::$app->session->setFlash('error', \"Terjadi Kesalahan saat menampilkan data ceklist jenis perubahan.\");\n                return $this->redirect('anggarandasar');\n            }\n\n            $rChecks = ChecklistPerubahan::find()->where(['no_checklist' => $payload])->all();\n\n            $idMaster = $rChecks[0]->d_koperasi_id;\n            $no_checklist = $payload;\n\n            foreach ($rChecks as $check) {\n\n                array_push($checks, $check->m_perubahan_id);\n            }\n        }\n\n        $trans = MasterTransaction::find()->joinWith(['transaksiKoperasi'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n        $isMerahPutih = false;\n        $jenisKoperasi = $trans['transaksiKoperasi']['jenis_koperasi'] ?? null;\n\n        if ($jenisKoperasi) {\n            $jenisKoperasiId = JenisKoperasi::getPrimaryByNama($jenisKoperasi)['id'] ?? null;\n\n            if ($jenisKoperasiId && JenisKoperasi::isMerahPutih($jenisKoperasiId)) {\n                $isMerahPutih = true;\n            }\n        }\n\n        return $this->render('checklistPerubahan', [\n            'namaKoperasi' => $trans['transaksiKoperasi']['full_nama'],\n            'idMaster' => $idMaster,\n            'no_checklist' => $no_checklist,\n            'checks' => $checks,\n            'checklists' => MasterPerubahan::find()->all(),\n            'isMerahPutih' => $isMerahPutih,\n            'isNpak' => $isNpak,\n            'model' => new ChecklistPerubahanForm()\n        ]);\n    }\n\n    public function actionChecklistprocess()\n    {\n\n        if (!empty(Yii::$app->request->post())) {\n\n\n            $model = new ChecklistPerubahanForm();\n            $model->load(Yii::$app->request->post());\n\n            if ($model->validate()) {\n\n                $batch = [];\n                $no_checklist = uniqid('', true);\n                $d_koperasi_id = Yii::$app->request->post('id_master');\n                $no_checklist = Yii::$app->request->post('no_checklist');\n\n                if (!empty($no_checklist)) {\n\n                    $dModel = ChecklistPerubahan::deleteAll('no_checklist = :no_checklist', [':no_checklist' => $no_checklist]);\n                }\n\n                foreach (Yii::$app->request->post('ChecklistPerubahanForm')['m_perubahan_id'] as $num => $check) {\n\n                    if (!empty($check)) {\n\n                        $batch[$num]['no_checklist'] = $no_checklist;\n                        $batch[$num]['d_koperasi_id'] = $d_koperasi_id;\n                        $batch[$num]['m_perubahan_id'] = $check;\n                    }\n                }\n\n                $res = Yii::$app->db_koperasi->createCommand()->batchInsert('kop_c_perubahan', ['no_checklist', 'd_koperasi_id', 'm_perubahan_id'], $batch)->execute();\n\n                if ($res) {\n\n                    Yii::$app->session->set('no_checklist', $no_checklist);\n                    return $this->redirect('form-perubahan');\n                }\n            } else {\n\n                Yii::$app->session->setFlash('error', \"Pilih salah satu jenis perubahan\");\n                return $this->redirect(Yii::$app->request->referrer);\n            }\n        }\n    }\n\n    public function actionFormPerubahan($id = null)\n    {\n        $tahunModalKbli = '2020';\n        $arrayBidangUsaha = array('jenis_koperasi', 'aktivitas_usaha', 'simpanan_pokok', 'pola_pengelolaan', 'simpanan_wajib', 'dana_hibah');\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $nama_notaris = $user['value']['nama_gelar'];\n        $id_notaris = $user['value']['id_notaris'];\n        $no_checklist = $session->get('no_checklist');\n\n        if ($id) {\n            $data = TransaksiKoperasi::findOne($id);\n            if ($data->is_finish == -1) {\n                return Yii::$app->response->redirect(\"/perubahan/edit?id=\" . $id);\n            }\n        }\n\n        if (!$no_checklist) {\n            Yii::$app->session->setFlash('error', \"Terjadi Kesalahan Pada Data Ceklis Jenis Perubahan.\");\n            return Yii::$app->response->redirect('/perubahan/anggarandasar');\n        }\n\n        $mustCheck = true;\n        $payload = base64_encode(EncryptHelper::encrypt($no_checklist, $this->key));\n        $back = \"/perubahan/checklist-form?check={$payload}\";\n        $dataMaster = ChecklistPerubahan::getDataMasterByChecklist($no_checklist);\n        if (!$dataMaster) {\n            Yii::$app->session->setFlash('error', \"Terjadi Kesalahan Pada Proses Data Ceklis Jenis Perubahan.\");\n            return Yii::$app->response->redirect('/perubahan/anggarandasar');\n        }\n        $model = new PerubahanForm();\n        $model->scenario = \"form-perubahan\";\n        Yii::$app->view->title = \"Form Perubahan\";\n        $judul = \"FORM PERMOHONAN PERUBAHAN\";\n        $model->setEditData($dataMaster->id_transaksi, true);\n        $model->old_id = $dataMaster->id_transaksi;\n        $model->cklist = $no_checklist;\n        $model->nama_notaris = $nama_notaris;\n\n        // Clear Must Null Field\n        if (!Yii::$app->request->isPost) {\n            $session->set('bagi_hapus_kbli', 0);\n            $model->tgl_rapat = null;\n            $model->alamat_rapat = null;\n            $model->jumlah_peserta_rapat = null;\n            $model->no_akta = null;\n            $model->tgl_akta = null;\n        }\n\n        // Normalisasi Rules Koperasi\n\n        // Null Kan Sub Jenis Jika Tidak Memiliki Parent\n        if ($model->c_jenis_koperasi_id) {\n            $cekParent = JenisKoperasi::find()->where(['id' => $model->c_jenis_koperasi_id])->one();\n            if ($cekParent) {\n                if ($model->jenis_koperasi_id != $cekParent->parent_id) {\n                    $model->c_jenis_koperasi_id = null;\n                }\n            }\n        }\n\n        $listDisabled = [\n            'aktivitas_usaha' => true,\n            'alamat_koperasi' => true,\n            'dana_hibah' => true,\n            'dana_cadangan' => true,\n            'jangka_waktu' => true,\n            'jenis_koperasi' => true,\n            'jumlah_anggota' => true,\n            'nama_koperasi' => true,\n            'pemilik_manfaat' => true,\n            'pengurus_pengawas' => true,\n            'periode_pengurus' => true,\n            'pola_pengelolaan' => true,\n            'simpanan_pokok' => true,\n            'simpanan_wajib' => true,\n            'tingkat_wilayah' => true,\n            'usaha_pendukung' => true,\n            'usaha_tambahan' => true,\n            'wilayah' => true,\n            'full_nama' => true,\n            'bentuk_koperasi' => true,\n            'bh_penggabungan' => true,\n            'bh_pembagian' => true,\n            'model_koperasi' => true,\n        ];\n        $listEnabled = ChecklistPerubahan::getKolomPerubahan($no_checklist);\n\n        // Menonaktifkan disabled\n        foreach ($listEnabled as $value) {\n            $listDisabled[$value] = false;\n        }\n\n        $slicedPerubahan = array_slice(ChecklistPerubahan::getKolomPerubahan($no_checklist), 0, count($arrayBidangUsaha));\n        $isBidangUsaha = ($slicedPerubahan === $arrayBidangUsaha);\n\n        if (!empty($dataMaster->transaksiKoperasi->is_migrasi) && $dataMaster->transaksiKoperasi->is_migrasi == 1) {\n            $listDisabled = TransaksiHelper::openFieldMigrasi($listDisabled);\n        }\n\n        $model->listDisabled = $listDisabled;\n\n        if ($model->load(Yii::$app->request->post())) {\n            $post = Yii::$app->request->post();\n            // var_dump($post);exit;\n            // Set Json Bakum\n            // $json_bakum = TransaksiHelper::json_bakum($post,$model);\n            // if($json_bakum) {\n            //     $model->json_bakum_sekunder = json_encode($json_bakum);\n            // }\n            $model->is_notaris_pengganti = isset($post['PerubahanForm']['is_notaris_pengganti']) ? 1 : 0;\n            if (!$model->is_notaris_pengganti) {\n                $model->id_notaris_pengganti = null;\n                $model->no_sk_notaris_pengganti = null;\n            }\n            if ($model->id_notaris_pengganti) {\n                $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                \n                if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                    $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                } else {\n                    // Handle jika data tidak ditemukan\n                    Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                    $model->id_notaris_pengganti = null;\n                    $model->no_sk_notaris_pengganti = null;\n                }\n            }\n            // Set Json Gabung\n            $json_gabung = TransaksiHelper::json_gabung($post, $model);\n            if ($json_gabung) {\n                $model->json_gabung = json_encode($json_gabung);\n            }\n\n            // Set Json Pisah\n            $json_pisah = TransaksiHelper::json_pisah($post, $model);\n            if ($json_pisah) {\n                $model->json_pisah = json_encode($json_pisah);\n            }\n\n            // Set Json Aktifitas Usaha\n            if (isset($post['cek_kbli'])) {\n                if (count($post['cek_kbli'])) {\n                    $json_aktifitas_usaha_utama = json_decode($post['PerubahanForm']['json_aktifitas_usaha'], true)['data']['utama'];\n                    if (count($json_aktifitas_usaha_utama) > 0) {\n                        $aktifitas_usaha = MKbli::getAktifitasUsaha(array_keys($json_aktifitas_usaha_utama)[0])[0];\n                        if ($aktifitas_usaha['tahun'] == 2017 && !$isBidangUsaha) {\n                            if (MKbli::getAktifitasUsaha($post['cek_kbli'][0])[0]['tahun']  == 2020) {\n                                $json_aktifitas_usaha = [\n                                    'data' => [\n                                        'utama' => [],\n                                        'pendukung' => [],\n                                        'tambahan' => []\n                                    ]\n                                ];\n\n                                $post['PerubahanForm']['json_aktifitas_usaha'] = json_encode($json_aktifitas_usaha);\n\n                                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n                            }\n                        }\n                    }\n                }\n            }\n\n            $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n            if ($json_aktifitas_usaha) {\n                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n                $mustCheck = false;\n            }\n\n            $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n            $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n            $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n            // Set Json Pengawas Pengurus\n            $json_pengawas_pengurus = TransaksiHelper::json_pengawas_pengurus($post, $model);\n            if ($json_pengawas_pengurus) {\n                $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n            }\n\n            // Set Json Pemilik Manfaat\n            $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n            if ($json_pemilik_manfaat) {\n                $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n            }\n            // var_dump($model->attributes,$post);exit;\n            if (isset($post['submit-form'])) {\n                $model->is_submit = true;\n\n                if (empty($model->getErrors())) {\n                    if ($model->validate()) {\n                        // Lanjut proses\n                        $id_transaksi = $model->savePerubahan();\n                        if ($id_transaksi) {\n                            return $this->redirect(['/perubahan/upload-document', 'id' => $id_transaksi]);\n                        }\n                    }\n                }\n            }\n        }\n\n\n        // Set List\n        $listJenisKop = ActionHelper::getDDListJenisKop();\n        $listSubJenisKop = ArrayHelper::map(JenisKoperasi::find()->where(['parent_id' => $model->jenis_koperasi_id])->all(), 'id', 'nama');\n        $listPola = ActionHelper::getDDListPola();\n        $listModelKop = ActionHelper::getDDListModelKoperasi();\n        $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n        $openIdTingkatWil = ActionHelper::$exceptIdTingkatWilayah;\n        $listBentukKop = ActionHelper::getDDListBentukKop();\n        $listProvinsi = ActionHelper::getDDListProvinsi();\n        $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n        $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n        $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n        $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n        $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n        // set KBLI\n        $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n        $polaKopKbli = $model->m_pola_id ? $model->m_pola_id : 1; // Tiket #186604\n        $bentukKopKbli = isset(Yii::$app->request->get('KBLISearch')['bentuk']) ? Yii::$app->request->get('KBLISearch')['bentuk'] : 1;\n        $bentukKopKbli = $model->b_koperasi_id ? $model->b_koperasi_id : $bentukKopKbli;\n        $KBLISearch = new KBLIBakumSearch();\n        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n        // CEK KOPERASI MERAH PUTIH\n        $isMerahPutih = ChecklistPerubahan::isPerubahanKoperasiMerahPutih($no_checklist);\n        if ($isMerahPutih) {\n\n            $listJenisKopMerahPutih = [];\n            foreach ($listJenisKop as $id => $name) {\n                if (stripos($name, JenisKoperasi::NAME_MERAH_PUTIH) !== false) {\n                    $listJenisKopMerahPutih[$id] = $name;\n                }\n            }\n\n            // MAKE SURE SET VALUE [CAN BE REMOVED], karena secara default telah select value pertama dari list\n            $model->m_tingkat_wilayah_id = 1; // Kabupaten / Kota -> disabled\n            $model->model_koperasi = 0; // Tidak Multi Pihak -> disabled\n            $model->b_koperasi_id = 1; // Primer -> disabled\n\n            // DISABLE OPTIONS\n            $listDisabled['tingkat_wilayah'] = true;\n            $listDisabled['model_koperasi'] = true;\n            $listDisabled['bentuk_koperasi'] = true;\n\n            $listJenisKop = $listJenisKopMerahPutih;\n        }\n\n        // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n        if ($model->jenis_koperasi_id == '6' && !Yii::$app->request->get('KBLISearch')['jenis']) {\n            $koperasi_sekunder  = $model->b_koperasi_id == '2' ? 2 : 0;\n            $mappingKBLI        = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id + $koperasi_sekunder]);\n        }\n\n        if (Yii::$app->request->get('KBLISearch')['jenis'] && Yii::$app->request->get('KBLIBakumSearch')['judul']) {\n            $jenisKopKbli = Yii::$app->request->get('KBLISearch')['jenis'];\n        }\n\n        if (Yii::$app->request->get('KBLISearch')) {\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']]);\n\n            // SET default pola id ke konvensional jika jenis koperasi diganti ke simpan pinjam\n            if (Yii::$app->request->get('KBLISearch')['jenis'] == '6' && !isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => 1]);\n            }\n\n            if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => Yii::$app->request->get('KBLISearch')['pola']]);\n\n                // 2021-12-06 - CEK BENTUK KOPERASI +2 DARI POLA (3 = SEKUNDER KONVENSIONAL | 4 = SEKUNDER SYARIAH)\n                if (isset(Yii::$app->request->get('KBLISearch')['bentuk'])) {\n                    if (Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => Yii::$app->request->get('KBLISearch')['pola'] + 2]);\n                    }\n                }\n            }\n        }\n\n        // Set KBLI\n        // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        $kbli_simpan_pinjam = KBLIBakum::listKodeSimpanPinjam();\n        $kbli_tkbm = KBLIBakum::listKodeTkbm();\n        $kbli_jasa = ['7050'];\n\n        //Tiket #186604 >> #675530 Fix\n        //INC-AHU-112024-02343 - KBLI 64146 tidak tampil\n        //Perbaikan value kbli yang terbalik antara primer dan sekunder\n        $kbli_sp_lain_konvensional_p  = ['64145', '64147', '64142', '64144', '64146', '64148', '64143']; //simpan pinjam konvensional primer\n        $kbli_sp_lain_konvensional_s  = ['64145', '64147', '64142', '64144', '64146', '64148', '64141']; //simpan pinjam konvensional sekunder\n        $kbli_sp_lain_syariah_p       = ['64141', '64143', '64142', '64144', '64146', '64148', '64147']; //simpan pinjam syariah primer\n        $kbli_sp_lain_syariah_s       = ['64141', '64143', '64142', '64144', '64146', '64148', '64145']; //simpan pinjam syariah sekunder\n        $kbli_ex_lain_konvensional_p  = ['64141', '64143', '64145', '64147', '64146', '64148', '64144']; //lainnya konvensional primer \n        $kbli_ex_lain_konvensional_s  = ['64141', '64143', '64145', '64147', '64146', '64148', '64142']; //lainnya konvensional sekunder\n        $kbli_ex_lain_syariah_p       = ['64141', '64143', '64145', '64147', '64142', '64144', '64148']; //lainnya syariah primer\n        $kbli_ex_lain_syariah_s       = ['64141', '64143', '64145', '64147', '64142', '64144', '64146']; //lainnya syariah sekunder\n\n        if ($jenisKopKbli == '6') { //jenis simpan pinjam\n            if ($polaKopKbli == '1') {\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else {\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        } else { //jenis lainnya\n            if ($polaKopKbli == '1') {\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else {\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ($bentukKopKbli == '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        }\n\n        //Khusus perubahan\n        if (isset(Yii::$app->request->get('KBLISearch')['jenis'])) {\n            if (Yii::$app->request->get('KBLISearch')['jenis'] == '6') { //jenis simpan pinjam\n                if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                    if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                } else {\n                    if ($polaKopKbli == '1') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                }\n            } else { //jenis lainnya\n                if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                    if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                } else {\n                    if ($polaKopKbli == '2') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ($bentukKopKbli == '2') {\n                            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andWhere(['tahun' => $tahunModalKbli])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        }\n                    }\n                }\n            }\n        }\n\n        $KBLI_all   = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5])->andWhere(['tahun' => $tahunModalKbli]);\n\n        if (Yii::$app->request->get('KBLIBakumSearch')) {\n\n            $searchKode = Yii::$app->request->get('KBLIBakumSearch')['judul'] ? Yii::$app->request->get('KBLIBakumSearch')['judul'] : '';\n\n            //Tiket #186604\n            //Tambah validasi Pencarian result HANYA berdasarkan bentuk, jenis, dan pola koperasi\n            // var_dump($model->jenis_koperasi_id, $jenisKopKbli, $searchKode, $polaKopKbli, $bentukKopKbli);exit;\n            if (!empty($searchKode)) {\n                if ($jenisKopKbli == '6') { //jenis simpan pinjam\n                    if ($polaKopKbli == '1') {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                        }\n                    } else {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                        }\n                    }\n                } else { //jenis lainnya                \n                    if ($polaKopKbli == '1') {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                        }\n                    } else {\n                        if ($bentukKopKbli == '2') {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                        } else {\n                            $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                        }\n                    }\n                }\n\n                //Khusus perubahan\n                if (isset(Yii::$app->request->get('KBLISearch')['jenis'])) {\n                    if (Yii::$app->request->get('KBLISearch')['jenis'] == '6') { //jenis simpan pinjam\n                        if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                            if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                                }\n                            } else {\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                                }\n                            }\n                        } else {\n                            if ($polaKopKbli == '2') {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                                }\n                            } else {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                                }\n                            }\n                        }\n                    } else { //jenis lainnya\n                        if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                            if (Yii::$app->request->get('KBLISearch')['pola'] == '2') {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                                }\n                            } else {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                                if (isset(Yii::$app->request->get('KBLISearch')['bentuk']) && Yii::$app->request->get('KBLISearch')['bentuk'] == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                                }\n                            }\n                        } else {\n                            if ($polaKopKbli == '2') {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                                }\n                            } else {\n                                if ($bentukKopKbli == '2') {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000';\n                                } else {\n                                    $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                                }\n                            }\n                        }\n                    }\n                }\n\n                $KBLI->andWhere(['tahun' => $tahunModalKbli])\n                    ->andFilterWhere([\n                        'OR',\n                        ['LIKE', 'judul', $searchKode],\n                        ['=', 'kode', $searchKode],\n                    ]);\n                $KBLI_all->andWhere(['tahun' => $tahunModalKbli])\n                    ->andFilterWhere([\n                        'OR',\n                        ['LIKE', 'judul', $searchKode],\n                        ['=', 'kode', $searchKode],\n                    ]);\n            }\n        }\n\n        $KBLIProvider = [\n            'byJenis' => new ActiveDataProvider([\n                'query' => $jenisKopKbli == '4' || $jenisKopKbli == '6' ? $KBLI->andWhere(['status' => 1]) : $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ]),\n            'all' => new ActiveDataProvider([\n                'query' => $jenisKopKbli == '4' || $jenisKopKbli == '6' ? $KBLI_all->andWhere(['status' => 1]) : $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahunModalKbli]),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ])\n        ];\n\n        $json_bakum = json_decode($model->json_bakum_sekunder, true);\n        $json_gabung = json_decode($model->json_gabung, true);\n        $json_pisah = json_decode($model->json_pisah, true);\n        $json_pengawas_pengurus = json_decode($model->json_pengawas_pengurus, true);\n        $json_aktifitas_usaha = json_decode($model->json_aktifitas_usaha, true);\n        $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n        $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n        $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n        $json_pemilik_manfaat = json_decode($model->json_pemilik_manfaat, true);\n\n        if (isset($json_pemilik_manfaat['data'])) {\n            $model->cb_mengerti_manfaat = true;\n            $model->cb_perpres_manfaat = ['22', '23'];\n        }\n\n        // Set Tampilan Awal\n        // $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id,'SEKUNDER') ? '' : 'hidden';\n        $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n        $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n        $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n        $model->is_submit = false;\n        $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n\n        // Normalize Data\n        if (!Yii::$app->request->isPost) {\n            // Kosongkan KBLI Jika Perubahan Jenis Koperasi\n            if (!$listDisabled['jenis_koperasi']) {\n                $usaha_utama = null;\n                $usaha_pendukung = null;\n                $usaha_tambahan = null;\n                $kbli = json_decode($model->json_aktifitas_usaha, true);\n                $kbli['data']['utama'] = [];\n                $kbli['data']['pendukung'] = [];\n                $kbli['data']['tambahan'] = [];\n                $model->json_aktifitas_usaha = json_encode($kbli);\n            }\n\n            if (!$listDisabled['jangka_waktu']) {\n                $model->jumlah_jangka_waktu = 0;\n            }\n        }\n\n        //ambil tahun kbli\n        $tahun_kbli = null;\n        if (!$mustCheck) {\n            foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                    $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                    break;\n                } else {\n                    if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))) > 0) {\n                        $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))[0]['tahun'];\n                        break;\n                    }\n                }\n            }\n        } else {\n            if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))) > 0) {\n                $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))[0]['tahun'];\n            }\n        }\n\n        //cek apakah masih menggunakan aktifitas usaha tahun 2017\n        $isShowTahunKbli = true;\n        if ($mustCheck) {\n            if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))) > 0) {\n                $aktifitas_usaha = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($dataMaster->id_transaksi, 'Utama'))[0];\n                if ($aktifitas_usaha['tahun'] == 2017 && $isBidangUsaha) {\n                    $isShowTahunKbli = false;\n                    $tahun_kbli = null;\n                    $model->json_aktifitas_usaha = json_encode(\n                        [\n                            'data' => [\n                                'utama' => [],\n                                'pendukung' => [],\n                                'tambahan' => []\n                            ]\n                        ]\n                    );\n                    $usaha_utama = [];\n                    $usaha_pendukung = [];\n                    $usaha_tambahan = [];\n                }\n            }\n        }\n\n        $tingkatWilayah = \"\";\n        $transKoperasiDetail = !$isMerahPutih ? TransaksiKoperasi::find()->where(['id' => $dataMaster->id_transaksi])->one() : null; // PREVENT ENABLE OPTIONS WHEN CHANGING TO KOPERASI MERAH PUTIH\n        if ($transKoperasiDetail) {\n            $tingkatWilayah = $transKoperasiDetail->m_tingkat_wilayah_id;\n        }\n\n\n        return $this->render('form-perubahan', [\n            'model' => $model,\n            'judul' => $judul,\n            'listProvinsi' => $listProvinsi,\n            'listKabupaten' => $kabTerpilih,\n            'listKecamatan' => $kecTerpilih,\n            'listKelurahan' => $kelTerpilih,\n            'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n            'kbli_provider' => $KBLIProvider,\n            'kbli_search' => $KBLISearch,\n            'show_pemilik_manfaat' => true,\n            'listCBPerpresManfaat' => [],\n            'listJenisKop' => $listJenisKop,\n            'listSubJenisKop' => $listSubJenisKop,\n            'listPola' => $listPola,\n            'listTingkatWil' => $listTingkatWil,\n            'listBentukKop' => $listBentukKop,\n            'listJenisKelamin' => $listJenisKelamin,\n            'listCBPerpresManfaat' => $listCBPerpresManfaat,\n            'listCBMengertiManfaat' => $listCBMengertiManfaat,\n            'listJenisIdentitas' => $listJenisIdentitas,\n            'json_gabung' => $json_gabung,\n            'json_pisah' => $json_pisah,\n            'pengawas_pengurus' => $json_pengawas_pengurus,\n            'usaha_utama' => $usaha_utama,\n            'usaha_pendukung' => $usaha_pendukung,\n            'usaha_tambahan' => $usaha_tambahan,\n            'show_pemilik_manfaat' => $show_pemilik_manfaat,\n            'json_pemilik_manfaat' => $json_pemilik_manfaat,\n            'listDisabled' => $listDisabled,\n            'backUrl' => $back,\n            'tahun_kbli' => $tahun_kbli,\n            'tahunModalKbli' => $tahunModalKbli,\n            'isShowTahunKbli' => $isShowTahunKbli,\n            'listModelKop' => $listModelKop,\n            'openIdTingkatWil' => $openIdTingkatWil,\n            'tingkatWilayah' => $tingkatWilayah,\n        ]);\n    }\n\n    private function uploadAndSave($id, $post, TPerubahanDokumen &$model)\n    {\n\n        // $model = new TPerubahanDokumen();\n        $model->load($post);\n        $model->akta = UploadedFile::getInstance($model, 'akta');\n        $model->berita_acara = UploadedFile::getInstance($model, 'berita_acara');\n        $model->surat_rekomendasi = UploadedFile::getInstance($model, 'surat_rekomendasi');\n        $model->hasil_musyawarah_desa = UploadedFile::getInstance($model, 'hasil_musyawarah_desa');\n\n        // Validate mimetype files\n        $model->akta = Helpers::validateFiles($model->akta, 'pdf');\n        $model->berita_acara = Helpers::validateFiles($model->berita_acara, 'pdf');\n\n        if ($model->surat_rekomendasi) {\n            $model->surat_rekomendasi = Helpers::validateFiles($model->surat_rekomendasi, 'pdf');\n        }\n\n        if ($model->hasil_musyawarah_desa) {\n            $model->hasil_musyawarah_desa = Helpers::validateFiles($model->hasil_musyawarah_desa, 'pdf');\n        }\n\n        if (!$model->validate()) {\n            return false;\n        }\n\n        $rawQuery = $model->upload($id);\n\n        $pass = true;\n\n        if ($rawQuery) {\n\n            foreach ($rawQuery as $key => $query) {\n\n                if (Yii::$app->db_koperasi->createCommand($query)->execute()) {\n\n                    $pass = true;\n                } else {\n\n                    return false;\n                }\n            }\n        } else {\n\n            return false;\n        }\n\n        return $pass;\n    }\n\n    public function checkDocumentUpload($id)\n    {\n\n        $data = TPendirianDokumen::find()->where('transaction_id = ' . $id . ' and (type = 4 or type = 5 or type = 6 or type = 8)')->all();\n\n        if (!empty($data)) {\n\n            Yii::$app->db_koperasi->createCommand('\n                DELETE FROM kop_t_pendirian_dokumen\n                WHERE transaction_id = ' . $id . ' and (type = 4 or type = 5 or type = 6 or type = 8)\n            ')->execute();\n\n            foreach ($data as $detail) {\n\n                if (file_exists(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name)) {\n\n                    unlink(Yii::$app->basePath . '/web/uploads/' . $id . '/' . $detail->document_name);\n                }\n            }\n        }\n    }\n\n    public function actionUploadDocument()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $data = TransaksiKoperasi::getPreviewData($id);\n\n        if (empty($id) || $data['is_finish'] !== \"-1\") {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $model = new TPerubahanDokumen();\n        $model->jenis_koperasi = $data['jenis_koperasi'];\n        $model->pola_pengelolaan = $data['pola_pengelolaan'];\n\n        if (Yii::$app->request->isPost) {\n            $post = Yii::$app->request->post();\n            $this->checkDocumentUpload($id);\n\n            $done = $this->uploadAndSave($id, $post, $model);\n\n            if ($done) {\n                $done = DisclaimerHelper::generateValues('disclaimer', 'upload_document_pendirian', $data['koperasi_id'], $data['t_pesan_nama_id'])->save();\n                return $this->redirect('/perubahan/preview?id=' . $id);\n            }\n        }\n\n        $disclaimer = new Disclaimer();\n        $disclaimer = $disclaimer->find()->where(['parent' => 'upload_document_pendirian'])->all();\n\n        return $this->render('UploadDocument', [\n            'id' => $id,\n            'model' => $model,\n            'data' => $data,\n            'disclaimer' => $disclaimer\n        ]);\n    }\n\n    public function actionPreview()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $data = TransaksiKoperasi::getPreviewData($id, TransaksiKoperasi::DISC_PERSETUJUAN_PERUBAHAN);\n        $data['isQuestionnaire'] = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        $last_bo_trans = TransaksiKoperasi::find()->innerJoinWith(['pemilikManfaat'])\n            ->where(['kop_t_koperasi.id_master' => $cekTrans->id_master])\n            ->andWhere(['is_finish' => '1'])\n            ->orderBy(['kop_t_koperasi.id' => SORT_DESC])\n            ->one();\n\n        $data['isExistBo'] = !empty($last_bo_trans) && !empty($last_bo_trans->pemilikManfaat) && count($last_bo_trans->pemilikManfaat) > 0; // cek apakah transaksi sebelumnya sudah ada BO / belum\n\n        if($data['jenis_koperasi'] !== $cekTrans['jenis_koperasi']){\n            $data['jenis_koperasi'] = $cekTrans['jenis_koperasi'];\n        }\n\n        if (isset($data['is_finish'])) {\n\n            if ((empty($id) || $data['is_finish'] == \"1\")) {\n\n                // if ( Yii::$app->user->identity->username !== \"notaris-sabh\" ) {\n\n                throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n                // }\n            }\n\n            $data['confirmationOnly'] = false;\n\n            if ($data['is_finish'] == \"0\") {\n\n                // Yii::$app->session->setFlash('confirmationOnly', 'yes');\n                $data['confirmationOnly'] = true;\n            }\n\n            if ($data['model_koperasi'] == null) {\n                $data['model_koperasi'] = '0';\n            }\n\n            $data['model_koperasi'] = ActionHelper::getDDListModelKoperasi($data['model_koperasi']);\n            if ($cekTrans->id_notaris_pengganti) {\n                $data['nama_notaris_pengganti'] = NotariatHelper::getNotarisPenggantiNameById($cekTrans->id_notaris_pengganti, $id_notaris);\n            } else {\n                $data['nama_notaris_pengganti'] = NULL;\n            }\n            \n            return $this->render('preview', $data);\n        } else {\n\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n\n    public function getLastSK($idMaster)\n    {\n\n        // $raw = MasterTransaction::find()->joinWith(['surat'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n        // Melakukan perbaikan agar ambil SK dari transaksi terakhir, 2023-09-05\n        $last_trans = TransaksiKoperasi::find()->innerJoinWith(['dataSK'])\n            ->where(['kop_t_koperasi.id_master' => $idMaster])\n            ->andWhere(['is_finish' => '1'])\n            ->orderBy(['kop_t_koperasi.id' => SORT_DESC])\n            ->one();\n\n        return $last_trans->dataSK->no_sk_koperasi;\n    }\n\n    public function generateSurat($group, $transaksi)\n    {\n        if (empty(SK::find()->where(['t_koperasi_id' => $transaksi->id])->one())) {\n\n            $SKins = new SK();\n            if (count($group) < 2) {\n\n                $SKins->t_koperasi_id = $transaksi->id;\n                $SKins->no_sk_koperasi = $group[0] == 1 ? Numbering::getCounter(['id' => SK::SK_PERUBAHAN, 'description' => SK::SK_PERUBAHAN_DESC], 7)->generateSKPerubahan() : $this->getLastSK($transaksi->id_master);\n                $SKins->no_sp_koperasi = $group[0] == 2 ? Numbering::getCounter(['id' => SK::SP_PERUBAHAN, 'description' => SK::SP_PERUBAHAN_DESC], 7)->generateSKPelaporan() : NULL;\n            } else {\n\n                $SKins->t_koperasi_id = $transaksi->id;\n                $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PERUBAHAN, 'description' => SK::SK_PERUBAHAN_DESC], 7)->generateSKPerubahan();\n                $SKins->no_sp_koperasi = Numbering::getCounter(['id' => SK::SP_PERUBAHAN, 'description' => SK::SP_PERUBAHAN_DESC], 7)->generateSKPelaporan();\n            }\n        } else {\n\n            $SKins = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n        }\n\n        $SKins->save();\n\n        return $SKins;\n    }\n\n    public function changePesanNama($transaksi, $idMaster)\n    {\n\n        // change status of new name\n        PesanNama::updateAll(['status' => 1], ['id' => $transaksi->t_pesan_nama_id]);\n\n        // change is delete on before latest transaction\n        $raw = TransaksiKoperasi::findLastTransaction(TransaksiKoperasi::BEFORE_LATEST, $idMaster);\n        $lastID = $raw['id'];\n        $idPesanNama = $raw['t_pesan_nama_id'];\n\n        PesanNama::updateAll(['is_deleted' => 1], ['id' => $idPesanNama]);\n    }\n\n    public function changeMasterTransactionIsGabung($id)\n    {\n\n        // code goes here\n        $raw = BHPenggabungan::find()->where(['t_koperasi_id' => $id])->all();\n\n        // update master\n        foreach ($raw as $key) {\n\n            MasterTransaction::updateAll(['is_gabung' => 1], ['id' => $key->d_koperasi_id]);\n        }\n    }\n\n    public function actionApprovetransaction()\n    {\n        $post = Yii::$app->request->post();\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        $kuisionerForm = !empty($post['KuisionerForm']) ? $post['KuisionerForm'] : null;\n        $masterLembagaKuisionerForm = !empty($post['MasterLembagaKuesionerForm']) ? $post['MasterLembagaKuesionerForm'] : null;\n        $postKuisioner = array('KuisionerForm' => $kuisionerForm, 'MasterLembagaKuesionerForm' => $masterLembagaKuisionerForm);\n        $isQuestionnaire = BoHelper::questionnaire(BoHelper::GET_STATUS_QUESTIONNAIRE)['data']['status'] ?: 0;\n\n        // Prevent jika sudah konfirmasi\n        if ($transaksi->is_finish == 1) {\n            return true;\n        }\n\n        if ($transaksi->is_finish == -1) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_perubahan', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        } else {\n            $transaksi->is_finish = 1;\n\n            $pnID = [4]; // group of ids which needs to change pesan nama table\n            $bhPenggabungan = [2];\n            $group = [];\n            $idMaster = $transaksi->id_master;\n            $raw = ChecklistPerubahan::find()->joinWith(['masterPerubahan'])->where(['t_koperasi_id' => $id])->all();\n\n            if (empty($raw)) {\n\n                echo 0; //data not found\n                exit();\n            }\n\n            $changePesanNama = false;\n            $changePenggabungan = false;\n            foreach ($raw as $checks) {\n\n                if (empty($group) or !in_array($checks->masterPerubahan->groups, $group)) {\n\n                    array_push($group, $checks->masterPerubahan->groups);\n                }\n\n                if (in_array($checks->masterPerubahan->id, $pnID)) {\n\n                    $changePesanNama = true;\n                }\n\n                if (in_array($checks->masterPerubahan->id, $bhPenggabungan)) {\n\n                    $changePenggabungan = true;\n                }\n            }\n\n            $SKins = $this->generateSurat($group, $transaksi);\n\n            // change pesan nama status if master perubahan = 4 / Nama Koperasi\n            if ($changePesanNama) {\n                // var_dump('pesan');\n                $this->changePesanNama($transaksi, $idMaster);\n            }\n\n            // change is gabung if perubahan master id = 2 / penggabungan\n            if ($changePenggabungan) {\n                // var_dump( 'gabung' );\n                $this->changeMasterTransactionIsGabung($id);\n            }\n\n            // exit();\n\n            MasterTransaction::updateAll(['id_transaksi' => $id, 'id_sk' => $SKins->id], ['id' => $idMaster]);\n\n            // add task to cron job\n            $command = new Command();\n            $command->task = $id;\n            $command->command_type = \"ODS_API_OUTCOMING\";\n            $command->save();\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n        $transaksi->tanggal_jangka_waktu = !empty($transaksi->jumlah_jangka_waktu) ? date(\"Y-m-d\", strtotime($transaksi->tanggal_jangka_waktu . \" + \" . $transaksi->jumlah_jangka_waktu . \" year\")) : $transaksi->tanggal_jangka_waktu;\n\n        $resSave = $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'tanggal_jangka_waktu'));\n\n        if ($transaksi->is_migrasi == 1) {\n            $transaksi->is_migrasi = 0;\n            $transaksi->save();\n        }\n\n        if ($transaksi->is_finish == 1) {\n            $bo = BoHelper::sendBoData($id, $postKuisioner);\n            HelperDukcapil::DataBalikan($id, $transaksi);\n        }\n\n        if ($isQuestionnaire) {\n            return json_encode(['isConfirmed' => $resSave, 'questionnaire' => $bo]);\n        }\n\n        return $resSave;\n    }\n\n    public function actionListtransaction()\n    {\n\n        Yii::$app->view->title = \"List Transaksi\";\n        $dataNotaris = Yii::$app->session->get('data_notaris');\n        $id_notaris = $dataNotaris['value']['id_notaris'];\n\n        $query = TransaksiKoperasi::find()->where(['ahu_notaris_id' => $id_notaris, 'jenis_transaksi_id' => 3])->andWhere(['<>', 'is_finish', -1])->orderBy(['created_date' => SORT_DESC]);\n\n        $get = Yii::$app->getRequest()->getQueryParam('TransaksiKoperasi');\n\n        if (!empty($get)) {\n\n            if (!empty($get['nomor_transaksi'])) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $get['nomor_transaksi']]);\n            }\n\n            if (!empty($get['jenis_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'jenis_koperasi', $get['jenis_koperasi']]);\n            }\n\n            if (!empty($get['nama_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $get['nama_koperasi']]);\n            }\n\n            if (!empty($get['nik'])) {\n\n                $query->andFilterWhere(['like', 'nik', $get['nik']]);\n            }\n\n            if (Yii::$app->getRequest()->getQueryParam('created_date')) {\n\n                $date = Yii::$app->getRequest()->getQueryParam('created_date');\n\n                $query->andFilterWhere(['between', 'created_date', date('Y-m-d', strtotime($date)), date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))]);\n            }\n        }\n\n        if (Yii::$app->getRequest()->getQueryParam('rentang_awal')) {\n\n            $date_awal = Yii::$app->getRequest()->getQueryParam('rentang_awal');\n            $date_akhir = Yii::$app->getRequest()->getQueryParam('rentang_akhir');\n\n            $query->andFilterWhere(['between', 'DATE(created_date)', date('Y-m-d', strtotime($date_awal)), date('Y-m-d', strtotime($date_akhir))]);\n        }\n\n        $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ]\n        ]);\n\n        return $this->render('listTransaction', [\n            'model' => new TransaksiKoperasi(),\n            'provider' => $provider\n        ]);\n    }\n\n    public function actionConfirmation()\n    {\n\n        return $this->actionPreview();\n    }\n\n    public function actionDownloadsk()\n    {\n\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        // $number = Numbering::getCounter(['id' => 1])->generateSKPendirian();\n        // $number = SK::find()->where(['t_koperasi_id' => $id])->one()->no_sk_koperasi;\n        $numbers = SK::find()->where(['t_koperasi_id' => $id])->one();\n        $namaKoperasi = $transaksi->full_nama;\n        $tanggalAkta = FormatDate::formatDateIndonesia(date('Y-m-d', strtotime($transaksi->tanggal_akta)));\n        $nomorAkta = $transaksi->akta_koperasi;\n        $kabupaten = WilayahNotariat::find()->where(['wilayah_id' => $transaksi->kab_kota_id])->one()->NAMA;\n        $namaNotaris = $transaksi->nama_notaris;\n        $kedudukanNotaris = $transaksi->kedudukan_notaris;\n        $alamat_koperasi = $transaksi->alamat_koperasi;\n        \n        $mpdf = new Mpdf(['format' => 'folio']);\n        $mpdf->SetImportUse();\n\n        $aPerubahan = [1];\n        $perubahan = false;\n        $aPelaporan = [2];\n        $pelaporan = false;\n\n        $raw = ChecklistPerubahan::find()->joinWith(['masterPerubahan'])->where(['t_koperasi_id' => $id])->all();\n\n        foreach ($raw as $key) {\n\n            if (in_array($key->masterPerubahan->groups, $aPerubahan)) {\n\n                $perubahan = true;\n            }\n\n            if (in_array($key->masterPerubahan->groups, $aPelaporan)) {\n\n                $pelaporan = true;\n            }\n        }\n\n        if ($perubahan and $pelaporan) {\n\n            for ($i = 0; $i <= 1; $i++) {\n\n                if ($i == 0) {\n                    $number = $numbers->no_sk_koperasi;\n                    $view = 'sk_perubahan';\n                } else if ($i == 1) {\n                    $number = $numbers->no_sp_koperasi;\n                    $view = 'sp_pelaporan';\n                }\n\n                $mpdf->AddPage();\n\n                $mpdf->SetDefaultFont('Arial');\n                $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n                $tplid = $mpdf->ImportPage($template);\n                $actualsize = $mpdf->UseTemplate($tplid);\n\n                header('Content-Type: application/pdf');\n\n                $html = $this->renderPartial($view, [\n                    'number' => $number,\n                    'namaKoperasi' => $namaKoperasi,\n                    'tanggalAkta' => $tanggalAkta,\n                    'nomorAkta' => $nomorAkta,\n                    'kabupaten' => $kabupaten,\n                    'namaNotaris' => $namaNotaris,\n                    'kedudukanNotaris' => $kedudukanNotaris,\n                    'alamat_koperasi' => $alamat_koperasi\n                ]);\n\n                $html = Helpers::ttdReplacement($html, $numbers->created_date);\n\n                $html = Helpers::replaceMenkumham($html, $numbers->created_date);\n\n                $mpdf->WriteHTML($html);\n            }\n        } else if ($perubahan) {\n\n            $number = $numbers->no_sk_koperasi;\n            $number_tanggal = $numbers->created_date;\n\n            $kodeQrCode = QrCodeHelper::generateQrCodeHash($numbers->id);\n            $qrCodePath = QrCodeHelper::generateQrCodeFile($kodeQrCode);\n\n            $mpdf->AddPage();\n\n            $mpdf->SetDefaultFont('Arial');\n            $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n            $tplid = $mpdf->ImportPage($template);\n            $actualsize = $mpdf->UseTemplate($tplid);\n\n            header('Content-Type: application/pdf');\n\n            $html = $this->renderPartial('sk_perubahan', [\n                'dataTransaksi' => $transaksi,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $number,\n                'number_tanggal' => $number_tanggal,\n                'tanggal_perubahan' => $transaksi->created_date,\n                'namaKoperasi' => $namaKoperasi,\n                'tanggalAkta' => $tanggalAkta,\n                'nomorAkta' => $nomorAkta,\n                'kabupaten' => $kabupaten,\n                'namaNotaris' => $namaNotaris,\n                'kedudukanNotaris' => $kedudukanNotaris\n            ]);\n\n            $html = Helpers::ttdReplacement($html, $number_tanggal);\n\n            $html = Helpers::replaceMenkumham($html, $number_tanggal);\n\n            $mpdf->WriteHTML($html);\n        } else if ($pelaporan) {\n\n            $number = $numbers->no_sp_koperasi;\n            $number_tanggal = $numbers->created_date;\n\n            $kodeQrCode = QrCodeHelper::generateQrCodeHash($numbers->id);\n            $qrCodePath = QrCodeHelper::generateQrCodeFile($kodeQrCode);\n\n            $mpdf->AddPage();\n\n            $mpdf->SetDefaultFont('Arial');\n            $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n            $tplid = $mpdf->ImportPage($template);\n            $actualsize = $mpdf->UseTemplate($tplid);\n\n            header('Content-Type: application/pdf');\n\n            $html = $this->renderPartial('sp_pelaporan', [\n                'dataTransaksi' => $transaksi,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $number,\n                'number_tanggal' => $number_tanggal,\n                'namaKoperasi' => $namaKoperasi,\n                'tanggalAkta' => $tanggalAkta,\n                'nomorAkta' => $nomorAkta,\n                'kabupaten' => $kabupaten,\n                'namaNotaris' => $namaNotaris,\n                'kedudukanNotaris' => $kedudukanNotaris,\n                'alamat_koperasi' => $alamat_koperasi,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n\n            $html = Helpers::ttdReplacement($html, $number_tanggal);\n\n            $html = Helpers::replaceMenkumham($html, $number_tanggal);\n\n            $mpdf->WriteHTML($html);\n        }\n\n        $mpdf->Output('perubahan_' . $namaKoperasi . '.pdf', 'I');\n        exit;\n    }\n\n    public function actionGetNoPesan()\n    {\n        $post = Yii::$app->request->post();\n        if (!isset($post['no_pesan'])) {\n            $json = [\n                'status' => 400,\n                'message' => \"No Pesan Tidak Boleh Kosong\",\n            ];\n            return json_encode($json);\n        }\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $no_pesan = $post['no_pesan'];\n        $data = PesanNama::find()\n            ->where(['no_pesan' => $no_pesan])\n            ->andWhere(['ahu_notaris_id' => $user['value']['id_notaris']])\n            ->andWhere(['is_deleted' => '0'])\n            ->andWhere(['status' => '0'])\n            ->one();\n        if (!$data) {\n            $json = [\n                'status' => 404,\n                'message' => \"No Pesan Tidak Ditemukan\",\n            ];\n            return json_encode($json);\n        }\n\n        $json = [\n            'status' => 200,\n            'message' => \"Sukses\",\n            'data' => [\n                'no_pesan' => $data->no_pesan,\n                'nama_koperasi' => $data->nama_koperasi,\n                'full_nama' => $data->full_nama,\n                'm_pola_id' => $data->m_pola_id,\n                'jenis_koperasi' => [\n                    'jenis' => $data->jenis_koperasi_id,\n                    'subjenis' => $data->c_jenis_koperasi_id\n                ]\n            ],\n        ];\n        return json_encode($json);\n    }\n\n    public function actionGetNamaKop($q)\n    {\n        if (Yii::$app->request->isAjax) {\n            $arr = [];\n            $data = Yii::$app->db_koperasi\n                ->createCommand(\"SELECT * FROM `kop_master_transaksi` a LEFT JOIN `kop_t_koperasi` b ON b.id = a.id_transaksi WHERE b.nama_koperasi LIKE :namakop AND a.is_deleted = 0 AND a.status = 1 AND a.is_gabung = 0 AND a.is_active = 1 AND a.is_bubar = 0\")\n                ->bindValue(':namakop', '%' . $q . '%')\n                ->queryAll();\n            foreach ($data as $d) {\n                $arr[] = ['value' => $d['nama_koperasi']];\n            }\n            return json_encode($arr);\n        }\n    }\n\n    public function actionEdit($id)\n    {\n        $tahunModalKbli = '2020';\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $nama_notaris = $user['value']['nama_gelar'];\n        $id_notaris = $user['value']['id_notaris'];\n\n        $model = new PerubahanForm();\n        $model->scenario = \"form-perubahan\";\n        Yii::$app->view->title = \"Form Perubahan\";\n        $judul = \"FORM EDIT TRANSAKSI\";\n        $data = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $user['value']['id_notaris']])->one();\n        if (!$data) {\n            return $this->redirect('/perubahan/listtransaction');\n        }\n\n        // Tidak Dapat Edit Data Jika Sudah Selesai Transaksi\n        if ($data->is_finish == 1) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        $no_checklist = ChecklistPerubahan::find()->where(['t_koperasi_id' => $id])->one();\n        // var_dump($no_checklist);exit;\n        if (!$no_checklist) {\n            return Yii::$app->response->redirect('/perubahan/listtransaction');\n        }\n\n        $model->setEditData($id);\n        $model->json_gabung = $model->getJsonGabung($id);\n        $model->json_pisah = $model->getJsonPisah($id);\n        $model->nama_notaris = $nama_notaris;\n        $model->cklist = $no_checklist;\n        $model->id_trans = $id;\n\n        $listDisabled = [\n            'aktivitas_usaha' => true,\n            'alamat_koperasi' => true,\n            'dana_hibah' => true,\n            'dana_cadangan' => true,\n            'jangka_waktu' => true,\n            'jenis_koperasi' => true,\n            'jumlah_anggota' => true,\n            'nama_koperasi' => true,\n            'pemilik_manfaat' => true,\n            'pengurus_pengawas' => true,\n            'periode_pengurus' => true,\n            'pola_pengelolaan' => true,\n            'simpanan_pokok' => true,\n            'simpanan_wajib' => true,\n            'tingkat_wilayah' => true,\n            'usaha_pendukung' => true,\n            'usaha_tambahan' => true,\n            'wilayah' => true,\n            'full_nama' => true,\n            'bentuk_koperasi' => true,\n            'bh_penggabungan' => true,\n            'bh_pembagian' => true,\n            'model_koperasi' => true,\n        ];\n\n        $listEnabled = ChecklistPerubahan::getKolomPerubahan($no_checklist->no_checklist);\n        // Menonaktifkan disabled\n        foreach ($listEnabled as $value) {\n            $listDisabled[$value] = false;\n        }\n\n        if ($data->is_migrasi == 1) {\n            $listDisabled = TransaksiHelper::openFieldMigrasi($listDisabled);\n        }\n\n        $model->listDisabled = $listDisabled;\n\n        if ($model->load(Yii::$app->request->post())) {\n            $post = Yii::$app->request->post();\n            // var_dump($post);exit;\n            // Set Json Bakum\n            // $json_bakum = TransaksiHelper::json_bakum($post,$model);\n            // if($json_bakum) {\n            //     $model->json_bakum_sekunder = json_encode($json_bakum);\n            // }\n\n            $model->is_notaris_pengganti = isset($post['PerubahanForm']['is_notaris_pengganti']) ? 1 : 0;\n            if ($model->is_notaris_pengganti) {\n                $model->id_notaris_pengganti = isset($post['PerubahanForm']['id_notaris_pengganti']) ? $post['PerubahanForm']['id_notaris_pengganti'] : null;\n                $listNotarisPengganti = NotariatHelper::getNotarisPenggantiList($id_notaris);\n                \n                if (isset($listNotarisPengganti[$model->id_notaris_pengganti])) {\n                    $model->no_sk_notaris_pengganti = $listNotarisPengganti[$model->id_notaris_pengganti]['no_sk_notaris_pengganti'];\n                } else {\n                    // Handle jika data tidak ditemukan\n                    Yii::$app->session->setFlash('warning', 'Data notaris pengganti tidak ditemukan');\n                }\n            } else {\n                $model->no_sk_notaris_pengganti = null;\n                $model->id_notaris_pengganti    = null;\n            }\n\n            // Set Json Gabung\n            $json_gabung = TransaksiHelper::json_gabung($post, $model);\n            if ($json_gabung) {\n                $model->json_gabung = json_encode($json_gabung);\n            }\n\n            // Set Json Pisah\n            $json_pisah = TransaksiHelper::json_pisah($post, $model);\n            if ($json_pisah) {\n                $model->json_pisah = json_encode($json_pisah);\n            }\n\n            // Set Json Aktifitas Usaha\n            $json_aktifitas_usaha = TransaksiHelper::json_aktifitas_usaha($post, $model);\n            if ($json_aktifitas_usaha) {\n                $model->json_aktifitas_usaha = json_encode($json_aktifitas_usaha);\n            }\n            $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n            $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n            $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n            // Set Json Pengawas Pengurus\n            $json_pengawas_pengurus = TransaksiHelper::json_pengawas_pengurus($post, $model);\n            if ($json_pengawas_pengurus) {\n                $model->json_pengawas_pengurus = json_encode($json_pengawas_pengurus);\n            }\n\n            // Set Json Pemilik Manfaat\n            $json_pemilik_manfaat = TransaksiHelper::json_pemilik_manfaat($post, $model);\n            if ($json_pemilik_manfaat) {\n                $model->json_pemilik_manfaat = json_encode($json_pemilik_manfaat);\n            }\n            // var_dump($model->attributes,$post);exit;\n            if (isset($post['submit-form'])) {\n                $model->is_submit = true;\n\n\n                if (empty($model->getErrors())) {\n                    \n                    if ($model->validate()) {\n                        $sukses = $model->saveEditPerubahan();\n                        if ($sukses) {\n                            // redirect after edit data\n                            $targetUrl = TransaksiKoperasi::getStatusTrans($id) == '-1' ? '/perubahan/upload-document?id=' . $id : '/perubahan/listtransaction';\n                            return Yii::$app->response->redirect($targetUrl);\n                        }\n                    }\n                }\n            }\n        }\n\n\n        // Set List\n        $listJenisKop = ActionHelper::getDDListJenisKop();\n        $listSubJenisKop = ArrayHelper::map(JenisKoperasi::find()->where(['parent_id' => $model->jenis_koperasi_id])->all(), 'id', 'nama');\n        $listPola = ActionHelper::getDDListPola();\n        $listTingkatWil = ActionHelper::getDDListTingkatWilayahNew();\n        $openIdTingkatWil = ActionHelper::$exceptIdTingkatWilayah;\n        $listBentukKop = ActionHelper::getDDListBentukKop();\n        $listProvinsi = ActionHelper::getDDListProvinsi();\n        $listJenisKelamin = ActionHelper::getDDListJeniskelamin();\n        $listCBPerpresManfaat = ActionHelper::getListCheckbox('perpres_manfaat');\n        $listCBMengertiManfaat = ActionHelper::getListCheckbox('mengerti_manfaat');\n        $listJenisIdentitas = ActionHelper::getListJenisIdentitas();\n        $listNotarisPenggantiDropdown = NotariatHelper::getNotarisPenggantiDropdown($id_notaris);\n\n        // set KBLI\n        $jenisKopKbli = $model->c_jenis_koperasi_id ? $model->c_jenis_koperasi_id : $model->jenis_koperasi_id;\n        $KBLISearch = new KBLIBakumSearch();\n        $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli]);\n\n        // JIKA SIMPAN PINJAM SALAH SATU KBLI KONVENSIONAL / SYARIAH\n        if ($model->jenis_koperasi_id == '6' && !Yii::$app->request->get('KBLISearch')['jenis']) {\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => $jenisKopKbli])->andWhere(['m_pola_id' => $model->m_pola_id]);\n        }\n\n        if (Yii::$app->request->get('KBLISearch')) {\n            $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']]);\n            if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => Yii::$app->request->get('KBLISearch')['pola']]);\n            }\n\n            // SET default pola id ke konvensional jika jenis koperasi diganti ke simpan pinjam\n            if (Yii::$app->request->get('KBLISearch')['jenis'] == '6' && !isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => 1]);\n            }\n\n            if (isset(Yii::$app->request->get('KBLISearch')['pola'])) {\n                $mappingKBLI = MappingKBLI::find()->where(['m_jenis_koperasi' => Yii::$app->request->get('KBLISearch')['jenis']])->andWhere(['m_pola_id' => Yii::$app->request->get('KBLISearch')['pola']]);\n            }\n        }\n\n        // Set KBLI\n        // 2019-10-29, afandy, Tampilkan Semua KBLI selain jenis TKBM dan SIMPAN PINJAM\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        $kbli_simpan_pinjam = KBLIBakum::listKodeSimpanPinjam();\n        $kbli_tkbm = KBLIBakum::listKodeTkbm();\n\n        if (Yii::$app->request->get('KBLISearch')['jenis']) {\n            $jenisKopKbli = Yii::$app->request->get('KBLISearch')['jenis'];\n        }\n\n        if ($jenisKopKbli == '4') {\n            $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_simpan_pinjam])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n            $KBLI_all = KBLIBakum::find()->where(['>=', 'LENGTH(kode)', 5]);\n        } else if ($jenisKopKbli == '6') {\n            $KBLI = KBLIBakum::find()->where(['id_kbli' => ArrayHelper::getColumn($mappingKBLI->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n        } else {\n            $KBLI = KBLIBakum::find()->where(['not in', 'kode', array_merge($kbli_simpan_pinjam, $kbli_tkbm)])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n            $KBLI_all = KBLIBakum::find()->where(['not in', 'kode', $kbli_tkbm])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n        }\n\n        if (Yii::$app->request->get('KBLIBakumSearch')) {\n            $KBLI->andFilterWhere([\n                'OR',\n                ['LIKE', 'judul', Yii::$app->request->get('KBLIBakumSearch')['judul']],\n                ['=', 'kode', Yii::$app->request->get('KBLIBakumSearch')['judul']],\n            ]);\n            $KBLI_all->andFilterWhere([\n                'OR',\n                ['LIKE', 'judul', Yii::$app->request->get('KBLIBakumSearch')['judul']],\n                ['=', 'kode', Yii::$app->request->get('KBLIBakumSearch')['judul']],\n            ]);\n        }\n        $KBLIProvider = [\n            'byJenis' => new ActiveDataProvider([\n                'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => '2020']),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ]),\n            'all' => new ActiveDataProvider([\n                'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => '2020']),\n                'pagination' => [\n                    'pageSize' => 5,\n                ],\n                'sort' => [\n                    'defaultOrder' => [\n                        'kode' => SORT_ASC,\n                    ],\n                ],\n            ])\n        ];\n\n        $json_bakum = json_decode($model->json_bakum_sekunder, true);\n        $json_gabung = json_decode($model->json_gabung, true);\n        $json_pisah = json_decode($model->json_pisah, true);\n        $json_pengawas_pengurus = json_decode($model->json_pengawas_pengurus, true);\n        $json_aktifitas_usaha = json_decode($model->json_aktifitas_usaha, true);\n        $usaha_utama = $json_aktifitas_usaha['data']['utama'];\n        $usaha_pendukung = $json_aktifitas_usaha['data']['pendukung'];\n        $usaha_tambahan = $json_aktifitas_usaha['data']['tambahan'];\n\n        $json_pemilik_manfaat = json_decode($model->json_pemilik_manfaat, true);\n\n        if (isset($json_pemilik_manfaat['data'])) {\n            $model->cb_mengerti_manfaat = true;\n            $model->cb_perpres_manfaat = ['22', '23'];\n        }\n\n        // Set Tampilan Awal\n        // $showBakumSekunder = $model->b_koperasi_id && BentukKoperasi::isJenis($model->b_koperasi_id,'SEKUNDER') ? '' : 'hidden';\n        $kabTerpilih = $model->provinsi_id ? ActionHelper::getDDListWilayah($model->provinsi_id, 'Kabupaten') : [];\n        $kecTerpilih = $model->kab_kota_id ? ActionHelper::getDDListWilayah($model->kab_kota_id, 'Kecamatan') : [];\n        $kelTerpilih = $model->kecamatan_id ? ActionHelper::getDDListWilayah($model->kecamatan_id, 'Kelurahan') : [];\n        $model->is_submit = false;\n        $show_pemilik_manfaat = $model->cb_mengerti_manfaat && $model->cb_perpres_manfaat ? '' : 'hidden';\n\n        if (!Yii::$app->request->isPost) {\n            if (!$listDisabled['nama_koperasi']) {\n                $id_pesan_nama = $data->t_pesan_nama_id;\n                $dataPesanNama = PesanNama::find()->where(['id' => $id_pesan_nama])->one();\n                if ($dataPesanNama) {\n                    $model->perubahan_no_pesan = $dataPesanNama->no_pesan;\n                }\n            }\n        }\n\n        //ambil tahun kbli\n        $isShowTahunKbli = true;\n        $tahun_kbli = null;\n        if (isset($json_aktifitas_usaha)) {\n            foreach ($json_aktifitas_usaha['data'] as $key => $value) {\n                if (count($value) && array_key_exists('tahun', $value[array_keys($value)[0]])) {\n                    $tahun_kbli = $value[array_keys($value)[0]]['tahun'];\n                    break;\n                } else {\n                    if (count(MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))) > 0) {\n                        $tahun_kbli = MKbli::getAktifitasUsaha(TransaksiKoperasi::getKBLIType($model->id_trans, 'Utama'))[0]['tahun'];\n                        break;\n                    }\n                }\n            }\n        }\n\n        $tingkatWilayah = \"\";\n        if ($data) {\n            $tingkatWilayah = $data->m_tingkat_wilayah_id;\n        }\n\n        // check transaksi sebelumnya \n        if ($model->id_trans) {\n            $transaksiTerakhir = TransaksiKoperasi::findOne($model->id_trans);\n            $lastTransactionBefore = (new \\yii\\db\\Query())\n                ->select([\n                    't.m_tingkat_wilayah_id',\n                ])\n                ->from('kop_t_koperasi t')\n                ->where([\n                    't.is_finish' => 1,\n                    't.id_master' => $transaksiTerakhir->id_master\n                ])\n                ->orderBy(['t.created_date' => SORT_DESC])\n                ->limit(1)\n                ->one(Yii::$app->get('db_koperasi'));\n\n            if ($lastTransactionBefore && $lastTransactionBefore['m_tingkat_wilayah_id'] == 4) {\n                $listDisabled['tingkat_wilayah'] = false;\n            }\n        }\n\n        return $this->render('form-perubahan', [\n            'model' => $model,\n            'judul' => $judul,\n            'listProvinsi' => $listProvinsi,\n            'listKabupaten' => $kabTerpilih,\n            'listKecamatan' => $kecTerpilih,\n            'listKelurahan' => $kelTerpilih,\n            'kbli_provider' => $KBLIProvider,\n            'kbli_search' => $KBLISearch,\n            'show_pemilik_manfaat' => true,\n            'listCBPerpresManfaat' => [],\n            'listJenisKop' => $listJenisKop,\n            'listSubJenisKop' => $listSubJenisKop,\n            'listPola' => $listPola,\n            'listTingkatWil' => $listTingkatWil,\n            'listBentukKop' => $listBentukKop,\n            'listJenisKelamin' => $listJenisKelamin,\n            'listCBPerpresManfaat' => $listCBPerpresManfaat,\n            'listCBMengertiManfaat' => $listCBMengertiManfaat,\n            'listJenisIdentitas' => $listJenisIdentitas,\n            'listNotarisPenggantiDropdown' => $listNotarisPenggantiDropdown,\n            'json_gabung' => $json_gabung,\n            'json_pisah' => $json_pisah,\n            'pengawas_pengurus' => $json_pengawas_pengurus,\n            'usaha_utama' => $usaha_utama,\n            'usaha_pendukung' => $usaha_pendukung,\n            'usaha_tambahan' => $usaha_tambahan,\n            'show_pemilik_manfaat' => $show_pemilik_manfaat,\n            'json_pemilik_manfaat' => $json_pemilik_manfaat,\n            'listDisabled' => $listDisabled,\n            'backUrl' => isset($back) ? $back : '/perubahan/listtransaction',\n            'isShowTahunKbli' => $isShowTahunKbli,\n            'tahun_kbli' => $tahun_kbli,\n            'tahunModalKbli' => $tahunModalKbli,\n            'listModelKop' => ActionHelper::getDDListModelKoperasi(),\n            'openIdTingkatWil' => $openIdTingkatWil,\n            'tingkatWilayah' => $tingkatWilayah\n        ]);\n    }\n\n\n    public function actionDownloadsk2($id = null)\n    {\n        if (!$id) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        $data = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        if (!$data) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n        if (!$data->dataSK) {\n            throw new NotFoundHttpException(\"Data SK/SP Tidak Ditemukan\");\n        }\n\n        if (strtoupper($data->jenis_transaksi == \"PENDIRIAN\")) {\n            return $this->downloadSKPendirian($data, $data->dataSK);\n        } elseif (strtoupper($data->jenis_transaksi == \"PERUBAHAN\")) {\n            // fungsi untuk download SK dan SP Perubahan sekaligus\n            // return $this->downloadSKPerubahan($data, $data->dataSK);\n            return $this->downloadSPorSKPerubahan($data, $data->dataSK, 'SK');\n        } else {\n            throw new NotFoundHttpException(\"Jenis SK/SP Tidak Ditemukan\");\n        }\n    }\n\n    public function actionDownloadsp($id = null)\n    {\n        if (!$id) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n\n        $data = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        if (!$data) {\n            throw new NotFoundHttpException(\"Data Tidak Ditemukan\");\n        }\n        if (!$data->dataSK) {\n            throw new NotFoundHttpException(\"Data SK/SP Tidak Ditemukan\");\n        }\n\n        if (strtoupper($data->jenis_transaksi == \"PERUBAHAN\")) {\n            return $this->downloadSPorSKPerubahan($data, $data->dataSK, 'SP');\n        } else {\n            throw new NotFoundHttpException(\"Jenis SK/SP Tidak Ditemukan\");\n        }\n    }\n\n    // fungsi untuk download SK dan SP PERUBAHAN\n    public function downloadSPorSKPerubahan($trans, $sk, $jenis = null)\n    {\n        if (!$jenis || !$sk || !$trans) {\n            return false;\n        }\n        $jenisSurat = TransaksiHelper::getJenisSuratPerubahan($trans->id);\n        $isMerahPutih = $trans->isMerahPutih();\n        //Dito, 2019-11-29, Penambahan Alamat Notaris pada koperasi\n        $notaris = Notaris::find()->where(['id_notaris' => $trans->ahu_notaris_id])->one();\n        $alamat_notaris = json_decode($notaris->ADDITIONAL);\n        $session = Yii::$app->session;\n        $user_session = $session->get('data_notaris');\n        $id_notaris = $user_session['value']['id_notaris'];\n        $isNotarisPengganti = false;\n        $namaNotarisPengganti = \"\";\n        if ($trans->id_notaris_pengganti != NULL) {\n            $isNotarisPengganti = true;\n            $namaNotarisPengganti = NotariatHelper::getNotarisPenggantiNameById( $trans->id_notaris_pengganti, $id_notaris);\n        }\n\n        //Jika di session ada kedudukan notaris, maka dicek apakah berbeda atau tidak, jika beda ganti value di kedudukan_notaris tabel t_kop \n        if (!empty($user_session['value']['id_kedudukan_profile'])) {\n            if (Wilayah::getNama($user_session['value']['id_kedudukan_profile']) == $trans->kedudukan_notaris) {\n                $kedudukanNotaris = $trans->kedudukan_notaris;\n            } else {\n                $kedudukanNotaris = Wilayah::getNama($user_session['value']['id_kedudukan_profile']);\n                $trans->kedudukan_notaris = $kedudukanNotaris;\n                $trans->save(false);\n            }\n        }\n\n        $mpdf = new Mpdf(['format' => 'folio']);\n        $mpdf->SetImportUse();\n\n        $viewPrefix = '//perubahan/';\n\n        if (in_array(\"SK\", $jenisSurat) && $jenis == 'SK') {\n\n            $mpdf->AddPage();\n\n            $mpdf->SetDefaultFont('Arial');\n            $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n            $tplid = $mpdf->ImportPage($template);\n            $actualsize = $mpdf->UseTemplate($tplid);\n\n            header('Content-Type: application/pdf');\n\n            $kodeQrCode = QrCodeHelper::generateQrCodeHash($sk->id);\n            $qrCodePath = QrCodeHelper::generateQrCodeFile($kodeQrCode);\n\n            $view = $viewPrefix . ($isMerahPutih ? 'sk_perubahan_merah_putih' : 'sk_perubahan');\n\n            $html = $this->renderPartial($view, [\n                'dataTransaksi' => $trans,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $sk->no_sk_koperasi,\n                'number_tanggal' => $sk->created_date,\n                'tanggal_perubahan' => $trans->created_date,\n                'namaKoperasi' => $trans->full_nama,\n                'tanggalAkta' => FormatDate::formatDateIndonesia(date('Y-m-d', strtotime($trans->tanggal_akta))),\n                'nomorAkta' => $trans->akta_koperasi,\n                'kabupaten' => $trans->nama_kabupaten,\n                'namaNotaris' => $trans->nama_notaris,\n                'kedudukanNotaris' => $trans->kedudukan_notaris,\n                'alamat_koperasi' => $trans->alamat_koperasi,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n\n            $html = Helpers::ttdReplacement($html, $sk->created_date);\n\n            $html = Helpers::replaceMenkumham($html, $sk->created_date);\n\n            $mpdf->WriteHTML($html);\n            return $mpdf->Output('perubahan_' . $trans->full_nama . '.pdf', 'I');\n        }\n\n        if (in_array(\"SP\", $jenisSurat) && $jenis == 'SP') {\n\n            $mpdf->AddPage();\n\n            $mpdf->SetDefaultFont('Arial');\n            $template = $mpdf->SetSourceFile('images/assets/template_sk.pdf');\n            $tplid = $mpdf->ImportPage($template);\n            $actualsize = $mpdf->UseTemplate($tplid);\n\n            header('Content-Type: application/pdf');\n\n            $kodeQrCode = QrCodeHelper::generateQrCodeHash($sk->id);\n            $qrCodePath = QrCodeHelper::generateQrCodeFile($kodeQrCode);\n\n            $view = $viewPrefix . 'sp_pelaporan';\n\n            $html = $this->renderPartial($view, [\n                'dataTransaksi' => $trans,\n                'kodeQrCode' => $kodeQrCode,\n                'qrCodePath' => $qrCodePath,\n                'number' => $sk->no_sp_koperasi,\n                'number_tanggal' => $sk->created_date,\n                'namaKoperasi' => $trans->full_nama,\n                'tanggalAkta' => FormatDate::formatDateIndonesia(date('Y-m-d', strtotime($trans->tanggal_akta))),\n                'nomorAkta' => $trans->akta_koperasi,\n                'kabupaten' => $trans->nama_kabupaten,\n                'namaNotaris' => $trans->nama_notaris,\n                'kedudukanNotaris' => $trans->kedudukan_notaris,\n                'alamat_koperasi' => !empty($alamat_notaris->alamat_kantor) ? $alamat_notaris->alamat_kantor : $notaris->alamat_jalan,\n                'isNotarisPengganti' => $isNotarisPengganti,\n                'namaNotarisPengganti' => $namaNotarisPengganti\n            ]);\n\n            $html = Helpers::ttdReplacement($html, $sk->created_date);\n\n            $html = Helpers::replaceMenkumham($html, $sk->created_date);\n\n            $mpdf->WriteHTML($html);\n            return $mpdf->Output('perubahan_' . $trans->full_nama . '.pdf', 'I');\n        }\n    }\n\n    public function actionValidasiNik()\n    {\n        Yii::$app->response->format = Response::FORMAT_JSON;\n\n        if (Yii::$app->user->isGuest) {\n            return ['error' => 'Anda harus masuk untuk mengakses aksi ini'];\n        }\n\n        try {\n\n            $postData = Yii::$app->request->post();\n\n            $status = HelperDukcapil::CheckIsActiveValidateDukcapil();\n            if($status){\n                $validate = new HelperDukcapil($postData);\n                $validate->curlValidDukcapil();\n                $result = $validate->response();\n            }else{\n                $result = HelperDukcapil::AllowValidation();\n            }\n\n            if ($result['status'] === 0) {\n                throw new \\Exception(end($result['data']));\n            }\n\n            return $result;\n        }\n        catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        if ($errorMessage) {\n            Yii::$app->response->statusCode = 400;\n            return ['message' => $errorMessage];\n        }\n    }\n\n    public function actionKuisioner($id) {\n        if ($id) {\n            $model = new KuisionerForm();\n\n            $lembagaKuesionerDetail = BoHelper::questionnaire(BoHelper::GET_QUESTIONNAIRE);\n            $BOTrans = PemilikManfaat::getPemilikManfaatByID($id);\n\n            $listJenisIdentitas = ActionHelper::getListJenisIdentitasBo();\n            $listKW = ActionHelper::getListKewarganegaraan();\n            $listProvinsi = Wilayah::getDDListProvinsi();\n            $flagDukcapil = Setting::getIsCekDukcapil();\n            $listNegara = Negara::getListNegara();\n\n            $backUrl = '/perubahan/confirmation?id=' . $id;\n\n            $namaBo = [];\n            $existingAnggota = [];\n\n            foreach ($BOTrans as $bo) {\n                $namaBo[] = ucfirst(strtolower($bo['nama']));\n                $existingAnggota[] = [\n                    'id' => $bo['id'],\n                    'nama_lengkap' => $bo['nama'],\n                    'id_jenis_identitas' => $bo['m_jenis_identitas_id'],\n                    'nomor_identitas' => $bo['no_identitas'],\n                ];\n            }\n\n            $csrf = Yii::$app->request->csrfToken;\n            $sessionId = Yii::$app->session->id;\n\n            return $this->render('kuisioner', [\n                'csrf' => $csrf,\n                'model' => $model,\n                'listKw' => $listKW,\n                'backUrl' => $backUrl,\n                'sessionId' => $sessionId,\n                'koperasiId' => $id,\n                'listNegara' => $listNegara,\n                'listProvinsi' => $listProvinsi,\n                'flagDukcapil' => $flagDukcapil,\n                'namaBo' => ActionHelper::getNamaBo($namaBo),\n                'existingAnggota' => json_encode($existingAnggota),\n                'listJenisIdentitas' => $listJenisIdentitas,\n                'lembagaKuesionerDetail' => $lembagaKuesionerDetail['data'],\n            ]);\n        } else {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n    }\n    // function untuk download surat kuasa\n    public function actionDownloadSuratKuasa()\n    {\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        \n        // Cek apakah transaksi milik notaris yang login\n        $cekTrans = TransaksiKoperasi::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$cekTrans) {\n            throw new \\yii\\web\\HttpException(404, 'The requested Item could not be found.');\n        }\n\n        // Ambil data dari tabel kop_pesan_nama berdasarkan t_pesan_nama_id\n        $pesanNama = PesanNama::findOne($cekTrans->t_pesan_nama_id);\n        \n        if (!$pesanNama || empty($pesanNama->file_surat_kuasa)) {\n            throw new \\yii\\web\\HttpException(404, 'Surat Kuasa tidak ditemukan.');\n        }\n\n        $filePath = $pesanNama->file_surat_kuasa;\n        $fullPath = Yii::$app->basePath . '/web/' . $filePath;\n\n        // Cek apakah file exist\n        if (!file_exists($fullPath)) {\n            throw new \\yii\\web\\HttpException(404, 'File Surat Kuasa tidak ditemukan.');\n        }\n\n        // Extract filename dari path\n        $fileName = basename($filePath);\n        \n        return Yii::$app->response->sendFile($fullPath, $fileName, [\n            'mimeType' => 'application/pdf',\n            'inline' => true\n        ]);\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Pesan Nama (Name Reservation)\n\". This is Chapter 2.\n\nConcept Details:\n- Name: Pesan Nama (Name Reservation)\n\n- Description:\nHandles the cooperative name reservation system, ensuring unique names are reserved before establishment.\nLike reserving a domain name before building a website - you claim it first to ensure no one else can use it.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 767 # views/pesan-nama/index.php ---\n<?php\n\nuse yii\\helpers\\Html;\n?>\n<?= Html::a('Cek Nama yang Telah Dipesan', ['/pesan-nama/list-pesan',], [\n    'class' => 'btn btn-success',\n]) ?>\n\n<div class=\"panel panel-default\" style=\"padding:10px\">\n    <div class=\"panel-body\">\n        <h2 class=\"text-center\">PESAN NAMA KOPERASI</h2>\n        <hr>\n        <?= $this->render('_form', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            // 'listPelabuhan' => $listPelabuhan,\n            'listPola' => $listPola,\n            'listSubJenis' => $listSubJenis,\n            'isMerahPutih' => $isMerahPutih,\n            'listModelKop' => $listModelKop,\n        ]) ?>\n\n        <?php if (isset($step2) && $step2 === true) : ?>\n            <?= $this->render('_step2', [\n                    'model' => $model,\n                    'SearchData' => $SearchData,\n                    'dataNotaris' => $dataNotaris\n                ]) ?>\n        <?php endif; ?>\n\n        <?php if (!empty($err['status']) && $err['status'] === true) : ?>\n            <?= $this->render('_err', ['err' => $err]) ?>\n        <?php endif; ?>\n    </div>\n</div>\n\n--- File: 659 # models/forms/PesanNamaForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse yii\\base\\Model;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\components\\RegexHelper;\n\nclass PesanNamaForm extends Model {\n    public $nama_koperasi;\n    public $preview_nama;\n    public $jenis_koperasi;\n    public $subjenis_koperasi;\n    public $hidSubJenis_koperasi;\n    public $nama_pelabuhan;\n    public $ahu_notaris_id;\n    public $nama_lengkap;\n    public $no_hp;\n    public $email;\n    public $m_pola_id;\n    public $model_koperasi = 0;\n    public $ksop;\n    public $tmp_ksop;\n    public $surat_kuasa;\n    public $tmp_surat_kuasa;\n\n    public static $listModelKoperasi = [\n        0 => 'Tidak Multi Pihak',\n        1 => 'Multi Pihak',\n    ];\n    \n    public function rules() {\n        return [\n            [['nama_koperasi','jenis_koperasi'], 'required','message' => 'Nama Koperasi Tidak Boleh Kosong.'],\n            [['nama_koperasi'],'filter','filter' => 'strtoupper'],\n            [['nama_koperasi'], 'string', \n            'max' => 100,\n            'tooLong' => \"Nama Koperasi Tidak Boleh Melebihi 100 Karakter\"],\n            //REGEX Nama Koperasi\n            [['nama_koperasi'],\n            'match', 'pattern' => RegexHelper::LETTER_AND_SPACES,\n            'message' => 'Terdapat Karakter Selain Huruf Latin Pada Nama Koperasi'],\n            [['nama_koperasi'],'trim'],\n\n            //Rules Pelabuhan\n            // ['nama_pelabuhan','required',\n            //     'when' => function($model) {\n            //     return JenisKoperasi::isTKBM($model->subjenis_koperasi) && $model->nama_pelabuhan;\n            // },\n            // 'whenClient' => \"function(attribute, value) {\n            //     return $('#pesannamaform-nama_pelabuhan').is(':visible');\n            // }\",\n            // 'message' => 'Nama Pelabuhan Tidak Boleh Kosong.'],\n\n            // Rules Upload KSOP\n            // ['ksop','required',\n            // 'when' => function($model) {\n            //     return JenisKoperasi::isTKBM($model->subjenis_koperasi) && $model->ksop;\n            // },\n            // 'whenClient' => \"function(attribute, value) {\n            //     return $('#pesannamaform-ksop').is(':visible') && ($('#pesannamaform-ksop').val() != '');\n            // }\",\n            // 'message' => 'KSOP Harus diupload.'],\n\n            // Custom validation untuk surat kuasa - always run even when fields are empty\n            [['surat_kuasa', 'tmp_surat_kuasa'], 'validateSuratKuasaRequired', 'skipOnEmpty' => false],\n            \n            [\n                ['surat_kuasa'], // This refers to the UploadedFile instance from the current request\n                'file',\n                'skipOnEmpty' => true, // If no new file is uploaded in this request, skip these checks.\n                'extensions' => 'pdf',\n                'maxSize' => 1024 * 1024, // 1MB\n                'tooBig' => 'Ukuran file maksimal 1MB',\n                'wrongExtension' => 'Hanya file .pdf yang diizinkan'\n            ],\n\n            [[\n                'nama_koperasi',\n                'jenis_koperasi',\n                'preview_nama',\n                'subjenis_koperasi',\n                'nama_pelabuhan',\n                'm_pola_id',\n                'ksop',\n                'tmp_ksop',\n                'ahu_notaris_id',\n                'nama_lengkap',\n                'no_hp',\n                'email',\n                'model_koperasi'],\n                'safe'],\n            [['tmp_surat_kuasa'],'safe'],\n            // [['ksop'],'file',\n            // 'skipOnEmpty' => true,\n            // 'extensions' => 'pdf',\n            // 'maxSize' => 5000 * 1024],\n        ];\n    }\n\n    public function validateSuratKuasaRequired($attribute, $params)\n    {\n        // Check for new uploaded file (UploadedFile instance)\n        $hasNewFile = ($this->surat_kuasa instanceof \\yii\\web\\UploadedFile) && $this->surat_kuasa->error === UPLOAD_ERR_OK;\n        \n        // Check for previously uploaded file (file path string)\n        $hasExistingFile = !empty($this->tmp_surat_kuasa) && is_string($this->tmp_surat_kuasa);\n        \n        // Always validate - ensure error shows when no file is provided\n        if (!$hasNewFile && !$hasExistingFile) {\n            // Add error to the main surat_kuasa field for user visibility\n            $this->addError('surat_kuasa', 'Surat Kuasa wajib diupload.');\n        }\n    }\n\n    public function normalizeData()\n    {\n        $this->nama_koperasi = preg_replace('/\\s+/', ' ',$this->nama_koperasi);\n        $this->preview_nama = preg_replace('/\\s+/', ' ',$this->preview_nama);\n    }\n}\n?>\n\n\n--- File: 49 # controllers/PesanNamaController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse app\\components\\BaseController;\nuse app\\components\\KoperasiHelper;\nuse app\\models\\forms\\PesanNamaForm;\nuse app\\models\\PesanNama;\nuse app\\models\\JenisKoperasi;\nuse app\\models\\Pelabuhan;\nuse yii\\helpers\\Url;\nuse yii\\web\\NotFoundHttpException;\nuse app\\models\\notariat\\Notaris;\nuse app\\components\\Helpers;\nuse yii\\data\\ActiveDataProvider;\nuse yii\\web\\MethodNotAllowedHttpException;\nuse app\\models\\Wilayah;\nuse app\\components\\ActionHelper;\nuse app\\components\\helper\\BoHelper;\nuse yii\\web\\UploadedFile;\nuse app\\models\\search\\PesanNamaSearch;\nuse app\\models\\PolaPengelolaan;\n\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\NpakHelper;\n\nclass PesanNamaController extends BaseController\n{\n\n    public function beforeAction($action)\n    {\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"/site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionIndex()\n    {\n        $model = new PesanNamaForm();\n        $listModelKop = ActionHelper::getDDListModelKoperasi();\n        $listJenisKop = ActionHelper::getDDListJenisKop();\n        Yii::$app->view->title = \"Pesan Nama\";\n        // $listPelabuhan = ActionHelper::getDDListPelabuhan($this->dummy_login['wilayah_id']);\n        $listPola = ActionHelper::getDDListPola();\n        $err = $step2 = $SearchData =  null;\n        $listSubJenis = [];\n        $isMerahPutih = false;\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        \n        // Clear surat kuasa session when accessing index page without POST data\n        if (!Yii::$app->request->isPost) {\n            $session->remove('uploaded_surat_kuasa');\n        }\n        $idNotaris = $user['value']['id_notaris'];\n        if (!NpakHelper::isNpak($idNotaris)) {\n            $isMerahPutih = true;\n            $listJenisKop = ActionHelper::getDDListJenisKopMerahPutih();\n        }\n\n        if ($model->load(Yii::$app->request->post())) {\n            $model->normalizeData();\n            // Jika Memilih Sub Jenis\n            if ($model->subjenis_koperasi) {\n                $listSubJenis = ActionHelper::getDDSubJenisById($model->jenis_koperasi);\n            }\n            if (JenisKoperasi::isMerahPutih($model->jenis_koperasi)) {\n                $model->model_koperasi = 0;\n                $isMerahPutih = true;\n            }\n\n            $post = Yii::$app->request->post();\n            if (!isset($post['submit-pratinjau'])) {\n                // Clear previous session data for new pesan nama workflow\n                $session->remove('uploaded_surat_kuasa');\n                \n                $model->ksop = UploadedFile::getInstance($model, 'ksop');\n                if ($model->ksop) {\n                    $model->ksop->tempName = $this->UploadKSOP($model->ksop, true);\n                    $model->tmp_ksop = $model->ksop->tempName;\n                }\n\n                $model->surat_kuasa = UploadedFile::getInstance($model, 'surat_kuasa');\n                if ($model->surat_kuasa) {\n                    // Upload new surat kuasa file\n                    $model->surat_kuasa->tempName = $this->UploadFile($model->surat_kuasa, 'surat-kuasa', true);\n                    $model->tmp_surat_kuasa = $model->surat_kuasa->tempName;\n                    $session->set('uploaded_surat_kuasa', $model->tmp_surat_kuasa);\n                }\n                // Don't restore from session if no new file uploaded - let validation handle it\n            } else {\n                // Jika submit pratinjau, restore dari session dan POST data\n                $model->tmp_surat_kuasa = $session->get('uploaded_surat_kuasa');\n                \n                // Juga ambil dari POST data jika ada\n                if (!empty($post['PesanNamaForm']['tmp_surat_kuasa'])) {\n                    $model->tmp_surat_kuasa = $post['PesanNamaForm']['tmp_surat_kuasa'];\n                }\n            }\n            if ($model->validate()) {\n                //Cek Apakah Bukan Jenis TKBM\n                if (!JenisKoperasi::isTKBM($model->subjenis_koperasi)) {\n                    $model->nama_pelabuhan = null;\n                }\n\n\n                //Cek Apakah Nama Sudah Ada\n                $jenis_kop = $model->subjenis_koperasi ? $model->subjenis_koperasi : $model->jenis_koperasi;\n                $err = PesanNama::checkPesanNama($model->nama_koperasi, $jenis_kop, $model->nama_pelabuhan);\n\n                // Jika sudah submit pratinjau pesan nama\n                if (isset($post['submit-pratinjau']) && !$err) {\n                    $model->ahu_notaris_id = $user['value']['id_notaris'];\n                    $model->nama_lengkap = $user['value']['nama_gelar'];\n                    $model->no_hp = $user['value']['no_hp'];\n                    $model->email = $user['value']['email'];\n                    $model->tmp_surat_kuasa = $session->get('uploaded_surat_kuasa');\n                    $sukses = $this->savePesanNama($model);\n                    // Clear session data after successful submission\n                    $session->remove('uploaded_surat_kuasa');\n                    Yii::$app->response->redirect(\"/pesan-nama/sukses?no_pesan={$sukses}\");\n                }\n\n                $step2 = !$err ? true : false;\n                if ($step2) {\n                    $SearchData = KoperasiHelper::generateFuzzyNamaKoperasi($model->nama_koperasi, 10);\n                }\n            }\n        }\n\n        $dataNotaris = [\n            'nama_notaris' => $user['value']['nama_gelar'],\n            'telepon' => $user['value']['no_hp'],\n            'email' => $user['value']['email'],\n        ];\n\n        return $this->render('index', [\n            'model' => $model,\n            'listJenisKop' => $listJenisKop,\n            // 'listPelabuhan' => $listPelabuhan,\n            'listPola' => $listPola,\n            'listSubJenis' => $listSubJenis,\n            'isMerahPutih' => $isMerahPutih,\n            'err' => $err,\n            'step2' => $step2,\n            'SearchData' => $SearchData,\n            'dataNotaris' => $dataNotaris,\n            'listModelKop' => $listModelKop\n        ]);\n    }\n\n    public function UploadKSOP($file, $temp = false)\n    {\n        $path = $temp ? 'uploads/temp/' : 'uploads/pesan-nama/ksop/';\n        return ActionHelper::Upload($path, $file);\n    }\n\n    public function UploadFile($file, $subfolder, $temp = false)\n    {\n        $basePath = $temp ? 'uploads/temp/' : 'uploads/pesan-nama/';\n        $path = $basePath . $subfolder . '/';\n        return ActionHelper::Upload($path, $file);\n    }\n\n    public function actionGetChildJenis($id = null)\n    {\n        if ($id) {\n            $arr = JenisKoperasi::find()->where(['parent_id' => $id])->all();\n            $jml =  JenisKoperasi::find()->where(['parent_id' => $id])->count();\n            $jenis = [];\n            foreach ($arr as $val) {\n                $jenis[] = [\n                    'id' => $val['id'],\n                    'nama' => $val['nama']\n                ];\n            }\n            $res = [\n                'count' => $jml,\n                'data' => $jenis\n            ];\n            return json_encode($res);\n        }\n    }\n\n    public function actionSukses($no_pesan = null)\n    {\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        Yii::$app->view->title = \"Pesan Nama\";\n        if ($no_pesan) {\n            $data = PesanNama::find()\n                ->where(['no_pesan' => $no_pesan])\n                ->andWhere(['ahu_notaris_id' => $user['value']['id_notaris']])\n                ->one();\n            if ($data) {\n                return $this->render('sukses', [\n                    'data' => $data,\n                    'namaKopLengkap' => $data->full_nama,\n                    'jenis_koperasi' => JenisKoperasi::getJenisKop($data->jenis_koperasi_id),\n                    'pola_pengelolaan' => PolaPengelolaan::getPolaKop($data->m_pola_id),\n                    'model_koperasi' => ActionHelper::getDDListModelKoperasi($data->model_koperasi),\n                ]);\n            }\n            throw new NotFoundHttpException;\n        }\n        throw new NotFoundHttpException;\n    }\n\n    public function savePesanNama($model)\n    {\n        $PesanNama = new PesanNama();\n        $PesanNama->attributes = $model->attributes;\n        // $PesanNama->nama_koperasi = $PesanNama->cleanFullNamaKoperasi($model->preview_nama);\n        $PesanNama->full_nama = $model->preview_nama;\n        // $PesanNama->nama_koperasi = $PesanNama->cleanNamaKoperasi($model->nama_koperasi);\n        $PesanNama->nama_koperasi = $model->nama_koperasi;\n        $PesanNama->jenis_koperasi_id = $model->jenis_koperasi;\n        $PesanNama->c_jenis_koperasi_id = $model->subjenis_koperasi;\n        $PesanNama->m_pelabuhan_id = $model->nama_pelabuhan;\n        $PesanNama->m_pola_id = $model->m_pola_id;\n        $PesanNama->model_koperasi = $model->model_koperasi;\n        $PesanNama->file_tkbm = $model->tmp_ksop;\n        $PesanNama->nama_lengkap = $model->nama_lengkap;\n        $PesanNama->no_hp = $model->no_hp;\n        $PesanNama->email = $model->email;\n        $PesanNama->file_surat_kuasa = $model->tmp_surat_kuasa;\n\n        $this->normalizePesanNama($PesanNama);\n        if ($PesanNama->savePesanNama()) {\n            return $PesanNama->no_pesan;\n        }\n        return false;\n    }\n\n    public function normalizePesanNama($pesanNama)\n    {\n        if ($pesanNama->c_jenis_koperasi_id) {\n            $cekJenis = JenisKoperasi::findOne($pesanNama->c_jenis_koperasi_id);\n            if (!$cekJenis) {\n                return false;\n            }\n            if ($cekJenis->parent_id != $pesanNama->jenis_koperasi_id) {\n                $pesanNama->c_jenis_koperasi_id = null;\n            }\n            return true;\n        }\n    }\n\n    public function actionBukti($no_pesan = null)\n    {\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        if ($no_pesan) {\n            $data = PesanNama::find()\n                ->where(['no_pesan' => $no_pesan])\n                ->andWhere(['ahu_notaris_id' => $user['value']['id_notaris']])\n                ->one();\n            $dataJenis = $data->jenis;\n            $dataPola = $data->pola;\n            if ($data && $dataJenis) {\n                $content = $this->renderPartial('_bukti_pdf', [\n                    'nama_koperasi' => $data->full_nama,\n                    'jenis_koperasi' => $dataJenis->nama_koperasi,\n                    'pola_pengelolaan' => $dataPola->nama,\n                    'no_pesan' => $data->no_pesan,\n                    'tgl_pesan' => Helpers::dateIndo($data->created_date),\n                    'tgl_exp' => Helpers::dateIndo($data->end_date),\n                    'nama_notaris' => $data->nama_lengkap,\n                    'telp_notaris' => $data->no_hp,\n                    'email_notaris' => $data->email,\n                    'model_koperasi' => ActionHelper::getDDListModelKoperasi($data->model_koperasi),\n                ]);\n                $file_name = \"bukti_pesan_nama_\" . $data->no_pesan;\n                return Helpers::pdf($content, $file_name);\n            }\n        }\n        throw new NotFoundHttpException;\n    }\n\n    public function actionListPesan()\n    {\n        // $data = PesanNama::find()->one();\n        // var_dump($data->attributes);\n        // exit;\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        Yii::$app->view->title = \"Daftar Pesan Nama\";\n        $data = PesanNama::find()\n            ->where(['ahu_notaris_id' => $id_notaris])\n            ->andWhere(['is_deleted' => '0']);\n        $post = Yii::$app->request->post();\n        if ($post) {\n            $data->andFilterWhere(['no_pesan' => $post['no_pesan']]);\n        }\n        $searchModel = new PesanNamaSearch();\n        $provider = new ActiveDataProvider([\n            'query' => $data,\n            'pagination' => [\n                'pageSize' => 20,\n            ],\n            'sort' => [\n                'attributes' => [\n                    'nama_koperasi',\n                    'created_date',\n                ],\n                'defaultOrder' => [\n                    'created_date' => SORT_DESC,\n                ],\n            ]\n        ]);\n        return $this->render('listPesan', [\n            'model' => $provider,\n            'searchModel' => $searchModel,\n        ]);\n    }\n\n\n    public function actionPerpanjang($id = null)\n    {\n        $request = Yii::$app->request;\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        if ($request->isPost) {\n            $id_notaris = $user['value']['id_notaris'];\n            if ($id) {\n                $data = PesanNama::find()\n                    ->where(['id' => $id])\n                    ->andWhere(['ahu_notaris_id' => $id_notaris])\n                    ->one();\n                if ($data) {\n                    $data->is_perpanjang = 1;\n                    $data->end_date = date(\"Y-m-d\", strtotime($data->end_date . \"+30 days\"));\n                    if ($data->save(false)) {\n                        $res = [\n                            'status' => 200,\n                            'message' => 'Berhasil Perpanjang',\n                        ];\n                        echo json_encode($res);\n                    }\n                }\n                return Yii::$app->response->redirect('/pesan-nama/list-pesan');\n            }\n            throw new NotFoundHttpException;\n        }\n        throw new MethodNotAllowedHttpException(\"Harap Hubungi Kemenkop\");\n    }\n    public function actionDownloadSuratKuasa()\n    {\n        $id = Yii::$app->getRequest()->getQueryParam('id');\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $id_notaris = $user['value']['id_notaris'];\n        \n        // Cek apakah pesan nama milik notaris yang login\n        $pesanNama = PesanNama::find()->where(['id' => $id])->andWhere(['ahu_notaris_id' => $id_notaris])->one();\n        if (!$pesanNama) {\n            throw new \\yii\\web\\HttpException(404, 'Data pesan nama tidak ditemukan.');\n        }\n\n        // Cek apakah ada file surat kuasa\n        if (empty($pesanNama->file_surat_kuasa)) {\n            throw new \\yii\\web\\HttpException(404, 'Surat Kuasa tidak ditemukan.');\n        }\n\n        $filePath = $pesanNama->file_surat_kuasa;\n        $fullPath = Yii::$app->basePath . '/web/' . $filePath;\n\n        // Cek apakah file exist\n        if (!file_exists($fullPath)) {\n            throw new \\yii\\web\\HttpException(404, 'File Surat Kuasa tidak ditemukan.');\n        }\n\n        // Extract filename dari path\n        $fileName = basename($filePath);\n        \n        return Yii::$app->response->sendFile($fullPath, $fileName, [\n            'mimeType' => 'application/pdf',\n            'inline' => true\n        ]);\n    }\n}\n\n\n--- File: 635 # models/PesanNama.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse docotel\\dcms\\components\\Helper;\nuse yii\\helpers\\ArrayHelper;\nuse app\\components\\KoperasiHelper;\nuse yii\\helpers\\FileHelper;\n\n/**\n * This is the model class for table \"{{%pesan_nama}}\".\n *\n * @property int $id\n * @property string $no_pesan\n * @property string $nama_koperasi\n * @property int $jenis_koperasi_id\n * @property int $c_jenis_koperasi_id\n * @property int $m_pelabuhan_id\n * @property int $ahu_notaris_id\n * @property string $end_date\n * @property int $is_perpanjang 0:Tidak\n * @property int $status 0:Belum Pendirian, 1:Sudah Pendirian\n * @property string $is_deleted 0:Tidak, 1: Ya\n * @property string $created_by\n * @property string $created_date\n * @property string $updated_by\n * @property string $updated_date\n * @property string $deleted_by\n * @property string $deleted_date\n * @property string $file_surat_kuasa\n */\nclass PesanNama extends \\yii\\db\\ActiveRecord\n{\n    public static $modelKoperasi = [\n        0 => 'tidak multi pihak',\n        1 => 'multi pihak'\n    ];\n\n    public $ksop;\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%pesan_nama}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['no_pesan', 'nama_koperasi', 'jenis_koperasi_id', 'ahu_notaris_id', 'end_date', 'created_by'], 'required'],\n            [['jenis_koperasi_id', 'c_jenis_koperasi_id', 'm_pelabuhan_id', 'ahu_notaris_id', 'is_perpanjang', 'status'], 'integer'],\n            [['end_date', 'created_date', 'updated_date', 'deleted_date', 'score', 'file_surat_kuasa'], 'safe'],\n            [['is_deleted'], 'string'],\n            [['no_pesan', 'nama_koperasi'], 'string', 'max' => 100],\n            [['created_by', 'updated_by', 'deleted_by'], 'string', 'max' => 36],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'no_pesan' => 'No Pesan',\n            'nama_koperasi' => 'Nama Koperasi',\n            'jenis_koperasi_id' => 'Jenis Koperasi ID',\n            'c_jenis_koperasi_id' => 'C Jenis Koperasi ID',\n            'm_pelabuhan_id' => 'M Pelabuhan ID',\n            'ahu_notaris_id' => 'Ahu Notaris ID',\n            'end_date' => 'End Date',\n            'is_perpanjang' => 'Is Perpanjang',\n            'status' => 'Status',\n            'is_deleted' => 'Is Deleted',\n            'created_by' => 'Created By',\n            'created_date' => 'Created Date',\n            'updated_by' => 'Updated By',\n            'updated_date' => 'Updated Date',\n            'deleted_by' => 'Deleted By',\n            'deleted_date' => 'Deleted Date',\n            'file_surat_kuasa' => 'File Surat Kuasa',\n        ];\n    }\n\n    public static function checkNama($nama)\n    {\n\n        $data = self::find()\n            ->where(['nama_koperasi' => $nama])\n            ->andWhere(['is_deleted' => '0'])\n            ->orderBy('created_date DESC')\n            ->one();\n\n        $now = Date(\"Y-m-d H:i:s\");\n\n        if ($data) {\n\n            // Jika ada pesan nama di antrian\n            if ($data->status == 0) {\n\n                // Jika Belum Pendirian Tetapi Sudah Expired\n                if ($data->end_date < $now) {\n\n                    //Dito, 31-03-2020, Penambahan untuk pengecekan transaksi di bawah yang expired\n                    $expired = self::find()\n                        ->where(['nama_koperasi' => $nama])\n                        ->andWhere(['is_deleted' => '0'])\n                        ->andWhere(['status' => '1'])\n                        ->orderBy('created_date DESC')\n                        ->one();\n\n                    //Jika ada yang statusnya 1 dibawah yang sudah expired, maka tidak bisa dipesan namanya\n                    if ($expired) {\n\n                        return [\n                            'status' => true,\n                            'jenis_err' => 'NamaSudahAda',\n                            'nama_koperasi' => $nama,\n                        ];\n                    }\n\n                    return false;\n                }\n\n                return [\n                    'status' => true,\n                    'jenis_err' => 'NamaSudahAda',\n                    'nama_koperasi' => $nama,\n                ];\n            }\n\n            $dataTrans = ArrayHelper::getColumn(TransaksiKoperasi::find()->where(['t_pesan_nama_id' => $data->id])->all(), 'id');\n\n            // Jika Tidak Ada Data Transaksi Yang Menggunakan Pesan Nama Tersebut\n            if (!$dataTrans) {\n                return false;\n            }\n\n            if (sizeof($dataTrans) == 1) {\n                $cekData = TransaksiKoperasi::find()->where(['id' => $dataTrans[0]])->one();\n                // Perbaikan validasi jika masih dalam tahap pendirian dan belum expired\n                if ($cekData->is_finish == 0) {\n                    return [\n                        'status' => true,\n                        'jenis_err' => 'NamaSudahAda',\n                        'nama_koperasi' => $nama\n                    ];\n                }\n            }\n\n            $dataMaster = MasterTransaction::find()->where(['id_transaksi' => $dataTrans])->one();\n\n            // Jika Tidak Ada Data Master Koperasi Yang Menggunakan Pesan Nama Tersebut\n            if (!$dataMaster) {\n                return false;\n            }\n\n            // Jika Data Master Koperasi Yang Ditemukan Sudah Melakukan Penggabungan\n            if ($dataMaster->is_gabung == 1) {\n                return false;\n            }\n\n            if ($dataMaster->is_active == 0) {\n                return false;\n            }\n\n            return [\n                'status' => true,\n                'jenis_err' => 'NamaSudahAda',\n                'nama_koperasi' => $nama,\n            ];\n        }\n        return false;\n    }\n\n    // Fungsi untuk cek Nama ada atau tidak di tabel transaksi\n    // Dito, 31-03-2020\n    // Parameter $nama untuk cek ke transaksi koperasi\n    public static function CekAvailablePesanNama($nama)\n    {\n\n        if ($nama) {\n            // Cek apakah punya nama yang sama di table transaksi\n            $cek = TransaksiKoperasi::find()->where(['nama_koperasi' => $nama, 'is_finish' => 1])->one();\n            if ($cek) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'NamaSudahAda',\n                    'nama_koperasi' => $nama,\n                ];\n            }\n        }\n        return false;\n    }\n\n    public function getPelabuhan()\n    {\n        return $this->hasOne(Pelabuhan::className(), ['id' => 'm_pelabuhan_id']);\n    }\n\n    public function getJenis()\n    {\n        $jenis = $this->c_jenis_koperasi_id ? 'c_jenis_koperasi_id' : 'jenis_koperasi_id';\n        return $this->hasOne(JenisKoperasi::className(), ['id' => $jenis]);\n    }\n\n    public function getPola()\n    {\n        return $this->hasOne(PolaPengelolaan::className(), ['id' => 'm_pola_id']);\n    }\n\n    public function getFullNamaKop()\n    {\n        $getJenisFrom = 'jenis_koperasi_id';\n        $subJenis = $this->c_jenis_koperasi_id;\n        if ($subJenis) {\n            $getJenisFrom = 'c_jenis_koperasi_id';\n        }\n        $jenis = strtoupper(JenisKoperasi::GetPrefixNamaKop($this->$getJenisFrom));\n        $pola = strtoupper(PolaPengelolaan::GetPrefixNamaKop($this->m_pola_id));\n        $pre = '';\n        // if($pola) {\n        //     $str = $jenis.' DAN '.$pola . \" \" . $this->nama_koperasi;\n        // }\n        // else {\n        //     $str = $jenis.' '.$this->nama_koperasi;\n        // }\n\n        $model = $this->model_koperasi == 1 ? \"MULTI PIHAK \" : \"\";\n        // Tiket #601011 - Hanya koperasi dengan jenis simpan pinjam dengan pola pengelolaan syariah yang menggunakan \"DAN PEMBIAYAAN SYARIAH\"\n        if ($this->$getJenisFrom == '6' && $pola) {\n            $pre = $jenis . ' DAN ' . $pola;\n            // $str = $pre . \" \" . $model . $this->nama_koperasi;\n        } else {\n            if ($this->m_pola_id == '2') {\n                $pre = $jenis . ' SYARIAH';\n                // $str = $pre .' '. $model . $this->nama_koperasi;\n            } else {\n                $pre = $jenis;\n                // $str = $pre .' '. $model . $this->nama_koperasi;\n            }\n        }\n\n        $str = $this->cleanNamaJenisKoperasi($this->nama_koperasi);\n        $str = $pre . ' ' . $model . $str;\n\n        // $str = $this->cleanFullNamaKoperasi($str);\n        return strtoupper($str);\n    }\n\n    public static function checkPesanNama($nama, $jenis, $pelabuhan)\n    {\n        // Jika Terdapat di black list\n        if (self::checkWhitelist($nama, $jenis)) {\n            return false;\n        }\n\n        // Min 3 Kata\n        if (!JenisKoperasi::isMerahPutih($jenis) && self::cek3Kata($nama)) {\n            return [\n                'status' => true,\n                'jenis_err' => 'Min3Kata',\n            ];\n        }\n\n        if ($kata = self::cekNamaLarang($nama, $jenis)) {\n            return [\n                'status' => true,\n                'jenis_err' => 'BanName',\n                'nama_koperasi' => $nama,\n                'ban' => $kata['ban'],\n            ];\n        }\n\n        if ($kata = self::checkKalimatLarang($nama, $jenis)) {\n            if ($kata['tipe'] == 'ban') {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'BanFullName',\n                    'nama_koperasi' => $nama,\n                    'ban' => $kata['ban'],\n                ];\n            } else if ($kata['tipe'] == 'ban_kalimat') {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'BanKombinasi',\n                    'nama_koperasi' => $nama,\n                    'ban' => $kata['ban'],\n                ];\n            }\n        }\n\n        // Nama Sudah Tersedia\n        if ($err = self::checkNama($nama)) {\n            return $err;\n        }\n\n        //Jika Ada Pelabuhan\n        if ($pelabuhan) {\n            // Ketersediaan pelabuhan\n            if ($kata = self::checkAvailablePelabuhan($pelabuhan)) {\n                return [\n                    'status' => true,\n                    'jenis_err' => 'PelabuhanSudahAda',\n                    'pelabuhan' => $kata['pelabuhan']\n                ];\n            }\n        }\n\n        // Dito, 31-03-2020, Penambahan pengecekan ke transaksi\n        if ($err = self::CekAvailablePesanNama($nama)) {\n            return $err;\n        }\n\n        return false;\n    }\n\n    public static function checkWhitelist($nama, $jenis)\n    {\n        $data = MMatch::find()->where(['name' => $nama])->andWhere(['base' => $jenis])->one();\n\n        if (!$data) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function checkKalimatLarang($nama, $jenis)\n    {\n\n        // Cek Kalimat Ban\n        $dataBan = MasterBanKalimat::find()\n            ->where(['blokir' => $nama])\n            ->andWhere(['m_jenis_koperasi_id' => $jenis])\n            ->andWhere(['is_deleted' => null])\n            ->one();\n\n        if ($dataBan) {\n            $ban = $dataBan->blokir;\n            return [\n                'status' => true,\n                'tipe' => 'ban',\n                'ban' => $ban,\n            ];\n        }\n\n        // Jika tidak Ada Cek Nama Kombinasi\n        $dataKomb = Kombinasi::find()->where(['kombinasi' => $nama])->one();\n\n        if ($dataKomb) {\n            $ban = $dataKomb->origin;\n            $dataBan = MasterBanKalimat::find()\n                ->where(['blokir' => $ban])\n                ->andWhere(['m_jenis_koperasi_id' => $jenis])\n                ->andWhere(['is_deleted' => null])\n                ->one();\n\n            if ($dataBan) {\n                return [\n                    'status' => true,\n                    'tipe' => 'ban_kalimat',\n                    'ban' => $ban,\n                ];\n            }\n        }\n\n        return false;\n    }\n\n    public static function cekNamaLarang($nama, $jenis)\n    {\n        $BanName = MasterBan::getArrayListBan($jenis);\n\n        foreach ($BanName as $ban) {\n            if (strpos($nama, strtoupper($ban)) !== false) {\n                return ['status' => true, 'ban' => $ban];\n            }\n        }\n    }\n\n    public static function cek3Kata($nama)\n    {\n        return sizeof(explode(' ', $nama)) < 3;\n    }\n\n    public  static function checkAvailablePelabuhan($id)\n    {\n        $data = self::find()\n            ->where(['m_pelabuhan_id' => $id])\n            ->andFilterWhere(['not', ['m_pelabuhan_id' => null]])\n            ->andWhere(['is_deleted' => '0'])\n            ->one();\n        if ($data) {\n            $pelabuhan = $data->pelabuhan;\n            return ['status' => true, 'pelabuhan' => $pelabuhan->nama];\n        }\n    }\n\n    public static function getMatchSearch($str = null)\n    {\n        $data = null;\n        $arrstr = preg_split('/\\s/', $str, -1, PREG_SPLIT_NO_EMPTY);\n        if ($str) {\n            $tmp = KoperasiHelper::generateData($str);\n            $tmp = KoperasiHelper::FilterZero($tmp, 'score');\n            $data = KoperasiHelper::searchLevenshtein($str, $tmp);\n        }\n        return $data;\n    }\n\n    public function savePesanNama()\n    {\n        try {\n            $this->no_pesan = KoperasiHelper::randomCodeByTime();\n            if ($this->file_tkbm) {\n                $pecah_path = explode('/', $this->file_tkbm);\n                $new_path_ksop = 'uploads/pesan-nama/ksop/' . $this->no_pesan . \"_\" . $pecah_path[count($pecah_path) - 1];\n                FileHelper::createDirectory(dirname($new_path_ksop)); // Ensure directory exists\n                rename($this->file_tkbm, $new_path_ksop);\n                $this->file_tkbm = $new_path_ksop;\n            }\n            if ($this->file_surat_kuasa) {\n                $pecah_path_sk = explode('/', $this->file_surat_kuasa);\n                $new_path_sk = 'uploads/pesan-nama/surat-kuasa/' . $this->no_pesan . \"_\" . $pecah_path_sk[count($pecah_path_sk) - 1];\n                FileHelper::createDirectory(dirname($new_path_sk)); // Ensure directory exists\n                rename($this->file_surat_kuasa, $new_path_sk);\n                $this->file_surat_kuasa = $new_path_sk;\n            }\n            $hariExp = Setting::getValue('tgl_expired', 30);\n            $this->end_date = date(\"Y-m-d\", strtotime(\"+{$hariExp} days\"));\n            $this->is_perpanjang = 0;\n            $this->status = 0;\n            $this->is_deleted = '0';\n            $this->created_by = Yii::$app->user->identity->id;\n            $this->created_date = date(\"Y-m-d H:i:s\");\n            // var_dump($this,$this->validate(),$this->getErrors());exit;\n            if ($this->save(false)) {\n                return true;\n            }\n        } catch (Exception $e) {\n            return false;\n        }\n        return false;\n    }\n\n    public static function getPrimaryByNoPesan($no)\n    {\n        $data = self::find()\n            ->where(['no_pesan' => $no])\n            ->one();\n\n        if (!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function getByNoPesan($no, $id_notaris)\n    {\n        return self::find()\n            ->where(['no_pesan' => $no])\n            // ->andWhere(['ahu_notaris_id' => $id_notaris])\n            ->andWhere(['is_deleted' => '0'])\n            ->andWhere(['status' => 0])\n            ->one();\n    }\n\n    public static function UpdateStatusKop($id, $status)\n    {\n        $data = self::find()\n            ->where(['id' => $id])\n            ->one();\n        $data->status = $status;\n        if ($data->save(false)) {\n            return true;\n        }\n        return false;\n    }\n\n    public function getDescJenisKoperasi()\n    {\n        $jenis_id = $this->c_jenis_koperasi_id ? $this->c_jenis_koperasi_id : $this->jenis_koperasi_id;\n\n        if ($this->c_jenis_koperasi_id) {\n            $cekChildJenis = JenisKoperasi::find()->where(['id' => $this->c_jenis_koperasi_id])->one();\n            if ($cekChildJenis) {\n                if (!($cekChildJenis->parent_id == $this->jenis_koperasi_id)) {\n                    $jenis_id = $this->jenis_koperasi_id;\n                }\n            }\n        }\n\n        return JenisKoperasi::getJenisKop($jenis_id);\n    }\n\n    public function cleanNamaKoperasi($nama)\n    {\n        if ($nama && is_string($nama)) {\n            $jn = new JenisKoperasi;\n            $jn_list = $jn->getDDListJenisKop();\n            if ($jn_list) {\n                $nama = strtoupper($nama);\n                //$nama = trim(str_replace(\"KOPERASI\", \"\", $nama));\n                $nama = preg_replace('/^KOPERASI /', '', $nama);\n\n                $jn_list = array_map('strtoupper', $jn_list);\n                $pattern = '/^(' . implode('|', $jn_list) . ') /';\n                $nama = preg_replace($pattern, '', $nama);\n\n                // foreach($jn_list as $jnd) {\n                //     $jnd = strtoupper($jnd);\n                //     if(strpos($nama, $jnd) !== false && $jnd != 'Produsen') {\n                //         $nama = trim(str_replace($jnd, \"\", $nama));\n                //     }\n                // }\n            }\n        }\n        return $nama;\n    }\n\n    public function cleanFullNamaKoperasi($nama)\n    {\n        if ($nama && is_string($nama)) {\n            $nama = trim(strtoupper($nama));\n            $explode = explode(\" \", $nama);\n            if ($explode && is_array($explode)) {\n                $a_kop = 'KOPERASI';\n                $f_name = [];\n                foreach ($explode as $k => $e) {\n                    if ($k == 1 && $e == $a_kop) {\n                        continue;\n                    }\n                    $f_name[] = $e;\n                }\n                $jn = new JenisKoperasi;\n                $jn_list = $jn->getDDListJenisKop();\n                if ($jn_list) {\n                    foreach ($jn_list as $jnd) {\n                        $jnd = strtoupper($jnd);\n                        $c_j = 0;\n                        foreach ($f_name as $k => $e) {\n                            if ($jnd == $e) {\n                                $c_j++;\n                            }\n                            if ($c_j == 2) {\n                                unset($f_name[$k]);\n                                $c_j = 0;\n                            }\n                        }\n                    }\n                }\n                if ($f_name)\n                    $nama = implode($f_name, \" \");\n            }\n        }\n        return $nama;\n    }\n\n    public function cleanNamaJenisKoperasi($nama)\n    {\n        if ($nama && is_string($nama)) {\n            $nama = trim(strtoupper($nama));\n            $jn = new JenisKoperasi;\n            $jn_list = $jn->getDDListJenisKop('all', 'nama_koperasi');\n\n            if ($jn_list) {\n                foreach ($jn_list as $jnd) {\n                    // Regex buat hapus prefix \"$pre\"\n                    $pattern = '/^' . strtoupper($jnd) . '\\b/';\n\n                    $nama = preg_replace($pattern, '', $nama);\n                    $nama = trim(preg_replace('/\\s+/', ' ', $nama));\n                }\n            }\n        }\n\n        return $nama;\n    }\n\n    public static function checkIsValidModelKoperasi($modelKoperasi)\n    {\n        if (in_array(strtolower($modelKoperasi), self::$modelKoperasi)) {\n            return true;\n        }\n        return false;\n    }\n\n    public static function checkIsKoperasiMultiPihak($modelKoperasi)\n    {\n        if (strtolower($modelKoperasi) == strtolower(self::$modelKoperasi[1])) {\n            return true;\n        }\n        return false;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 2: Pesan Nama (Name Reservation)\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Data Anggota (Member Data)\n\". This is Chapter 3.\n\nConcept Details:\n- Name: Data Anggota (Member Data)\n\n- Description:\nManages cooperative members, including board members and supervisors with their roles and personal information.\nLike an employee directory that keeps track of who holds what position in the cooperative organization.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 590 # models/DataAnggota.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass DataAnggota extends ActiveRecord \n{\n    public function getJenisKelamin()\n    {\n        return $this->hasOne(JenisKelamin::className(),['id' => 'jenis_kelamin_id']);\n    }\n\n    public static function tableName()\n    {\n        return '{{%data_anggota}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public static function getAnggotaByID($kode) {\n\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->asArray()\n            ->all();\n    }\n}\n\n--- File: 678 # modules/Api/components/DataAnggotaHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\StatusPengurus;\nuse app\\models\\JenisKelamin;\n\nclass DataAnggotaHelper extends Component {\n\n    public static function getIdStatusPengurus($nama) {\n        $data = StatusPengurus::find()->where(['nama' => strtoupper($nama)])->one();\n        \n        if(!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function getIdJenisKelamin($nama) {\n        $nama = self::normalizeJenisKelamin($nama);\n\n        $data = JenisKelamin::find()->where(['nama' => strtoupper($nama)])->one();\n        if(!$data) {\n            return null;\n        }\n\n        return $data->id;\n    }\n\n    public static function normalizeJenisKelamin($nama) {\n        if(strtoupper($nama) == strtoupper('LAKI-LAKI') || strtoupper($nama) == strtoupper('LAKI - LAKI') ) {\n            return \"LAKI - LAKI\";\n        }\n        return $nama;\n    }\n}\n?>\n\n--- File: 620 # models/StatusPengurus.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"m_status_pengurus\".\n *\n * @property int $id\n * @property string $nama\n */\nclass StatusPengurus extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'm_status_pengurus';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['nama'], 'string', 'max' => 50],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'nama' => 'Nama',\n        ];\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['id' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->nama;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 3: Data Anggota (Member Data)\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Notaris Integration\n\". This is Chapter 4.\n\nConcept Details:\n- Name: Notaris Integration\n\n- Description:\nManages notary-related operations for cooperative legal documents and authentication.\nLike having a legal witness system that validates and certifies all cooperative establishment documents.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 663 # models/notariat/TransaksiNotaris.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\n\nclass TransaksiNotaris extends \\yii\\db\\ActiveRecord\n{\n    public static function tableName()\n    {\n        return 'ahu_transaksi_notaris';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat');\n    }\n}\n\n\n--- File: 613 # models/NotarisNpak.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass NotarisNpak extends ActiveRecord \n{\n    const NPAK_AKTIF = 1;\n    const NPAK_TIDAK_AKTIF = 0;\n    \n    public static function tableName()\n    {\n        return '{{%notaris_npak}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public static function checkNotarisNPAK( $id_notaris ) {\n    \treturn self::findOne(['id_notaris' => $id_notaris, 'npak' => self::NPAK_AKTIF]);\n    }\n}\n\n\n\n--- File: 662 # models/notariat/Notaris.php ---\n<?php\n\nnamespace app\\models\\notariat;\n\nuse Yii;\n\n/**\n * This is the model class for table \"ahu_notaris\".\n *\n * @property int $id_notaris\n * @property string $username\n * @property string $email\n * @property string $email_alternatif\n * @property string $nama_lengkap\n * @property string $nama_prefix\n * @property string $nama_suffix\n * @property string $nama_gelar\n * @property string $nama_kecil\n * @property string $nama_alias\n * @property string $nama_sementara\n * @property string $tanggal_lahir\n * @property string $tempat_lahir\n * @property string $jenis_kelamin\n * @property int $id_agama\n * @property int $id_status_perkawinan\n * @property string $alamat_rt\n * @property string $alamat_rw\n * @property string $alamat_jalan\n * @property string $alamat_kelurahan\n * @property string $alamat_kecamatan_id\n * @property string $alamat_kabupaten_id\n * @property int $alamat_provinsi_id\n * @property int $alamat_kodepos\n * @property string $nomor_hp_json\n * @property string $nomor_ktp\n * @property string $nomor_telpon_json\n * @property string $npwp\n * @property string $nomor_sk\n * @property string $nomor_sk_pelantikan_tmp\n * @property string $nomor_sk_pelantikan\n * @property string $tanggal_sk_pelantikan\n * @property string $nomor_setifikat_kodetik\n * @property string $tanggal_sertifikat_kodetik\n * @property string $almamater_json\n * @property string $pengalaman_magang_json\n * @property string $pengalaman_kerja_json\n * @property int $id_wilayah\n * @property string $nama_kabupaten_penempatan\n * @property string $nama_provinsi_penempatan\n * @property string $path_foto\n * @property string $id_persyaratan\n * @property int $status -- cron dari hery (perpanjangan dan pensiun)\n * @property string $tanggal_aktivasi\n * @property string $sisa_cuti\n * @property string $ADDITIONAL\n * @property string $created_date\n * @property string $created_by\n * @property int $ID_NOTARIS_SABH\n * @property int $ID_NOTARIS_NOTARIAT\n * @property int $flag_edit\n * @property string $no_hp\n * @property string $json_verifikasi\n * @property int $flag_pensiun\n * @property int $flag_skck\n * @property int $is_polling\n * @property int $cid_wilayah wilayah terakhir notaris berdasarkan sk dan sk manual\n * @property int $flag_upn 0 = tidak 1 = bisa\n * @property int $flag_ujian\n * @property int $status_sblm_blokir\n * @property int $id_wilayah_kedudukan\n */\nclass Notaris extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'ahu_notaris';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['nama_prefix', 'nama_suffix', 'almamater_json', 'pengalaman_magang_json', 'pengalaman_kerja_json', 'id_persyaratan', 'ADDITIONAL', 'json_verifikasi'], 'string'],\n            [['tanggal_lahir', 'tanggal_sk_pelantikan', 'tanggal_sertifikat_kodetik', 'tanggal_aktivasi', 'created_date'], 'safe'],\n            [['id_agama', 'id_status_perkawinan', 'alamat_provinsi_id', 'alamat_kodepos', 'id_wilayah', 'status', 'ID_NOTARIS_SABH', 'ID_NOTARIS_NOTARIAT', 'flag_edit', 'flag_pensiun', 'flag_skck', 'is_polling', 'cid_wilayah', 'flag_upn', 'flag_ujian', 'status_sblm_blokir', 'id_wilayah_kedudukan'], 'integer'],\n            [['nomor_sk_pelantikan_tmp', 'json_verifikasi'], 'required'],\n            [['username', 'created_by', 'no_hp'], 'string', 'max' => 50],\n            [['email', 'email_alternatif', 'nama_lengkap', 'nama_kecil', 'nama_sementara', 'tempat_lahir', 'nomor_hp_json', 'nomor_ktp', 'npwp'], 'string', 'max' => 100],\n            [['nama_gelar'], 'string', 'max' => 150],\n            [['nama_alias', 'alamat_jalan', 'alamat_kelurahan', 'alamat_kecamatan_id', 'alamat_kabupaten_id', 'nomor_sk_pelantikan_tmp', 'nomor_sk_pelantikan', 'nama_kabupaten_penempatan', 'nama_provinsi_penempatan', 'path_foto'], 'string', 'max' => 255],\n            [['jenis_kelamin'], 'string', 'max' => 1],\n            [['alamat_rt', 'alamat_rw'], 'string', 'max' => 10],\n            [['nomor_telpon_json', 'nomor_setifikat_kodetik'], 'string', 'max' => 200],\n            [['nomor_sk'], 'string', 'max' => 32],\n            [['sisa_cuti'], 'string', 'max' => 5],\n            [['username'], 'unique'],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id_notaris' => 'Id Notaris',\n            'username' => 'Username',\n            'email' => 'Email',\n            'email_alternatif' => 'Email Alternatif',\n            'nama_lengkap' => 'Nama Lengkap',\n            'nama_prefix' => 'Nama Prefix',\n            'nama_suffix' => 'Nama Suffix',\n            'nama_gelar' => 'Nama Gelar',\n            'nama_kecil' => 'Nama Kecil',\n            'nama_alias' => 'Nama Alias',\n            'nama_sementara' => 'Nama Sementara',\n            'tanggal_lahir' => 'Tanggal Lahir',\n            'tempat_lahir' => 'Tempat Lahir',\n            'jenis_kelamin' => 'Jenis Kelamin',\n            'id_agama' => 'Id Agama',\n            'id_status_perkawinan' => 'Id Status Perkawinan',\n            'alamat_rt' => 'Alamat Rt',\n            'alamat_rw' => 'Alamat Rw',\n            'alamat_jalan' => 'Alamat Jalan',\n            'alamat_kelurahan' => 'Alamat Kelurahan',\n            'alamat_kecamatan_id' => 'Alamat Kecamatan ID',\n            'alamat_kabupaten_id' => 'Alamat Kabupaten ID',\n            'alamat_provinsi_id' => 'Alamat Provinsi ID',\n            'alamat_kodepos' => 'Alamat Kodepos',\n            'nomor_hp_json' => 'Nomor Hp Json',\n            'nomor_ktp' => 'Nomor Ktp',\n            'nomor_telpon_json' => 'Nomor Telpon Json',\n            'npwp' => 'Npwp',\n            'nomor_sk' => 'Nomor Sk',\n            'nomor_sk_pelantikan_tmp' => 'Nomor Sk Pelantikan Tmp',\n            'nomor_sk_pelantikan' => 'Nomor Sk Pelantikan',\n            'tanggal_sk_pelantikan' => 'Tanggal Sk Pelantikan',\n            'nomor_setifikat_kodetik' => 'Nomor Setifikat Kodetik',\n            'tanggal_sertifikat_kodetik' => 'Tanggal Sertifikat Kodetik',\n            'almamater_json' => 'Almamater Json',\n            'pengalaman_magang_json' => 'Pengalaman Magang Json',\n            'pengalaman_kerja_json' => 'Pengalaman Kerja Json',\n            'id_wilayah' => 'Id Wilayah',\n            'nama_kabupaten_penempatan' => 'Nama Kabupaten Penempatan',\n            'nama_provinsi_penempatan' => 'Nama Provinsi Penempatan',\n            'path_foto' => 'Path Foto',\n            'id_persyaratan' => 'Id Persyaratan',\n            'status' => 'Status',\n            'tanggal_aktivasi' => 'Tanggal Aktivasi',\n            'sisa_cuti' => 'Sisa Cuti',\n            'ADDITIONAL' => 'A D D I T I O N A L',\n            'created_date' => 'Created Date',\n            'created_by' => 'Created By',\n            'ID_NOTARIS_SABH' => 'I D N O T A R I S S A B H',\n            'ID_NOTARIS_NOTARIAT' => 'I D N O T A R I S N O T A R I A T',\n            'flag_edit' => 'Flag Edit',\n            'no_hp' => 'No Hp',\n            'json_verifikasi' => 'Json Verifikasi',\n            'flag_pensiun' => 'Flag Pensiun',\n            'flag_skck' => 'Flag Skck',\n            'is_polling' => 'Is Polling',\n            'cid_wilayah' => 'Cid Wilayah',\n            'flag_upn' => 'Flag Upn',\n            'flag_ujian' => 'Flag Ujian',\n            'status_sblm_blokir' => 'Status Sblm Blokir',\n            'id_wilayah_kedudukan' => 'Id Wilayah Kedudukan',\n        ];\n    }\n\n    public static function getIdNotarisByLastSk($nomor_sk)\n    {\n        $list_id_aksi = [1, 3, 9, 13, 14, 15, 25];\n        $data = TransaksiNotaris::find()\n                    ->where([\n                        'id_aksi_transaksi' => $list_id_aksi,\n                        'status_lolos_gagal' => 1,\n                        'nomor_sk' => $nomor_sk,\n                    ])->orderBy(['modified_date' => SORT_DESC])\n                    ->one();\n\n        if ($data) {\n            $sk_last = TransaksiNotaris::find()\n                        ->where([\n                            'id_aksi_transaksi' => $list_id_aksi,\n                            'status_lolos_gagal' => 1,\n                            'id_notaris' => $data->id_notaris,\n                        ])->orderBy(['modified_date' => SORT_DESC])\n                        ->one();\n\n            // cek apakah nomor sk nomor terakhir\n            if ($sk_last && $nomor_sk == $sk_last->nomor_sk) {\n                return $sk_last->id_notaris;\n            }\n        } else {\n            $data = MsSkAdditional::find()\n                        ->where(['ID_AKSI' => $list_id_aksi])\n                        ->andWhere(['LIKE', 'DATA_SK', $nomor_sk])\n                        ->orderBy(['TIMESTAMP_SK' => SORT_DESC])\n                        ->one();\n\n            if ($data) {\n                $sk_last = MsSkAdditional::find()\n                            ->where(['ID_AKSI' => $list_id_aksi])\n                            ->andWhere(['ID_NOTARIS' => $data->ID_NOTARIS])\n                            ->orderBy(['TIMESTAMP_SK' => SORT_DESC])\n                            ->one();\n\n                if ($sk_last) {\n                    $data_sk = json_decode($sk_last->DATA_SK);\n\n                    // cek apakah nomor sk nomor terakhir\n                    if (strtolower($nomor_sk) == strtolower(trim($data_sk->Nomor_SK))) {\n                        return $sk_last->ID_NOTARIS;   \n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static function getLastSkNotaris($id_notaris)\n    {\n        $list_id_aksi = [1, 3, 9, 13, 14, 15, 25];\n        $sk_last = null;\n        $data = TransaksiNotaris::find()\n                    ->where([\n                        'id_aksi_transaksi' => $list_id_aksi,\n                        'status_lolos_gagal' => 1,\n                        'id_notaris' => $id_notaris,\n                    ])->orderBy(['modified_date' => SORT_DESC])\n                    ->one();\n\n        if ($data) {\n            $sk_last = $data[\"nomor_sk\"];\n        } else {\n            $data = MsSkAdditional::find()\n                        ->where(['ID_AKSI' => $list_id_aksi])\n                        ->andWhere(['ID_NOTARIS' => $id_notaris])\n                        ->orderBy(['TIMESTAMP_SK' => SORT_DESC])\n                        ->one();\n\n            if ($data) {\n                $sk_last = $data[\"NOMOR_SK\"];\n            }\n        }\n\n        return $sk_last;\n    }\n}\n\n\n--- File: 17 # components/NpakHelper.php ---\n<?php\n\nnamespace app\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\NotarisNpak;\nuse app\\models\\Setting;\n\nclass NpakHelper extends Component\n{\n\n    public static function checkNotarisNpak($idNotaris)\n    {\n        $flagPengecekanNpak = Setting::getValue('pengecekan_npak');\n        if ($flagPengecekanNpak == 0) {\n            return true;\n        }\n\n        return self::isNpak($idNotaris);\n    }\n\n    public static function isNpak($idNotaris) {\n        $notarisNpak = NotarisNpak::checkNotarisNPAK($idNotaris);\n        return $notarisNpak ? true : false;\n    }\n\n    public static function isPengecekanNpak() {\n        $flagPengecekanNpak = Setting::getValue('pengecekan_npak');\n        return $flagPengecekanNpak == 0 ? false : true;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 4: Notaris Integration\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Master Transaction Management\n\". This is Chapter 5.\n\nConcept Details:\n- Name: Master Transaction Management\n\n- Description:\nTracks the main cooperative records and their status (active, merged, dissolved).\nSimilar to a master directory that maintains the official status of all registered cooperatives.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n---\n# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 634 # models/MasterTransaction.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\KoperasiBlokir;\nuse yii\\data\\ActiveDataProvider;\nuse app\\models\\SK;\n\nclass MasterTransaction extends ActiveRecord\n{\n    public static function tableName()\n    {\n        return '{{%master_transaksi}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getTransaksiKoperasi()\n    {\n        return $this->hasOne(TransaksiKoperasi::className(), ['id' => 'id_transaksi']);\n    }\n\n    public function getListTransaksi()\n    {\n        return $this->hasMany(TransaksiKoperasi::className(), ['id_master' => 'id']);\n    }\n\n    public function getBlokir()\n    {\n        return $this->hasOne(KoperasiBlokir::className(), ['id' => 'id_master']);\n    }\n\n    public function getDataSK()\n    {\n        return $this->hasOne(SK::className(), ['id' => 'id_sk']);\n    }\n\n    public function getSurat()\n    {\n        return $this->hasOne(SK::className(), ['id' => 'id_sk']);\n    }\n\n    public static function getDaftarKoperasi($pid, $kid, $filter)\n    {\n\n        $where = [\n            'status' => 1,\n            'kop_master_transaksi.is_deleted' => 0\n        ];\n\n        if (!empty($pid)) {\n            $where['provinsi_id'] = $pid;\n        }\n\n        if (!empty($kid)) {\n            $where['kab_kota_id'] = $kid;\n        }\n\n        $query = self::find()->joinWith(['transaksiKoperasi'])->joinWith(['dataSK'])->where($where);\n\n        if (!empty($filter)) {\n\n            if (!empty($filter['nama_koperasi'])) {\n\n                $query->andFilterWhere(['like', 'nama_koperasi', $filter['nama_koperasi']]);\n            }\n\n            if (!empty($filter['TransaksiKoperasi']['jenis_koperasi'])) {\n\n                $query->andFilterWhere(['jenis_koperasi' => $filter['TransaksiKoperasi']['jenis_koperasi']]);\n            }\n\n            if (!empty($filter['TransaksiKoperasi']['kab_kota_id'])) {\n\n                $query->andFilterWhere(['like', 'nama_kabupaten', strtoupper($filter['TransaksiKoperasi']['kab_kota_id'])]);\n            }\n\n            if (!empty($filter['nama_notaris'])) {\n\n                $query->andFilterWhere(['like', 'nama_notaris', $filter['nama_notaris']]);\n            }\n\n            if (!empty($filter['nomor_transaksi'])) {\n\n                $query->andFilterWhere(['nomor_transaksi' => $filter['nomor_transaksi']]);\n            }\n\n            if (!empty($filter['no_sk_koperasi'])) {\n\n                $query->andFilterWhere(['kop_sk.no_sk_koperasi' => $filter['no_sk_koperasi']]);\n            }\n\n            if (!empty($filter['status_koperasi'])) {\n                if ($filter['status_koperasi'] == 1) {\n                    $query->andFilterWhere(['is_active' => 1])\n                        ->andFilterWhere(['is_gabung' => 0]);\n                } else if ($filter['status_koperasi'] == 2) {\n                    $query->andFilterWhere(['is_active' => 0])\n                        ->andFilterWhere(['is_gabung' => 0]);\n                } else if ($filter['status_koperasi'] == 3) {\n                    $query->andFilterWhere(['is_gabung' => 1]);\n                }\n            }\n        } else {\n            $query->orderBy(['nama_koperasi' => SORT_ASC]);\n        }\n        $query->orderBy(['nama_koperasi' => SORT_ASC]);\n\n        return $provider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 10,\n            ],\n        ]);\n    }\n\n    // public static function findExistTransactionWithSK($post)\n    // {\n    //     $return = [\n    //         'status' => false,\n    //         'data' => null,\n    //         'err' => [\n    //             'nik' => null,\n    //             'nama' => null,\n    //             'no_sk' => null,\n    //             'notaris' => null,\n    //         ],\n    //     ];\n\n    //     $flag_err = false;\n\n    //     if (!empty($post)) {\n\n    //         $post['nik'] = ltrim(rtrim($post['nik']));\n    //         $post['no_sk_koperasi'] = ltrim(rtrim($post['no_sk_koperasi']));\n    //         $post['full_nama'] = ltrim(rtrim($post['full_nama']));\n\n    //         $nik = $post['nik'];\n    //         $full_nama = $post['full_nama'];\n    //         $nama_notaris = $post['nama_notaris'];\n    //         $no_sk_koperasi = $post['no_sk_koperasi'];\n\n    //         $data = self::find()\n    //         ->joinWith(['transaksiKoperasi'])\n    //         ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n    //         ->limit(1)\n    //         ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n    //         ->where(['full_nama' => $full_nama, 'no_sk_koperasi' => $no_sk_koperasi])\n    //         ->andWhere(['is_finish' => 1])\n    //         // ->andWhere(['is_active' => 1])\n    //         ->one();\n\n    //         if (empty($data)) {\n\n    //             $data = self::find()\n    //             ->joinWith(['transaksiKoperasi'])\n    //             ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n    //             ->limit(1)\n    //             ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n    //             ->where(['nik' => $post['nik'], 'full_nama' => $post['full_nama']])\n    //             ->andWhere(['is_finish' => 1])\n    //             ->one();\n\n    //             if (empty($data)) {\n    //                 $return['err']['no_sk'] = \"Nomor SK yang anda masukan tidak sesuai\";\n    //                 $flag_err = true;\n    //             }\n    //         }\n\n    //         if (!empty($data)) {\n    //             $transKop = $data->transaksiKoperasi;\n\n    //             if ($transKop->nik != $nik) {\n    //                 $return['err']['nik'] = \"NIK yang anda masukan tidak sesuai\";\n    //                 $flag_err = true;\n    //             }\n\n    //             if ($data->dataSK->no_sk_koperasi != $no_sk_koperasi) {\n    //                 $return['err']['no_sk'] = \"Nomor SK yang anda masukan tidak sesuai\";\n    //                 $flag_err = true;\n    //             }\n\n    //             if ($transKop->is_migrasi != 1) {\n    //                 if (empty($nama_notaris)) {\n    //                     $return['err']['notaris'] = \"Notaris tidak boleh kosong\";\n    //                     $flag_err = true;\n    //                 } else if ($transKop->nama_notaris != $nama_notaris) {\n    //                     $return['err']['notaris'] = \"Notaris yang anda masukan tidak sesuai\";\n    //                     $flag_err = true;\n    //                 }\n    //             }\n\n    //             if (!$flag_err) {\n    //                 $return['status'] = true;\n    //                 $return['data'] = $data;\n    //             }\n    //         }\n    //     }\n\n    //     return $return;\n    // }\n    public static function findExistTransactionWithSK($post)\n    {\n        $return = [\n            'status' => false,\n            'data' => null,\n            'err' => [\n                'nik' => null,\n                'nama' => null,\n                'no_sk' => null,\n                'notaris' => null,\n            ],\n        ];\n\n        $flag_err = false;\n\n        if (!empty($post)) {\n\n            $post['nik'] = ltrim(rtrim($post['nik']));\n            $post['no_sk_koperasi'] = ltrim(rtrim($post['no_sk_koperasi']));\n            $post['full_nama'] = ltrim(rtrim($post['full_nama']));\n\n            $nik = $post['nik'];\n            $full_nama = $post['full_nama'];\n            $nama_notaris = $post['nama_notaris'];\n            $id_notaris = $post['ahu_notaris_id'];\n            unset($post['nama_notaris']);\n            unset($post['ahu_notaris_id']);\n            $no_sk_koperasi = $post['no_sk_koperasi'];\n\n            $data = null;\n            $data1 = self::find()\n                ->joinWith(['transaksiKoperasi'])\n                ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['full_nama' => $full_nama, 'no_sk_koperasi' => $no_sk_koperasi])\n                ->andWhere(['is_finish' => 1])\n                ->one();\n\n            $data2 = self::find()\n                ->joinWith(['transaksiKoperasi'])\n                ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['nik' => $nik, 'full_nama' => $full_nama])\n                ->andWhere(['is_finish' => 1])\n                ->one();\n\n            $data3 = self::find()\n                ->joinWith(['transaksiKoperasi'])\n                ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['nik' => $nik, 'no_sk_koperasi' => $no_sk_koperasi])\n                ->andWhere(['is_finish' => 1])\n                ->one();\n\n            $trans_last_notaris = TransaksiKoperasi::find()\n                ->limit(1)\n                ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                ->where(['nik' => $nik])\n                ->andWhere(['is_finish' => 1])\n                ->andWhere('ahu_notaris_id IS NOT NULL')\n                ->one();\n\n            if (!empty($data1)) {\n                $transKop = $data1->transaksiKoperasi;\n                //check apakah di master benar benar transaksi terakhir\n                $dataLastTrans = TransaksiKoperasi::find()\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where(['nik' => $nik])\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                if (!empty($dataLastTrans) && $dataLastTrans->id != $transKop->id) {\n                    $transKop = $dataLastTrans;\n                    $data1->id_transaksi = $dataLastTrans->id;\n                }\n                if (empty($trans_last_notaris)) {\n                    $trans_last_notaris = $transKop;\n                }\n\n                if ($transKop->nik != $nik) {\n                    $return['err']['nik'] = \"NIK yang anda masukan tidak sesuai\";\n                    $flag_err = true;\n                }\n\n                if ($transKop->is_migrasi != 1) {\n                    if ($id_notaris) {\n                        if ($trans_last_notaris->ahu_notaris_id != $id_notaris) {\n                            $return['err']['notaris'] = \"Nama Notaris yang anda masukan tidak sesuai\";\n                            $flag_err = true;\n                            // return false;\n                        }\n                    }\n                }\n\n                if (!$flag_err) {\n                    $data = $data1;\n                }\n            } else if (!empty($data2)) {\n                $transKop = $data2->transaksiKoperasi;\n                //check apakah di master benar benar transaksi terakhir\n                $dataLastTrans = TransaksiKoperasi::find()\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where(['nik' => $nik])\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                if (!empty($dataLastTrans) && $dataLastTrans->id != $transKop->id) {\n                    $transKop = $dataLastTrans;\n                    $data2->id_transaksi = $dataLastTrans->id;\n                }\n                if (empty($trans_last_notaris)) {\n                    $trans_last_notaris = $transKop;\n                }\n\n                if ($data2->dataSK->no_sk_koperasi != $no_sk_koperasi) {\n                    $return['err']['no_sk'] = \"Nomor SK yang anda masukan tidak sesuai\";\n                    $flag_err = true;\n                }\n\n                if ($transKop->is_migrasi != 1) {\n                    if (empty($nama_notaris)) {\n                        $return['err']['notaris'] = \"Notaris tidak boleh kosong\";\n                        $flag_err = true;\n                    } else if ($trans_last_notaris->nama_notaris != $nama_notaris) {\n                        $return['err']['notaris'] = \"Notaris yang anda masukan tidak sesuai\";\n                        $flag_err = true;\n                    }\n                }\n\n                if (!$flag_err) {\n                    $data = $data2;\n                }\n            } else if (!empty($data3)) {\n                $transKop = $data3->transaksiKoperasi;\n                //check apakah di master benar benar transaksi terakhir\n                $dataLastTrans = TransaksiKoperasi::find()\n                    ->limit(1)\n                    ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n                    ->where(['nik' => $nik])\n                    ->andWhere(['is_finish' => 1])\n                    ->one();\n\n                if (!empty($dataLastTrans) && $dataLastTrans->id != $transKop->id) {\n                    $transKop = $dataLastTrans;\n                    $data3->id_transaksi = $dataLastTrans->id;\n                }\n                if (empty($trans_last_notaris)) {\n                    $trans_last_notaris = $transKop;\n                }\n\n                if ($transKop->full_nama != $full_nama) {\n                    $return['err']['nama'] = \"Nama Koperasi yang anda masukan tidak sesuai\";\n                    $flag_err = true;\n                }\n\n                if ($transKop->is_migrasi != 1) {\n                    if (empty($nama_notaris)) {\n                        $return['err']['notaris'] = \"Notaris tidak boleh kosong\";\n                        $flag_err = true;\n                    } else if ($trans_last_notaris->nama_notaris != $nama_notaris) {\n                        $return['err']['notaris'] = \"Notaris yang anda masukan tidak sesuai\";\n                        $flag_err = true;\n                    }\n                }\n\n                if (!$flag_err) {\n                    $data = $data3;\n                }\n            } else {\n                $return['err']['no_sk'] = \"Data yang anda masukan tidak sesuai\";\n                $flag_err = true;\n            }\n\n            if (!$flag_err && $data) {\n                $return['status'] = true;\n                $return['data'] = $data;\n            }\n        }\n\n        return $return;\n    }\n\n    public static function findExistTransactionWithDoc($post, $state)\n    {\n\n        unset($post['no_sk_koperasi']);\n        unset($post['nama_notaris']);\n\n        $post['nik'] = ltrim(rtrim($post['nik']));\n        $post['full_nama'] = ltrim(rtrim($post['full_nama']));\n\n        $data = self::find()\n            ->joinWith(['transaksiKoperasi'])\n            ->leftJoin('kop_t_pendirian_dokumen pd', 'pd.transaction_id = kop_t_koperasi.id')\n            ->where($post)\n            ->andWhere(['is_finish' => $state])\n            // ->andWhere(['is_active' => 1])\n            ->one();\n\n        if (!empty($data)) {\n\n            if (!empty($data['dokumenKoperasi'])) {\n\n                return $data;\n            } else {\n\n                return -2;\n            }\n        } else {\n\n            return -1;\n        }\n    }\n\n    // TODO : validate only last transaction, validate notaris non npak must match notaris id\n    public static function findExistTransactionForPerbaikan(\n        $no_sk_koperasi,\n        $tanggal_sk_koperasi,\n        $full_nama_koperasi,\n        $id_notaris\n    ) {\n        $result = [\n            'status' => false,\n            'data' => null,\n            'err' => [\n                'nama' => null,\n                'no_sk' => null,\n                'notaris' => null,\n                'is_perbaikan' => null,\n            ],\n        ];\n\n        $data = null;\n        $masterTransaksi = self::find()\n            ->joinWith(['transaksiKoperasi'])\n            ->leftJoin('kop_sk sk', 'sk.t_koperasi_id = kop_t_koperasi.id')\n            ->limit(1)\n            ->orderBy(['kop_t_koperasi.created_date' => SORT_DESC])\n            ->where(['full_nama' => $full_nama_koperasi])\n            ->andWhere(['ahu_notaris_id' => $id_notaris])\n            ->andWhere(['is_finish' => 1])\n            ->one();\n\n        // echo '<pre>';\n        // print_r($masterTransaksi->transaksiKoperasi->attributes);\n        // echo '</pre>';\n        // exit;\n\n        if (empty($masterTransaksi)) {\n            $result['err']['nama'] = \"Data Koperasi tidak ditemukan\";\n            return $result;\n        }\n\n        $transaksiKoperasi = $masterTransaksi['transaksiKoperasi'] ?? null;\n\n        if ($transaksiKoperasi === null) {\n            $result['err']['nama'] = \"Transaksi Koperasi tidak ditemukan\";\n            return $result;\n        }\n\n        if (!empty($transaksiKoperasi->is_perbaikan)) {\n            $result['err']['nama'] = \"Data Koperasi sedang dalam perbaikan\";\n            return $result;\n        }\n\n        // tanggal dataSk created date between 00.00.0000 and 23.59.59\n        $tanggalSk = date('Y-m-d', strtotime($tanggal_sk_koperasi));\n        $startDate = $tanggalSk . ' 00:00:00';\n        $endDate = $tanggalSk . ' 23:59:59';\n\n        // var_dump($startDate, $endDate);\n        // exit;\n\n        $transaksiKoperasi = TransaksiKoperasi::find()\n            ->joinWith(['dataSK'])\n            ->where(['no_sk_koperasi' => $no_sk_koperasi])\n            ->andWhere(['between', 'kop_sk.created_date', $startDate, $endDate])\n            ->andWhere(['id_master' => $masterTransaksi->id])\n            ->andWhere(['is_finish' => 1])\n            ->one();\n\n        if (empty($transaksiKoperasi)) {\n            $result['err']['no_sk'] = \"Nomor SK Koperasi atau Tanggal SK Koperasi tidak sesuai\";\n            return $result;\n        }\n\n        $data = $transaksiKoperasi;\n        $result['status'] = true;\n        $result['data'] = $data;\n        return $result;\n    }\n}\n\n\n--- File: 617 # models/SK.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass SK extends ActiveRecord \n{\n    const SK_PENDIRIAN = 1;\n    const SK_PERUBAHAN = 5;\n    const SP_PERUBAHAN = 7;\n    const SK_PEMBUBARAN = 6;\n\n    const SK_PENDIRIAN_DESC = 'sk_pendirian';\n    const SK_PERUBAHAN_DESC = 'sk_perubahan';\n    const SP_PERUBAHAN_DESC = 'sp_perubahan';\n    const SK_PEMBUBARAN_DESC = 'sk_pembubaran';\n    \n    public static function tableName()\n    {\n        return '{{%sk}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getDataTransaksi()\n    {\n        return $this->hasOne(TransaksiKoperasi::className(), ['id' => 't_koperasi_id']);\n    }\n}\n\n--- File: 680 # modules/Api/components/SKHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse Yii;\nuse app\\models\\SK;\nuse yii\\base\\Component;\nuse app\\models\\PesanNama;\nuse app\\models\\BHPenggabungan;\nuse app\\models\\MasterTransaction;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\ChecklistPerubahan;\nuse app\\components\\helper\\Numbering;\nuse app\\components\\helper\\Disclaimer as DisclaimerHelper;\n\nclass SKHelper extends Component {\n\n    public static function pushPerubahan($id) {\n        \n        $transaksi = TransaksiKoperasi::find()->where(['id' => $id])->one();\n\n        if ( $transaksi->is_finish == -1 ) {\n\n            $transaksi->is_finish = 0;\n\n            DisclaimerHelper::generateValues('persetujuan', 'persetujuan_perubahan', $transaksi->id, $transaksi->t_pesan_nama_id)->save();\n        }\n        else {\n            $transaksi->is_finish = 1;\n\n            $pnID = [4]; // group of ids which needs to change pesan nama table\n            $bhPenggabungan = [2];\n            $group = [];\n            $idMaster = $transaksi->id_master;\n            $raw = ChecklistPerubahan::find()->joinWith(['masterPerubahan'])->where(['t_koperasi_id' => $id])->all();\n\n            if ( empty( $raw ) ) {\n\n            \techo 0; //data not found\n            \texit();\n            }\n\n            $changePesanNama = false;\n            $changePenggabungan = false;\n            foreach ($raw as $checks) {\n\n            \tif ( empty( $group ) OR ! in_array($checks->masterPerubahan->groups, $group) ) {\n\n\t            \tarray_push($group, $checks->masterPerubahan->groups);\n            \t}\n            \t\n            \tif ( in_array($checks->masterPerubahan->id, $pnID) ) {\n\n            \t\t$changePesanNama = true;\n            \t}\n            \t\n            \tif ( in_array($checks->masterPerubahan->id, $bhPenggabungan) ) {\n\n            \t\t$changePenggabungan = true;\n            \t}\n            }\n\n            $SKins = self::generateSurat( $group, $transaksi );\n\n            // change pesan nama status if master perubahan = 4 / Nama Koperasi\n            if ( $changePesanNama ) {\n            \t// var_dump('pesan');\n            \tself::changePesanNama( $transaksi, $idMaster );\n            }\n\n            // change is gabung if perubahan master id = 2 / penggabungan\n            if ( $changePenggabungan ) {\n            \t// var_dump( 'gabung' );\n            \tself::changeMasterTransactionIsGabung( $id );\n            }\n\n            // exit();\n\n            MasterTransaction::updateAll(['id_transaksi' => $id, 'id_sk' => $SKins->id], ['id' => $idMaster]);\n        }\n\n        $transaksi->tanggal_confirm = date('Y-m-d H:i:s');\n        $transaksi->tanggal_jangka_waktu = ! empty( $transaksi->jumlah_jangka_waktu ) ? date(\"Y-m-d\", strtotime($transaksi->tanggal_jangka_waktu . \" + \".$transaksi->jumlah_jangka_waktu.\" year\")) : $transaksi->tanggal_jangka_waktu;\n\n        return $transaksi->save(true, array('is_finish', 'tanggal_confirm', 'tanggal_jangka_waktu'));\n    }\n\n    public static function generateSurat( $group, $transaksi ) {\n\n        if ( empty( SK::find()->where(['t_koperasi_id' => $transaksi->id])->one() ) ) {\n\n\t        $SKins = new SK();\n\t        if ( count($group) < 2 ) {\n\n\t            $SKins->t_koperasi_id = $transaksi->id;\n\t            $SKins->no_sk_koperasi = $group[0] == 1 ? Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPerubahan() : self::getLastSK( $transaksi->id_master );\n\t            $SKins->no_sp_koperasi = $group[0] == 2 ? Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPelaporan() : NULL;\n\t        }\n\t        else {\n\n\t            $SKins->t_koperasi_id = $transaksi->id;\n\t            $SKins->no_sk_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPerubahan();\n\t            $SKins->no_sp_koperasi = Numbering::getCounter(['id' => SK::SK_PENDIRIAN, 'description' => SK::SK_PENDIRIAN_DESC], 7)->generateSKPelaporan();\n\t        }\n        }\n        else {\n\n        \t$SKins = SK::find()->where(['t_koperasi_id' => $transaksi->id])->one();\n        }\n\n        $SKins->save();\n\n        return $SKins;\n    }\n\n    public static function changePesanNama( $transaksi, $idMaster ) {\n\n    \t// change status of new name\n        PesanNama::updateAll(['status' => 1], ['id' => $transaksi->t_pesan_nama_id]);\n\n        // change is delete on before latest transaction\n    \t$raw = TransaksiKoperasi::findLastTransaction( TransaksiKoperasi::BEFORE_LATEST, $idMaster );\n    \t$lastID = $raw['id'];\n    \t$idPesanNama = $raw['t_pesan_nama_id'];\n\n        PesanNama::updateAll(['is_deleted' => 1], ['id' => $idPesanNama]);\n    }\n\n    public static function changeMasterTransactionIsGabung( $id ) {\n\n    \t// code goes here\n    \t$raw = BHPenggabungan::find()->where(['t_koperasi_id' => $id])->all();\n\n    \t// update master\n    \tforeach ($raw as $key) {\n\n\t\t\tMasterTransaction::updateAll(['is_gabung' => 1], ['id' => $key->d_koperasi_id]);\n    \t}\n    }\n    \n    public static function getLastSK( $idMaster ) {\n\n    \t$raw = MasterTransaction::find()->joinWith(['surat'])->where(['kop_master_transaksi.id' => $idMaster])->one();\n\n    \treturn $raw->surat->no_sk_koperasi;\n    }\n}\n?>\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 5: Master Transaction Management\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 5: Master Transaction Management\n\nWelcome back! In the [previous chapter](04_notaris_integration_.md), we learned how notaries provide legal certification for cooperatives. But here's an important question - how does the system keep track of all cooperatives and their current status? Is a cooperative still active? Has it merged with another? Has it been dissolved? That's where **Master Transaction Management** comes in!\n\n## Why Do We Need Master Transaction Management?\n\nImagine running a school directory that lists all schools in your city. Some schools are actively operating, some have merged with other schools, and some have closed down. You need a master list that shows the current status of each school at a glance, right?\n\nThe **Master Transaction Management** system is exactly that - a master directory for all cooperatives. It's like a living phonebook that not only lists all cooperatives but also knows whether they're still \"picking up the phone\" (active), have \"changed their number\" (merged), or have \"disconnected their line\" (dissolved).\n\n## Your First Use Case: Tracking Cooperative Lifecycle\n\nLet's say the government wants to know:\n1. How many active cooperatives exist in Jakarta?\n2. Which cooperatives have merged together?\n3. Which cooperatives have been dissolved?\n4. What's the complete history of \"Koperasi Maju Bersama\"?\n\nThe Master Transaction system answers all these questions instantly!\n\n## Key Concepts Made Simple\n\n### 1. Master Record\n\nThink of a master record as a cooperative's permanent file folder:\n\n```php\n// Each cooperative has one master record\n$master = MasterTransaction::findOne($cooperativeId);\necho $master->status; // 1 = Active\n```\n\nThis folder contains everything about the cooperative's current state.\n\n### 2. Cooperative Status Types\n\nEvery cooperative can be in one of three states:\n\n```php\n// Three possible states\n$ACTIVE = 1;     // Operating normally\n$MERGED = 2;     // Joined with another cooperative  \n$DISSOLVED = 0;  // No longer operating\n```\n\nIt's like a traffic light - green (active), yellow (merged), or red (dissolved)!\n\n### 3. Transaction History\n\nThe master record links to all transactions:\n\n```php\n// Get all transactions for a cooperative\n$history = $master->getListTransaksi();\necho count($history); // Shows total transactions\n```\n\nThis gives you the complete story of the cooperative's journey.\n\n## Checking a Cooperative's Status\n\nLet's find out the current status of a cooperative:\n\n### Step 1: Find the Master Record\n\n```php\n// Look up the cooperative\n$master = MasterTransaction::find()\n    ->where(['id' => 123])\n    ->one();\n```\n\nThis retrieves the master record for cooperative #123.\n\n### Step 2: Check Current Status\n\n```php\n// Check if cooperative is active\nif ($master->is_active == 1) {\n    echo \"Cooperative is operating!\";\n}\n```\n\nThe `is_active` field tells us if it's currently operating.\n\n### Step 3: Check Special Conditions\n\n```php\n// Check if it has merged\nif ($master->is_gabung == 1) {\n    echo \"This cooperative has merged!\";\n}\n```\n\nThe `is_gabung` flag indicates a merger has occurred.\n\n## How Master Transaction Works\n\nHere's what happens when tracking cooperative status:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant M as Master\n    participant T as Transaction\n    participant S as Status\n    \n    C->>T: New transaction occurs\n    T->>M: Update master record\n    M->>S: Change status if needed\n    S->>C: Status updated!\n```\n\nThe master record acts as the central truth about each cooperative's current state!\n\n### Creating a Master Record\n\nWhen a cooperative is first established:\n\n```php\n// New cooperative gets a master record\n$master = new MasterTransaction();\n$master->id_transaksi = $establishmentId;\n$master->status = 1; // Start as active\n$master->save();\n```\n\nThis creates the permanent tracking record.\n\n### Updating Status\n\nWhen major events occur, the status changes:\n\n```php\n// Cooperative merges with another\n$master->is_gabung = 1;\n$master->is_active = 0; // No longer independently active\n$master->save();\n```\n\nThe master record always reflects the current reality.\n\n## Understanding the Database Structure\n\nThe master transaction table (`master_transaksi`) stores:\n\n```php\n// Master record fields\n$masterRecord = [\n    'id' => 456,\n    'id_transaksi' => 123,  // Latest transaction\n    'status' => 1,          // Current status\n    'is_gabung' => 0,       // Merger flag\n    'is_deleted' => 0       // Soft delete flag\n];\n```\n\nEach field tracks a different aspect of the cooperative's state.\n\n## Real Implementation: The MasterTransaction Model\n\nThe main model (in `models/MasterTransaction.php`) manages all master operations:\n\n```php\nclass MasterTransaction extends ActiveRecord {\n    // Link to current transaction\n    public function getTransaksiKoperasi() {\n        return $this->hasOne(TransaksiKoperasi::className(), \n            ['id' => 'id_transaksi']);\n    }\n}\n```\n\nThis connects the master record to its transactions.\n\n## Finding Cooperatives\n\nThe system provides powerful search capabilities:\n\n### Search Active Cooperatives in a Region\n\n```php\n// Find active cooperatives in Jakarta\n$activeInJakarta = MasterTransaction::getDaftarKoperasi(\n    31,    // Jakarta province ID\n    null,  // Any city\n    ['status_koperasi' => 1] // Active only\n);\n```\n\nThis returns all operating cooperatives in Jakarta!\n\n### Track Cooperative History\n\n```php\n// Get all transactions for a master\n$transactions = $master->getListTransaksi();\nforeach ($transactions as $trans) {\n    echo $trans->jenis_transaksi; // Type of change\n}\n```\n\nThis shows every change the cooperative has undergone.\n\n## Managing Mergers\n\nWhen cooperatives merge, the system tracks it:\n\n```php\n// Mark cooperatives as merged\nSKHelper::changeMasterTransactionIsGabung($transactionId);\n// Updates all involved cooperatives\n```\n\nThe helper function handles the complex merger logic!\n\n## Integration with Other Systems\n\nThe Master Transaction connects everything:\n- Links to [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) for all events\n- References [Data Anggota](03_data_anggota__member_data__.md) through transactions\n- Uses [Notaris Integration](04_notaris_integration_.md) for legal validation\n\nIt's the backbone that holds all cooperative data together!\n\n## What You've Learned\n\nExcellent work! You now understand how Master Transaction Management keeps track of every cooperative's current status and history. The system:\n\n- Maintains a master record for each cooperative\n- Tracks whether cooperatives are active, merged, or dissolved\n- Links all transactions to create a complete history\n- Provides powerful search and filtering capabilities\n\nThink of it as the central nervous system of the cooperative system - it knows the state of every cooperative at any moment and remembers everything that has happened!\n\n## Next Steps\n\nNow that you understand how cooperatives are tracked at the master level, let's explore what happens when data needs to be corrected in [Perbaikan Data (Data Correction)](06_perbaikan_data__data_correction__.md). Even the best systems need a way to fix mistakes!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Perbaikan Data (Data Correction)\n\". This is Chapter 6.\n\nConcept Details:\n- Name: Perbaikan Data (Data Correction)\n\n- Description:\nHandles requests to correct cooperative data after establishment, with verification workflow.\nSimilar to an edit request system where changes must be reviewed and approved before being applied.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n---\n# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!\n---\n# Chapter 5: Master Transaction Management\n\nWelcome back! In the [previous chapter](04_notaris_integration_.md), we learned how notaries provide legal certification for cooperatives. But here's an important question - how does the system keep track of all cooperatives and their current status? Is a cooperative still active? Has it merged with another? Has it been dissolved? That's where **Master Transaction Management** comes in!\n\n## Why Do We Need Master Transaction Management?\n\nImagine running a school directory that lists all schools in your city. Some schools are actively operating, some have merged with other schools, and some have closed down. You need a master list that shows the current status of each school at a glance, right?\n\nThe **Master Transaction Management** system is exactly that - a master directory for all cooperatives. It's like a living phonebook that not only lists all cooperatives but also knows whether they're still \"picking up the phone\" (active), have \"changed their number\" (merged), or have \"disconnected their line\" (dissolved).\n\n## Your First Use Case: Tracking Cooperative Lifecycle\n\nLet's say the government wants to know:\n1. How many active cooperatives exist in Jakarta?\n2. Which cooperatives have merged together?\n3. Which cooperatives have been dissolved?\n4. What's the complete history of \"Koperasi Maju Bersama\"?\n\nThe Master Transaction system answers all these questions instantly!\n\n## Key Concepts Made Simple\n\n### 1. Master Record\n\nThink of a master record as a cooperative's permanent file folder:\n\n```php\n// Each cooperative has one master record\n$master = MasterTransaction::findOne($cooperativeId);\necho $master->status; // 1 = Active\n```\n\nThis folder contains everything about the cooperative's current state.\n\n### 2. Cooperative Status Types\n\nEvery cooperative can be in one of three states:\n\n```php\n// Three possible states\n$ACTIVE = 1;     // Operating normally\n$MERGED = 2;     // Joined with another cooperative  \n$DISSOLVED = 0;  // No longer operating\n```\n\nIt's like a traffic light - green (active), yellow (merged), or red (dissolved)!\n\n### 3. Transaction History\n\nThe master record links to all transactions:\n\n```php\n// Get all transactions for a cooperative\n$history = $master->getListTransaksi();\necho count($history); // Shows total transactions\n```\n\nThis gives you the complete story of the cooperative's journey.\n\n## Checking a Cooperative's Status\n\nLet's find out the current status of a cooperative:\n\n### Step 1: Find the Master Record\n\n```php\n// Look up the cooperative\n$master = MasterTransaction::find()\n    ->where(['id' => 123])\n    ->one();\n```\n\nThis retrieves the master record for cooperative #123.\n\n### Step 2: Check Current Status\n\n```php\n// Check if cooperative is active\nif ($master->is_active == 1) {\n    echo \"Cooperative is operating!\";\n}\n```\n\nThe `is_active` field tells us if it's currently operating.\n\n### Step 3: Check Special Conditions\n\n```php\n// Check if it has merged\nif ($master->is_gabung == 1) {\n    echo \"This cooperative has merged!\";\n}\n```\n\nThe `is_gabung` flag indicates a merger has occurred.\n\n## How Master Transaction Works\n\nHere's what happens when tracking cooperative status:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant M as Master\n    participant T as Transaction\n    participant S as Status\n    \n    C->>T: New transaction occurs\n    T->>M: Update master record\n    M->>S: Change status if needed\n    S->>C: Status updated!\n```\n\nThe master record acts as the central truth about each cooperative's current state!\n\n### Creating a Master Record\n\nWhen a cooperative is first established:\n\n```php\n// New cooperative gets a master record\n$master = new MasterTransaction();\n$master->id_transaksi = $establishmentId;\n$master->status = 1; // Start as active\n$master->save();\n```\n\nThis creates the permanent tracking record.\n\n### Updating Status\n\nWhen major events occur, the status changes:\n\n```php\n// Cooperative merges with another\n$master->is_gabung = 1;\n$master->is_active = 0; // No longer independently active\n$master->save();\n```\n\nThe master record always reflects the current reality.\n\n## Understanding the Database Structure\n\nThe master transaction table (`master_transaksi`) stores:\n\n```php\n// Master record fields\n$masterRecord = [\n    'id' => 456,\n    'id_transaksi' => 123,  // Latest transaction\n    'status' => 1,          // Current status\n    'is_gabung' => 0,       // Merger flag\n    'is_deleted' => 0       // Soft delete flag\n];\n```\n\nEach field tracks a different aspect of the cooperative's state.\n\n## Real Implementation: The MasterTransaction Model\n\nThe main model (in `models/MasterTransaction.php`) manages all master operations:\n\n```php\nclass MasterTransaction extends ActiveRecord {\n    // Link to current transaction\n    public function getTransaksiKoperasi() {\n        return $this->hasOne(TransaksiKoperasi::className(), \n            ['id' => 'id_transaksi']);\n    }\n}\n```\n\nThis connects the master record to its transactions.\n\n## Finding Cooperatives\n\nThe system provides powerful search capabilities:\n\n### Search Active Cooperatives in a Region\n\n```php\n// Find active cooperatives in Jakarta\n$activeInJakarta = MasterTransaction::getDaftarKoperasi(\n    31,    // Jakarta province ID\n    null,  // Any city\n    ['status_koperasi' => 1] // Active only\n);\n```\n\nThis returns all operating cooperatives in Jakarta!\n\n### Track Cooperative History\n\n```php\n// Get all transactions for a master\n$transactions = $master->getListTransaksi();\nforeach ($transactions as $trans) {\n    echo $trans->jenis_transaksi; // Type of change\n}\n```\n\nThis shows every change the cooperative has undergone.\n\n## Managing Mergers\n\nWhen cooperatives merge, the system tracks it:\n\n```php\n// Mark cooperatives as merged\nSKHelper::changeMasterTransactionIsGabung($transactionId);\n// Updates all involved cooperatives\n```\n\nThe helper function handles the complex merger logic!\n\n## Integration with Other Systems\n\nThe Master Transaction connects everything:\n- Links to [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) for all events\n- References [Data Anggota](03_data_anggota__member_data__.md) through transactions\n- Uses [Notaris Integration](04_notaris_integration_.md) for legal validation\n\nIt's the backbone that holds all cooperative data together!\n\n## What You've Learned\n\nExcellent work! You now understand how Master Transaction Management keeps track of every cooperative's current status and history. The system:\n\n- Maintains a master record for each cooperative\n- Tracks whether cooperatives are active, merged, or dissolved\n- Links all transactions to create a complete history\n- Provides powerful search and filtering capabilities\n\nThink of it as the central nervous system of the cooperative system - it knows the state of every cooperative at any moment and remembers everything that has happened!\n\n## Next Steps\n\nNow that you understand how cooperatives are tracked at the master level, let's explore what happens when data needs to be corrected in [Perbaikan Data (Data Correction)](06_perbaikan_data__data_correction__.md). Even the best systems need a way to fix mistakes!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 638 # models/VerifikasiPerbaikan.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%v_perbaikan}}\" (maps to `kop_v_perbaikan`).\n *\n * @property int $id\n * @property int $t_perbaikan_id\n * @property string $tahap VERIFIKATOR_1|VERIFIKATOR_2\n * @property string $status DITERIMA|DITOLAK\n * @property string $alasan\n * @property string|null $created_by\n * @property string $created_date\n * @property string|null $updated_by\n * @property string|null $updated_date\n *\n * @property TransaksiPerbaikan $transaksiPerbaikan\n */\nclass VerifikasiPerbaikan extends \\yii\\db\\ActiveRecord\n{\n    // Tahap verifikasi\n    const TAHAP_VERIFIKATOR_1 = 'VERIFIKATOR_1';\n    const TAHAP_VERIFIKATOR_2 = 'VERIFIKATOR_2';\n\n    // Status verifikasi\n    const STATUS_DITERIMA = 'DITERIMA';\n    const STATUS_DITOLAK  = 'DITOLAK';\n\n    public static function tableName()\n    {\n        // With tablePrefix configured as 'kop_' this resolves to `kop_v_perbaikan`\n        return '{{%v_perbaikan}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function rules()\n    {\n        return [\n            [['t_perbaikan_id', 'tahap', 'status', 'alasan'], 'required'],\n            [['t_perbaikan_id'], 'integer'],\n            [['alasan'], 'string'],\n            [['created_date', 'updated_date'], 'safe'],\n            [['created_by', 'updated_by'], 'string', 'max' => 36],\n            ['tahap', 'in', 'range' => [self::TAHAP_VERIFIKATOR_1, self::TAHAP_VERIFIKATOR_2]],\n            ['status', 'in', 'range' => [self::STATUS_DITERIMA, self::STATUS_DITOLAK]],\n            [\n                't_perbaikan_id',\n                'exist',\n                'targetClass' => TransaksiPerbaikan::class,\n                'targetAttribute' => ['t_perbaikan_id' => 'id']\n            ],\n        ];\n    }\n\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            't_perbaikan_id' => 'Transaksi Perbaikan',\n            'tahap' => 'Tahap',\n            'status' => 'Status',\n            'alasan' => 'Alasan',\n            'created_by' => 'Dibuat Oleh',\n            'created_date' => 'Tanggal Buat',\n            'updated_by' => 'Diubah Oleh',\n            'updated_date' => 'Tanggal Ubah',\n        ];\n    }\n\n    public function getTransaksiPerbaikan()\n    {\n        return $this->hasOne(TransaksiPerbaikan::class, ['id' => 't_perbaikan_id']);\n    }\n}\n\n\n\n--- File: 637 # models/TransaksiPerbaikan.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n\n/**\n * This is the model class for table \"{{%t_perbaikan}}\".\n *\n * @property int $id\n * @property int $t_koperasi_id\n * @property string $file_surat_permohonan\n * @property string $file_surat_pernyataan\n * @property string $file_surat_keterangan_domisili\n * @property string $file_lain_lain\n * @property string $data_diperbaiki_list\n * @property string $data_koperasi_list\n * @property string $status_transaksi_perbaikan\n * @property string $is_deleted 0:Tidak,1:Ya\n * @property string $created_by\n * @property string $created_date\n * @property string $updated_by\n * @property string $updated_date\n * @property string $deleted_by\n * @property string $deleted_date\n */\nclass TransaksiPerbaikan extends \\yii\\db\\ActiveRecord\n{\n    const STATUS_VERIFIKATOR_1_TUNGGU    = 'verifikator_1_tunggu';\n    const STATUS_VERIFIKATOR_1_TOLAK     = 'verifikator_1_tolak';\n    const STATUS_VERIFIKATOR_1_REVISI    = 'verifikator_1_revisi';\n    const STATUS_VERIFIKATOR_2_TUNGGU    = 'verifikator_2_tunggu';\n    const STATUS_PERMOHONAN_DITERIMA     = 'permohonan_diterima';\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%t_perbaikan}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['t_koperasi_id'], 'required'],\n            // Biarkan DB default atau proses bisnis menetapkan status awal\n            [['t_koperasi_id'], 'integer'],\n            [['created_date', 'updated_date', 'deleted_date'], 'safe'],\n            [['file_surat_permohonan', 'data_diperbaiki_list', 'data_koperasi_list', 'file_surat_pernyataan', 'file_surat_keterangan_domisili', 'file_lain_lain'], 'string'],\n            [['status_transaksi_perbaikan'], 'in', 'range' => [\n                'verifikator_1_tunggu',\n                'verifikator_1_tolak',\n                'verifikator_1_revisi',\n                'verifikator_2_tunggu',\n                'permohonan_diterima'\n            ]],\n            [['is_deleted'], 'in', 'range' => ['0', '1']],\n            [['created_by', 'updated_by', 'deleted_by'], 'string', 'max' => 36],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            't_koperasi_id' => 'ID Transaksi',\n            'file_surat_permohonan' => 'Surat Permohonan',\n            'file_surat_pernyataan' => 'Surat Pernyataan',\n            'file_surat_keterangan_domisili' => 'Surat Keterangan Domisili',\n            'file_lain_lain' => 'Lain-Lain',\n            'data_diperbaiki_list' => 'Data Diperbaiki List',\n            'data_koperasi_list' => 'Data Koperasi (Snapshot)',\n            'status_transaksi_perbaikan' => 'Status Transaksi Perbaikan',\n            'is_deleted' => 'Is Deleted',\n            'created_by' => 'Created By',\n            'created_date' => 'Created Date',\n            'updated_by' => 'Updated By',\n            'updated_date' => 'Updated Date',\n            'deleted_by' => 'Deleted By',\n            'deleted_date' => 'Deleted Date',\n        ];\n    }\n\n    public function getTransaksiKoperasi()\n    {\n        return $this->hasOne(TransaksiKoperasi::class, ['id' => 't_koperasi_id']);\n    }\n\n    public function getChecklistPerbaikan()\n    {\n        return $this->hasMany(ChecklistPerbaikan::class, ['t_perbaikan_id' => 'id']);\n    }\n\n    /**\n     * Peta label ramah pengguna untuk status transaksi perbaikan.\n     * Digunakan di tampilan/filter agar konsisten dengan nilai di DB.\n     * @return array\n     */\n    public static function getStatusMap(): array\n    {\n        return [\n            self::STATUS_VERIFIKATOR_1_TUNGGU    => 'Belum Diverifikasi',\n            self::STATUS_VERIFIKATOR_1_TOLAK     => 'Ditolak Verifikator 1',\n            self::STATUS_VERIFIKATOR_1_REVISI    => 'Direvisi Verifikator 1',\n            self::STATUS_VERIFIKATOR_2_TUNGGU    => 'Proses Verifikasi Tahap 2',\n            self::STATUS_PERMOHONAN_DITERIMA     => 'Verifikasi Selesai',\n        ];\n    }\n}\n\n\n--- File: 658 # models/forms/PerbaikanDataForm.php ---\n<?php\n\nnamespace app\\models\\forms;\n\nuse app\\components\\helper\\PerbaikanDataHelper;\nuse Mpdf\\Mpdf;\nuse Mpdf\\Output\\Destination;\nuse Yii;\nuse yii\\base\\Model;\nuse yii\\helpers\\FileHelper;\nuse yii\\web\\UploadedFile;\n\nclass PerbaikanDataForm extends Model\n{\n\n    const SCENARIO_DATA_KOPERASI = 'scenario_data_koperasi';\n    const SCENARIO_DATA_PEMOHON = 'scenario_data_pemohon';\n    const SCENARIO_SURAT_PERMOHONAN = 'scenario_surat_permohonan';\n    const SCENARIO_CHECKLIST = 'scenario_checklist';\n\n    const REMINDER_DOWNLOAD_MANUAL_BOOK = 'reminder_download_manual_book';\n    const REMINDER_BERHASIL = 'reminder_berhasil';\n\n    // Data Koperasi\n    public $full_nama_koperasi;\n    public $no_sk_koperasi;\n    public $tanggal_sk_koperasi;\n\n\n    // Data Pemohon\n    public $nama_pemohon;\n    public $nik_pemohon;\n    public $jabatan_pemohon;\n    public $email_pemohon;\n    public $no_telp_pemohon;\n\n\n    // Surat Permohonan\n    public $file_surat_permohonan;\n\n    // Checklist\n    public $checklist;\n    public $data_diperbaiki_list;\n\n    public $file_surat_pernyataan;\n    public $file_surat_keterangan_domisili;\n    public $file_lain_lain;\n\n    // Additional Data\n    public $t_koperasi_id;\n\n    public function beforeValidate()\n    {\n        if (!parent::beforeValidate()) {\n            return false;\n        }\n\n        if ($this->scenario == self::SCENARIO_SURAT_PERMOHONAN && !empty($this->file_surat_permohonan)) {\n            $this->file_surat_permohonan = PerbaikanDataHelper::uploadSuratPermohonan($this->file_surat_permohonan);\n        }\n\n        if ($this->scenario == self::SCENARIO_CHECKLIST) {\n            foreach (PerbaikanDataHelper::getFileAttributes($this) as $attribute) {\n                $uploadedFile = UploadedFile::getInstance($this, $attribute);\n                if ($uploadedFile !== null) {\n                    $this->$attribute = $uploadedFile;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public function afterValidate()\n    {\n        parent::afterValidate();\n\n        if ($this->scenario == self::SCENARIO_SURAT_PERMOHONAN && !empty($this->file_surat_permohonan)) {\n            Yii::$app->session->set('file_surat_permohonan', $this->file_surat_permohonan);\n        }\n\n        if ($this->scenario == self::SCENARIO_CHECKLIST) {\n            foreach (PerbaikanDataHelper::getFileAttributes($this) as $attribute) {\n                Yii::$app->session->set($attribute, $this->$attribute);\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['full_nama_koperasi', 'no_sk_koperasi', 'tanggal_sk_koperasi'], 'required', 'on' => self::SCENARIO_DATA_KOPERASI],\n            [['full_nama_koperasi'], 'string', 'max' => 255],\n            [['no_sk_koperasi'], 'string', 'max' => 50],\n            [['tanggal_sk_koperasi'], 'date', 'format' => 'php:Y-m-d'],\n            [['nama_pemohon', 'nik_pemohon', 'jabatan_pemohon', 'email_pemohon', 'no_telp_pemohon'], 'required', 'on' => self::SCENARIO_DATA_PEMOHON],\n\n            [['file_surat_permohonan'], 'required', 'on' => self::SCENARIO_SURAT_PERMOHONAN],\n            [['file_surat_permohonan'], 'file', 'extensions' => 'pdf', 'checkExtensionByMimeType' => true, 'on' => self::SCENARIO_SURAT_PERMOHONAN],\n\n            [\n                ['file_surat_pernyataan', 'file_surat_keterangan_domisili'],\n                'file',\n                'skipOnEmpty' => false,\n                'extensions' => 'pdf',\n                'maxSize' => 10 * 1024 * 1024, // 10 MB\n                'tooBig' => 'Ukuran file maksimal 10MB.',\n                'wrongExtension' => 'Hanya file PDF yang diperbolehkan.',\n                'on' => self::SCENARIO_CHECKLIST\n            ],\n            [\n                ['file_lain_lain'],\n                'file',\n                'skipOnEmpty' => false, // optional ?\n                'extensions' => 'pdf',\n                'maxSize' => 10 * 1024 * 1024, // 10 MB\n                'tooBig' => 'Ukuran file maksimal 10MB.',\n                'wrongExtension' => 'Hanya file PDF yang diperbolehkan.',\n                'on' => self::SCENARIO_CHECKLIST\n            ],\n            [['data_diperbaiki_list'], 'safe']\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'full_nama_koperasi' => 'Nama Koperasi',\n            'no_sk_koperasi' => 'Nomor SKT/SKP',\n            'tanggal_sk_koperasi' => 'Tanggal SKT/SKP',\n            'nama_pemohon' => 'Nama Pemohon',\n            'nik_pemohon' => 'NIK / Nomor Identitas',\n            'jabatan_pemohon' => 'Jabatan di Yayasan',\n            'email_pemohon' => 'Email Aktif',\n            'no_telp_pemohon' => 'No. Telepon / WhatsApp',\n            'file_surat_permohonan' => 'Surat Permohonan',\n            'file_surat_pernyataan' => 'Surat Pernyataan',\n            'file_surat_keterangan_domisili' => 'Surat Keterangan Domisili',\n            'file_lain_lain' => 'Lain-Lain'\n        ];\n    }\n\n    public static function removeFormSessions()\n    {\n        $session = Yii::$app->session;\n        $session->remove('file_surat_permohonan');\n        $session->remove('file_surat_pernyataan');\n        $session->remove('file_surat_keterangan_domisili');\n        $session->remove('file_lain_lain');\n        $session->remove('data_diperbaiki_list');\n        $session->remove('no_checklist');\n    }\n\n    public function uploadFormFiles()\n    {\n        foreach (PerbaikanDataHelper::getFileAttributes($this) as $attribute) {\n            if ($this->$attribute instanceof UploadedFile) {\n                $this->$attribute = PerbaikanDataHelper::uploadFile($this->$attribute, $attribute);\n            }\n        }\n    }\n}\n\n\n--- File: 47 # controllers/PerbaikanDataController.php ---\n<?php\n\nnamespace app\\controllers;\n\nuse app\\components\\ApiHelper;\nuse Yii;\nuse Mpdf\\Mpdf;\n\nuse app\\components\\BaseController;\nuse app\\components\\KoperasiHelper;\nuse app\\components\\helper\\EncryptHelper;\nuse app\\components\\helper\\LoginChecker;\nuse app\\components\\helper\\PerbaikanDataHelper;\nuse app\\components\\TransaksiHelper;\nuse app\\models\\ChecklistPerbaikan;\nuse app\\models\\ChecklistPerbaikanForm;\nuse app\\models\\ChecklistPerubahan;\nuse app\\models\\ChecklistPerubahanForm;\nuse app\\models\\DataAnggota;\nuse app\\models\\MasterPerubahan;\nuse app\\models\\PesanNama;\nuse app\\models\\TransaksiKoperasi;\nuse app\\models\\forms\\PendirianForm;\nuse app\\models\\MasterPerbaikan;\nuse app\\models\\MasterTransaction;\nuse app\\models\\forms\\PerbaikanDataForm;\nuse app\\models\\TransaksiPerbaikan;\nuse app\\models\\bakum\\KBLIBakum;\nuse app\\models\\search\\KBLIBakumSearch;\nuse app\\models\\MappingKBLI;\nuse Exception;\nuse Mpdf\\Output\\Destination;\nuse PDO;\nuse yii\\data\\ActiveDataProvider;\nuse yii\\db\\Expression;\nuse yii\\web\\BadRequestHttpException;\nuse yii\\web\\Response;\n\nclass PerbaikanDataController extends BaseController\n{\n\n    public $key; // temporary\n\n    public function beforeAction($action)\n    {\n        $this->key = \"D0c0spArT@n\";\n\n        if (!LoginChecker::getLoginData()->hasLogin()) {\n            return $this->redirect(\"site/login\");\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    public function actionIndex()\n    {\n        Yii::$app->view->title = \"Perbaikan Data\";\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n        $idNotaris = $user['value']['id_notaris'];\n\n        $model = new PerbaikanDataForm();\n        $model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n\n        $confirmStep = null;\n        $err = [];\n\n        if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n\n            $confirmStepFlag = Yii::$app->request->post('confirmStepFlag', 0);\n\n            $transaksiKoperasi = MasterTransaction::findExistTransactionForPerbaikan(\n                $model->no_sk_koperasi,\n                $model->tanggal_sk_koperasi,\n                $model->full_nama_koperasi,\n                $idNotaris\n            );\n\n            $status = $transaksiKoperasi['status'];\n            $trans = $transaksiKoperasi['data'];\n            $err = $transaksiKoperasi['err'];\n\n            if (!empty($err['nama'])) {\n                $model->addError('full_nama_koperasi', $err['nama']);\n            }\n            if (!empty($err['no_sk'])) {\n                $model->addError('no_sk_koperasi', $err['no_sk']);\n                $model->addError('tanggal_sk_koperasi', $err['no_sk']);\n            }\n\n            if ($status) {\n                if ($confirmStepFlag == 1) {\n                    $payload = base64_encode(EncryptHelper::encrypt($trans->id, $this->key));\n                    return $this->redirect('data-pemohon?id=' . $payload);\n                }\n\n                $confirmStep = 1;\n            } else {\n                $confirmStep = 0;\n            }\n        }\n\n        return $this->render('index', [\n            'model' => $model,\n            'confirmStep' => $confirmStep,\n            'err' => isset($err) ? $err : [],\n        ]);\n    }\n\n    public function actionDataPemohon()\n    {\n        $payload = Yii::$app->request->get();\n        if (!isset($payload['id'])) return $this->redirect('index');\n\n        $transactionId = EncryptHelper::decrypt(base64_decode($payload['id']), $this->key);\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris', []);\n\n        $nama      = isset($user['value']['nama_gelar']) ? $user['value']['nama_gelar'] : '';\n        $nik       = isset($user['value']['nik']) ? $user['value']['nik'] : '';\n        $jabatan   = '';\n        $email     = isset($user['value']['email']) ? $user['value']['email'] : '';\n        $noTelp    = isset($user['value']['no_telp']) ? $user['value']['no_telp'] : '';\n\n        $model = new PerbaikanDataForm();\n        $model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n\n        $model->nama_pemohon = $nama;\n        $model->nik_pemohon = $nik;\n        $model->jabatan_pemohon = $jabatan;\n        $model->email_pemohon = $email;\n        $model->no_telp_pemohon = preg_replace('/\\D/', '', $noTelp);\n\n        if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n            $payload = base64_encode(EncryptHelper::encrypt($transactionId, $this->key));\n            return $this->redirect('surat-permohonan?id=' . $payload);\n        }\n\n        return $this->render('formStepDataPemohon', [\n            'model' => $model\n        ]);\n    }\n\n    public function actionSuratPermohonan()\n    {\n        $payload = Yii::$app->request->get();\n\n        $session = Yii::$app->session;\n        $user = $session->get('data_notaris');\n\n        if (isset($payload['id'])) {\n            $transactionId = EncryptHelper::decrypt(base64_decode($payload['id']), $this->key);\n            $no_checklist = uniqid('', true);\n        }\n\n        $isChecklist = isset($payload['isChecklist']) ? $payload['isChecklist'] : false;\n\n        $checks = [];\n\n        $model = new PerbaikanDataForm();\n        $model->scenario = $isChecklist ? PerbaikanDataForm::SCENARIO_CHECKLIST : PerbaikanDataForm::SCENARIO_SURAT_PERMOHONAN;\n\n        $checklistModel = new ChecklistPerbaikanForm();\n\n        $masterTransaction = MasterTransaction::find()\n            ->joinWith(['transaksiKoperasi'])\n            ->joinwith(['transaksiKoperasi.dataSK'])\n            ->where(['kop_t_koperasi.id' => $transactionId])->one();\n\n        $transaksiKoperasiModel = $masterTransaction->transaksiKoperasi;\n\n        if ($isChecklist) {\n            if ($session->has('file_surat_permohonan')) {\n                $model->file_surat_permohonan = $session->get('file_surat_permohonan');\n            }\n        } else {\n            foreach (PerbaikanDataHelper::getFileAttributes($model) as $attribute) {\n                if ($session->has($attribute)) {\n                    $model->$attribute = $session->get($attribute);\n                }\n            }\n        }\n\n        // Handle KBLI add/remove into session when in checklist step\n        if ($isChecklist && Yii::$app->request->isPost) {\n            $post = Yii::$app->request->post();\n            $session = Yii::$app->session;\n            $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n            if (!isset($dataDiperbaiki['kegiatan_usaha'])) {\n                $dataDiperbaiki['kegiatan_usaha'] = ['data' => ['utama' => [], 'pendukung' => [], 'tambahan' => []]];\n            } elseif (!isset($dataDiperbaiki['kegiatan_usaha']['data'])) {\n                $dataDiperbaiki['kegiatan_usaha']['data'] = ['utama' => [], 'pendukung' => [], 'tambahan' => []];\n            }\n\n            $section = null;\n            if (isset($post['JenisUsaha'])) {\n                if ($post['JenisUsaha'] === 'UsahaUtama') $section = 'utama';\n                if ($post['JenisUsaha'] === 'UsahaPendukung') $section = 'pendukung';\n                if ($post['JenisUsaha'] === 'UsahaTambahan') $section = 'tambahan';\n            }\n\n            if ($section) {\n                // Tambah KBLI\n                if (isset($post['SaveKBLI'])) {\n                    // Ambil pilihan dari checkbox langsung atau dari hidden cek_kbli_value\n                    $ids = isset($post['cek_kbli']) ? (array)$post['cek_kbli'] : [];\n                    if (empty($ids) && !empty($post['cek_kbli_value'])) {\n                        $ids = array_filter(explode(',', $post['cek_kbli_value']));\n                    }\n                    if (!empty($ids)) {\n                        $kbliList = KBLIBakum::find()->where(['id_kbli' => $ids])->all();\n                        foreach ($kbliList as $d) {\n                            $dataDiperbaiki['kegiatan_usaha']['data'][$section][$d->id_kbli] = [\n                                'id' => $d->id_kbli,\n                                'kode' => $d->kode,\n                                'kategori' => $d->kategori,\n                                'judul' => $d->judul,\n                                'uraian' => $d->uraian,\n                            ];\n                        }\n                    }\n                    $session->set('data_diperbaiki_list', $dataDiperbaiki);\n                }\n                // Hapus KBLI\n                if (isset($post['HapusKBLI'])) {\n                    $key = $post['HapusKBLI'];\n                    if (isset($dataDiperbaiki['kegiatan_usaha']['data'][$section][$key])) {\n                        unset($dataDiperbaiki['kegiatan_usaha']['data'][$section][$key]);\n                        $session->set('data_diperbaiki_list', $dataDiperbaiki);\n                    }\n                }\n            }\n\n            // Jika aksi dari tombol Tambah/Hapus KBLI, render ulang tanpa validasi (hindari error upload)\n            if (isset($post['SaveKBLI']) || isset($post['HapusKBLI'])) {\n                // Provider KBLI (sinkron dengan pendirian)\n                $tahun_kbli = '2020';\n                $kbli_search = new KBLIBakumSearch();\n\n                $jenisKopKbli = null; $polaKopKbli = 1; $bentukKopKbli = 1;\n                if ($transaksiKoperasiModel && $transaksiKoperasiModel->pesanNama) {\n                    $jenisKopKbli = $transaksiKoperasiModel->pesanNama->c_jenis_koperasi_id ?: $transaksiKoperasiModel->pesanNama->jenis_koperasi_id;\n                    if (isset($transaksiKoperasiModel->pesanNama->m_pola_id)) { $polaKopKbli = $transaksiKoperasiModel->pesanNama->m_pola_id ?: 1; }\n                }\n                if ($transaksiKoperasiModel && isset($transaksiKoperasiModel->b_koperasi_id)) { $bentukKopKbli = $transaksiKoperasiModel->b_koperasi_id ?: 1; }\n                if (!$jenisKopKbli) { $jenisKopKbli = 1; }\n\n                $mappingKBLIAll = MappingKBLI::find();\n                $KBLI_all = KBLIBakum::find()->where(['id_kbli' => \\yii\\helpers\\ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n                $kbli_sp_lain_konvensional_p = ['64145', '64147', '64142', '64144', '64146', '64148', '64143'];\n                $kbli_sp_lain_konvensional_s = ['64145', '64147', '64142', '64144', '64146', '64148', '64141'];\n                $kbli_sp_lain_syariah_p = ['64141', '64143', '64142', '64144', '64146', '64148', '64147'];\n                $kbli_sp_lain_syariah_s = ['64141', '64143', '64142', '64144', '64146', '64148', '64145'];\n                $kbli_ex_lain_konvensional_p = ['64141', '64143', '64145', '64147', '64146', '64148', '64144'];\n                $kbli_ex_lain_konvensional_s = ['64141', '64143', '64145', '64147', '64146', '64148', '64142'];\n                $kbli_ex_lain_syariah_p = ['64141', '64143', '64145', '64147', '64142', '64144', '64148'];\n                $kbli_ex_lain_syariah_s = ['64141', '64143', '64145', '64147', '64142', '64144', '64146'];\n\n                if ((string)$jenisKopKbli === '6') {\n                    if ((string)$polaKopKbli === '1') {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    }\n                } else {\n                    if ((string)$polaKopKbli === '1') {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    } else {\n                        $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                        if ((string)$bentukKopKbli === '2') { $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]); }\n                    }\n                }\n\n                $search = Yii::$app->request->get('KBLIBakumSearch');\n                if ($search && isset($search['judul'])) {\n                    $searchKode = $search['judul'];\n                    if ($searchKode !== '') {\n                        if ((string)$jenisKopKbli === '6') {\n                            if ((string)$polaKopKbli === '1') {\n                                $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000'; }\n                            } else {\n                                $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000'; }\n                            }\n                        } else {\n                            if ((string)$polaKopKbli === '1') {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000'; }\n                            } else {\n                                $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                                if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000'; }\n                            }\n                        }\n                        $KBLI->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n                        $KBLI_all->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n                    }\n                }\n\n                $kbli_provider = [\n                    'byJenis' => new \\yii\\data\\ActiveDataProvider([\n                        'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                        'pagination' => ['pageSize' => 5],\n                        'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n                    ]),\n                    'all' => new \\yii\\data\\ActiveDataProvider([\n                        'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                        'pagination' => ['pageSize' => 5],\n                        'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n                    ]),\n                ];\n\n                // pertahankan pilihan checklist dari POST\n                $checks = Yii::$app->request->post('checks', $checks);\n                if (!in_array(MasterPerbaikan::KEGIATAN_USAHA, array_map('intval', (array)$checks), true)) {\n                    $checks[] = MasterPerbaikan::KEGIATAN_USAHA;\n                }\n\n                return $this->render('formStepPermohonan', [\n                    'isChecklist' => $isChecklist,\n                    'namaKoperasi' => $masterTransaction['transaksiKoperasi']['full_nama'],\n                    'nomorSk' => $masterTransaction['transaksiKoperasi']['dataSK']['no_sk_koperasi'],\n                    'tanggalSk' => $masterTransaction['transaksiKoperasi']['dataSK']['created_date'],\n                    'idMaster' => $transactionId,\n                    'no_checklist' => $no_checklist,\n                    'checks' => $checks,\n                    'checklists' => MasterPerbaikan::find()->all(),\n                    'model' => $model,\n                    'checklistModel' => $checklistModel,\n                    'transaksiKoperasiModel' => $transaksiKoperasiModel,\n                    'kbli_provider' => $kbli_provider,\n                    'kbli_search' => $kbli_search,\n                    'tahun_kbli' => $tahun_kbli,\n                ]);\n            }\n        }\n\n        $modelLoadedAndValid = $model->load(Yii::$app->request->post()) && $model->validate();\n        $checklistModelLoadedAndValid = !$isChecklist || ($checklistModel->load(Yii::$app->request->post()) && $checklistModel->validate());\n\n        if ($modelLoadedAndValid && $checklistModelLoadedAndValid) {\n            if (!$isChecklist) {\n                $payload = base64_encode(EncryptHelper::encrypt($transactionId, $this->key));\n                return $this->redirect('surat-permohonan?id=' . $payload . '&isChecklist=1');\n            } else {\n\n                $transactionDb = TransaksiPerbaikan::getDb();\n                $transactionObj = $transactionDb->beginTransaction();\n\n                try {\n\n                    $model->uploadFormFiles();\n                    $model->t_koperasi_id = $transactionId;\n\n                    $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n                    // Fallback: merge usulan BO yang ikut diposting sebagai hidden JSON (bisa dalam bentuk HTML-encoded)\n                    $hasPostedBo = false;\n                    $postedBoJson = Yii::$app->request->post('pemilik_manfaat_edits');\n                    if (!empty($postedBoJson)) {\n                        $raw = (string)$postedBoJson;\n                        $candidates = [$raw, html_entity_decode($raw, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8')];\n                        foreach ($candidates as $cand) {\n                            $decoded = json_decode($cand, true);\n                            if (json_last_error() === JSON_ERROR_NONE && is_array($decoded) && !empty($decoded)) {\n                                $dataDiperbaiki['pemilik_manfaat'] = $decoded;\n                                $hasPostedBo = true;\n                                break;\n                            }\n                            // Coba decode lagi setelah stripslashes jika diperlukan\n                            $decoded2 = json_decode(stripslashes($cand), true);\n                            if (json_last_error() === JSON_ERROR_NONE && is_array($decoded2) && !empty($decoded2)) {\n                                $dataDiperbaiki['pemilik_manfaat'] = $decoded2;\n                                $hasPostedBo = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    $postData = Yii::$app->request->post('ChecklistPerbaikanForm');\n                    $selectedPerbaikanIds = [];\n\n                    if (!empty($postData['m_perbaikan_id']) && is_array($postData['m_perbaikan_id'])) {\n                        foreach ($postData['m_perbaikan_id'] as $check) {\n                            if (!empty($check)) {\n                                $selectedPerbaikanIds[] = $check;\n                            }\n                        }\n                        // Normalisasi tipe ke integer agar cocok dengan konstanta MasterPerbaikan\n                        $selectedPerbaikanIds = array_map('intval', $selectedPerbaikanIds);\n                        $selectedPerbaikanIds = array_values(array_unique($selectedPerbaikanIds));\n                    }\n\n                    // Jangan auto-include pengawas_pengurus dari session agar tidak ikut ketika hanya memilih pemilik_manfaat\n                    // Jika ada usulan kegiatan_usaha di session, pastikan checklist terkait ikut terpilih\n                    if (!empty($dataDiperbaiki['kegiatan_usaha'])\n                        && !in_array(\\app\\models\\MasterPerbaikan::KEGIATAN_USAHA, $selectedPerbaikanIds)) {\n                        $selectedPerbaikanIds[] = \\app\\models\\MasterPerbaikan::KEGIATAN_USAHA;\n                    }\n\n                    // Gabungkan juga dari POST checks[] agar perubahan pilihan di UI ikut terbaca\n                    $postedChecks = Yii::$app->request->post('checks', []);\n                    if (is_array($postedChecks) && !empty($postedChecks)) {\n                        foreach ($postedChecks as $c) {\n                            if ($c !== '' && $c !== null) { $selectedPerbaikanIds[] = $c; }\n                        }\n                        $selectedPerbaikanIds = array_map('intval', $selectedPerbaikanIds);\n                        $selectedPerbaikanIds = array_values(array_unique($selectedPerbaikanIds));\n                    }\n                    // Jangan auto-include Pemilik Manfaat: hanya ikut jika user mencentang di checklist\n\n                    $dataDiperbaiki = PerbaikanDataHelper::filterChecklistPerbaikan($selectedPerbaikanIds, $dataDiperbaiki);\n\n                    // Snapshot data master (current) untuk item yang akan diubah\n                    $dataKoperasiSnapshot = PerbaikanDataHelper::buildMasterSnapshot($transaksiKoperasiModel, $dataDiperbaiki, $selectedPerbaikanIds);\n\n                    // Kurangi data diperbaiki hanya pada field yang berubah (khusus pengawas_pengurus)\n                    $dataDiperbaiki = PerbaikanDataHelper::reduceEditedToDelta($dataDiperbaiki, $dataKoperasiSnapshot);\n\n                    // Hapus data pemilik_manfaat jika tidak dicentang; tidak dipulihkan otomatis\n\n                    $model->data_diperbaiki_list = json_encode($dataDiperbaiki);\n                    $entity = PerbaikanDataHelper::mapToTransakasiPerbaikan($model);\n                    // Simpan snapshot data master ke kolom data_koperasi_list (jika tersedia di DB)\n                    $entity->data_koperasi_list = json_encode($dataKoperasiSnapshot);\n\n                    $transaksiKoperasiModel->is_perbaikan = 1;\n                    if (!$transaksiKoperasiModel->save(false)) {\n                        throw new Exception('Gagal update transaski koperasi');\n                    }\n\n                    if (!$entity->save()) {\n                        $errors = $entity->getErrors();\n                        $errorMessages = [];\n                        foreach ($errors as $attribute => $messages) {\n                            $errorMessages[] = $attribute . ': ' . implode(', ', $messages);\n                        }\n                        throw new Exception(implode(' | ', $errorMessages));\n                    }\n\n                    $batch = [];\n                    $d_koperasi_id = $masterTransaction->id;\n                    $no_checklist = Yii::$app->request->post('no_checklist');\n\n                    if (!empty($no_checklist)) {\n                        ChecklistPerbaikan::deleteAll('no_checklist = :no_checklist', [':no_checklist' => $no_checklist]);\n                    }\n\n                    foreach ($selectedPerbaikanIds as $num => $check) {\n                        $batch[$num]['no_checklist'] = $no_checklist;\n                        $batch[$num]['d_koperasi_id'] = $d_koperasi_id;\n                        $batch[$num]['t_perbaikan_id'] = $entity->id;\n                        $batch[$num]['m_perbaikan_id'] = $check;\n                    }\n\n                    if (!empty($batch)) {\n                        ChecklistPerbaikan::getDb()->createCommand()\n                            ->batchInsert(\n                                'kop_c_perbaikan',\n                                ['no_checklist', 'd_koperasi_id', 't_perbaikan_id', 'm_perbaikan_id'],\n                                $batch\n                            )->execute();\n                    }\n\n                    $transactionObj->commit();\n\n                    PerbaikanDataForm::removeFormSessions();\n\n                    $payload = base64_encode(EncryptHelper::encrypt($entity->id, $this->key));\n                    return $this->redirect('detail-permohonan?id=' . $payload);\n                } catch (Exception $e) {\n                    $transactionObj->rollBack();\n                    throw $e;\n                }\n            }\n        }\n\n        // Build KBLI providers for modal selector (samakan dengan pendirian)\n        $tahun_kbli = '2020';\n        $kbli_search = new KBLIBakumSearch();\n\n        // Tentukan jenis/pola/bentuk dari data transaksi yang ada\n        $jenisKopKbli = null;\n        $polaKopKbli = 1;\n        $bentukKopKbli = 1;\n        if ($transaksiKoperasiModel && $transaksiKoperasiModel->pesanNama) {\n            $jenisKopKbli = $transaksiKoperasiModel->pesanNama->c_jenis_koperasi_id ?: $transaksiKoperasiModel->pesanNama->jenis_koperasi_id;\n            // fallback pola ke 1 jika tidak tersedia\n            if (isset($transaksiKoperasiModel->pesanNama->m_pola_id)) { $polaKopKbli = $transaksiKoperasiModel->pesanNama->m_pola_id ?: 1; }\n        }\n        if ($transaksiKoperasiModel && isset($transaksiKoperasiModel->b_koperasi_id)) { $bentukKopKbli = $transaksiKoperasiModel->b_koperasi_id ?: 1; }\n\n        // Default jenis jika belum terdefinisi\n        if (!$jenisKopKbli) {\n            $jenisKopKbli = 1; // fallback aman\n        }\n\n        // Mapping basis\n        $mappingKBLIAll = MappingKBLI::find();\n        $KBLI_all = KBLIBakum::find()->where(['id_kbli' => \\yii\\helpers\\ArrayHelper::getColumn($mappingKBLIAll->all(), 'kode')])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n\n        // Daftar kode khusus (disalin dari pendirian)\n        $kbli_sp_lain_konvensional_p = ['64145', '64147', '64142', '64144', '64146', '64148', '64143'];\n        $kbli_sp_lain_konvensional_s = ['64145', '64147', '64142', '64144', '64146', '64148', '64141'];\n        $kbli_sp_lain_syariah_p = ['64141', '64143', '64142', '64144', '64146', '64148', '64147'];\n        $kbli_sp_lain_syariah_s = ['64141', '64143', '64142', '64144', '64146', '64148', '64145'];\n        $kbli_ex_lain_konvensional_p = ['64141', '64143', '64145', '64147', '64146', '64148', '64144'];\n        $kbli_ex_lain_konvensional_s = ['64141', '64143', '64145', '64147', '64146', '64148', '64142'];\n        $kbli_ex_lain_syariah_p = ['64141', '64143', '64145', '64147', '64142', '64144', '64148'];\n        $kbli_ex_lain_syariah_s = ['64141', '64143', '64145', '64147', '64142', '64144', '64146'];\n\n        // Query dasar sesuai jenis/pola/bentuk seperti pendirian\n        if ((string)$jenisKopKbli === '6') { // simpan pinjam\n            if ((string)$polaKopKbli === '1') { // konvensional\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64141']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') { // sekunder\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64143']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else { // syariah\n                $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64145']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') { // sekunder\n                    $KBLI = KBLIBakum::find()->where(['in', 'kode', ['64147']])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        } else { // jenis lainnya\n            if ((string)$polaKopKbli === '1') { // konvensional\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_konvensional_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            } else { // syariah\n                $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_p])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                if ((string)$bentukKopKbli === '2') {\n                    $KBLI = KBLIBakum::find()->where(['not in', 'kode', $kbli_ex_lain_syariah_s])->andFilterWhere(['>=', 'LENGTH(kode)', 5]);\n                }\n            }\n        }\n\n        // Pencarian judul/kode (batasi sesuai jenis/pola/bentuk)\n        $search = Yii::$app->request->get('KBLIBakumSearch');\n        if ($search && isset($search['judul'])) {\n            $searchKode = $search['judul'];\n            if ($searchKode !== '') {\n                if ((string)$jenisKopKbli === '6') {\n                    if ((string)$polaKopKbli === '1') {\n                        $searchKode = in_array($searchKode, ['64141']) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64143']) ? $searchKode : '00000'; }\n                    } else {\n                        $searchKode = in_array($searchKode, ['64145']) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = in_array($searchKode, ['64147']) ? $searchKode : '00000'; }\n                    }\n                } else {\n                    if ((string)$polaKopKbli === '1') {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_p) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_konvensional_s) ? $searchKode : '00000'; }\n                    } else {\n                        $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_p) ? $searchKode : '00000';\n                        if ((string)$bentukKopKbli === '2') { $searchKode = !in_array($searchKode, $kbli_ex_lain_syariah_s) ? $searchKode : '00000'; }\n                    }\n                }\n                $KBLI->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n                $KBLI_all->andFilterWhere(['LIKE', 'judul', $searchKode])->orFilterWhere(['=', 'kode', $searchKode]);\n            }\n        }\n\n        $kbli_provider = [\n            'byJenis' => new \\yii\\data\\ActiveDataProvider([\n                'query' => $KBLI->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                'pagination' => ['pageSize' => 5],\n                'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n            ]),\n            'all' => new \\yii\\data\\ActiveDataProvider([\n                'query' => $KBLI_all->andWhere(['status' => 1])->andWhere(['tahun' => $tahun_kbli]),\n                'pagination' => ['pageSize' => 5],\n                'sort' => ['defaultOrder' => ['kode' => SORT_ASC]],\n            ]),\n        ];\n\n        return $this->render('formStepPermohonan', [\n            'isChecklist' => $isChecklist,\n            'namaKoperasi' => $masterTransaction['transaksiKoperasi']['full_nama'],\n            'nomorSk' => $masterTransaction['transaksiKoperasi']['dataSK']['no_sk_koperasi'],\n            'tanggalSk' => $masterTransaction['transaksiKoperasi']['dataSK']['created_date'],\n            'idMaster' => $transactionId,\n            'no_checklist' => $no_checklist,\n            'checks' => $checks,\n            'checklists' => MasterPerbaikan::find()->all(),\n            'model' => $model,\n            'checklistModel' => $checklistModel,\n            'transaksiKoperasiModel' => $transaksiKoperasiModel,\n            'kbli_provider' => $kbli_provider,\n            'kbli_search' => $kbli_search,\n            'tahun_kbli' => $tahun_kbli,\n        ]);\n    }\n\n    public function actionDetailPermohonan($id)\n    {\n        $transactionPerbaikanId = EncryptHelper::decrypt(base64_decode($id), $this->key);\n\n        $model = TransaksiPerbaikan::findOne($transactionPerbaikanId);\n\n        if (!$model) return $this->redirect('index');\n\n        $jenisPerbaikan = PerbaikanDataHelper::getDisplayChecklistPerbaikan($model->checklistPerbaikan);\n\n        $dataDiperbaiki = json_decode($model->data_diperbaiki_list, true);\n\n        $pengawasPengurus = [];\n\n        $sessionKey = MasterPerbaikan::getSessionKey(MasterPerbaikan::PENGURUS_DAN_PENGAWAS);\n        if (isset($dataDiperbaiki[$sessionKey]) && PerbaikanDataHelper::hasChecklistPerbaikan($model->checklistPerbaikan, MasterPerbaikan::PENGURUS_DAN_PENGAWAS)) {\n            foreach ($dataDiperbaiki[$sessionKey] as $rowData) {\n                $anggota = new DataAnggota();\n                foreach ($rowData as $field => $value) {\n                    if ($anggota->hasAttribute($field)) {\n                        $anggota->$field = $value;\n                    }\n                }\n                $pengawasPengurus[] = $anggota;\n            }\n        }\n\n        return $this->render('detailPermohonan', [\n            'namaKoperasi' => $model->transaksiKoperasi->full_nama,\n            'nomorSk' =>  $model->transaksiKoperasi->dataSK->no_sk_koperasi,\n            'tanggalSk' => $model->transaksiKoperasi->dataSK->created_date,\n            'model' => $model,\n            'jenisPerbaikan' => $jenisPerbaikan,\n            'pengawasPengurus' => $pengawasPengurus\n        ]);\n    }\n\n    public function actionDaftarPermohonan($tahun = null)\n    {\n        $years = TransaksiPerbaikan::find()\n            ->select([new Expression('YEAR(created_date) AS year')])\n            ->groupBy('year')\n            ->orderBy(['year' => SORT_DESC])\n            ->column();\n\n        $query = TransaksiPerbaikan::find()->joinWith('transaksiKoperasi');\n\n        if ($tahun) {\n            $query->andWhere(['YEAR(transaksi_koperasi.created_date)' => $tahun]);\n        }\n\n        $dataProvider = new ActiveDataProvider([\n            'query' => $query,\n            'pagination' => [\n                'pageSize' => 25,\n            ],\n            'sort' => [\n                'defaultOrder' => ['id' => SORT_DESC],\n            ],\n        ]);\n\n        return $this->render('daftarPermohonan', [\n            'dataProvider' => $dataProvider,\n            'tahun' => $tahun ?: date('Y'),\n            'years' => $years,\n        ]);\n    }\n\n    public function actionEditPengawasPengurus()\n    {\n        $request = Yii::$app->request;\n\n        if ($request->isPost) {\n            $key = $request->post('key');\n            $id = $request->post('id');\n            $data = $request->post();\n\n            unset($data['key'], $data['id']);\n\n            $transaksiKoperasi = TransaksiKoperasi::findOne($id);\n            if (!$transaksiKoperasi) {\n                return json_encode(['status' => 'error', 'message' => 'Transaksi not found']);\n            }\n\n            $anggotaList = $transaksiKoperasi->dataanggota;\n\n            if (!isset($anggotaList[$key])) {\n                return json_encode(['status' => 'error', 'message' => 'Row not found']);\n            }\n\n            $anggota = $anggotaList[$key];\n            $fullRow = $anggota->attributes; // id = id anggota, t_koperasi_id = id transaksi (sesuai tabel)\n\n            $postData = $request->post();\n            foreach ($postData as $field => $value) {\n                $fullRow[$field] = $value;\n            }\n            // Pastikan id & t_koperasi_id konsisten sesuai tabel (jangan terubah dari frontend)\n            $fullRow['id'] = (string)$anggota->id;\n            $fullRow['t_koperasi_id'] = (string)$anggota->t_koperasi_id;\n\n            $session = Yii::$app->session;\n            $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n\n            if (!isset($dataDiperbaiki['pengawas_pengurus'])) {\n                $dataDiperbaiki['pengawas_pengurus'] = [];\n            }\n\n            $dataDiperbaiki['pengawas_pengurus'][$key] = $fullRow;\n            $session->set('data_diperbaiki_list', $dataDiperbaiki);\n\n            return json_encode(['status' => 'success', 'data' => $fullRow]);\n        }\n\n        return json_encode(['status' => 'error', 'message' => 'Invalid request']);\n    }\n\n    public function actionEditPemilikManfaat()\n    {\n        $request = \\Yii::$app->request;\n\n        if ($request->isPost) {\n            $key = $request->post('key');         // index baris dalam tabel (0-based)\n            $id = $request->post('id');           // t_koperasi_id\n            $rowId = $request->post('row_id');    // primary key id baris (opsional)\n            $data = $request->post();\n\n            unset($data['key'], $data['id']);\n\n            $transaksiKoperasi = \\app\\models\\TransaksiKoperasi::findOne($id);\n            if (!$transaksiKoperasi) {\n                return json_encode(['status' => 'error', 'message' => 'Transaksi not found']);\n            }\n\n            // Temukan baris BO: coba berdasarkan row_id dahulu, fallback ke index array\n            $bo = null;\n            if (!empty($rowId)) {\n                $bo = \\app\\models\\PemilikManfaat::find()->where(['id' => $rowId, 't_koperasi_id' => $id])->one();\n            }\n            if (!$bo) {\n                $boList = \\app\\models\\PemilikManfaat::find()->where(['t_koperasi_id' => $id])->all();\n                if (!isset($boList[$key])) {\n                    return json_encode(['status' => 'error', 'message' => 'Row not found']);\n                }\n                $bo = $boList[$key];\n            }\n            $fullRow = $bo->attributes; // id & t_koperasi_id sesuai tabel\n\n            $postData = $request->post();\n            foreach ($postData as $field => $value) {\n                $fullRow[$field] = $value;\n            }\n\n            // Jaga id & t_koperasi_id tetap asli\n            $fullRow['id'] = (string)$bo->id;\n            $fullRow['t_koperasi_id'] = (string)$bo->t_koperasi_id;\n\n            // Tidak menambahkan field turunan agar seragam dengan pengawas_pengurus\n\n            $session = \\Yii::$app->session;\n            $dataDiperbaiki = $session->get('data_diperbaiki_list', []);\n            if (!isset($dataDiperbaiki['pemilik_manfaat'])) {\n                $dataDiperbaiki['pemilik_manfaat'] = [];\n            }\n            // Simpan dengan key index array (selaras pengawas_pengurus)\n            $dataDiperbaiki['pemilik_manfaat'][$key] = $fullRow;\n            $session->set('data_diperbaiki_list', $dataDiperbaiki);\n\n            return json_encode(['status' => 'success', 'data' => $fullRow]);\n        }\n\n        return json_encode(['status' => 'error', 'message' => 'Invalid request']);\n    }\n\n\n    public function actionSuratPermohonanDownload()\n    {\n        $suratContent = Yii::$app->request->post('suratPermohonan');\n        if (!$suratContent) {\n            throw new BadRequestHttpException('Tidak ada konten surat.');\n        }\n\n        PerbaikanDataHelper::uploadSuratPermohonan($suratContent, Destination::DOWNLOAD);\n        Yii::$app->end();\n    }\n\n    public function actionSuratPermohonanPreview()\n    {\n        $suratContent = Yii::$app->request->post('suratPermohonan');\n        if (!$suratContent) {\n            throw new BadRequestHttpException('Tidak ada konten surat.');\n        }\n\n        PerbaikanDataHelper::uploadSuratPermohonan($suratContent, Destination::INLINE);\n        Yii::$app->end();\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 6: Perbaikan Data (Data Correction)\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 6: Perbaikan Data (Data Correction)\n\nWelcome back! In the [previous chapter](05_master_transaction_management_.md), we learned how Master Transaction Management keeps track of every cooperative's status and history. But what happens when someone makes a mistake? What if the secretary's phone number was typed wrong, or the cooperative needs to update its business activities? That's where **Perbaikan Data** (Data Correction) comes to the rescue!\n\n## Why Do We Need Data Correction?\n\nImagine you just published a phone book for your neighborhood. A week later, Mrs. Sari calls saying her phone number was printed wrong - it should be 081234567890, not 081234567880. You can't recall all the phone books and reprint them, but you need a way to officially record and approve this correction, right?\n\nThe **Perbaikan Data** system is like a formal amendment process for cooperatives. When data needs to be corrected after a cooperative is established, you can't just change it directly - you need to submit a correction request, provide supporting documents, and get it reviewed and approved. It's like submitting an errata for an official document!\n\n## Your First Use Case: Correcting Board Member Information\n\nLet's say Pak Budi's cooperative \"Koperasi Maju Bersama\" needs to:\n1. Update the treasurer's phone number (it was typed wrong)\n2. Add a new business activity they forgot to include\n3. Fix a board member's address\n\nInstead of starting over, they can use Perbaikan Data to request these corrections officially!\n\n## Key Concepts Made Simple\n\n### 1. Correction Request\n\nThink of a correction request as a formal letter asking for changes:\n\n```php\n// Create a new correction request\n$correction = new TransaksiPerbaikan();\n$correction->t_koperasi_id = 123; // Which cooperative\n$correction->status_transaksi_perbaikan = 'verifikator_1_tunggu';\n```\n\nThe request starts in \"waiting for review\" status - just like submitting homework to your teacher!\n\n### 2. Verification Workflow\n\nEvery correction goes through multiple checkpoints:\n\n```php\n// Correction statuses\n$WAITING_V1 = 'verifikator_1_tunggu';  // First reviewer\n$WAITING_V2 = 'verifikator_2_tunggu';  // Second reviewer  \n$APPROVED = 'permohonan_diterima';     // All done!\n```\n\nIt's like getting your essay reviewed by two teachers before final approval!\n\n### 3. Supporting Documents\n\nCorrections need proof:\n\n```php\n// Required documents\n$documents = [\n    'file_surat_permohonan',      // Request letter\n    'file_surat_pernyataan',      // Statement letter\n    'file_surat_keterangan_domisili' // Address proof\n];\n```\n\nYou can't just say \"trust me\" - you need to show evidence for the changes!\n\n## Making Your First Correction Request\n\nLet's help Pak Budi correct his cooperative's data:\n\n### Step 1: Find the Cooperative\n\n```php\n// Look up the cooperative to correct\n$master = MasterTransaction::findExistTransactionForPerbaikan(\n    \"SK-2024-001\",           // Certificate number\n    \"2024-01-15\",           // Certificate date\n    \"KOPERASI MAJU BERSAMA\" // Name\n);\n```\n\nFirst, we need to find the exact cooperative record to correct.\n\n### Step 2: Specify What to Correct\n\n```php\n// List what needs correction\n$corrections = [\n    'pengawas_pengurus' => [\n        ['nama' => 'Ibu Rina', 'no_telp' => '081234567890']\n    ]\n];\n```\n\nWe clearly specify which data needs to be fixed and what the new values should be.\n\n### Step 3: Submit the Request\n\n```php\n// Create the correction request\n$request = new TransaksiPerbaikan();\n$request->data_diperbaiki_list = json_encode($corrections);\n$request->save();\n```\n\nThe corrections are saved as JSON so they can be reviewed before being applied!\n\n## How the Correction Workflow Works\n\nHere's what happens when you submit a correction request:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant R as Request\n    participant V1 as Verifier 1\n    participant V2 as Verifier 2\n    participant D as Database\n    \n    U->>R: Submit correction\n    R->>V1: Review request\n    V1->>V2: Approve & forward\n    V2->>D: Apply changes\n    D->>U: Correction complete!\n```\n\nThe multi-step verification ensures corrections are legitimate and accurate!\n\n### The Review Process\n\nWhen a verifier reviews your request:\n\n```php\n// First verifier reviews\n$verification = new VerifikasiPerbaikan();\n$verification->tahap = 'VERIFIKATOR_1';\n$verification->status = 'DITERIMA'; // Accepted!\n```\n\nEach verifier can accept or reject the request with a reason.\n\n### Handling Rejections\n\nIf a correction is rejected:\n\n```php\n// Rejection with reason\n$verification->status = 'DITOLAK';\n$verification->alasan = 'Missing supporting documents';\n```\n\nYou'll know exactly why it was rejected and what to fix!\n\n## Understanding the Database Structure\n\nCorrections are stored in multiple related tables:\n\n```php\n// Main correction transaction\n$correctionRecord = [\n    'id' => 456,\n    't_koperasi_id' => 123,  // Links to cooperative\n    'data_diperbaiki_list' => '{\"pengawas_pengurus\":[...]}',\n    'status_transaksi_perbaikan' => 'verifikator_1_tunggu'\n];\n```\n\nThe `data_diperbaiki_list` contains all requested changes in JSON format.\n\n## Real Implementation: The Correction Form\n\nThe correction process uses a multi-step form (in `controllers/PerbaikanDataController.php`):\n\n```php\n// Step 1: Identify cooperative\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n```\n\n```php\n// Step 2: Applicant information\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n```\n\n```php\n// Step 3: Upload documents and specify changes\n$model->scenario = PerbaikanDataForm::SCENARIO_CHECKLIST;\n```\n\nEach step collects different information, making the process manageable!\n\n## Working with Correction Helpers\n\nThe PerbaikanDataHelper (in `components/helper/PerbaikanDataHelper.php`) provides useful utilities:\n\n### Building a Data Snapshot\n\n```php\n// Capture current data before changes\n$snapshot = PerbaikanDataHelper::buildMasterSnapshot(\n    $transaksiKoperasi,\n    $requestedChanges\n);\n```\n\nThis creates a \"before\" picture so you can always see what changed!\n\n### Filtering Valid Corrections\n\n```php\n// Only keep allowed corrections\n$filtered = PerbaikanDataHelper::filterChecklistPerbaikan(\n    $selectedItems,\n    $corrections\n);\n```\n\nThis ensures only permitted types of corrections are processed.\n\n## Integration with Other Systems\n\nPerbaikan Data connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Finds cooperatives to correct\n- [Notaris Integration](04_notaris_integration_.md) - Notaries submit corrections\n- [Data Anggota](03_data_anggota__member_data__.md) - Corrects member information\n\nIt's the safety net that catches and fixes mistakes across the entire system!\n\n## What You've Learned\n\nFantastic work! You now understand how the Perbaikan Data system handles corrections to cooperative data. The system:\n\n- Provides a formal process for requesting data corrections\n- Requires supporting documents for accountability\n- Uses multi-level verification to ensure accuracy\n- Maintains a complete audit trail of all changes\n- Preserves data integrity while allowing necessary updates\n\nThink of it as the \"track changes\" feature in a word processor, but for cooperative data - every correction is documented, reviewed, and approved before being applied!\n\n## Next Steps\n\nNow that you understand how to correct cooperative data after establishment, let's explore how cooperatives define their business activities in [KBLI Business Activity](07_kbli_business_activity_.md). This is where cooperatives specify exactly what kind of business they'll be conducting!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"KBLI Business Activity\n\". This is Chapter 7.\n\nConcept Details:\n- Name: KBLI Business Activity\n\n- Description:\nManages Indonesian Standard Industrial Classification codes for cooperative business activities.\nLike categorizing cooperatives by their business type - whether they're agricultural, retail, or service cooperatives.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n---\n# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!\n---\n# Chapter 5: Master Transaction Management\n\nWelcome back! In the [previous chapter](04_notaris_integration_.md), we learned how notaries provide legal certification for cooperatives. But here's an important question - how does the system keep track of all cooperatives and their current status? Is a cooperative still active? Has it merged with another? Has it been dissolved? That's where **Master Transaction Management** comes in!\n\n## Why Do We Need Master Transaction Management?\n\nImagine running a school directory that lists all schools in your city. Some schools are actively operating, some have merged with other schools, and some have closed down. You need a master list that shows the current status of each school at a glance, right?\n\nThe **Master Transaction Management** system is exactly that - a master directory for all cooperatives. It's like a living phonebook that not only lists all cooperatives but also knows whether they're still \"picking up the phone\" (active), have \"changed their number\" (merged), or have \"disconnected their line\" (dissolved).\n\n## Your First Use Case: Tracking Cooperative Lifecycle\n\nLet's say the government wants to know:\n1. How many active cooperatives exist in Jakarta?\n2. Which cooperatives have merged together?\n3. Which cooperatives have been dissolved?\n4. What's the complete history of \"Koperasi Maju Bersama\"?\n\nThe Master Transaction system answers all these questions instantly!\n\n## Key Concepts Made Simple\n\n### 1. Master Record\n\nThink of a master record as a cooperative's permanent file folder:\n\n```php\n// Each cooperative has one master record\n$master = MasterTransaction::findOne($cooperativeId);\necho $master->status; // 1 = Active\n```\n\nThis folder contains everything about the cooperative's current state.\n\n### 2. Cooperative Status Types\n\nEvery cooperative can be in one of three states:\n\n```php\n// Three possible states\n$ACTIVE = 1;     // Operating normally\n$MERGED = 2;     // Joined with another cooperative  \n$DISSOLVED = 0;  // No longer operating\n```\n\nIt's like a traffic light - green (active), yellow (merged), or red (dissolved)!\n\n### 3. Transaction History\n\nThe master record links to all transactions:\n\n```php\n// Get all transactions for a cooperative\n$history = $master->getListTransaksi();\necho count($history); // Shows total transactions\n```\n\nThis gives you the complete story of the cooperative's journey.\n\n## Checking a Cooperative's Status\n\nLet's find out the current status of a cooperative:\n\n### Step 1: Find the Master Record\n\n```php\n// Look up the cooperative\n$master = MasterTransaction::find()\n    ->where(['id' => 123])\n    ->one();\n```\n\nThis retrieves the master record for cooperative #123.\n\n### Step 2: Check Current Status\n\n```php\n// Check if cooperative is active\nif ($master->is_active == 1) {\n    echo \"Cooperative is operating!\";\n}\n```\n\nThe `is_active` field tells us if it's currently operating.\n\n### Step 3: Check Special Conditions\n\n```php\n// Check if it has merged\nif ($master->is_gabung == 1) {\n    echo \"This cooperative has merged!\";\n}\n```\n\nThe `is_gabung` flag indicates a merger has occurred.\n\n## How Master Transaction Works\n\nHere's what happens when tracking cooperative status:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant M as Master\n    participant T as Transaction\n    participant S as Status\n    \n    C->>T: New transaction occurs\n    T->>M: Update master record\n    M->>S: Change status if needed\n    S->>C: Status updated!\n```\n\nThe master record acts as the central truth about each cooperative's current state!\n\n### Creating a Master Record\n\nWhen a cooperative is first established:\n\n```php\n// New cooperative gets a master record\n$master = new MasterTransaction();\n$master->id_transaksi = $establishmentId;\n$master->status = 1; // Start as active\n$master->save();\n```\n\nThis creates the permanent tracking record.\n\n### Updating Status\n\nWhen major events occur, the status changes:\n\n```php\n// Cooperative merges with another\n$master->is_gabung = 1;\n$master->is_active = 0; // No longer independently active\n$master->save();\n```\n\nThe master record always reflects the current reality.\n\n## Understanding the Database Structure\n\nThe master transaction table (`master_transaksi`) stores:\n\n```php\n// Master record fields\n$masterRecord = [\n    'id' => 456,\n    'id_transaksi' => 123,  // Latest transaction\n    'status' => 1,          // Current status\n    'is_gabung' => 0,       // Merger flag\n    'is_deleted' => 0       // Soft delete flag\n];\n```\n\nEach field tracks a different aspect of the cooperative's state.\n\n## Real Implementation: The MasterTransaction Model\n\nThe main model (in `models/MasterTransaction.php`) manages all master operations:\n\n```php\nclass MasterTransaction extends ActiveRecord {\n    // Link to current transaction\n    public function getTransaksiKoperasi() {\n        return $this->hasOne(TransaksiKoperasi::className(), \n            ['id' => 'id_transaksi']);\n    }\n}\n```\n\nThis connects the master record to its transactions.\n\n## Finding Cooperatives\n\nThe system provides powerful search capabilities:\n\n### Search Active Cooperatives in a Region\n\n```php\n// Find active cooperatives in Jakarta\n$activeInJakarta = MasterTransaction::getDaftarKoperasi(\n    31,    // Jakarta province ID\n    null,  // Any city\n    ['status_koperasi' => 1] // Active only\n);\n```\n\nThis returns all operating cooperatives in Jakarta!\n\n### Track Cooperative History\n\n```php\n// Get all transactions for a master\n$transactions = $master->getListTransaksi();\nforeach ($transactions as $trans) {\n    echo $trans->jenis_transaksi; // Type of change\n}\n```\n\nThis shows every change the cooperative has undergone.\n\n## Managing Mergers\n\nWhen cooperatives merge, the system tracks it:\n\n```php\n// Mark cooperatives as merged\nSKHelper::changeMasterTransactionIsGabung($transactionId);\n// Updates all involved cooperatives\n```\n\nThe helper function handles the complex merger logic!\n\n## Integration with Other Systems\n\nThe Master Transaction connects everything:\n- Links to [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) for all events\n- References [Data Anggota](03_data_anggota__member_data__.md) through transactions\n- Uses [Notaris Integration](04_notaris_integration_.md) for legal validation\n\nIt's the backbone that holds all cooperative data together!\n\n## What You've Learned\n\nExcellent work! You now understand how Master Transaction Management keeps track of every cooperative's current status and history. The system:\n\n- Maintains a master record for each cooperative\n- Tracks whether cooperatives are active, merged, or dissolved\n- Links all transactions to create a complete history\n- Provides powerful search and filtering capabilities\n\nThink of it as the central nervous system of the cooperative system - it knows the state of every cooperative at any moment and remembers everything that has happened!\n\n## Next Steps\n\nNow that you understand how cooperatives are tracked at the master level, let's explore what happens when data needs to be corrected in [Perbaikan Data (Data Correction)](06_perbaikan_data__data_correction__.md). Even the best systems need a way to fix mistakes!\n---\n# Chapter 6: Perbaikan Data (Data Correction)\n\nWelcome back! In the [previous chapter](05_master_transaction_management_.md), we learned how Master Transaction Management keeps track of every cooperative's status and history. But what happens when someone makes a mistake? What if the secretary's phone number was typed wrong, or the cooperative needs to update its business activities? That's where **Perbaikan Data** (Data Correction) comes to the rescue!\n\n## Why Do We Need Data Correction?\n\nImagine you just published a phone book for your neighborhood. A week later, Mrs. Sari calls saying her phone number was printed wrong - it should be 081234567890, not 081234567880. You can't recall all the phone books and reprint them, but you need a way to officially record and approve this correction, right?\n\nThe **Perbaikan Data** system is like a formal amendment process for cooperatives. When data needs to be corrected after a cooperative is established, you can't just change it directly - you need to submit a correction request, provide supporting documents, and get it reviewed and approved. It's like submitting an errata for an official document!\n\n## Your First Use Case: Correcting Board Member Information\n\nLet's say Pak Budi's cooperative \"Koperasi Maju Bersama\" needs to:\n1. Update the treasurer's phone number (it was typed wrong)\n2. Add a new business activity they forgot to include\n3. Fix a board member's address\n\nInstead of starting over, they can use Perbaikan Data to request these corrections officially!\n\n## Key Concepts Made Simple\n\n### 1. Correction Request\n\nThink of a correction request as a formal letter asking for changes:\n\n```php\n// Create a new correction request\n$correction = new TransaksiPerbaikan();\n$correction->t_koperasi_id = 123; // Which cooperative\n$correction->status_transaksi_perbaikan = 'verifikator_1_tunggu';\n```\n\nThe request starts in \"waiting for review\" status - just like submitting homework to your teacher!\n\n### 2. Verification Workflow\n\nEvery correction goes through multiple checkpoints:\n\n```php\n// Correction statuses\n$WAITING_V1 = 'verifikator_1_tunggu';  // First reviewer\n$WAITING_V2 = 'verifikator_2_tunggu';  // Second reviewer  \n$APPROVED = 'permohonan_diterima';     // All done!\n```\n\nIt's like getting your essay reviewed by two teachers before final approval!\n\n### 3. Supporting Documents\n\nCorrections need proof:\n\n```php\n// Required documents\n$documents = [\n    'file_surat_permohonan',      // Request letter\n    'file_surat_pernyataan',      // Statement letter\n    'file_surat_keterangan_domisili' // Address proof\n];\n```\n\nYou can't just say \"trust me\" - you need to show evidence for the changes!\n\n## Making Your First Correction Request\n\nLet's help Pak Budi correct his cooperative's data:\n\n### Step 1: Find the Cooperative\n\n```php\n// Look up the cooperative to correct\n$master = MasterTransaction::findExistTransactionForPerbaikan(\n    \"SK-2024-001\",           // Certificate number\n    \"2024-01-15\",           // Certificate date\n    \"KOPERASI MAJU BERSAMA\" // Name\n);\n```\n\nFirst, we need to find the exact cooperative record to correct.\n\n### Step 2: Specify What to Correct\n\n```php\n// List what needs correction\n$corrections = [\n    'pengawas_pengurus' => [\n        ['nama' => 'Ibu Rina', 'no_telp' => '081234567890']\n    ]\n];\n```\n\nWe clearly specify which data needs to be fixed and what the new values should be.\n\n### Step 3: Submit the Request\n\n```php\n// Create the correction request\n$request = new TransaksiPerbaikan();\n$request->data_diperbaiki_list = json_encode($corrections);\n$request->save();\n```\n\nThe corrections are saved as JSON so they can be reviewed before being applied!\n\n## How the Correction Workflow Works\n\nHere's what happens when you submit a correction request:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant R as Request\n    participant V1 as Verifier 1\n    participant V2 as Verifier 2\n    participant D as Database\n    \n    U->>R: Submit correction\n    R->>V1: Review request\n    V1->>V2: Approve & forward\n    V2->>D: Apply changes\n    D->>U: Correction complete!\n```\n\nThe multi-step verification ensures corrections are legitimate and accurate!\n\n### The Review Process\n\nWhen a verifier reviews your request:\n\n```php\n// First verifier reviews\n$verification = new VerifikasiPerbaikan();\n$verification->tahap = 'VERIFIKATOR_1';\n$verification->status = 'DITERIMA'; // Accepted!\n```\n\nEach verifier can accept or reject the request with a reason.\n\n### Handling Rejections\n\nIf a correction is rejected:\n\n```php\n// Rejection with reason\n$verification->status = 'DITOLAK';\n$verification->alasan = 'Missing supporting documents';\n```\n\nYou'll know exactly why it was rejected and what to fix!\n\n## Understanding the Database Structure\n\nCorrections are stored in multiple related tables:\n\n```php\n// Main correction transaction\n$correctionRecord = [\n    'id' => 456,\n    't_koperasi_id' => 123,  // Links to cooperative\n    'data_diperbaiki_list' => '{\"pengawas_pengurus\":[...]}',\n    'status_transaksi_perbaikan' => 'verifikator_1_tunggu'\n];\n```\n\nThe `data_diperbaiki_list` contains all requested changes in JSON format.\n\n## Real Implementation: The Correction Form\n\nThe correction process uses a multi-step form (in `controllers/PerbaikanDataController.php`):\n\n```php\n// Step 1: Identify cooperative\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n```\n\n```php\n// Step 2: Applicant information\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n```\n\n```php\n// Step 3: Upload documents and specify changes\n$model->scenario = PerbaikanDataForm::SCENARIO_CHECKLIST;\n```\n\nEach step collects different information, making the process manageable!\n\n## Working with Correction Helpers\n\nThe PerbaikanDataHelper (in `components/helper/PerbaikanDataHelper.php`) provides useful utilities:\n\n### Building a Data Snapshot\n\n```php\n// Capture current data before changes\n$snapshot = PerbaikanDataHelper::buildMasterSnapshot(\n    $transaksiKoperasi,\n    $requestedChanges\n);\n```\n\nThis creates a \"before\" picture so you can always see what changed!\n\n### Filtering Valid Corrections\n\n```php\n// Only keep allowed corrections\n$filtered = PerbaikanDataHelper::filterChecklistPerbaikan(\n    $selectedItems,\n    $corrections\n);\n```\n\nThis ensures only permitted types of corrections are processed.\n\n## Integration with Other Systems\n\nPerbaikan Data connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Finds cooperatives to correct\n- [Notaris Integration](04_notaris_integration_.md) - Notaries submit corrections\n- [Data Anggota](03_data_anggota__member_data__.md) - Corrects member information\n\nIt's the safety net that catches and fixes mistakes across the entire system!\n\n## What You've Learned\n\nFantastic work! You now understand how the Perbaikan Data system handles corrections to cooperative data. The system:\n\n- Provides a formal process for requesting data corrections\n- Requires supporting documents for accountability\n- Uses multi-level verification to ensure accuracy\n- Maintains a complete audit trail of all changes\n- Preserves data integrity while allowing necessary updates\n\nThink of it as the \"track changes\" feature in a word processor, but for cooperative data - every correction is documented, reviewed, and approved before being applied!\n\n## Next Steps\n\nNow that you understand how to correct cooperative data after establishment, let's explore how cooperatives define their business activities in [KBLI Business Activity](07_kbli_business_activity_.md). This is where cooperatives specify exactly what kind of business they'll be conducting!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 605 # models/MKbli.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\n\n\nclass MKbli extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%m_kbli}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    public static function getAktifitasUsaha($kode) {\n\n        return self::find()\n            ->select('kode, judul, uraian, tahun')\n            ->where( ['in', 'id_kbli', $kode] )\n            ->asArray()\n            ->all();\n    }\n}\n\n\n--- File: 607 # models/MappingKBLI.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%m_kbli}}\".\n *\n * @property int $id\n * @property string $kode\n * @property int $m_jenis_koperasi\n */\nclass MappingKBLI extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%m_kbli}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['m_jenis_koperasi'], 'required'],\n            [['m_jenis_koperasi'], 'integer'],\n            [['kode'], 'string', 'max' => 33],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'kode' => 'Kode',\n            'm_jenis_koperasi' => 'M Jenis Koperasi',\n        ];\n    }\n}\n\n\n--- File: 640 # models/bakum/KBLIBakum.php ---\n<?php\n\nnamespace app\\models\\bakum;\n\nuse app\\models\\Setting;\nuse Yii;\n\n/**\n * This is the model class for table \"m_kbli\".\n *\n * @property int $id_kbli\n * @property string $kode\n * @property string $kategori\n * @property string $judul\n * @property string $uraian\n */\nclass KBLIBakum extends \\yii\\db\\ActiveRecord\n{\n\n    const KODE_TKBM = 52240;\n    const KODE_SIMPAN_PINJAM_KONVENSIONAL = 64141;\n    const KODE_SIMPAN_PINJAM_SYARIAH = 64142;\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'm_kbli';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['uraian'], 'string'],\n            [['kode'], 'string', 'max' => 11],\n            [['kategori'], 'string', 'max' => 3],\n            [['judul'], 'string', 'max' => 255],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id_kbli' => 'Id Kbli',\n            'kode' => 'Kode KBLI',\n            'kategori' => 'Kategori KBLI',\n            'judul' => 'Judul KBLI',\n            'uraian' => 'Uraian KBLI',\n        ];\n    }\n\n    public static function find()\n    {\n        $array_kbli = Setting::getValue('hidden_kbli');\n        $array_kbli = json_decode($array_kbli);\n        return parent::find()->andOnCondition(['not in', 'kode', $array_kbli]);\n    }\n\n    public static function findWithoutFilter()\n    {\n        return parent::find();\n    }\n\n    public static function ProviderKBLI($id) {\n        return self::find()->where(['m_jenis_koperasi' => $id]);\n    }\n\n    public static function listKodeSimpanPinjam()\n    {\n        return [\n            self::KODE_SIMPAN_PINJAM_KONVENSIONAL,\n            self::KODE_SIMPAN_PINJAM_SYARIAH,\n        ];\n    }\n\n    public static function listKodeTkbm()\n    {\n        return [\n            self::KODE_TKBM,\n        ];\n    }\n}\n\n\n--- File: 580 # models/AktifitasUsaha.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\KBLIBakum;\n\n\nclass AktifitasUsaha extends ActiveRecord \n{\n    public static function tableName()\n    {\n        return '{{%t_aktifitas_usaha}}';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    public function getBakumKBLI() {\n        return $this->hasOne(KBLIBakum::className(),['id_kbli' => 'kbli_id']);\n    }\n}\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 7: KBLI Business Activity\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 7: KBLI Business Activity\n\nWelcome back! In the [previous chapter](06_perbaikan_data__data_correction__.md), we learned how the Perbaikan Data system helps fix mistakes in cooperative data. But here's an interesting question - how does the system know what kind of business a cooperative is allowed to do? Can a farming cooperative suddenly start operating as a bank? That's where **KBLI Business Activity** classification comes in!\n\n## Why Do We Need Business Activity Classification?\n\nImagine you're opening a restaurant. You need permits for food service, not for construction work or banking services. The government needs to know exactly what type of business you're running to ensure you follow the right regulations and standards.\n\n**KBLI** (Klasifikasi Baku Lapangan Usaha Indonesia - Indonesian Standard Industrial Classification) is like a giant catalog of every possible business activity in Indonesia. Each activity has a unique code - think of it like a barcode that tells everyone exactly what your cooperative does. A farming cooperative gets farming codes, a savings and loan cooperative gets financial service codes, and so on!\n\n## Your First Use Case: Setting Up Business Activities\n\nLet's say Ibu Sari is establishing \"Koperasi Tani Makmur\" (a farming cooperative) and needs to:\n1. Select that her cooperative will grow rice (KBLI code: 01121)\n2. Also add vegetable farming (KBLI code: 01131)\n3. Make sure she can't accidentally add banking activities (wrong type!)\n\nThe KBLI system ensures cooperatives only select appropriate business activities!\n\n## Key Concepts Made Simple\n\n### 1. KBLI Codes\n\nThink of KBLI codes like ISBN numbers for books - each one uniquely identifies a type of business:\n\n```php\n// Example KBLI codes\n$RICE_FARMING = \"01121\";        // Growing rice\n$SAVINGS_LOAN = \"64141\";        // Conventional savings & loan\n$LABOR_SERVICES = \"52240\";      // Port labor services\n```\n\nEach code tells you exactly what business activity is allowed.\n\n### 2. Business Activity Categories\n\nKBLI codes are organized into categories like a library:\n\n```php\n// Categories are like book sections\n$category = \"A\";  // Agriculture\n$category = \"G\";  // Trade\n$category = \"K\";  // Financial services\n```\n\nThis makes it easy to find related activities!\n\n### 3. Cooperative Type Mapping\n\nNot all KBLI codes are available to all cooperatives:\n\n```php\n// Farming cooperatives can't do banking!\n$farmingCoop = 1;     // Can only select farming codes\n$savingsLoanCoop = 6; // Can only select financial codes\n```\n\nIt's like age restrictions on movies - not everything is appropriate for everyone!\n\n## Adding Business Activities to Your Cooperative\n\nLet's help Ibu Sari add business activities to her farming cooperative:\n\n### Step 1: Find Available KBLI Codes\n\n```php\n// Get KBLI codes for farming cooperatives\n$kbliList = KBLIBakum::find()\n    ->where(['m_jenis_koperasi' => 1]) // Farming type\n    ->all();\n```\n\nThis returns only activities appropriate for farming cooperatives!\n\n### Step 2: Look Up Activity Details\n\n```php\n// Get details about rice farming\n$activity = KBLIBakum::findOne(['kode' => '01121']);\necho $activity->judul;  // \"Rice Farming\"\necho $activity->uraian; // Detailed description\n```\n\nEach code has a title and detailed description of what's allowed.\n\n### Step 3: Save Selected Activities\n\n```php\n// Add business activity to cooperative\n$businessActivity = new AktifitasUsaha();\n$businessActivity->kbli_id = 123; // Rice farming ID\n$businessActivity->t_koperasi_id = 456; // Cooperative ID\n$businessActivity->save();\n```\n\nNow the cooperative is officially registered for rice farming!\n\n## How KBLI Classification Works\n\nHere's what happens when selecting business activities:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant K as KBLI System\n    participant F as Filter\n    participant DB as Database\n    \n    C->>K: Request activities\n    K->>F: Apply type filter\n    F->>DB: Get matching codes\n    DB->>C: Return allowed activities\n```\n\nThe system filters activities based on cooperative type to ensure compliance!\n\n### The Filtering Process\n\nWhen loading available KBLI codes:\n\n```php\n// System checks cooperative type\n$cooperativeType = 6; // Savings & loan\n$allowedCodes = KBLIBakum::listKodeSimpanPinjam();\n// Returns [64141, 64142] - financial codes only\n```\n\nThis prevents inappropriate business activities from being selected.\n\n### Hidden Activities\n\nSome KBLI codes might be temporarily unavailable:\n\n```php\n// Get list of hidden codes from settings\n$hidden = Setting::getValue('hidden_kbli');\n$hiddenArray = json_decode($hidden);\n// These codes won't appear in searches\n```\n\nThis allows administrators to restrict certain activities when needed.\n\n## Understanding the Database Structure\n\nBusiness activities are stored across multiple tables:\n\n```php\n// KBLI master data\n$kbliMaster = [\n    'id_kbli' => 123,\n    'kode' => '01121',\n    'judul' => 'Rice Farming',\n    'kategori' => 'A'  // Agriculture\n];\n```\n\n```php\n// Cooperative's selected activities\n$selectedActivity = [\n    'id' => 456,\n    't_koperasi_id' => 789,  // Which cooperative\n    'kbli_id' => 123         // Which activity\n];\n```\n\nThese tables link cooperatives to their allowed business activities.\n\n## Real Implementation: The KBLI Models\n\nThe system uses several models to manage KBLI data:\n\n### The Main KBLI Model\n\n```php\n// In models/bakum/KBLIBakum.php\nclass KBLIBakum extends ActiveRecord {\n    // Special codes for specific types\n    const KODE_SIMPAN_PINJAM_KONVENSIONAL = 64141;\n    const KODE_TKBM = 52240;\n}\n```\n\nThis defines special business codes that have unique rules.\n\n### Getting Activity Details\n\n```php\n// Retrieve multiple activities at once\n$activities = MKbli::getAktifitasUsaha([123, 456]);\n// Returns array with code, title, description\n```\n\nPerfect for displaying a cooperative's business portfolio!\n\n### Activity Relationships\n\n```php\n// Link activity to KBLI details\n$activity = AktifitasUsaha::findOne($id);\n$kbliDetails = $activity->getBakumKBLI()->one();\necho $kbliDetails->judul; // Shows activity name\n```\n\nThis makes it easy to get full details about any business activity.\n\n## Special Activity Types\n\nSome business activities have special rules:\n\n### Savings and Loan Activities\n\n```php\n// Special financial codes\n$conventional = KBLIBakum::KODE_SIMPAN_PINJAM_KONVENSIONAL;\n$syariah = KBLIBakum::KODE_SIMPAN_PINJAM_SYARIAH;\n```\n\nThese require additional licensing and oversight!\n\n### Port Labor Services\n\n```php\n// TKBM (port labor) has special requirements\n$tkbmCode = KBLIBakum::KODE_TKBM;\n// Only available in port cities\n```\n\nLocation-specific activities are restricted geographically.\n\n## Integration with Other Systems\n\nKBLI Business Activity connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Activities are set during establishment\n- [Perbaikan Data](06_perbaikan_data__data_correction__.md) - Activities can be corrected if needed\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Activities are part of the transaction\n\nIt ensures cooperatives operate within their authorized business scope!\n\n## What You've Learned\n\nExcellent work! You now understand how the KBLI Business Activity system categorizes and manages what cooperatives can do. The system:\n\n- Uses standardized codes to classify every type of business\n- Filters activities based on cooperative type\n- Prevents inappropriate business selections\n- Maintains a detailed catalog of business descriptions\n- Links cooperatives to their authorized activities\n\nThink of it as a menu at a restaurant - vegetarian restaurants only show vegetarian dishes, seafood restaurants focus on fish, and so on. KBLI ensures each cooperative \"serves\" only what they're licensed to provide!\n\n## Next Steps\n\nNow that you understand how cooperatives define their business activities, let's explore how the system manages geographic information in [Wilayah (Regional) Management](08_wilayah__regional__management_.md). This is crucial because location affects what activities are allowed and which government offices oversee the cooperative!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Wilayah (Regional) Management\n\". This is Chapter 8.\n\nConcept Details:\n- Name: Wilayah (Regional) Management\n\n- Description:\nHandles geographical location data for cooperatives across Indonesian provinces, cities, and districts.\nWorks like a GPS system that organizes cooperatives by their physical locations in the administrative hierarchy.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n---\n# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!\n---\n# Chapter 5: Master Transaction Management\n\nWelcome back! In the [previous chapter](04_notaris_integration_.md), we learned how notaries provide legal certification for cooperatives. But here's an important question - how does the system keep track of all cooperatives and their current status? Is a cooperative still active? Has it merged with another? Has it been dissolved? That's where **Master Transaction Management** comes in!\n\n## Why Do We Need Master Transaction Management?\n\nImagine running a school directory that lists all schools in your city. Some schools are actively operating, some have merged with other schools, and some have closed down. You need a master list that shows the current status of each school at a glance, right?\n\nThe **Master Transaction Management** system is exactly that - a master directory for all cooperatives. It's like a living phonebook that not only lists all cooperatives but also knows whether they're still \"picking up the phone\" (active), have \"changed their number\" (merged), or have \"disconnected their line\" (dissolved).\n\n## Your First Use Case: Tracking Cooperative Lifecycle\n\nLet's say the government wants to know:\n1. How many active cooperatives exist in Jakarta?\n2. Which cooperatives have merged together?\n3. Which cooperatives have been dissolved?\n4. What's the complete history of \"Koperasi Maju Bersama\"?\n\nThe Master Transaction system answers all these questions instantly!\n\n## Key Concepts Made Simple\n\n### 1. Master Record\n\nThink of a master record as a cooperative's permanent file folder:\n\n```php\n// Each cooperative has one master record\n$master = MasterTransaction::findOne($cooperativeId);\necho $master->status; // 1 = Active\n```\n\nThis folder contains everything about the cooperative's current state.\n\n### 2. Cooperative Status Types\n\nEvery cooperative can be in one of three states:\n\n```php\n// Three possible states\n$ACTIVE = 1;     // Operating normally\n$MERGED = 2;     // Joined with another cooperative  \n$DISSOLVED = 0;  // No longer operating\n```\n\nIt's like a traffic light - green (active), yellow (merged), or red (dissolved)!\n\n### 3. Transaction History\n\nThe master record links to all transactions:\n\n```php\n// Get all transactions for a cooperative\n$history = $master->getListTransaksi();\necho count($history); // Shows total transactions\n```\n\nThis gives you the complete story of the cooperative's journey.\n\n## Checking a Cooperative's Status\n\nLet's find out the current status of a cooperative:\n\n### Step 1: Find the Master Record\n\n```php\n// Look up the cooperative\n$master = MasterTransaction::find()\n    ->where(['id' => 123])\n    ->one();\n```\n\nThis retrieves the master record for cooperative #123.\n\n### Step 2: Check Current Status\n\n```php\n// Check if cooperative is active\nif ($master->is_active == 1) {\n    echo \"Cooperative is operating!\";\n}\n```\n\nThe `is_active` field tells us if it's currently operating.\n\n### Step 3: Check Special Conditions\n\n```php\n// Check if it has merged\nif ($master->is_gabung == 1) {\n    echo \"This cooperative has merged!\";\n}\n```\n\nThe `is_gabung` flag indicates a merger has occurred.\n\n## How Master Transaction Works\n\nHere's what happens when tracking cooperative status:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant M as Master\n    participant T as Transaction\n    participant S as Status\n    \n    C->>T: New transaction occurs\n    T->>M: Update master record\n    M->>S: Change status if needed\n    S->>C: Status updated!\n```\n\nThe master record acts as the central truth about each cooperative's current state!\n\n### Creating a Master Record\n\nWhen a cooperative is first established:\n\n```php\n// New cooperative gets a master record\n$master = new MasterTransaction();\n$master->id_transaksi = $establishmentId;\n$master->status = 1; // Start as active\n$master->save();\n```\n\nThis creates the permanent tracking record.\n\n### Updating Status\n\nWhen major events occur, the status changes:\n\n```php\n// Cooperative merges with another\n$master->is_gabung = 1;\n$master->is_active = 0; // No longer independently active\n$master->save();\n```\n\nThe master record always reflects the current reality.\n\n## Understanding the Database Structure\n\nThe master transaction table (`master_transaksi`) stores:\n\n```php\n// Master record fields\n$masterRecord = [\n    'id' => 456,\n    'id_transaksi' => 123,  // Latest transaction\n    'status' => 1,          // Current status\n    'is_gabung' => 0,       // Merger flag\n    'is_deleted' => 0       // Soft delete flag\n];\n```\n\nEach field tracks a different aspect of the cooperative's state.\n\n## Real Implementation: The MasterTransaction Model\n\nThe main model (in `models/MasterTransaction.php`) manages all master operations:\n\n```php\nclass MasterTransaction extends ActiveRecord {\n    // Link to current transaction\n    public function getTransaksiKoperasi() {\n        return $this->hasOne(TransaksiKoperasi::className(), \n            ['id' => 'id_transaksi']);\n    }\n}\n```\n\nThis connects the master record to its transactions.\n\n## Finding Cooperatives\n\nThe system provides powerful search capabilities:\n\n### Search Active Cooperatives in a Region\n\n```php\n// Find active cooperatives in Jakarta\n$activeInJakarta = MasterTransaction::getDaftarKoperasi(\n    31,    // Jakarta province ID\n    null,  // Any city\n    ['status_koperasi' => 1] // Active only\n);\n```\n\nThis returns all operating cooperatives in Jakarta!\n\n### Track Cooperative History\n\n```php\n// Get all transactions for a master\n$transactions = $master->getListTransaksi();\nforeach ($transactions as $trans) {\n    echo $trans->jenis_transaksi; // Type of change\n}\n```\n\nThis shows every change the cooperative has undergone.\n\n## Managing Mergers\n\nWhen cooperatives merge, the system tracks it:\n\n```php\n// Mark cooperatives as merged\nSKHelper::changeMasterTransactionIsGabung($transactionId);\n// Updates all involved cooperatives\n```\n\nThe helper function handles the complex merger logic!\n\n## Integration with Other Systems\n\nThe Master Transaction connects everything:\n- Links to [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) for all events\n- References [Data Anggota](03_data_anggota__member_data__.md) through transactions\n- Uses [Notaris Integration](04_notaris_integration_.md) for legal validation\n\nIt's the backbone that holds all cooperative data together!\n\n## What You've Learned\n\nExcellent work! You now understand how Master Transaction Management keeps track of every cooperative's current status and history. The system:\n\n- Maintains a master record for each cooperative\n- Tracks whether cooperatives are active, merged, or dissolved\n- Links all transactions to create a complete history\n- Provides powerful search and filtering capabilities\n\nThink of it as the central nervous system of the cooperative system - it knows the state of every cooperative at any moment and remembers everything that has happened!\n\n## Next Steps\n\nNow that you understand how cooperatives are tracked at the master level, let's explore what happens when data needs to be corrected in [Perbaikan Data (Data Correction)](06_perbaikan_data__data_correction__.md). Even the best systems need a way to fix mistakes!\n---\n# Chapter 6: Perbaikan Data (Data Correction)\n\nWelcome back! In the [previous chapter](05_master_transaction_management_.md), we learned how Master Transaction Management keeps track of every cooperative's status and history. But what happens when someone makes a mistake? What if the secretary's phone number was typed wrong, or the cooperative needs to update its business activities? That's where **Perbaikan Data** (Data Correction) comes to the rescue!\n\n## Why Do We Need Data Correction?\n\nImagine you just published a phone book for your neighborhood. A week later, Mrs. Sari calls saying her phone number was printed wrong - it should be 081234567890, not 081234567880. You can't recall all the phone books and reprint them, but you need a way to officially record and approve this correction, right?\n\nThe **Perbaikan Data** system is like a formal amendment process for cooperatives. When data needs to be corrected after a cooperative is established, you can't just change it directly - you need to submit a correction request, provide supporting documents, and get it reviewed and approved. It's like submitting an errata for an official document!\n\n## Your First Use Case: Correcting Board Member Information\n\nLet's say Pak Budi's cooperative \"Koperasi Maju Bersama\" needs to:\n1. Update the treasurer's phone number (it was typed wrong)\n2. Add a new business activity they forgot to include\n3. Fix a board member's address\n\nInstead of starting over, they can use Perbaikan Data to request these corrections officially!\n\n## Key Concepts Made Simple\n\n### 1. Correction Request\n\nThink of a correction request as a formal letter asking for changes:\n\n```php\n// Create a new correction request\n$correction = new TransaksiPerbaikan();\n$correction->t_koperasi_id = 123; // Which cooperative\n$correction->status_transaksi_perbaikan = 'verifikator_1_tunggu';\n```\n\nThe request starts in \"waiting for review\" status - just like submitting homework to your teacher!\n\n### 2. Verification Workflow\n\nEvery correction goes through multiple checkpoints:\n\n```php\n// Correction statuses\n$WAITING_V1 = 'verifikator_1_tunggu';  // First reviewer\n$WAITING_V2 = 'verifikator_2_tunggu';  // Second reviewer  \n$APPROVED = 'permohonan_diterima';     // All done!\n```\n\nIt's like getting your essay reviewed by two teachers before final approval!\n\n### 3. Supporting Documents\n\nCorrections need proof:\n\n```php\n// Required documents\n$documents = [\n    'file_surat_permohonan',      // Request letter\n    'file_surat_pernyataan',      // Statement letter\n    'file_surat_keterangan_domisili' // Address proof\n];\n```\n\nYou can't just say \"trust me\" - you need to show evidence for the changes!\n\n## Making Your First Correction Request\n\nLet's help Pak Budi correct his cooperative's data:\n\n### Step 1: Find the Cooperative\n\n```php\n// Look up the cooperative to correct\n$master = MasterTransaction::findExistTransactionForPerbaikan(\n    \"SK-2024-001\",           // Certificate number\n    \"2024-01-15\",           // Certificate date\n    \"KOPERASI MAJU BERSAMA\" // Name\n);\n```\n\nFirst, we need to find the exact cooperative record to correct.\n\n### Step 2: Specify What to Correct\n\n```php\n// List what needs correction\n$corrections = [\n    'pengawas_pengurus' => [\n        ['nama' => 'Ibu Rina', 'no_telp' => '081234567890']\n    ]\n];\n```\n\nWe clearly specify which data needs to be fixed and what the new values should be.\n\n### Step 3: Submit the Request\n\n```php\n// Create the correction request\n$request = new TransaksiPerbaikan();\n$request->data_diperbaiki_list = json_encode($corrections);\n$request->save();\n```\n\nThe corrections are saved as JSON so they can be reviewed before being applied!\n\n## How the Correction Workflow Works\n\nHere's what happens when you submit a correction request:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant R as Request\n    participant V1 as Verifier 1\n    participant V2 as Verifier 2\n    participant D as Database\n    \n    U->>R: Submit correction\n    R->>V1: Review request\n    V1->>V2: Approve & forward\n    V2->>D: Apply changes\n    D->>U: Correction complete!\n```\n\nThe multi-step verification ensures corrections are legitimate and accurate!\n\n### The Review Process\n\nWhen a verifier reviews your request:\n\n```php\n// First verifier reviews\n$verification = new VerifikasiPerbaikan();\n$verification->tahap = 'VERIFIKATOR_1';\n$verification->status = 'DITERIMA'; // Accepted!\n```\n\nEach verifier can accept or reject the request with a reason.\n\n### Handling Rejections\n\nIf a correction is rejected:\n\n```php\n// Rejection with reason\n$verification->status = 'DITOLAK';\n$verification->alasan = 'Missing supporting documents';\n```\n\nYou'll know exactly why it was rejected and what to fix!\n\n## Understanding the Database Structure\n\nCorrections are stored in multiple related tables:\n\n```php\n// Main correction transaction\n$correctionRecord = [\n    'id' => 456,\n    't_koperasi_id' => 123,  // Links to cooperative\n    'data_diperbaiki_list' => '{\"pengawas_pengurus\":[...]}',\n    'status_transaksi_perbaikan' => 'verifikator_1_tunggu'\n];\n```\n\nThe `data_diperbaiki_list` contains all requested changes in JSON format.\n\n## Real Implementation: The Correction Form\n\nThe correction process uses a multi-step form (in `controllers/PerbaikanDataController.php`):\n\n```php\n// Step 1: Identify cooperative\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n```\n\n```php\n// Step 2: Applicant information\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n```\n\n```php\n// Step 3: Upload documents and specify changes\n$model->scenario = PerbaikanDataForm::SCENARIO_CHECKLIST;\n```\n\nEach step collects different information, making the process manageable!\n\n## Working with Correction Helpers\n\nThe PerbaikanDataHelper (in `components/helper/PerbaikanDataHelper.php`) provides useful utilities:\n\n### Building a Data Snapshot\n\n```php\n// Capture current data before changes\n$snapshot = PerbaikanDataHelper::buildMasterSnapshot(\n    $transaksiKoperasi,\n    $requestedChanges\n);\n```\n\nThis creates a \"before\" picture so you can always see what changed!\n\n### Filtering Valid Corrections\n\n```php\n// Only keep allowed corrections\n$filtered = PerbaikanDataHelper::filterChecklistPerbaikan(\n    $selectedItems,\n    $corrections\n);\n```\n\nThis ensures only permitted types of corrections are processed.\n\n## Integration with Other Systems\n\nPerbaikan Data connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Finds cooperatives to correct\n- [Notaris Integration](04_notaris_integration_.md) - Notaries submit corrections\n- [Data Anggota](03_data_anggota__member_data__.md) - Corrects member information\n\nIt's the safety net that catches and fixes mistakes across the entire system!\n\n## What You've Learned\n\nFantastic work! You now understand how the Perbaikan Data system handles corrections to cooperative data. The system:\n\n- Provides a formal process for requesting data corrections\n- Requires supporting documents for accountability\n- Uses multi-level verification to ensure accuracy\n- Maintains a complete audit trail of all changes\n- Preserves data integrity while allowing necessary updates\n\nThink of it as the \"track changes\" feature in a word processor, but for cooperative data - every correction is documented, reviewed, and approved before being applied!\n\n## Next Steps\n\nNow that you understand how to correct cooperative data after establishment, let's explore how cooperatives define their business activities in [KBLI Business Activity](07_kbli_business_activity_.md). This is where cooperatives specify exactly what kind of business they'll be conducting!\n---\n# Chapter 7: KBLI Business Activity\n\nWelcome back! In the [previous chapter](06_perbaikan_data__data_correction__.md), we learned how the Perbaikan Data system helps fix mistakes in cooperative data. But here's an interesting question - how does the system know what kind of business a cooperative is allowed to do? Can a farming cooperative suddenly start operating as a bank? That's where **KBLI Business Activity** classification comes in!\n\n## Why Do We Need Business Activity Classification?\n\nImagine you're opening a restaurant. You need permits for food service, not for construction work or banking services. The government needs to know exactly what type of business you're running to ensure you follow the right regulations and standards.\n\n**KBLI** (Klasifikasi Baku Lapangan Usaha Indonesia - Indonesian Standard Industrial Classification) is like a giant catalog of every possible business activity in Indonesia. Each activity has a unique code - think of it like a barcode that tells everyone exactly what your cooperative does. A farming cooperative gets farming codes, a savings and loan cooperative gets financial service codes, and so on!\n\n## Your First Use Case: Setting Up Business Activities\n\nLet's say Ibu Sari is establishing \"Koperasi Tani Makmur\" (a farming cooperative) and needs to:\n1. Select that her cooperative will grow rice (KBLI code: 01121)\n2. Also add vegetable farming (KBLI code: 01131)\n3. Make sure she can't accidentally add banking activities (wrong type!)\n\nThe KBLI system ensures cooperatives only select appropriate business activities!\n\n## Key Concepts Made Simple\n\n### 1. KBLI Codes\n\nThink of KBLI codes like ISBN numbers for books - each one uniquely identifies a type of business:\n\n```php\n// Example KBLI codes\n$RICE_FARMING = \"01121\";        // Growing rice\n$SAVINGS_LOAN = \"64141\";        // Conventional savings & loan\n$LABOR_SERVICES = \"52240\";      // Port labor services\n```\n\nEach code tells you exactly what business activity is allowed.\n\n### 2. Business Activity Categories\n\nKBLI codes are organized into categories like a library:\n\n```php\n// Categories are like book sections\n$category = \"A\";  // Agriculture\n$category = \"G\";  // Trade\n$category = \"K\";  // Financial services\n```\n\nThis makes it easy to find related activities!\n\n### 3. Cooperative Type Mapping\n\nNot all KBLI codes are available to all cooperatives:\n\n```php\n// Farming cooperatives can't do banking!\n$farmingCoop = 1;     // Can only select farming codes\n$savingsLoanCoop = 6; // Can only select financial codes\n```\n\nIt's like age restrictions on movies - not everything is appropriate for everyone!\n\n## Adding Business Activities to Your Cooperative\n\nLet's help Ibu Sari add business activities to her farming cooperative:\n\n### Step 1: Find Available KBLI Codes\n\n```php\n// Get KBLI codes for farming cooperatives\n$kbliList = KBLIBakum::find()\n    ->where(['m_jenis_koperasi' => 1]) // Farming type\n    ->all();\n```\n\nThis returns only activities appropriate for farming cooperatives!\n\n### Step 2: Look Up Activity Details\n\n```php\n// Get details about rice farming\n$activity = KBLIBakum::findOne(['kode' => '01121']);\necho $activity->judul;  // \"Rice Farming\"\necho $activity->uraian; // Detailed description\n```\n\nEach code has a title and detailed description of what's allowed.\n\n### Step 3: Save Selected Activities\n\n```php\n// Add business activity to cooperative\n$businessActivity = new AktifitasUsaha();\n$businessActivity->kbli_id = 123; // Rice farming ID\n$businessActivity->t_koperasi_id = 456; // Cooperative ID\n$businessActivity->save();\n```\n\nNow the cooperative is officially registered for rice farming!\n\n## How KBLI Classification Works\n\nHere's what happens when selecting business activities:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant K as KBLI System\n    participant F as Filter\n    participant DB as Database\n    \n    C->>K: Request activities\n    K->>F: Apply type filter\n    F->>DB: Get matching codes\n    DB->>C: Return allowed activities\n```\n\nThe system filters activities based on cooperative type to ensure compliance!\n\n### The Filtering Process\n\nWhen loading available KBLI codes:\n\n```php\n// System checks cooperative type\n$cooperativeType = 6; // Savings & loan\n$allowedCodes = KBLIBakum::listKodeSimpanPinjam();\n// Returns [64141, 64142] - financial codes only\n```\n\nThis prevents inappropriate business activities from being selected.\n\n### Hidden Activities\n\nSome KBLI codes might be temporarily unavailable:\n\n```php\n// Get list of hidden codes from settings\n$hidden = Setting::getValue('hidden_kbli');\n$hiddenArray = json_decode($hidden);\n// These codes won't appear in searches\n```\n\nThis allows administrators to restrict certain activities when needed.\n\n## Understanding the Database Structure\n\nBusiness activities are stored across multiple tables:\n\n```php\n// KBLI master data\n$kbliMaster = [\n    'id_kbli' => 123,\n    'kode' => '01121',\n    'judul' => 'Rice Farming',\n    'kategori' => 'A'  // Agriculture\n];\n```\n\n```php\n// Cooperative's selected activities\n$selectedActivity = [\n    'id' => 456,\n    't_koperasi_id' => 789,  // Which cooperative\n    'kbli_id' => 123         // Which activity\n];\n```\n\nThese tables link cooperatives to their allowed business activities.\n\n## Real Implementation: The KBLI Models\n\nThe system uses several models to manage KBLI data:\n\n### The Main KBLI Model\n\n```php\n// In models/bakum/KBLIBakum.php\nclass KBLIBakum extends ActiveRecord {\n    // Special codes for specific types\n    const KODE_SIMPAN_PINJAM_KONVENSIONAL = 64141;\n    const KODE_TKBM = 52240;\n}\n```\n\nThis defines special business codes that have unique rules.\n\n### Getting Activity Details\n\n```php\n// Retrieve multiple activities at once\n$activities = MKbli::getAktifitasUsaha([123, 456]);\n// Returns array with code, title, description\n```\n\nPerfect for displaying a cooperative's business portfolio!\n\n### Activity Relationships\n\n```php\n// Link activity to KBLI details\n$activity = AktifitasUsaha::findOne($id);\n$kbliDetails = $activity->getBakumKBLI()->one();\necho $kbliDetails->judul; // Shows activity name\n```\n\nThis makes it easy to get full details about any business activity.\n\n## Special Activity Types\n\nSome business activities have special rules:\n\n### Savings and Loan Activities\n\n```php\n// Special financial codes\n$conventional = KBLIBakum::KODE_SIMPAN_PINJAM_KONVENSIONAL;\n$syariah = KBLIBakum::KODE_SIMPAN_PINJAM_SYARIAH;\n```\n\nThese require additional licensing and oversight!\n\n### Port Labor Services\n\n```php\n// TKBM (port labor) has special requirements\n$tkbmCode = KBLIBakum::KODE_TKBM;\n// Only available in port cities\n```\n\nLocation-specific activities are restricted geographically.\n\n## Integration with Other Systems\n\nKBLI Business Activity connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Activities are set during establishment\n- [Perbaikan Data](06_perbaikan_data__data_correction__.md) - Activities can be corrected if needed\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Activities are part of the transaction\n\nIt ensures cooperatives operate within their authorized business scope!\n\n## What You've Learned\n\nExcellent work! You now understand how the KBLI Business Activity system categorizes and manages what cooperatives can do. The system:\n\n- Uses standardized codes to classify every type of business\n- Filters activities based on cooperative type\n- Prevents inappropriate business selections\n- Maintains a detailed catalog of business descriptions\n- Links cooperatives to their authorized activities\n\nThink of it as a menu at a restaurant - vegetarian restaurants only show vegetarian dishes, seafood restaurants focus on fish, and so on. KBLI ensures each cooperative \"serves\" only what they're licensed to provide!\n\n## Next Steps\n\nNow that you understand how cooperatives define their business activities, let's explore how the system manages geographic information in [Wilayah (Regional) Management](08_wilayah__regional__management_.md). This is crucial because location affects what activities are allowed and which government offices oversee the cooperative!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 686 # modules/Api/controllers/WilayahController.php ---\n<?php\nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse app\\models\\Wilayah;\nuse yii\\rest\\Controller;\n\nclass WilayahController extends Controller {\n\n    public function actionGetChildWilayah($id, $tipe) {\n        if (!$id || !Yii::$app->request->isAjax) {\n            return json_encode([['id' => '0','nama' => 'Tidak Ditemukan']]);\n        }\n        \n        $data = Wilayah::getChildWilayah($id, $tipe);\n        \n        if (!$data) {\n            return json_encode([['id' => '0','nama' => 'Tidak Ditemukan']]);\n        }\n\n        $arr = [];\n        foreach($data as $d) {\n            if($tipe == 'Kelurahan') {\n                $arr[] = [\n                    'id' => $d['ID_WIL'],\n                    'nama' => $d['NM_KELURAHAN'],\n                ];\n                continue;\n            }\n\n            $arr[] = [\n                'id' => $d['WILAYAH_ID'],\n                'nama' => $d['NAMA'],\n            ];\n        }\n        return json_encode($arr);\n    }\n\n}\n\n--- File: 627 # models/Wilayah.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse yii\\db\\ActiveRecord;\nuse app\\models\\bakum\\WilayahSABH;\n\n\nclass Wilayah extends ActiveRecord \n{\n    \n    public static function tableName()\n    {\n        return 'WILAYAH';\n    }\n\n    public static function getDb()\n    {\n        return Yii::$app->get('db_notariat2');\n    }\n\n    public static function getDataProvinsi() {\n        return self::find()\n                ->where(['PARENT_ID' => '0'])\n                ->andWhere(['TIPE' => 'Provinsi'])\n                ->orderBy('NAMA')\n                ->all();\n    }\n\n    public static function getChildWilayah($parent,$tipe) {\n        if($tipe != 'Kelurahan') {\n            $data = self::find()\n                        ->where(['PARENT_ID' => $parent])\n                        ->andWhere(['TIPE' => $tipe])\n                        ->orderBy('NAMA')\n                        ->all();\n        }\n        else {\n            $data = WilayahSABH::find()\n                            ->where(['ID_WILAYAH_M' => $parent])\n                            ->orderBy('NM_KELURAHAN')\n                            ->all();\n        }\n        return $data;\n    }\n\n    public static function getDDListProvinsi() {\n        $data = self::getDataProvinsi();\n        $arr = [];\n        foreach ($data as $val) {\n            $arr[$val['WILAYAH_ID']] = $val['NAMA']; \n        }\n        return $arr;\n    }\n\n    public static function getKodeWilayah($id) {\n        $data = self::find()->where(['WILAYAH_ID' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->KODE;\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['WILAYAH_ID' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->NAMA;\n    }\n}\n\n\n\n--- File: 642 # models/bakum/WilayahSABH.php ---\n<?php\n\nnamespace app\\models\\bakum;\n\nuse Yii;\n\n/**\n * This is the model class for table \"{{%WILAYAH_SABH}}\".\n *\n * @property int $WSID\n * @property int $ID_WIL\n * @property int $ID_WILAYAH_M\n * @property string $KD_WIL\n * @property string $NM_KELURAHAN\n * @property string $NM_KECAMATAN\n * @property string $NM_DATI2\n * @property string $NM_DATI1\n * @property string $KD_POS\n * @property string $KD_KPP\n * @property string $KD_KP2KP\n */\nclass WilayahSABH extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%WILAYAH_SABH}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_bakum');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['ID_WIL', 'ID_WILAYAH_M'], 'integer'],\n            [['KD_WIL', 'KD_KP2KP'], 'string', 'max' => 15],\n            [['NM_KELURAHAN', 'NM_KECAMATAN', 'NM_DATI1'], 'string', 'max' => 30],\n            [['NM_DATI2'], 'string', 'max' => 35],\n            [['KD_POS', 'KD_KPP'], 'string', 'max' => 10],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'WSID' => 'Wsid',\n            'ID_WIL' => 'Id  Wil',\n            'ID_WILAYAH_M' => 'Id  Wilayah  M',\n            'KD_WIL' => 'Kd  Wil',\n            'NM_KELURAHAN' => 'Nm  Kelurahan',\n            'NM_KECAMATAN' => 'Nm  Kecamatan',\n            'NM_DATI2' => 'Nm  Dati2',\n            'NM_DATI1' => 'Nm  Dati1',\n            'KD_POS' => 'Kd  Pos',\n            'KD_KPP' => 'Kd  Kpp',\n            'KD_KP2KP' => 'Kd  Kp2 Kp',\n        ];\n    }\n\n    public static function getNama($id) {\n        $data = self::find()->where(['ID_WIL' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->NM_KELURAHAN;\n    }\n\n    public static function getKode($id) {\n        $data = self::find()->where(['ID_WIL' => $id])->one();\n        if(!$data) {\n            return null;\n        }\n        return $data->KD_WIL;\n    }\n\n    public static function getKelurahanNameByParentIdAndIdWil($parent, $id_wil) {\n        $data = self::find()->where(['ID_WILAYAH_M' => $parent, 'ID_WIL' => $id_wil])\n                            ->one();\n\n        if ($data) {\n            return $data->NM_KELURAHAN;\n        } else {\n            return self::getNama($id_wil);\n        }\n    }\n\n    public static function getWsidByIdWil($id_wil)\n    {\n        if ($id_wil) {\n            if ($data = self::find()->where(['ID_WIL' => $id_wil])->one()) {\n                return $data->WSID;\n            }\n        }\n\n        return null;\n    }\n}\n\n\n--- File: 629 # models/WilayahOds.php ---\n<?php\n\nnamespace app\\models;\n\nuse app\\models\\Wilayah;\nuse app\\models\\WilayahSabh;\nuse Yii;\n\n/**\n * This is the model class for table \"kop_m_wilayah_ods\".\n *\n * @property int $id\n * @property string $id_provinsi\n * @property string $provinsi\n * @property string $id_kabupaten\n * @property string $kabupaten\n * @property string $id_kecamatan\n * @property string $kecamatan\n * @property string $id_kelurahan\n * @property string $kelurahan\n * @property int $wilayah_kelurahan_id\n * @property string $counter\n */\nclass WilayahOds extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return '{{%m_wilayah_ods}}';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('db_koperasi');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            [['wilayah_kelurahan_id', 'counter'], 'integer'],\n            [['id_provinsi', 'provinsi', 'id_kabupaten', 'kabupaten', 'id_kecamatan', 'kecamatan', 'id_kelurahan', 'kelurahan'], 'string', 'max' => 50],\n        ];\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id' => 'ID',\n            'id_provinsi' => 'Id Provinsi',\n            'provinsi' => 'Provinsi',\n            'id_kabupaten' => 'Id Kabupaten',\n            'kabupaten' => 'Kabupaten',\n            'id_kecamatan' => 'Id Kecamatan',\n            'kecamatan' => 'Kecamatan',\n            'id_kelurahan' => 'Id Kelurahan',\n            'kelurahan' => 'Kelurahan',\n            'wilayah_kelurahan_id' => 'Wilayah Kelurahan ID',\n            'counter' => 'Counter',\n        ];\n    }\n\n    public static function getKodeWilayah($id)\n    {\n        $data = self::find()->where(['wilayah_kelurahan_id' => $id])->one();\n\n        if ($data) {\n            return $data->id_provinsi.$data->id_kabupaten.$data->id_kecamatan.$data->id_kelurahan;\n        }\n\n        return null;\n    }\n\n    public static function getWilayah($full_id)\n    {\n        $data = self::find()\n                    ->where(['CONCAT(id_provinsi, id_kabupaten, id_kecamatan, id_kelurahan)' => $full_id])->one();\n\n        if ($data) {\n            $kelurahan = WilayahSabh::find()->where(['ID_WIL' => $data->wilayah_kelurahan_id])->one();\n\n            if ($kelurahan) {\n                $wilayah = Wilayah::find()\n                            ->alias('kecamatan')\n                            ->select([\n                                'kecamatan.WILAYAH_ID AS kecamatan_id', 'kecamatan.nama AS nama_kecamatan',\n                                'kabupaten.WILAYAH_ID AS kab_kota_id', 'kabupaten.nama AS nama_kabupaten',\n                                'provinsi.WILAYAH_ID AS provinsi_id', 'provinsi.nama AS nama_provinsi',\n                            ])\n                            ->leftJoin('WILAYAH kabupaten', 'kecamatan.PARENT_ID = kabupaten.WILAYAH_ID')\n                            ->leftJoin('WILAYAH provinsi', 'kabupaten.PARENT_ID = provinsi.WILAYAH_ID')\n                            ->where(['kecamatan.WILAYAH_ID' => $kelurahan->ID_WILAYAH_M])\n                            ->asArray()\n                            ->one();\n\n                if ($wilayah) {\n                    return [\n                        'provinsi_id' => $wilayah['provinsi_id'],\n                        'nama_provinsi' => $wilayah['nama_provinsi'],\n                        'kab_kota_id' => $wilayah['kab_kota_id'],\n                        'nama_kabupaten' => $wilayah['nama_kabupaten'],\n                        'kecamatan_id' => $wilayah['kecamatan_id'],\n                        'nama_kecamatan' => $wilayah['nama_kecamatan'],\n                        'kel_desa_id' => $kelurahan['ID_WIL'],\n                        'nama_kelurahan' => $kelurahan['NM_KELURAHAN'],\n                    ];\n                }\n            }\n        }\n\n        return null;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 8: Wilayah (Regional) Management\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 8: Wilayah (Regional) Management\n\nWelcome back! In the [previous chapter](07_kbli_business_activity_.md), we learned how KBLI codes help classify what business activities cooperatives can perform. But here's an important question - where exactly are these cooperatives located? How does the system know if a cooperative is in Jakarta or Surabaya? That's where **Wilayah (Regional) Management** comes in - it's like the GPS system for your cooperatives!\n\n## Why Do We Need Regional Management?\n\nImagine you're managing a national pizza delivery chain. You need to know exactly where each branch is located - not just \"somewhere in Jakarta\" but the exact province, city, district, and even neighborhood. Why? Because different areas have different regulations, different government offices, and different delivery zones!\n\nThe **Wilayah** system is exactly like that for cooperatives. It organizes Indonesia's entire geography into a neat hierarchy: from provinces down to cities, then districts, and finally villages. It's like a giant address book that knows every corner of Indonesia and can tell you exactly where each cooperative calls home!\n\n## Your First Use Case: Registering Cooperative Location\n\nLet's say Pak Ahmad is establishing \"Koperasi Nelayan Sejahtera\" (a fishermen's cooperative) and needs to:\n1. Select that it's in East Java Province\n2. Narrow down to Surabaya City\n3. Specify Kenjeran District (near the port)\n4. Pick the exact village where the office is located\n\nThe Wilayah system guides him through Indonesia's geography step by step!\n\n## Key Concepts Made Simple\n\n### 1. Geographic Hierarchy\n\nIndonesia is organized like a family tree:\n\n```php\n// The hierarchy levels\n$province = \"Jawa Timur\";      // Top level\n$city = \"Surabaya\";           // Under province\n$district = \"Kenjeran\";        // Under city\n$village = \"Bulak\";            // Under district\n```\n\nThink of it like your home address - you start broad (country) and get more specific (street number)!\n\n### 2. Parent-Child Relationships\n\nEvery location has a parent (except provinces):\n\n```php\n// Each level knows its parent\n$surabaya->parent = \"Jawa Timur\";\n$kenjeran->parent = \"Surabaya\";\n$bulak->parent = \"Kenjeran\";\n```\n\nIt's like Russian nesting dolls - each location fits inside a larger one!\n\n### 3. Location IDs\n\nEvery location has a unique ID number:\n\n```php\n// Unique identifiers\n$jakarta_id = 31;        // DKI Jakarta\n$surabaya_id = 3578;     // Surabaya City\n$kenjeran_id = 357804;   // Kenjeran District\n```\n\nThese IDs are like postal codes - they uniquely identify each location!\n\n## Finding Your Cooperative's Location\n\nLet's help Pak Ahmad register his cooperative's location:\n\n### Step 1: Get All Provinces\n\n```php\n// Start with provinces\n$provinces = Wilayah::getDataProvinsi();\n// Returns all 34 Indonesian provinces\n```\n\nThis gives you the top-level choices - like choosing a country on a website!\n\n### Step 2: Get Cities in the Province\n\n```php\n// User selects East Java (ID: 35)\n$cities = Wilayah::getChildWilayah(35, 'Kabupaten');\n// Returns all cities in East Java\n```\n\nOnce you pick a province, you get all its cities - just like how selecting a country shows its states!\n\n### Step 3: Get Districts in the City\n\n```php\n// User selects Surabaya (ID: 3578)\n$districts = Wilayah::getChildWilayah(3578, 'Kecamatan');\n// Returns all districts in Surabaya\n```\n\nNow we're getting more specific - like zooming in on a map!\n\n### Step 4: Get Villages in the District\n\n```php\n// User selects Kenjeran (ID: 357804)\n$villages = WilayahSABH::find()\n    ->where(['ID_WILAYAH_M' => 357804])\n    ->all();\n// Returns all villages in Kenjeran\n```\n\nFinally, we get to the most specific level - the exact neighborhood!\n\n## How Location Lookup Works\n\nHere's what happens when you search for locations:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant C as Controller\n    participant W as Wilayah\n    participant DB as Database\n    \n    U->>C: Select province\n    C->>W: Get child locations\n    W->>DB: Query by parent\n    DB->>U: Return cities\n```\n\nThe system navigates the geographic hierarchy to find the right locations!\n\n### The AJAX Location Loading\n\nWhen you select a location, the system loads its children dynamically:\n\n```php\n// In WilayahController.php\npublic function actionGetChildWilayah($id, $tipe) {\n    $data = Wilayah::getChildWilayah($id, $tipe);\n    return json_encode($data);\n}\n```\n\nThis loads locations without refreshing the page - like Google Maps zooming in smoothly!\n\n### Handling Different Location Types\n\nThe system treats villages specially:\n\n```php\n// Villages use a different table\nif($tipe == 'Kelurahan') {\n    // Query WilayahSABH table\n    $data = WilayahSABH::find()\n        ->where(['ID_WILAYAH_M' => $parent])\n        ->all();\n}\n```\n\nVillages have more detailed information, so they get their own special storage!\n\n## Understanding the Database Structure\n\nThe geographic data is stored in two main tables:\n\n```php\n// Main location table (WILAYAH)\n$location = [\n    'WILAYAH_ID' => 3578,\n    'NAMA' => 'Surabaya',\n    'PARENT_ID' => 35,  // East Java\n    'TIPE' => 'Kabupaten'\n];\n```\n\n```php\n// Village details (WILAYAH_SABH)\n$village = [\n    'ID_WIL' => 123456,\n    'NM_KELURAHAN' => 'Bulak',\n    'ID_WILAYAH_M' => 357804,  // Parent district\n    'KD_POS' => '60125'        // Postal code\n];\n```\n\nThe two tables work together to map all of Indonesia!\n\n## Real Implementation: The Wilayah Models\n\nThe main model (in `models/Wilayah.php`) handles location queries:\n\n```php\n// Get all provinces\npublic static function getDataProvinsi() {\n    return self::find()\n        ->where(['PARENT_ID' => '0'])  // No parent\n        ->where(['TIPE' => 'Provinsi'])\n        ->all();\n}\n```\n\nProvinces have no parent (PARENT_ID = 0) - they're the top of the tree!\n\n### Getting Location Names\n\n```php\n// Get name by ID\n$provinceName = Wilayah::getNama(31);\necho $provinceName; // \"DKI Jakarta\"\n```\n\nThis is useful when you need to display the location name to users.\n\n### Getting Location Codes\n\n```php\n// Get official code\n$code = Wilayah::getKodeWilayah(3578);\necho $code; // Official Surabaya code\n```\n\nThese codes are used for government reporting and official documents.\n\n## Working with Complete Addresses\n\nThe WilayahOds model provides complete location information:\n\n```php\n// Get full location details\n$fullLocation = WilayahOds::getWilayah('357812034005');\n// Returns complete hierarchy from province to village\n```\n\nThis gives you the entire address chain in one go - super convenient!\n\n## Integration with Other Systems\n\nWilayah Management connects with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Every cooperative must have a location\n- [Master Transaction Management](05_master_transaction_management_.md) - Search cooperatives by region\n- [KBLI Business Activity](07_kbli_business_activity_.md) - Some activities are location-specific\n\nIt's the geographic backbone that tells us where everything happens!\n\n## What You've Learned\n\nGreat job! You now understand how the Wilayah system maps every cooperative's location in Indonesia. The system:\n\n- Organizes Indonesia's geography in a clear hierarchy\n- Provides easy navigation from provinces to villages\n- Uses parent-child relationships to maintain structure\n- Supports dynamic loading for smooth user experience\n- Stores detailed information for every location level\n\nThink of it as Google Maps specifically designed for Indonesian cooperatives - it knows every province, city, district, and village, making it easy to pinpoint exactly where each cooperative operates!\n\n## Next Steps\n\nNow that you understand how the system manages geographic locations, let's explore how it integrates with Indonesia's civil registration system in [Dukcapil Integration](09_dukcapil_integration_.md). This is where member identities are verified against national databases!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"Dukcapil Integration\n\". This is Chapter 9.\n\nConcept Details:\n- Name: Dukcapil Integration\n\n- Description:\nValidates citizen identity data against the national population database (Dukcapil).\nLike a background check system that verifies people's identities are legitimate before they can manage cooperatives.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n---\n# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!\n---\n# Chapter 5: Master Transaction Management\n\nWelcome back! In the [previous chapter](04_notaris_integration_.md), we learned how notaries provide legal certification for cooperatives. But here's an important question - how does the system keep track of all cooperatives and their current status? Is a cooperative still active? Has it merged with another? Has it been dissolved? That's where **Master Transaction Management** comes in!\n\n## Why Do We Need Master Transaction Management?\n\nImagine running a school directory that lists all schools in your city. Some schools are actively operating, some have merged with other schools, and some have closed down. You need a master list that shows the current status of each school at a glance, right?\n\nThe **Master Transaction Management** system is exactly that - a master directory for all cooperatives. It's like a living phonebook that not only lists all cooperatives but also knows whether they're still \"picking up the phone\" (active), have \"changed their number\" (merged), or have \"disconnected their line\" (dissolved).\n\n## Your First Use Case: Tracking Cooperative Lifecycle\n\nLet's say the government wants to know:\n1. How many active cooperatives exist in Jakarta?\n2. Which cooperatives have merged together?\n3. Which cooperatives have been dissolved?\n4. What's the complete history of \"Koperasi Maju Bersama\"?\n\nThe Master Transaction system answers all these questions instantly!\n\n## Key Concepts Made Simple\n\n### 1. Master Record\n\nThink of a master record as a cooperative's permanent file folder:\n\n```php\n// Each cooperative has one master record\n$master = MasterTransaction::findOne($cooperativeId);\necho $master->status; // 1 = Active\n```\n\nThis folder contains everything about the cooperative's current state.\n\n### 2. Cooperative Status Types\n\nEvery cooperative can be in one of three states:\n\n```php\n// Three possible states\n$ACTIVE = 1;     // Operating normally\n$MERGED = 2;     // Joined with another cooperative  \n$DISSOLVED = 0;  // No longer operating\n```\n\nIt's like a traffic light - green (active), yellow (merged), or red (dissolved)!\n\n### 3. Transaction History\n\nThe master record links to all transactions:\n\n```php\n// Get all transactions for a cooperative\n$history = $master->getListTransaksi();\necho count($history); // Shows total transactions\n```\n\nThis gives you the complete story of the cooperative's journey.\n\n## Checking a Cooperative's Status\n\nLet's find out the current status of a cooperative:\n\n### Step 1: Find the Master Record\n\n```php\n// Look up the cooperative\n$master = MasterTransaction::find()\n    ->where(['id' => 123])\n    ->one();\n```\n\nThis retrieves the master record for cooperative #123.\n\n### Step 2: Check Current Status\n\n```php\n// Check if cooperative is active\nif ($master->is_active == 1) {\n    echo \"Cooperative is operating!\";\n}\n```\n\nThe `is_active` field tells us if it's currently operating.\n\n### Step 3: Check Special Conditions\n\n```php\n// Check if it has merged\nif ($master->is_gabung == 1) {\n    echo \"This cooperative has merged!\";\n}\n```\n\nThe `is_gabung` flag indicates a merger has occurred.\n\n## How Master Transaction Works\n\nHere's what happens when tracking cooperative status:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant M as Master\n    participant T as Transaction\n    participant S as Status\n    \n    C->>T: New transaction occurs\n    T->>M: Update master record\n    M->>S: Change status if needed\n    S->>C: Status updated!\n```\n\nThe master record acts as the central truth about each cooperative's current state!\n\n### Creating a Master Record\n\nWhen a cooperative is first established:\n\n```php\n// New cooperative gets a master record\n$master = new MasterTransaction();\n$master->id_transaksi = $establishmentId;\n$master->status = 1; // Start as active\n$master->save();\n```\n\nThis creates the permanent tracking record.\n\n### Updating Status\n\nWhen major events occur, the status changes:\n\n```php\n// Cooperative merges with another\n$master->is_gabung = 1;\n$master->is_active = 0; // No longer independently active\n$master->save();\n```\n\nThe master record always reflects the current reality.\n\n## Understanding the Database Structure\n\nThe master transaction table (`master_transaksi`) stores:\n\n```php\n// Master record fields\n$masterRecord = [\n    'id' => 456,\n    'id_transaksi' => 123,  // Latest transaction\n    'status' => 1,          // Current status\n    'is_gabung' => 0,       // Merger flag\n    'is_deleted' => 0       // Soft delete flag\n];\n```\n\nEach field tracks a different aspect of the cooperative's state.\n\n## Real Implementation: The MasterTransaction Model\n\nThe main model (in `models/MasterTransaction.php`) manages all master operations:\n\n```php\nclass MasterTransaction extends ActiveRecord {\n    // Link to current transaction\n    public function getTransaksiKoperasi() {\n        return $this->hasOne(TransaksiKoperasi::className(), \n            ['id' => 'id_transaksi']);\n    }\n}\n```\n\nThis connects the master record to its transactions.\n\n## Finding Cooperatives\n\nThe system provides powerful search capabilities:\n\n### Search Active Cooperatives in a Region\n\n```php\n// Find active cooperatives in Jakarta\n$activeInJakarta = MasterTransaction::getDaftarKoperasi(\n    31,    // Jakarta province ID\n    null,  // Any city\n    ['status_koperasi' => 1] // Active only\n);\n```\n\nThis returns all operating cooperatives in Jakarta!\n\n### Track Cooperative History\n\n```php\n// Get all transactions for a master\n$transactions = $master->getListTransaksi();\nforeach ($transactions as $trans) {\n    echo $trans->jenis_transaksi; // Type of change\n}\n```\n\nThis shows every change the cooperative has undergone.\n\n## Managing Mergers\n\nWhen cooperatives merge, the system tracks it:\n\n```php\n// Mark cooperatives as merged\nSKHelper::changeMasterTransactionIsGabung($transactionId);\n// Updates all involved cooperatives\n```\n\nThe helper function handles the complex merger logic!\n\n## Integration with Other Systems\n\nThe Master Transaction connects everything:\n- Links to [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) for all events\n- References [Data Anggota](03_data_anggota__member_data__.md) through transactions\n- Uses [Notaris Integration](04_notaris_integration_.md) for legal validation\n\nIt's the backbone that holds all cooperative data together!\n\n## What You've Learned\n\nExcellent work! You now understand how Master Transaction Management keeps track of every cooperative's current status and history. The system:\n\n- Maintains a master record for each cooperative\n- Tracks whether cooperatives are active, merged, or dissolved\n- Links all transactions to create a complete history\n- Provides powerful search and filtering capabilities\n\nThink of it as the central nervous system of the cooperative system - it knows the state of every cooperative at any moment and remembers everything that has happened!\n\n## Next Steps\n\nNow that you understand how cooperatives are tracked at the master level, let's explore what happens when data needs to be corrected in [Perbaikan Data (Data Correction)](06_perbaikan_data__data_correction__.md). Even the best systems need a way to fix mistakes!\n---\n# Chapter 6: Perbaikan Data (Data Correction)\n\nWelcome back! In the [previous chapter](05_master_transaction_management_.md), we learned how Master Transaction Management keeps track of every cooperative's status and history. But what happens when someone makes a mistake? What if the secretary's phone number was typed wrong, or the cooperative needs to update its business activities? That's where **Perbaikan Data** (Data Correction) comes to the rescue!\n\n## Why Do We Need Data Correction?\n\nImagine you just published a phone book for your neighborhood. A week later, Mrs. Sari calls saying her phone number was printed wrong - it should be 081234567890, not 081234567880. You can't recall all the phone books and reprint them, but you need a way to officially record and approve this correction, right?\n\nThe **Perbaikan Data** system is like a formal amendment process for cooperatives. When data needs to be corrected after a cooperative is established, you can't just change it directly - you need to submit a correction request, provide supporting documents, and get it reviewed and approved. It's like submitting an errata for an official document!\n\n## Your First Use Case: Correcting Board Member Information\n\nLet's say Pak Budi's cooperative \"Koperasi Maju Bersama\" needs to:\n1. Update the treasurer's phone number (it was typed wrong)\n2. Add a new business activity they forgot to include\n3. Fix a board member's address\n\nInstead of starting over, they can use Perbaikan Data to request these corrections officially!\n\n## Key Concepts Made Simple\n\n### 1. Correction Request\n\nThink of a correction request as a formal letter asking for changes:\n\n```php\n// Create a new correction request\n$correction = new TransaksiPerbaikan();\n$correction->t_koperasi_id = 123; // Which cooperative\n$correction->status_transaksi_perbaikan = 'verifikator_1_tunggu';\n```\n\nThe request starts in \"waiting for review\" status - just like submitting homework to your teacher!\n\n### 2. Verification Workflow\n\nEvery correction goes through multiple checkpoints:\n\n```php\n// Correction statuses\n$WAITING_V1 = 'verifikator_1_tunggu';  // First reviewer\n$WAITING_V2 = 'verifikator_2_tunggu';  // Second reviewer  \n$APPROVED = 'permohonan_diterima';     // All done!\n```\n\nIt's like getting your essay reviewed by two teachers before final approval!\n\n### 3. Supporting Documents\n\nCorrections need proof:\n\n```php\n// Required documents\n$documents = [\n    'file_surat_permohonan',      // Request letter\n    'file_surat_pernyataan',      // Statement letter\n    'file_surat_keterangan_domisili' // Address proof\n];\n```\n\nYou can't just say \"trust me\" - you need to show evidence for the changes!\n\n## Making Your First Correction Request\n\nLet's help Pak Budi correct his cooperative's data:\n\n### Step 1: Find the Cooperative\n\n```php\n// Look up the cooperative to correct\n$master = MasterTransaction::findExistTransactionForPerbaikan(\n    \"SK-2024-001\",           // Certificate number\n    \"2024-01-15\",           // Certificate date\n    \"KOPERASI MAJU BERSAMA\" // Name\n);\n```\n\nFirst, we need to find the exact cooperative record to correct.\n\n### Step 2: Specify What to Correct\n\n```php\n// List what needs correction\n$corrections = [\n    'pengawas_pengurus' => [\n        ['nama' => 'Ibu Rina', 'no_telp' => '081234567890']\n    ]\n];\n```\n\nWe clearly specify which data needs to be fixed and what the new values should be.\n\n### Step 3: Submit the Request\n\n```php\n// Create the correction request\n$request = new TransaksiPerbaikan();\n$request->data_diperbaiki_list = json_encode($corrections);\n$request->save();\n```\n\nThe corrections are saved as JSON so they can be reviewed before being applied!\n\n## How the Correction Workflow Works\n\nHere's what happens when you submit a correction request:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant R as Request\n    participant V1 as Verifier 1\n    participant V2 as Verifier 2\n    participant D as Database\n    \n    U->>R: Submit correction\n    R->>V1: Review request\n    V1->>V2: Approve & forward\n    V2->>D: Apply changes\n    D->>U: Correction complete!\n```\n\nThe multi-step verification ensures corrections are legitimate and accurate!\n\n### The Review Process\n\nWhen a verifier reviews your request:\n\n```php\n// First verifier reviews\n$verification = new VerifikasiPerbaikan();\n$verification->tahap = 'VERIFIKATOR_1';\n$verification->status = 'DITERIMA'; // Accepted!\n```\n\nEach verifier can accept or reject the request with a reason.\n\n### Handling Rejections\n\nIf a correction is rejected:\n\n```php\n// Rejection with reason\n$verification->status = 'DITOLAK';\n$verification->alasan = 'Missing supporting documents';\n```\n\nYou'll know exactly why it was rejected and what to fix!\n\n## Understanding the Database Structure\n\nCorrections are stored in multiple related tables:\n\n```php\n// Main correction transaction\n$correctionRecord = [\n    'id' => 456,\n    't_koperasi_id' => 123,  // Links to cooperative\n    'data_diperbaiki_list' => '{\"pengawas_pengurus\":[...]}',\n    'status_transaksi_perbaikan' => 'verifikator_1_tunggu'\n];\n```\n\nThe `data_diperbaiki_list` contains all requested changes in JSON format.\n\n## Real Implementation: The Correction Form\n\nThe correction process uses a multi-step form (in `controllers/PerbaikanDataController.php`):\n\n```php\n// Step 1: Identify cooperative\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n```\n\n```php\n// Step 2: Applicant information\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n```\n\n```php\n// Step 3: Upload documents and specify changes\n$model->scenario = PerbaikanDataForm::SCENARIO_CHECKLIST;\n```\n\nEach step collects different information, making the process manageable!\n\n## Working with Correction Helpers\n\nThe PerbaikanDataHelper (in `components/helper/PerbaikanDataHelper.php`) provides useful utilities:\n\n### Building a Data Snapshot\n\n```php\n// Capture current data before changes\n$snapshot = PerbaikanDataHelper::buildMasterSnapshot(\n    $transaksiKoperasi,\n    $requestedChanges\n);\n```\n\nThis creates a \"before\" picture so you can always see what changed!\n\n### Filtering Valid Corrections\n\n```php\n// Only keep allowed corrections\n$filtered = PerbaikanDataHelper::filterChecklistPerbaikan(\n    $selectedItems,\n    $corrections\n);\n```\n\nThis ensures only permitted types of corrections are processed.\n\n## Integration with Other Systems\n\nPerbaikan Data connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Finds cooperatives to correct\n- [Notaris Integration](04_notaris_integration_.md) - Notaries submit corrections\n- [Data Anggota](03_data_anggota__member_data__.md) - Corrects member information\n\nIt's the safety net that catches and fixes mistakes across the entire system!\n\n## What You've Learned\n\nFantastic work! You now understand how the Perbaikan Data system handles corrections to cooperative data. The system:\n\n- Provides a formal process for requesting data corrections\n- Requires supporting documents for accountability\n- Uses multi-level verification to ensure accuracy\n- Maintains a complete audit trail of all changes\n- Preserves data integrity while allowing necessary updates\n\nThink of it as the \"track changes\" feature in a word processor, but for cooperative data - every correction is documented, reviewed, and approved before being applied!\n\n## Next Steps\n\nNow that you understand how to correct cooperative data after establishment, let's explore how cooperatives define their business activities in [KBLI Business Activity](07_kbli_business_activity_.md). This is where cooperatives specify exactly what kind of business they'll be conducting!\n---\n# Chapter 7: KBLI Business Activity\n\nWelcome back! In the [previous chapter](06_perbaikan_data__data_correction__.md), we learned how the Perbaikan Data system helps fix mistakes in cooperative data. But here's an interesting question - how does the system know what kind of business a cooperative is allowed to do? Can a farming cooperative suddenly start operating as a bank? That's where **KBLI Business Activity** classification comes in!\n\n## Why Do We Need Business Activity Classification?\n\nImagine you're opening a restaurant. You need permits for food service, not for construction work or banking services. The government needs to know exactly what type of business you're running to ensure you follow the right regulations and standards.\n\n**KBLI** (Klasifikasi Baku Lapangan Usaha Indonesia - Indonesian Standard Industrial Classification) is like a giant catalog of every possible business activity in Indonesia. Each activity has a unique code - think of it like a barcode that tells everyone exactly what your cooperative does. A farming cooperative gets farming codes, a savings and loan cooperative gets financial service codes, and so on!\n\n## Your First Use Case: Setting Up Business Activities\n\nLet's say Ibu Sari is establishing \"Koperasi Tani Makmur\" (a farming cooperative) and needs to:\n1. Select that her cooperative will grow rice (KBLI code: 01121)\n2. Also add vegetable farming (KBLI code: 01131)\n3. Make sure she can't accidentally add banking activities (wrong type!)\n\nThe KBLI system ensures cooperatives only select appropriate business activities!\n\n## Key Concepts Made Simple\n\n### 1. KBLI Codes\n\nThink of KBLI codes like ISBN numbers for books - each one uniquely identifies a type of business:\n\n```php\n// Example KBLI codes\n$RICE_FARMING = \"01121\";        // Growing rice\n$SAVINGS_LOAN = \"64141\";        // Conventional savings & loan\n$LABOR_SERVICES = \"52240\";      // Port labor services\n```\n\nEach code tells you exactly what business activity is allowed.\n\n### 2. Business Activity Categories\n\nKBLI codes are organized into categories like a library:\n\n```php\n// Categories are like book sections\n$category = \"A\";  // Agriculture\n$category = \"G\";  // Trade\n$category = \"K\";  // Financial services\n```\n\nThis makes it easy to find related activities!\n\n### 3. Cooperative Type Mapping\n\nNot all KBLI codes are available to all cooperatives:\n\n```php\n// Farming cooperatives can't do banking!\n$farmingCoop = 1;     // Can only select farming codes\n$savingsLoanCoop = 6; // Can only select financial codes\n```\n\nIt's like age restrictions on movies - not everything is appropriate for everyone!\n\n## Adding Business Activities to Your Cooperative\n\nLet's help Ibu Sari add business activities to her farming cooperative:\n\n### Step 1: Find Available KBLI Codes\n\n```php\n// Get KBLI codes for farming cooperatives\n$kbliList = KBLIBakum::find()\n    ->where(['m_jenis_koperasi' => 1]) // Farming type\n    ->all();\n```\n\nThis returns only activities appropriate for farming cooperatives!\n\n### Step 2: Look Up Activity Details\n\n```php\n// Get details about rice farming\n$activity = KBLIBakum::findOne(['kode' => '01121']);\necho $activity->judul;  // \"Rice Farming\"\necho $activity->uraian; // Detailed description\n```\n\nEach code has a title and detailed description of what's allowed.\n\n### Step 3: Save Selected Activities\n\n```php\n// Add business activity to cooperative\n$businessActivity = new AktifitasUsaha();\n$businessActivity->kbli_id = 123; // Rice farming ID\n$businessActivity->t_koperasi_id = 456; // Cooperative ID\n$businessActivity->save();\n```\n\nNow the cooperative is officially registered for rice farming!\n\n## How KBLI Classification Works\n\nHere's what happens when selecting business activities:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant K as KBLI System\n    participant F as Filter\n    participant DB as Database\n    \n    C->>K: Request activities\n    K->>F: Apply type filter\n    F->>DB: Get matching codes\n    DB->>C: Return allowed activities\n```\n\nThe system filters activities based on cooperative type to ensure compliance!\n\n### The Filtering Process\n\nWhen loading available KBLI codes:\n\n```php\n// System checks cooperative type\n$cooperativeType = 6; // Savings & loan\n$allowedCodes = KBLIBakum::listKodeSimpanPinjam();\n// Returns [64141, 64142] - financial codes only\n```\n\nThis prevents inappropriate business activities from being selected.\n\n### Hidden Activities\n\nSome KBLI codes might be temporarily unavailable:\n\n```php\n// Get list of hidden codes from settings\n$hidden = Setting::getValue('hidden_kbli');\n$hiddenArray = json_decode($hidden);\n// These codes won't appear in searches\n```\n\nThis allows administrators to restrict certain activities when needed.\n\n## Understanding the Database Structure\n\nBusiness activities are stored across multiple tables:\n\n```php\n// KBLI master data\n$kbliMaster = [\n    'id_kbli' => 123,\n    'kode' => '01121',\n    'judul' => 'Rice Farming',\n    'kategori' => 'A'  // Agriculture\n];\n```\n\n```php\n// Cooperative's selected activities\n$selectedActivity = [\n    'id' => 456,\n    't_koperasi_id' => 789,  // Which cooperative\n    'kbli_id' => 123         // Which activity\n];\n```\n\nThese tables link cooperatives to their allowed business activities.\n\n## Real Implementation: The KBLI Models\n\nThe system uses several models to manage KBLI data:\n\n### The Main KBLI Model\n\n```php\n// In models/bakum/KBLIBakum.php\nclass KBLIBakum extends ActiveRecord {\n    // Special codes for specific types\n    const KODE_SIMPAN_PINJAM_KONVENSIONAL = 64141;\n    const KODE_TKBM = 52240;\n}\n```\n\nThis defines special business codes that have unique rules.\n\n### Getting Activity Details\n\n```php\n// Retrieve multiple activities at once\n$activities = MKbli::getAktifitasUsaha([123, 456]);\n// Returns array with code, title, description\n```\n\nPerfect for displaying a cooperative's business portfolio!\n\n### Activity Relationships\n\n```php\n// Link activity to KBLI details\n$activity = AktifitasUsaha::findOne($id);\n$kbliDetails = $activity->getBakumKBLI()->one();\necho $kbliDetails->judul; // Shows activity name\n```\n\nThis makes it easy to get full details about any business activity.\n\n## Special Activity Types\n\nSome business activities have special rules:\n\n### Savings and Loan Activities\n\n```php\n// Special financial codes\n$conventional = KBLIBakum::KODE_SIMPAN_PINJAM_KONVENSIONAL;\n$syariah = KBLIBakum::KODE_SIMPAN_PINJAM_SYARIAH;\n```\n\nThese require additional licensing and oversight!\n\n### Port Labor Services\n\n```php\n// TKBM (port labor) has special requirements\n$tkbmCode = KBLIBakum::KODE_TKBM;\n// Only available in port cities\n```\n\nLocation-specific activities are restricted geographically.\n\n## Integration with Other Systems\n\nKBLI Business Activity connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Activities are set during establishment\n- [Perbaikan Data](06_perbaikan_data__data_correction__.md) - Activities can be corrected if needed\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Activities are part of the transaction\n\nIt ensures cooperatives operate within their authorized business scope!\n\n## What You've Learned\n\nExcellent work! You now understand how the KBLI Business Activity system categorizes and manages what cooperatives can do. The system:\n\n- Uses standardized codes to classify every type of business\n- Filters activities based on cooperative type\n- Prevents inappropriate business selections\n- Maintains a detailed catalog of business descriptions\n- Links cooperatives to their authorized activities\n\nThink of it as a menu at a restaurant - vegetarian restaurants only show vegetarian dishes, seafood restaurants focus on fish, and so on. KBLI ensures each cooperative \"serves\" only what they're licensed to provide!\n\n## Next Steps\n\nNow that you understand how cooperatives define their business activities, let's explore how the system manages geographic information in [Wilayah (Regional) Management](08_wilayah__regional__management_.md). This is crucial because location affects what activities are allowed and which government offices oversee the cooperative!\n---\n# Chapter 8: Wilayah (Regional) Management\n\nWelcome back! In the [previous chapter](07_kbli_business_activity_.md), we learned how KBLI codes help classify what business activities cooperatives can perform. But here's an important question - where exactly are these cooperatives located? How does the system know if a cooperative is in Jakarta or Surabaya? That's where **Wilayah (Regional) Management** comes in - it's like the GPS system for your cooperatives!\n\n## Why Do We Need Regional Management?\n\nImagine you're managing a national pizza delivery chain. You need to know exactly where each branch is located - not just \"somewhere in Jakarta\" but the exact province, city, district, and even neighborhood. Why? Because different areas have different regulations, different government offices, and different delivery zones!\n\nThe **Wilayah** system is exactly like that for cooperatives. It organizes Indonesia's entire geography into a neat hierarchy: from provinces down to cities, then districts, and finally villages. It's like a giant address book that knows every corner of Indonesia and can tell you exactly where each cooperative calls home!\n\n## Your First Use Case: Registering Cooperative Location\n\nLet's say Pak Ahmad is establishing \"Koperasi Nelayan Sejahtera\" (a fishermen's cooperative) and needs to:\n1. Select that it's in East Java Province\n2. Narrow down to Surabaya City\n3. Specify Kenjeran District (near the port)\n4. Pick the exact village where the office is located\n\nThe Wilayah system guides him through Indonesia's geography step by step!\n\n## Key Concepts Made Simple\n\n### 1. Geographic Hierarchy\n\nIndonesia is organized like a family tree:\n\n```php\n// The hierarchy levels\n$province = \"Jawa Timur\";      // Top level\n$city = \"Surabaya\";           // Under province\n$district = \"Kenjeran\";        // Under city\n$village = \"Bulak\";            // Under district\n```\n\nThink of it like your home address - you start broad (country) and get more specific (street number)!\n\n### 2. Parent-Child Relationships\n\nEvery location has a parent (except provinces):\n\n```php\n// Each level knows its parent\n$surabaya->parent = \"Jawa Timur\";\n$kenjeran->parent = \"Surabaya\";\n$bulak->parent = \"Kenjeran\";\n```\n\nIt's like Russian nesting dolls - each location fits inside a larger one!\n\n### 3. Location IDs\n\nEvery location has a unique ID number:\n\n```php\n// Unique identifiers\n$jakarta_id = 31;        // DKI Jakarta\n$surabaya_id = 3578;     // Surabaya City\n$kenjeran_id = 357804;   // Kenjeran District\n```\n\nThese IDs are like postal codes - they uniquely identify each location!\n\n## Finding Your Cooperative's Location\n\nLet's help Pak Ahmad register his cooperative's location:\n\n### Step 1: Get All Provinces\n\n```php\n// Start with provinces\n$provinces = Wilayah::getDataProvinsi();\n// Returns all 34 Indonesian provinces\n```\n\nThis gives you the top-level choices - like choosing a country on a website!\n\n### Step 2: Get Cities in the Province\n\n```php\n// User selects East Java (ID: 35)\n$cities = Wilayah::getChildWilayah(35, 'Kabupaten');\n// Returns all cities in East Java\n```\n\nOnce you pick a province, you get all its cities - just like how selecting a country shows its states!\n\n### Step 3: Get Districts in the City\n\n```php\n// User selects Surabaya (ID: 3578)\n$districts = Wilayah::getChildWilayah(3578, 'Kecamatan');\n// Returns all districts in Surabaya\n```\n\nNow we're getting more specific - like zooming in on a map!\n\n### Step 4: Get Villages in the District\n\n```php\n// User selects Kenjeran (ID: 357804)\n$villages = WilayahSABH::find()\n    ->where(['ID_WILAYAH_M' => 357804])\n    ->all();\n// Returns all villages in Kenjeran\n```\n\nFinally, we get to the most specific level - the exact neighborhood!\n\n## How Location Lookup Works\n\nHere's what happens when you search for locations:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant C as Controller\n    participant W as Wilayah\n    participant DB as Database\n    \n    U->>C: Select province\n    C->>W: Get child locations\n    W->>DB: Query by parent\n    DB->>U: Return cities\n```\n\nThe system navigates the geographic hierarchy to find the right locations!\n\n### The AJAX Location Loading\n\nWhen you select a location, the system loads its children dynamically:\n\n```php\n// In WilayahController.php\npublic function actionGetChildWilayah($id, $tipe) {\n    $data = Wilayah::getChildWilayah($id, $tipe);\n    return json_encode($data);\n}\n```\n\nThis loads locations without refreshing the page - like Google Maps zooming in smoothly!\n\n### Handling Different Location Types\n\nThe system treats villages specially:\n\n```php\n// Villages use a different table\nif($tipe == 'Kelurahan') {\n    // Query WilayahSABH table\n    $data = WilayahSABH::find()\n        ->where(['ID_WILAYAH_M' => $parent])\n        ->all();\n}\n```\n\nVillages have more detailed information, so they get their own special storage!\n\n## Understanding the Database Structure\n\nThe geographic data is stored in two main tables:\n\n```php\n// Main location table (WILAYAH)\n$location = [\n    'WILAYAH_ID' => 3578,\n    'NAMA' => 'Surabaya',\n    'PARENT_ID' => 35,  // East Java\n    'TIPE' => 'Kabupaten'\n];\n```\n\n```php\n// Village details (WILAYAH_SABH)\n$village = [\n    'ID_WIL' => 123456,\n    'NM_KELURAHAN' => 'Bulak',\n    'ID_WILAYAH_M' => 357804,  // Parent district\n    'KD_POS' => '60125'        // Postal code\n];\n```\n\nThe two tables work together to map all of Indonesia!\n\n## Real Implementation: The Wilayah Models\n\nThe main model (in `models/Wilayah.php`) handles location queries:\n\n```php\n// Get all provinces\npublic static function getDataProvinsi() {\n    return self::find()\n        ->where(['PARENT_ID' => '0'])  // No parent\n        ->where(['TIPE' => 'Provinsi'])\n        ->all();\n}\n```\n\nProvinces have no parent (PARENT_ID = 0) - they're the top of the tree!\n\n### Getting Location Names\n\n```php\n// Get name by ID\n$provinceName = Wilayah::getNama(31);\necho $provinceName; // \"DKI Jakarta\"\n```\n\nThis is useful when you need to display the location name to users.\n\n### Getting Location Codes\n\n```php\n// Get official code\n$code = Wilayah::getKodeWilayah(3578);\necho $code; // Official Surabaya code\n```\n\nThese codes are used for government reporting and official documents.\n\n## Working with Complete Addresses\n\nThe WilayahOds model provides complete location information:\n\n```php\n// Get full location details\n$fullLocation = WilayahOds::getWilayah('357812034005');\n// Returns complete hierarchy from province to village\n```\n\nThis gives you the entire address chain in one go - super convenient!\n\n## Integration with Other Systems\n\nWilayah Management connects with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Every cooperative must have a location\n- [Master Transaction Management](05_master_transaction_management_.md) - Search cooperatives by region\n- [KBLI Business Activity](07_kbli_business_activity_.md) - Some activities are location-specific\n\nIt's the geographic backbone that tells us where everything happens!\n\n## What You've Learned\n\nGreat job! You now understand how the Wilayah system maps every cooperative's location in Indonesia. The system:\n\n- Organizes Indonesia's geography in a clear hierarchy\n- Provides easy navigation from provinces to villages\n- Uses parent-child relationships to maintain structure\n- Supports dynamic loading for smooth user experience\n- Stores detailed information for every location level\n\nThink of it as Google Maps specifically designed for Indonesian cooperatives - it knows every province, city, district, and village, making it easy to pinpoint exactly where each cooperative operates!\n\n## Next Steps\n\nNow that you understand how the system manages geographic locations, let's explore how it integrates with Indonesia's civil registration system in [Dukcapil Integration](09_dukcapil_integration_.md). This is where member identities are verified against national databases!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 684 # modules/Api/controllers/DukcapilController.php ---\n<?php\nnamespace app\\modules\\Api\\controllers;\n\nuse app\\components\\HelperDukcapil;\nuse Yii;\nuse yii\\rest\\Controller;\n\nclass DukcapilController extends Controller {\n\n    public function actionValidasiData() {\n        if(Yii::$app->user->isGuest){\n            return $this->redirect(['/']);\n        }\n        $status = HelperDukcapil::CheckIsActiveValidateDukcapil();\n        if($status){\n            $validate = new HelperDukcapil($_POST);\n            $error = $validate->curlValidDukcapil();\n            if ($error !== true) {\n                Yii::error(\"Dukcapil error: $error | Params: \" . json_encode($_POST), __METHOD__);\n            }\n            $response = $validate->response();\n        }else{\n            $response = HelperDukcapil::AllowValidation();\n        }\n\n        return $this->asJson($response);\n    }\n\n}\n\n--- File: 602 # models/LogDukcapil.php ---\n<?php\n\nnamespace app\\models;\n\nuse Yii;\nuse app\\services\\ElkLoggingService;\nuse DateTime;\nuse DateTimeZone;\n\n/**\n * This is the model class for table \"log_service\".\n *\n * @property int $id\n * @property string $ip_address\n * @property string $service_uri\n * @property string $nik\n * @property string $request\n * @property string $response\n * @property string $additional_data\n * @property string $created_at\n * @property int $is_error\n * @property string $type\n * @property string $execution_time\n */\nclass LogDukcapil extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * {@inheritdoc}\n     */\n    public static function tableName()\n    {\n        return 'log_dukcapil';\n    }\n\n    /**\n     * @return \\yii\\db\\Connection the database connection used by this AR class.\n     */\n    public static function getDb()\n    {\n        return Yii::$app->get('dbLogSimpadhu');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function rules()\n    {\n        return [\n            array('nik, ip_address, type, is_error, created_at, header_code, request, response, additional_data, execution_time, service_uri, parent_id, resend, layanan', 'safe'),\n        ];\n    }\n\n\tpublic static function logDcp(\n        $params, \n        $response, \n        $status, \n        $type = 'VERIFNIK', \n        $exetime = 0, \n        $layanan, \n        $additional_data, \n        $parent_id = null, \n        $nik = null\n    ){\n        $request = is_string($params) ? json_decode($params) : $params;\n\n        $log = new LogDukcapil();\n        $log->nik = $nik;\n        $log->ip_address = Yii::$app->request->userIP;\n        $log->type = $type;\n        $log->is_error = $status == 200 ? 0 : 1;\n        $log->created_at = date(\"Y-m-d H:i:s\");\n        $log->header_code = $status;\n        $log->request = json_encode($request);\n        $log->response =json_encode(is_string($response) ? json_decode($response) : $response);\n        $log->additional_data = json_encode($additional_data);\n        $log->execution_time = $exetime;\n        $log->service_uri = Yii::$app->request->url;\n        $log->resend = $status == 200 ? 0 : 1;\n        $log->layanan = $layanan;\n        $log->parent_id = $parent_id;\n\n        // Penyesuaian Date agar menggunakan Timezone\n        $old_date = $log->created_at;\n        // Explicitly tell PHP that this time is already in WIB\n        $timezone = new DateTimeZone('Asia/Jakarta');\n        $newDate = new DateTime($old_date, $timezone);\n        \n        // Ensure no UTC conversion happens\n        $newDate->setTimezone($timezone);\n        \n        // Convert to ISO 8601 format with WIB timezone\n        $log->created_at = $newDate->format(DateTime::ATOM); \n\n        // Insert ke ELK\n        $elkLogging = new ElkLoggingService('dukcapil');\n\n        $elk_logging = $elkLogging->logApplication([\n            'nik' => $log->nik,\n            'ip_address' => $log->ip_address,\n            'type' => $log->type,\n            'is_error' => $log->is_error,\n            'created_at' => $log->created_at,\n            'header_code' => $log->header_code,\n            'request' => $log->request,\n            'response' => $log->response,\n            'additional_data' => $log->additional_data,\n            'execution_time' => strval($log->execution_time),\n            'service_uri' => $log->service_uri,\n            'resend' => $log->resend,\n            'layanan' => $log->layanan,\n            'parent_id' => $log->parent_id,\n        ]);\n\n        if ($elk_logging !== false) {\n            $result = $elk_logging;\n        } else {\n            $log->created_at = $old_date;\n            $log->save();\n        }\n    }\n}\n\n\n--- File: 10 # components/HelperDukcapil.php ---\n<?php\n\nnamespace app\\components;\n\nuse app\\models\\LogDukcapil;\nuse app\\models\\PemilikManfaat;\nuse Yii;\nuse yii\\base\\Component;\n\nclass HelperDukcapil extends Component\n{    \n    public $USER_ID;\n    public $PASSWORD;\n    public $IP_USER;\n    public $TRESHOLD;\n    public $NIK;\n    public $NAMA_LGKP;\n    public $URL_API;\n    public $ID_KOPERASI;\n\n    public $FILTER_RESPONSE = [\n        'NAMA_LGKP' => 'NAMA tidak sesuai dengan data yang terdapat di database Kependudukan',\n    ];\n\n    protected $responseCurl;\n\n    public function __construct($data = [])\n    {\n        $this->getConfigDukcapil();\n\n        $this->ID_KOPERASI = isset($data['id_koperasi']) ? $data['id_koperasi'] : '';\n        $this->NIK = isset($data['nik']) ? $data['nik'] : '';\n        $this->NAMA_LGKP = isset($data['nama']) ? $data['nama'] : '';\n    }\n\n    protected function getConfigDukcapil()\n    {\n        $config = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'credential_dukcapil'\"\n        )->queryOne();\n\n        if($config){\n            $decode = json_decode($config['value']);\n            $this->USER_ID = $decode->user_id;\n            $this->PASSWORD = $decode->password;\n            $this->IP_USER = $decode->ip_user;\n            $this->TRESHOLD = $decode->treshold;\n            $this->URL_API = $decode->url_api;\n        }\n    }\n\n    public function mappingDataDukcapil(){\n        $data = array(\n            'USER_ID' => $this->USER_ID,\n            'PASSWORD' => $this->PASSWORD,\n            'IP_USER' => $this->IP_USER,\n            'TRESHOLD' => $this->TRESHOLD,\n            'NIK' => $this->NIK,\n            'NAMA_LGKP' => $this->NAMA_LGKP\n        );\n        return json_encode($data);\n    }\n\n    public function curlValidDukcapil() {\n        $params = str_replace(\"\\\\/\",\"/\",$this->mappingDataDukcapil());\n\n        $ch = curl_init();\n        curl_setopt($ch,CURLOPT_URL, $this->URL_API);\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);\n        curl_setopt($ch,CURLOPT_HTTPHEADER, array(\"Accept:application/json\", \"Content-Type:application/json\"));\n        curl_setopt($ch,CURLOPT_POST, true);\n        curl_setopt($ch,CURLOPT_POSTFIELDS, $params);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n\n        $time_start = microtime(true);\n        $result = curl_exec($ch);\n        $time = sprintf('%.3f', microtime(true) - $time_start) . 's';\n        $info = curl_getinfo($ch);\n\n        $error = null;\n        if(curl_errno($ch)) {\n            $error = curl_error($ch);\n            if (in_array(curl_errno($ch), array(CURLE_OPERATION_TIMEDOUT, CURLE_OPERATION_TIMEOUTED))) {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'],\n                    ])\n                );\n            } else {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => curl_error($ch)],\n                    ])\n                );\n            }\n        }\n\n        curl_close($ch);\n        \n        $res = json_decode($result, true);\n\n        $data = (object)$res;\n        \n        LogDukcapil::logDcp($params, $result, $info['http_code'], 'VERIFNIK',$time,'KOPERASI', $info, $this->ID_KOPERASI, $this->NIK);\n\n        $data = $data->content[0];\n        $this->responseCurl = (object) $data;\n        return $error ?: true;\n    }\n\n    public function mapingResponse($res)\n    {\n        $response = [\n            'status' => 1,\n            'data' => []\n        ];\n\n        if (isset($res)) {\n            if (isset($res->RESPONSE_CODE)) {\n                $data = $this->processCode($res->RESPONSE_CODE, $res->RESPONSE);\n                if($data){\n                    $response['status'] = 0;\n                    $response['data'][] = $data;\n                }\n            } elseif (isset($res->RESPONSE)){\n                $response['status'] = 0;\n                $response['data'][] = $res->RESPONSE;\n            }else {\n                $data = [];\n                $string = \"Sesuai (100)\";\n                \n                foreach ($res as $key => $value) {\n                    if(in_array($key, array_keys($this->FILTER_RESPONSE)) && stripos($value, \"Tidak Sesuai\") !== false){\n                        $data[$key] = $this->FILTER_RESPONSE[$key];\n                    }\n                }\n\n                if(count($data) >= 1){\n                    $response['status'] = 0;\n                    $response['data'] = $data;\n                }\n            }\n            \n            return $response;\n        }else{\n            $response['status'] = 0;\n            $response['data'] = ['Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'];\n            return $response;\n        }\n    }\n    \n    private function processCode($code, $message)\n    {\n        switch ($code) {\n            case 11:\n                return 'Data yang dimasukkan merupakan data orang yang telah dinyatakan meninggal';\n            case 12:\n                return 'Data Ditemukan, Status Data Ganda';\n            case 13:\n                return 'Data Tidak Ditemukan, NIK tidak terdapat di database Kependudukan';\n            case 14:\n            case 15:\n                return $message;\n            default:\n                return 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi';\n        }\n    }\n    \n\n    public function response(){\n        return $this->mapingResponse($this->responseCurl);\n    }\n\n    public static function DataBalikan($id, $model){\n        $config = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'credential_data_balikan'\"\n        )->queryOne();\n\n        $token = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'token_data_balikan'\"\n        )->queryOne();\n\n        $token = $token['value'];\n\n        $data = PemilikManfaat::findAll(['t_koperasi_id' => $id]);\n\n        if(isset($config['value'])){\n            $decode = json_decode($config['value']);\n\n            $params = [];\n            $params['id_lembaga'] = $decode->id_lembaga;\n            $params['nama_lembaga'] = $decode->nama_lembaga;\n            $nik = 0;\n            foreach ($data as $key => $value) {\n                if($value->m_jenis_identitas_id == 1){\n                    $params['data'][] = [\n                        'NIK' => $value->no_identitas,\n                        'param' => [\n                            [\"hubungan_dengan_korporasi\" => \"Pemilik Manfaat KOPERASI \" . $model->nama_koperasi],\n                        ]\n                    ];\n                    $nik = $value->no_identitas;\n                }\n            }\n\n            if(!empty($params)){\n                self::curlDataBalikan($decode->url_api, json_encode([$params]), $token, $id, $nik);\n            }\n        }\n\n    } \n\n    public static function curlDataBalikan($url, $params, $token, $id = null, $nik){\n        $time_start = microtime(true);\n        $ch = curl_init();\n        curl_setopt($ch,CURLOPT_URL, $url);\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);\n        curl_setopt($ch,CURLOPT_HTTPHEADER, array(\"Accept:application/json\", \"Content-Type:application/json\", \"Authorization:Bearer \".$token));\n        curl_setopt($ch,CURLOPT_POST, true);\n        curl_setopt($ch,CURLOPT_POSTFIELDS, $params);\n\n        // Set timeout\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);\n\n        $result = curl_exec($ch);\n        $time = sprintf('%.3f', microtime(true) - $time_start) . 's';\n        $info = curl_getinfo($ch);\n\n        if(curl_errno($ch)){\n            // check is error timeout or not \n            if (in_array(curl_errno($ch), array(CURLE_OPERATION_TIMEDOUT, CURLE_OPERATION_TIMEOUTED))) {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => 'Terjadi gangguan pada sistem, silahkan coba beberapa saat lagi'],\n                    ])\n                );\n            } else {\n                $result = json_encode(array(\n                    'content' => [\n                        ['RESPONSE' => curl_error($ch)],\n                    ])\n                );\n            }\n        }\n        curl_close($ch);\n        \n        LogDukcapil::logDcp($params, $result, $info['http_code'], 'DATABALIKAN',$time,'KOPERASI', $info, $id, $nik);\n\n        return $result;\n    }\n\n    public static function CheckIsActiveValidateDukcapil(){\n        $isActive = Yii::$app->db_koperasi->createCommand(\n            \"SELECT value from kop_setting WHERE nama = 'is_active_dukcapil'\"\n        )->queryOne();\n        \n        $status = 0;\n        if(!empty($isActive) && $isActive['value'] == 1){\n            $status = 1;\n        }\n\n        return $status;\n    }\n\n    public static function AllowValidation(){\n        $response = [\n            'status' => 1,\n            'data' => []\n        ];\n\n        return $response;\n    }\n}\n\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 9: Dukcapil Integration\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 9: Dukcapil Integration\n\nWelcome back! In the [previous chapter](08_wilayah__regional__management_.md), we learned how the Wilayah system maps every cooperative's location across Indonesia. But here's a crucial question - how do we know if the people managing these cooperatives are who they claim to be? What if someone uses a fake identity? That's where **Dukcapil Integration** comes in - it's like having a security guard who checks everyone's ID at the door!\n\n## Why Do We Need Identity Verification?\n\nImagine you're running a bank. Before letting someone open an account or become a manager, you need to verify they're a real person with a valid ID, right? You can't just take their word for it - you need to check against official government records.\n\n**Dukcapil** (Direktorat Jenderal Kependudukan dan Pencatatan Sipil - Directorate General of Population and Civil Registration) is Indonesia's national population database. It's like a giant, secure filing cabinet that contains verified information about every Indonesian citizen. When someone wants to manage a cooperative, we check their identity against this database to ensure they're legitimate!\n\n## Your First Use Case: Verifying Board Members\n\nLet's say Ibu Rina wants to become the treasurer of \"Koperasi Maju Sejahtera\". The system needs to:\n1. Take her NIK (ID number) and name\n2. Check with Dukcapil if this person really exists\n3. Verify the name matches the NIK\n4. Approve or reject based on the verification\n\nLet's see how Dukcapil Integration makes cooperatives secure!\n\n## Key Concepts Made Simple\n\n### 1. NIK Verification\n\nNIK (Nomor Induk Kependudukan) is like a Social Security Number - unique for each person:\n\n```php\n// Every Indonesian has a unique NIK\n$nik = \"3175011234567890\";  // 16-digit ID number\n$name = \"Rina Susanti\";     // Must match database\n```\n\nThe system checks if this NIK exists and belongs to the claimed person!\n\n### 2. Verification Response\n\nDukcapil gives different responses based on what it finds:\n\n```php\n// Possible verification results\n$MATCH = \"Sesuai (100)\";        // Perfect match!\n$NOT_FOUND = \"NIK tidak terdapat\"; // ID doesn't exist\n$DECEASED = \"telah meninggal\";   // Person has passed away\n```\n\nIt's like a bouncer checking your ID - you either get in or you don't!\n\n### 3. Security Credentials\n\nThe system needs special permission to access Dukcapil:\n\n```php\n// Like a special key to access the database\n$credentials = [\n    'USER_ID' => 'koperasi_system',\n    'PASSWORD' => 'secret_key',\n    'IP_USER' => '192.168.1.1'\n];\n```\n\nNot just anyone can check the national database - you need authorization!\n\n## Verifying Your First Identity\n\nLet's verify Ibu Rina's identity step by step:\n\n### Step 1: Prepare the Verification Request\n\n```php\n// Create verification request\n$helper = new HelperDukcapil([\n    'nik' => '3175011234567890',\n    'nama' => 'Rina Susanti',\n    'id_koperasi' => 123\n]);\n```\n\nWe prepare the person's details for verification.\n\n### Step 2: Send to Dukcapil\n\n```php\n// Send request to national database\n$error = $helper->curlValidDukcapil();\nif ($error !== true) {\n    echo \"Connection problem!\";\n}\n```\n\nThe system connects to Dukcapil's secure server to check the identity.\n\n### Step 3: Process the Response\n\n```php\n// Get verification result\n$response = $helper->response();\nif ($response['status'] == 1) {\n    echo \"Identity verified!\";\n}\n```\n\nDukcapil tells us if the person is legitimate or not!\n\n## How Identity Verification Works\n\nHere's what happens when you verify someone's identity:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant S as System\n    participant H as Helper\n    participant D as Dukcapil\n    participant L as Log\n    \n    U->>S: Submit NIK & Name\n    S->>H: Prepare request\n    H->>D: Verify identity\n    D->>H: Return result\n    H->>L: Record activity\n```\n\nThe system acts as a secure middleman between your cooperative and the national database!\n\n### The Verification Process\n\nWhen checking an identity, the system first prepares secure credentials:\n\n```php\n// Get stored Dukcapil credentials\n$config = Setting::getValue('credential_dukcapil');\n$decode = json_decode($config);\n```\n\nThese credentials are like your passport to access government data - kept very secure!\n\n### Making the API Call\n\nThe system then contacts Dukcapil's server:\n\n```php\n// Set up secure connection\ncurl_setopt($ch, CURLOPT_URL, $this->URL_API);\ncurl_setopt($ch, CURLOPT_TIMEOUT, 10);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n```\n\nIt's like making a secure phone call to the government office - with timeout protection so we don't wait forever!\n\n## Understanding the Response\n\nDukcapil sends back different types of responses that need interpretation:\n\n### Successful Verification\n\n```php\n// Person exists and name matches\n$response = [\n    'status' => 1,  // Success!\n    'data' => []    // No errors\n];\n```\n\nGreen light - this person is legitimate!\n\n### Identity Mismatch\n\n```php\n// Name doesn't match NIK\nif (stripos($value, \"Tidak Sesuai\") !== false) {\n    $data['NAMA_LGKP'] = 'NAMA tidak sesuai';\n}\n```\n\nThe NIK exists but the name is wrong - potential identity theft attempt!\n\n### Special Cases\n\n```php\n// Check for deceased persons\nif ($code == 11) {\n    return 'Data orang yang telah meninggal';\n}\n```\n\nThe system prevents deceased persons from being registered as cooperative managers!\n\n## Logging for Security\n\nEvery verification attempt is logged for security:\n\n```php\n// Record verification attempt\nLogDukcapil::logDcp(\n    $params,        // What was checked\n    $result,        // Dukcapil's response\n    $status,        // Success or failure\n    'VERIFNIK',     // Type of check\n    $time           // How long it took\n);\n```\n\nThis creates an audit trail - like security camera footage of who checked what and when!\n\n## Handling System Availability\n\nSometimes Dukcapil might be unavailable:\n\n### Checking if Verification is Active\n\n```php\n// Is Dukcapil checking enabled?\n$status = HelperDukcapil::CheckIsActiveValidateDukcapil();\nif (!$status) {\n    // Skip verification temporarily\n    return HelperDukcapil::AllowValidation();\n}\n```\n\nAdministrators can temporarily disable verification for maintenance or testing.\n\n### Timeout Protection\n\n```php\n// Don't wait forever for response\nif (curl_errno($ch) == CURLE_OPERATION_TIMEDOUT) {\n    $result = 'Sistem sedang gangguan';\n}\n```\n\nIf Dukcapil doesn't respond within 10 seconds, we inform the user to try again later!\n\n## Integration with Previous Systems\n\nDukcapil Integration works with:\n- [Data Anggota](03_data_anggota__member_data__.md) - Verifies member identities before saving\n- [Notaris Integration](04_notaris_integration_.md) - Notaries must be verified citizens\n- [Master Transaction Management](05_master_transaction_management_.md) - Only verified people can manage cooperatives\n\nIt's the security layer that ensures only real, legitimate people can run cooperatives!\n\n## What You've Learned\n\nOutstanding! You now understand how Dukcapil Integration protects the cooperative system from identity fraud. The system:\n\n- Verifies citizen identities against the national database\n- Validates that names match their NIK numbers\n- Prevents deceased or fake identities from managing cooperatives\n- Logs all verification attempts for security auditing\n- Handles connection issues gracefully\n\nThink of it as having a government official personally verify every person's ID before they can manage a cooperative - but automated and happening in seconds!\n\n## Next Steps\n\nNow that you understand how identities are verified for security, let's explore how the entire API system is protected in [API Authentication & JWT](10_api_authentication___jwt_.md). This is where we'll learn how to keep the whole system secure from unauthorized access!", "\nWrite a very beginner-friendly tutorial chapter (in Markdown format) for the project `koperasi` about the concept: \"API Authentication & JWT\n\". This is Chapter 10.\n\nConcept Details:\n- Name: API Authentication & JWT\n\n- Description:\nSecurity layer that validates external API requests using JWT tokens and various authentication methods.\nActs like a security guard checking credentials before allowing access to sensitive cooperative data.\n\n\nComplete Tutorial Structure:\n1. [Transaksi Koperasi (Cooperative Transaction)\n](01_transaksi_koperasi__cooperative_transaction__.md)\n2. [Pesan Nama (Name Reservation)\n](02_pesan_nama__name_reservation__.md)\n3. [Data Anggota (Member Data)\n](03_data_anggota__member_data__.md)\n4. [Notaris Integration\n](04_notaris_integration_.md)\n5. [Master Transaction Management\n](05_master_transaction_management_.md)\n6. [Perbaikan Data (Data Correction)\n](06_perbaikan_data__data_correction__.md)\n7. [KBLI Business Activity\n](07_kbli_business_activity_.md)\n8. [Wilayah (Regional) Management\n](08_wilayah__regional__management_.md)\n9. [Dukcapil Integration\n](09_dukcapil_integration_.md)\n10. [API Authentication & JWT\n](10_api_authentication___jwt_.md)\n\nContext from previous chapters:\n# Chapter 1: Transaksi Koperasi (Cooperative Transaction)\n\n## Why Do We Need Cooperative Transactions?\n\nImagine you're running a library that keeps track of every important event - when it opens, when it changes its name, when it moves to a new location, or even when it closes. A **Transaksi Koperasi** (Cooperative Transaction) is exactly like that library's logbook for cooperatives in Indonesia!\n\nEvery cooperative goes through a lifecycle - it gets established, makes changes over time, and sometimes even dissolves. Without a proper system to track these events, it would be chaos! That's where our transaction system comes in.\n\n## Your First Use Case: Establishing a New Cooperative\n\nLet's say Ahmad wants to establish a farmers' cooperative called \"Koperasi Tani Sejahtera\". He needs to:\n1. Reserve the cooperative name\n2. Submit establishment documents \n3. Get approval from the authorities\n4. Receive an official certificate\n\nOur transaction system will handle all of this!\n\n## Key Concepts Made Simple\n\n### 1. Transaction Types (Jenis Transaksi)\n\nThink of transaction types like different stamps in your passport:\n\n```php\n// Three main transaction types\n$ESTABLISHMENT = 2;  // Birth of a cooperative\n$CHANGE = 3;        // Any modifications \n$DISSOLUTION = 4;   // End of a cooperative\n```\n\nEach type has its own special process and requirements.\n\n### 2. Transaction Status (Status Transaksi)\n\nJust like an online order, transactions have statuses:\n\n```php\n// Transaction status flow\n$draft = -1;      // Still being prepared\n$waiting = 0;     // Awaiting confirmation\n$approved = 1;    // Fully approved!\n```\n\n### 3. Master Transaction\n\nThis is the \"parent folder\" that keeps all related transactions together:\n\n```php\n// One cooperative, many transactions\n$master = MasterTransaction::find()\n    ->where(['id' => $cooperativeId])\n    ->one();\n    \n// Get all its transactions\n$allTransactions = $master->getListTransaksi();\n```\n\n## Creating Your First Transaction\n\nLet's establish Ahmad's cooperative step by step:\n\n### Step 1: Reserve the Name\n\n```php\n// Reserve the cooperative name first\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$reservation->save();\n```\n\nThis ensures no one else can use the same name!\n\n### Step 2: Create the Transaction\n\n```php\n// Create the establishment transaction\n$transaction = new TransaksiKoperasi();\n$transaction->jenis_transaksi_id = 2; // Establishment\n$transaction->nama_koperasi = \"Koperasi Tani Sejahtera\";\n$transaction->t_pesan_nama_id = $reservation->id;\n```\n\n### Step 3: Add Important Details\n\n```php\n// Add location and contact info\n$transaction->provinsi_id = 31; // Jakarta\n$transaction->alamat_koperasi = \"Jl. Merdeka No. 1\";\n$transaction->email = \"info@tanikoperasi.id\";\n$transaction->save();\n```\n\n## How It Works Under the Hood\n\nHere's what happens when you submit a new transaction:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant V as Validation\n    participant M as Master\n    participant S as SK Generator\n    \n    U->>T: Submit transaction\n    T->>V: Check requirements\n    V->>T: Requirements OK\n    T->>M: Create master record\n    M->>S: Generate certificate\n```\n\n### The Validation Process\n\nWhen a transaction is submitted, the system runs several checks:\n\n```php\n// Check if name is available\n$check = TransaksiKoperasi::checkPendirian($model);\nif ($check['status']) {\n    // Name already taken!\n    return \"Name not available\";\n}\n```\n\n```php\n// Check if documents are complete\nif ($model->akta_koperasi && $model->file_akta) {\n    // Documents OK, proceed\n    $model->is_finish = 0; // Waiting approval\n}\n```\n\n### The Approval Flow\n\nOnce validated, the transaction goes through approval:\n\n```php\n// Notary confirms the transaction\npublic function actionApprovetransaction() {\n    $transaksi = TransaksiKoperasi::findOne($id);\n    $transaksi->is_finish = 1; // Approved!\n    $transaksi->save();\n}\n```\n\n## Understanding the Database Structure\n\nThe transaction data is stored in the `kop_t_koperasi` table with key fields:\n\n```php\n// Main transaction fields\n$transaction = [\n    'id' => 123,\n    'nomor_transaksi' => 'TX-2024-001',\n    'nama_koperasi' => 'Koperasi Tani Sejahtera',\n    'jenis_transaksi' => 'PENDIRIAN',\n    'is_finish' => 1  // Approved\n];\n```\n\n## Real Implementation: The TransaksiKoperasi Model\n\nThe main model (in `models/TransaksiKoperasi.php`) handles all transaction operations:\n\n```php\nclass TransaksiKoperasi extends ActiveRecord {\n    // Define transaction relationships\n    public function getJenisTransaksi() {\n        return $this->hasOne(JenisTransaksi::className(), \n            ['id' => 'jenis_transaksi_id']);\n    }\n}\n```\n\nThis connects transactions to their types, making it easy to know what kind of event occurred.\n\n## Working with Transaction History\n\nYou can easily retrieve a cooperative's history:\n\n```php\n// Get the latest transaction\n$latest = TransaksiKoperasi::getLastTransByNik($nik);\n\n// Get all transactions for a cooperative  \n$history = TransaksiKoperasi::find()\n    ->where(['id_master' => $masterId])\n    ->orderBy(['created_date' => SORT_DESC])\n    ->all();\n```\n\n## What You've Learned\n\nCongratulations! You now understand how the Koperasi system tracks every important event in a cooperative's lifecycle. The **Transaksi Koperasi** is truly the heart of the system - it:\n\n- Records establishment, changes, and dissolution\n- Maintains a complete history for each cooperative\n- Ensures data integrity through validation\n- Connects all related information together\n\nThink of it as a digital diary that never forgets any important event in a cooperative's life!\n\n## Next Steps\n\nNow that you understand how transactions work, let's explore how cooperative names are reserved before establishment in [Pesan Nama (Name Reservation)](02_pesan_nama__name_reservation__.md). This is the crucial first step before any cooperative can be established!\n---\n# Chapter 2: Pesan Nama (Name Reservation)\n\nWelcome back! In the [previous chapter](01_transaksi_koperasi__cooperative_transaction__.md), we learned how the Koperasi system tracks every important event in a cooperative's lifecycle. But before a cooperative can even be established, there's one crucial step: **reserving its name**. Let's explore how the Pesan Nama (Name Reservation) system works!\n\n## Why Do We Need Name Reservation?\n\nImagine you want to open a new restaurant called \"Warung Maju Bersama\". You wouldn't want to invest time and money setting everything up, only to discover another restaurant already has that exact name, right? \n\nThe **Pesan Nama** system is like calling dibs on a cooperative name - it ensures your chosen name is unique and reserved just for you before you go through the establishment process. Think of it as reserving a domain name before building your website!\n\n## Your First Use Case: Reserving a Cooperative Name\n\nLet's say Ibu Siti wants to establish a savings and loan cooperative. She needs to:\n1. Check if her desired name \"Koperasi Simpan Pinjam Makmur\" is available\n2. Reserve the name if it's available\n3. Get a reservation confirmation\n4. Use this reservation when establishing her cooperative\n\nLet's see how Pesan Nama handles this!\n\n## Key Concepts Made Simple\n\n### 1. Name Availability Check\n\nBefore reserving a name, the system checks several things:\n\n```php\n// Check if the name is already taken\n$check = PesanNama::checkNama(\"MAKMUR\");\nif ($check) {\n    echo \"Name already exists!\";\n}\n```\n\nThe system looks for existing cooperatives with the same name to prevent duplicates.\n\n### 2. Reservation Period\n\nJust like a hotel reservation, name reservations have an expiration date:\n\n```php\n// Names are reserved for 30 days by default\n$reservation = new PesanNama();\n$reservation->end_date = date(\"Y-m-d\", strtotime(\"+30 days\"));\n```\n\nThis gives you 30 days to complete your cooperative establishment. Need more time? You can extend it!\n\n### 3. Reservation Status\n\nEvery reservation has a status to track its progress:\n\n```php\n// Reservation statuses\n$status = 0;  // Reserved but not used yet\n$status = 1;  // Used for establishment\n```\n\n## Creating Your First Name Reservation\n\nLet's reserve Ibu Siti's cooperative name step by step:\n\n### Step 1: Prepare the Reservation\n\n```php\n// Create a new reservation form\n$form = new PesanNamaForm();\n$form->nama_koperasi = \"MAKMUR\";\n$form->jenis_koperasi = 6; // Savings & Loan\n```\n\nWe specify the name and the type of cooperative we want to establish.\n\n### Step 2: Validate the Name\n\n```php\n// Check if the name meets requirements\n$error = PesanNama::checkPesanNama(\n    \"MAKMUR\", \n    6,      // cooperative type\n    null    // no port needed\n);\n```\n\nThe system checks:\n- Is the name already taken?\n- Does it contain forbidden words?\n- Does it meet minimum requirements (3 words)?\n\n### Step 3: Save the Reservation\n\n```php\n// If validation passes, save it\n$reservation = new PesanNama();\n$reservation->nama_koperasi = \"MAKMUR\";\n$reservation->no_pesan = \"PN-2024-001\";\n$reservation->save();\n```\n\nYou'll receive a reservation number (like `PN-2024-001`) as your proof!\n\n## How Name Validation Works\n\nThe system has multiple layers of validation to ensure name quality:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant V as Validator\n    participant DB as Database\n    participant R as Reservation\n    \n    U->>V: Submit name\n    V->>DB: Check existing names\n    DB->>V: Return results\n    V->>V: Check forbidden words\n    V->>R: Create reservation\n```\n\n### Checking for Duplicates\n\nWhen you submit a name, the system first checks existing reservations:\n\n```php\n// Look for active reservations with same name\n$existing = PesanNama::find()\n    ->where(['nama_koperasi' => $nama])\n    ->andWhere(['status' => 0])\n    ->one();\n```\n\nIf found and still valid (not expired), the name is unavailable.\n\n### Forbidden Words Check\n\nSome words are restricted to maintain professionalism:\n\n```php\n// Check against banned words list\n$banned = MasterBan::getArrayListBan($jenis);\nforeach ($banned as $word) {\n    if (strpos($nama, $word) !== false) {\n        return \"Contains forbidden word: $word\";\n    }\n}\n```\n\nWords like inappropriate terms or reserved government names are blocked.\n\n### Three-Word Rule\n\nMost cooperatives need at least 3 words in their name:\n\n```php\n// Count words in the name\n$wordCount = sizeof(explode(' ', $nama));\nif ($wordCount < 3) {\n    return \"Name must have at least 3 words\";\n}\n```\n\nThis ensures names are descriptive and unique enough.\n\n## Understanding the Database Structure\n\nThe reservation data is stored in the `pesan_nama` table:\n\n```php\n// Main reservation fields\n$reservation = [\n    'id' => 123,\n    'no_pesan' => 'PN-2024-001',\n    'nama_koperasi' => 'MAKMUR',\n    'end_date' => '2024-02-15',\n    'status' => 0  // Still available\n];\n```\n\nEach reservation tracks the name, who reserved it, and when it expires.\n\n## Real Implementation: The PesanNama Model\n\nThe main model (in `models/PesanNama.php`) handles all reservation operations:\n\n```php\nclass PesanNama extends ActiveRecord {\n    // Generate full cooperative name with prefix\n    public function getFullNamaKop() {\n        $jenis = \"KOPERASI SIMPAN PINJAM\";\n        return $jenis . \" \" . $this->nama_koperasi;\n    }\n}\n```\n\nThis automatically adds the proper prefix based on cooperative type.\n\n## Working with Reservations\n\nYou can manage your reservations easily:\n\n### Viewing Your Reservations\n\n```php\n// Get all your reservations\n$myReservations = PesanNama::find()\n    ->where(['ahu_notaris_id' => $notaryId])\n    ->all();\n```\n\nThis shows all names you've reserved.\n\n### Extending a Reservation\n\n```php\n// Add 30 more days to reservation\n$reservation = PesanNama::findOne($id);\n$newDate = strtotime($reservation->end_date . \"+30 days\");\n$reservation->end_date = date(\"Y-m-d\", $newDate);\n$reservation->save();\n```\n\nPerfect when you need more time to complete establishment!\n\n## The Complete Reservation Flow\n\nHere's what happens from start to finish:\n\n```mermaid\nsequenceDiagram\n    participant N as Notary\n    participant F as Form\n    participant V as Validation\n    participant DB as Database\n    participant T as Transaction\n    \n    N->>F: Enter name\n    F->>V: Validate name\n    V->>DB: Check availability\n    DB->>F: Name available\n    F->>T: Use for establishment\n```\n\nThe reservation connects seamlessly to the [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) when you're ready to establish!\n\n## What You've Learned\n\nGreat job! You now understand how the Pesan Nama system ensures every cooperative has a unique, appropriate name. The system:\n\n- Validates names against multiple criteria\n- Reserves names for a specific period\n- Prevents duplicate cooperatives\n- Connects reservations to establishment transactions\n\nThink of it as your cooperative's birth certificate application - you secure the name first before anything else!\n\n## Next Steps\n\nNow that you know how to reserve a cooperative name, let's explore how to manage the people who will be part of your cooperative in [Data Anggota (Member Data)](03_data_anggota__member_data__.md). After all, a cooperative is nothing without its members!\n---\n# Chapter 3: Data Anggota (Member Data)\n\nWelcome back! In the [previous chapter](02_pesan_nama__name_reservation__.md), we learned how to reserve a cooperative name before establishment. But a cooperative is more than just a name - it's about the people who run it! Let's explore how the **Data Anggota** (Member Data) system manages all the important people in your cooperative.\n\n## Why Do We Need Member Data Management?\n\nImagine running a school without knowing who your teachers are, what subjects they teach, or how to contact them. Chaos, right? A cooperative faces the same challenge - it needs to know who its board members are, who supervises operations, and how to reach everyone.\n\nThe **Data Anggota** system is like a smart contact book that not only stores people's information but also understands their roles and responsibilities. It's the HR department of your cooperative system!\n\n## Your First Use Case: Setting Up Your Cooperative Team\n\nLet's say Pak Budi has successfully reserved the name \"Koperasi Maju Bersama\" and now needs to:\n1. Add himself as the Chairman (Ketua)\n2. Add Ibu Rina as the Treasurer (Bendahara)\n3. Add Pak Agus as a Supervisor (Pengawas)\n4. Store all their personal details safely\n\nLet's see how Data Anggota makes this easy!\n\n## Key Concepts Made Simple\n\n### 1. Member Roles (Status Pengurus)\n\nIn a cooperative, people have different responsibilities:\n\n```php\n// Common roles in a cooperative\n$chairman = \"KETUA\";           // The leader\n$secretary = \"SEKRETARIS\";     // Handles documentation\n$treasurer = \"BENDAHARA\";      // Manages finances\n$supervisor = \"PENGAWAS\";      // Ensures compliance\n```\n\nThink of it like a football team - you have defenders, midfielders, and strikers. Each has a specific job!\n\n### 2. Personal Information\n\nFor each member, we store essential details:\n\n```php\n// Basic member information\n$member = [\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',  // ID number\n    'jenis_kelamin' => 'LAKI-LAKI',\n    'status_pengurus' => 'KETUA'\n];\n```\n\nThis ensures we know exactly who is who in the cooperative.\n\n### 3. Gender Normalization\n\nThe system smartly handles different ways people might enter gender:\n\n```php\n// System automatically standardizes gender format\n$input1 = \"Laki-laki\";     // lowercase\n$input2 = \"LAKI-LAKI\";     // uppercase  \n$input3 = \"Laki - Laki\";   // with spaces\n// All become: \"LAKI - LAKI\"\n```\n\nNo matter how you type it, the system understands!\n\n## Adding Your First Member\n\nLet's add Pak Budi as the Chairman step by step:\n\n### Step 1: Create a New Member\n\n```php\n// Create a new member record\n$member = new DataAnggota();\n$member->nama = \"Budi Santoso\";\n$member->nik = \"3175011234567890\";\n```\n\nWe start with the basic identity information.\n\n### Step 2: Assign the Role\n\n```php\n// Get the role ID for Chairman\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"KETUA\");\n$member->status_pengurus_id = $roleId;\n```\n\nThe helper function finds the correct role ID automatically!\n\n### Step 3: Add Personal Details\n\n```php\n// Set gender using the helper\n$genderId = DataAnggotaHelper::getIdJenisKelamin(\"Laki-laki\");\n$member->jenis_kelamin_id = $genderId;\n$member->t_koperasi_id = 123; // Link to cooperative\n$member->save();\n```\n\nNow Pak Budi is officially the Chairman!\n\n## How Member Management Works\n\nHere's what happens when you add a new member:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant H as Helper\n    participant DB as Database\n    participant M as Member\n    \n    U->>H: Submit member info\n    H->>H: Normalize gender\n    H->>DB: Get role ID\n    DB->>M: Create member record\n    M->>U: Member added!\n```\n\n### The Role Assignment Process\n\nWhen assigning a role, the system uses the StatusPengurus helper:\n\n```php\n// Find the role in the database\n$role = StatusPengurus::find()\n    ->where(['nama' => 'KETUA'])\n    ->one();\n```\n\nThis ensures only valid roles are assigned - you can't accidentally make someone a \"Supreme Emperor\"!\n\n### Gender Standardization\n\nThe system intelligently handles gender input variations:\n\n```php\n// The normalizeJenisKelamin function\nif (strtoupper($nama) == 'LAKI-LAKI') {\n    return \"LAKI - LAKI\";  // Standardized format\n}\n```\n\nThis prevents duplicate entries due to formatting differences.\n\n## Understanding the Database Structure\n\nMember data is stored in the `data_anggota` table:\n\n```php\n// Member record structure\n$memberRecord = [\n    'id' => 1,\n    'nama' => 'Budi Santoso',\n    'nik' => '3175011234567890',\n    'status_pengurus_id' => 1,  // References role\n    'jenis_kelamin_id' => 1,    // References gender\n    't_koperasi_id' => 123      // Links to cooperative\n];\n```\n\nEach member is linked to their cooperative and role through IDs.\n\n## Real Implementation: The DataAnggota Model\n\nThe main model (in `models/DataAnggota.php`) manages all member operations:\n\n```php\nclass DataAnggota extends ActiveRecord {\n    // Get all members for a cooperative\n    public static function getAnggotaByID($kode) {\n        return self::find()\n            ->where(['t_koperasi_id' => $kode])\n            ->all();\n    }\n}\n```\n\nThis makes it easy to retrieve all members of a specific cooperative!\n\n## Working with Member Lists\n\nYou can easily manage your cooperative's team:\n\n### Getting All Members\n\n```php\n// Retrieve all members of a cooperative\n$cooperativeId = 123;\n$allMembers = DataAnggota::getAnggotaByID($cooperativeId);\n```\n\nThis returns everyone associated with the cooperative.\n\n### Finding Specific Roles\n\n```php\n// Find all supervisors\n$supervisors = DataAnggota::find()\n    ->where(['status_pengurus_id' => 4])  // Supervisor ID\n    ->all();\n```\n\nPerfect for when you need to contact all supervisors!\n\n### Getting Member Details\n\n```php\n// Get member with gender information\n$member = DataAnggota::findOne($id);\n$gender = $member->getJenisKelamin()->one();\necho $gender->nama; // Shows \"LAKI - LAKI\"\n```\n\nThe relationship makes it easy to access related information.\n\n## Helper Functions in Action\n\nThe DataAnggotaHelper (in `modules/Api/components/DataAnggotaHelper.php`) provides useful utilities:\n\n### Converting Role Names to IDs\n\n```php\n// Convert role name to database ID\n$roleId = DataAnggotaHelper::getIdStatusPengurus(\"BENDAHARA\");\n// Returns: 3 (Treasurer's ID)\n```\n\n### Handling Gender Variations\n\n```php\n// Standardize any gender input\n$standard = DataAnggotaHelper::normalizeJenisKelamin(\"laki-laki\");\n// Returns: \"LAKI - LAKI\"\n```\n\nThese helpers ensure data consistency across the system!\n\n## What You've Learned\n\nExcellent work! You now understand how the Data Anggota system manages the people who make cooperatives work. The system:\n\n- Stores member information with their roles\n- Standardizes data entry to prevent inconsistencies\n- Links members to their cooperatives\n- Provides easy access to member lists and details\n\nThink of it as LinkedIn for cooperatives - keeping track of who does what, where, and how to reach them!\n\n## Next Steps\n\nNow that you know how to manage cooperative members, let's explore how legal documents are handled through [Notaris Integration](04_notaris_integration_.md). This is where the legal magic happens to make everything official!\n---\n# Chapter 4: Notaris Integration\n\nWelcome back! In the [previous chapter](03_data_anggota__member_data__.md), we learned how to manage cooperative members and their roles. But here's the thing - for a cooperative to be legally recognized in Indonesia, it needs official validation from a notary. Let's explore how the **Notaris Integration** system makes your cooperative legally legitimate!\n\n## Why Do We Need Notary Integration?\n\nImagine you're getting married. You can't just say \"we're married now\" and expect it to be legally recognized - you need an official who witnesses and certifies your marriage, right? The same goes for cooperatives! \n\nA **Notaris** (Notary) in Indonesia is like a legal referee who makes sure everything is done by the book. They verify documents, witness signatures, and give your cooperative the official stamp of approval. Without them, your cooperative is just a group of friends with good intentions!\n\n## Your First Use Case: Getting Your Cooperative Certified\n\nLet's say Ibu Maya has:\n1. Reserved her cooperative name \"Koperasi Sejahtera\"\n2. Added all board members\n3. Prepared all required documents\n\nNow she needs:\n- A notary to review her documents\n- Official certification of the establishment\n- Legal authentication of all paperwork\n\nLet's see how Notaris Integration handles this!\n\n## Key Concepts Made Simple\n\n### 1. Notary Authentication\n\nThink of a notary as your cooperative's birth certificate issuer:\n\n```php\n// Check if notary is authorized\n$notaryId = 123;\n$isAuthorized = NpakHelper::checkNotarisNpak($notaryId);\n```\n\nNot every notary can certify cooperatives - they need special authorization!\n\n### 2. NPAK Status\n\nNPAK is like a special license for notaries to handle cooperative documents:\n\n```php\n// NPAK status types\n$NPAK_ACTIVE = 1;    // Can certify cooperatives\n$NPAK_INACTIVE = 0;  // Cannot certify cooperatives\n```\n\nIt's like having a driver's license specifically for buses - not all drivers have it!\n\n### 3. Notary Transactions\n\nEvery action a notary takes is recorded:\n\n```php\n// Notary approves cooperative establishment\n$transaction = new TransaksiNotaris();\n$transaction->id_notaris = 123;\n$transaction->status_lolos_gagal = 1; // Approved!\n```\n\nThis creates a permanent legal record of the certification.\n\n## Verifying Your Notary\n\nLet's check if your chosen notary can help establish your cooperative:\n\n### Step 1: Find Your Notary\n\n```php\n// Look up notary by their ID\n$notary = Notaris::findOne(123);\necho $notary->nama_lengkap; // \"Dr. Ahmad Prasetyo\"\n```\n\nFirst, we identify who will handle your documents.\n\n### Step 2: Check Their Authorization\n\n```php\n// Verify NPAK status\n$hasNpak = NpakHelper::isNpak(123);\nif ($hasNpak) {\n    echo \"Notary can certify cooperatives!\";\n}\n```\n\nThis ensures your notary has the right credentials.\n\n### Step 3: Check System Settings\n\n```php\n// Is NPAK checking enabled?\n$npakRequired = NpakHelper::isPengecekanNpak();\nif (!$npakRequired) {\n    echo \"System allows any notary\";\n}\n```\n\nSometimes the system relaxes requirements for testing or special cases.\n\n## How Notary Verification Works\n\nHere's what happens when a notary tries to certify your cooperative:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant N as Notary\n    participant H as NPAK Helper\n    participant DB as Database\n    participant S as System\n    \n    C->>N: Request certification\n    N->>H: Check authorization\n    H->>DB: Verify NPAK status\n    DB->>S: Return status\n    S->>C: Certification approved\n```\n\n### The Authorization Check\n\nWhen a notary attempts to certify documents:\n\n```php\n// System checks NPAK database\n$npakRecord = NotarisNpak::findOne([\n    'id_notaris' => $notaryId,\n    'npak' => NotarisNpak::NPAK_AKTIF\n]);\n```\n\nIf found and active, the notary can proceed!\n\n### The Certification Process\n\nOnce authorized, the notary creates a transaction record:\n\n```php\n// Record the certification\n$record = new TransaksiNotaris();\n$record->id_notaris = $notaryId;\n$record->nomor_sk = \"SK-2024-001\";\n$record->save();\n```\n\nThis creates an immutable legal record.\n\n## Understanding the Database Structure\n\nThe system uses multiple tables to manage notary data:\n\n```php\n// Notary profile\n$notaryProfile = [\n    'id_notaris' => 123,\n    'nama_lengkap' => 'Dr. Ahmad Prasetyo',\n    'nomor_sk' => 'SK-2024-001'\n];\n```\n\n```php\n// NPAK authorization\n$npakAuth = [\n    'id_notaris' => 123,\n    'npak' => 1,  // Active authorization\n];\n```\n\nThese tables work together to validate notary credentials.\n\n## Real Implementation: The NpakHelper\n\nThe NpakHelper (in `components/NpakHelper.php`) manages all authorization checks:\n\n```php\n// Main authorization check\npublic static function checkNotarisNpak($idNotaris) {\n    // First check system settings\n    $flagCheck = Setting::getValue('pengecekan_npak');\n    if ($flagCheck == 0) {\n        return true; // Skip check\n    }\n    // Then verify NPAK\n    return self::isNpak($idNotaris);\n}\n```\n\nThis two-step process allows flexible configuration!\n\n## Working with Notary Records\n\nYou can track all notary activities:\n\n### Finding a Notary's Latest Certification\n\n```php\n// Get last SK number for a notary\n$lastSK = Notaris::getLastSkNotaris(123);\necho $lastSK; // \"SK-2024-001\"\n```\n\nThis shows their most recent certification work.\n\n### Verifying a Certification Number\n\n```php\n// Find notary by SK number\n$notaryId = Notaris::getIdNotarisByLastSk(\"SK-2024-001\");\necho \"Certified by notary: \" . $notaryId;\n```\n\nPerfect for auditing who certified which cooperative!\n\n## The Complete Certification Flow\n\nFrom start to finish, here's how it works:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant T as Transaction\n    participant N as Notary\n    participant V as Verification\n    participant C as Certificate\n    \n    U->>T: Submit documents\n    T->>N: Request certification\n    N->>V: Check NPAK status\n    V->>C: Generate certificate\n    C->>U: Cooperative certified!\n```\n\nThe notary acts as the crucial middle layer ensuring everything is legal!\n\n## Integration with Previous Systems\n\nThe Notaris Integration connects seamlessly with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Notaries approve transactions\n- [Data Anggota](03_data_anggota__member_data__.md) - Notaries verify member identities\n- [Pesan Nama](02_pesan_nama__name_reservation__.md) - Notaries confirm name availability\n\nIt's the legal glue that binds everything together!\n\n## What You've Learned\n\nFantastic progress! You now understand how the Notaris Integration system ensures your cooperative is legally legitimate. The system:\n\n- Verifies notary authorization through NPAK\n- Records all certification activities\n- Maintains legal compliance\n- Creates immutable certification records\n\nThink of it as having a trusted witness who makes sure everything about your cooperative is legally sound - from establishment to any future changes!\n\n## Next Steps\n\nNow that you understand how legal certification works, let's explore how all these transactions are organized and managed in [Master Transaction Management](05_master_transaction_management_.md). This is where we'll see how everything comes together in one unified system!\n---\n# Chapter 5: Master Transaction Management\n\nWelcome back! In the [previous chapter](04_notaris_integration_.md), we learned how notaries provide legal certification for cooperatives. But here's an important question - how does the system keep track of all cooperatives and their current status? Is a cooperative still active? Has it merged with another? Has it been dissolved? That's where **Master Transaction Management** comes in!\n\n## Why Do We Need Master Transaction Management?\n\nImagine running a school directory that lists all schools in your city. Some schools are actively operating, some have merged with other schools, and some have closed down. You need a master list that shows the current status of each school at a glance, right?\n\nThe **Master Transaction Management** system is exactly that - a master directory for all cooperatives. It's like a living phonebook that not only lists all cooperatives but also knows whether they're still \"picking up the phone\" (active), have \"changed their number\" (merged), or have \"disconnected their line\" (dissolved).\n\n## Your First Use Case: Tracking Cooperative Lifecycle\n\nLet's say the government wants to know:\n1. How many active cooperatives exist in Jakarta?\n2. Which cooperatives have merged together?\n3. Which cooperatives have been dissolved?\n4. What's the complete history of \"Koperasi Maju Bersama\"?\n\nThe Master Transaction system answers all these questions instantly!\n\n## Key Concepts Made Simple\n\n### 1. Master Record\n\nThink of a master record as a cooperative's permanent file folder:\n\n```php\n// Each cooperative has one master record\n$master = MasterTransaction::findOne($cooperativeId);\necho $master->status; // 1 = Active\n```\n\nThis folder contains everything about the cooperative's current state.\n\n### 2. Cooperative Status Types\n\nEvery cooperative can be in one of three states:\n\n```php\n// Three possible states\n$ACTIVE = 1;     // Operating normally\n$MERGED = 2;     // Joined with another cooperative  \n$DISSOLVED = 0;  // No longer operating\n```\n\nIt's like a traffic light - green (active), yellow (merged), or red (dissolved)!\n\n### 3. Transaction History\n\nThe master record links to all transactions:\n\n```php\n// Get all transactions for a cooperative\n$history = $master->getListTransaksi();\necho count($history); // Shows total transactions\n```\n\nThis gives you the complete story of the cooperative's journey.\n\n## Checking a Cooperative's Status\n\nLet's find out the current status of a cooperative:\n\n### Step 1: Find the Master Record\n\n```php\n// Look up the cooperative\n$master = MasterTransaction::find()\n    ->where(['id' => 123])\n    ->one();\n```\n\nThis retrieves the master record for cooperative #123.\n\n### Step 2: Check Current Status\n\n```php\n// Check if cooperative is active\nif ($master->is_active == 1) {\n    echo \"Cooperative is operating!\";\n}\n```\n\nThe `is_active` field tells us if it's currently operating.\n\n### Step 3: Check Special Conditions\n\n```php\n// Check if it has merged\nif ($master->is_gabung == 1) {\n    echo \"This cooperative has merged!\";\n}\n```\n\nThe `is_gabung` flag indicates a merger has occurred.\n\n## How Master Transaction Works\n\nHere's what happens when tracking cooperative status:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant M as Master\n    participant T as Transaction\n    participant S as Status\n    \n    C->>T: New transaction occurs\n    T->>M: Update master record\n    M->>S: Change status if needed\n    S->>C: Status updated!\n```\n\nThe master record acts as the central truth about each cooperative's current state!\n\n### Creating a Master Record\n\nWhen a cooperative is first established:\n\n```php\n// New cooperative gets a master record\n$master = new MasterTransaction();\n$master->id_transaksi = $establishmentId;\n$master->status = 1; // Start as active\n$master->save();\n```\n\nThis creates the permanent tracking record.\n\n### Updating Status\n\nWhen major events occur, the status changes:\n\n```php\n// Cooperative merges with another\n$master->is_gabung = 1;\n$master->is_active = 0; // No longer independently active\n$master->save();\n```\n\nThe master record always reflects the current reality.\n\n## Understanding the Database Structure\n\nThe master transaction table (`master_transaksi`) stores:\n\n```php\n// Master record fields\n$masterRecord = [\n    'id' => 456,\n    'id_transaksi' => 123,  // Latest transaction\n    'status' => 1,          // Current status\n    'is_gabung' => 0,       // Merger flag\n    'is_deleted' => 0       // Soft delete flag\n];\n```\n\nEach field tracks a different aspect of the cooperative's state.\n\n## Real Implementation: The MasterTransaction Model\n\nThe main model (in `models/MasterTransaction.php`) manages all master operations:\n\n```php\nclass MasterTransaction extends ActiveRecord {\n    // Link to current transaction\n    public function getTransaksiKoperasi() {\n        return $this->hasOne(TransaksiKoperasi::className(), \n            ['id' => 'id_transaksi']);\n    }\n}\n```\n\nThis connects the master record to its transactions.\n\n## Finding Cooperatives\n\nThe system provides powerful search capabilities:\n\n### Search Active Cooperatives in a Region\n\n```php\n// Find active cooperatives in Jakarta\n$activeInJakarta = MasterTransaction::getDaftarKoperasi(\n    31,    // Jakarta province ID\n    null,  // Any city\n    ['status_koperasi' => 1] // Active only\n);\n```\n\nThis returns all operating cooperatives in Jakarta!\n\n### Track Cooperative History\n\n```php\n// Get all transactions for a master\n$transactions = $master->getListTransaksi();\nforeach ($transactions as $trans) {\n    echo $trans->jenis_transaksi; // Type of change\n}\n```\n\nThis shows every change the cooperative has undergone.\n\n## Managing Mergers\n\nWhen cooperatives merge, the system tracks it:\n\n```php\n// Mark cooperatives as merged\nSKHelper::changeMasterTransactionIsGabung($transactionId);\n// Updates all involved cooperatives\n```\n\nThe helper function handles the complex merger logic!\n\n## Integration with Other Systems\n\nThe Master Transaction connects everything:\n- Links to [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) for all events\n- References [Data Anggota](03_data_anggota__member_data__.md) through transactions\n- Uses [Notaris Integration](04_notaris_integration_.md) for legal validation\n\nIt's the backbone that holds all cooperative data together!\n\n## What You've Learned\n\nExcellent work! You now understand how Master Transaction Management keeps track of every cooperative's current status and history. The system:\n\n- Maintains a master record for each cooperative\n- Tracks whether cooperatives are active, merged, or dissolved\n- Links all transactions to create a complete history\n- Provides powerful search and filtering capabilities\n\nThink of it as the central nervous system of the cooperative system - it knows the state of every cooperative at any moment and remembers everything that has happened!\n\n## Next Steps\n\nNow that you understand how cooperatives are tracked at the master level, let's explore what happens when data needs to be corrected in [Perbaikan Data (Data Correction)](06_perbaikan_data__data_correction__.md). Even the best systems need a way to fix mistakes!\n---\n# Chapter 6: Perbaikan Data (Data Correction)\n\nWelcome back! In the [previous chapter](05_master_transaction_management_.md), we learned how Master Transaction Management keeps track of every cooperative's status and history. But what happens when someone makes a mistake? What if the secretary's phone number was typed wrong, or the cooperative needs to update its business activities? That's where **Perbaikan Data** (Data Correction) comes to the rescue!\n\n## Why Do We Need Data Correction?\n\nImagine you just published a phone book for your neighborhood. A week later, Mrs. Sari calls saying her phone number was printed wrong - it should be 081234567890, not 081234567880. You can't recall all the phone books and reprint them, but you need a way to officially record and approve this correction, right?\n\nThe **Perbaikan Data** system is like a formal amendment process for cooperatives. When data needs to be corrected after a cooperative is established, you can't just change it directly - you need to submit a correction request, provide supporting documents, and get it reviewed and approved. It's like submitting an errata for an official document!\n\n## Your First Use Case: Correcting Board Member Information\n\nLet's say Pak Budi's cooperative \"Koperasi Maju Bersama\" needs to:\n1. Update the treasurer's phone number (it was typed wrong)\n2. Add a new business activity they forgot to include\n3. Fix a board member's address\n\nInstead of starting over, they can use Perbaikan Data to request these corrections officially!\n\n## Key Concepts Made Simple\n\n### 1. Correction Request\n\nThink of a correction request as a formal letter asking for changes:\n\n```php\n// Create a new correction request\n$correction = new TransaksiPerbaikan();\n$correction->t_koperasi_id = 123; // Which cooperative\n$correction->status_transaksi_perbaikan = 'verifikator_1_tunggu';\n```\n\nThe request starts in \"waiting for review\" status - just like submitting homework to your teacher!\n\n### 2. Verification Workflow\n\nEvery correction goes through multiple checkpoints:\n\n```php\n// Correction statuses\n$WAITING_V1 = 'verifikator_1_tunggu';  // First reviewer\n$WAITING_V2 = 'verifikator_2_tunggu';  // Second reviewer  \n$APPROVED = 'permohonan_diterima';     // All done!\n```\n\nIt's like getting your essay reviewed by two teachers before final approval!\n\n### 3. Supporting Documents\n\nCorrections need proof:\n\n```php\n// Required documents\n$documents = [\n    'file_surat_permohonan',      // Request letter\n    'file_surat_pernyataan',      // Statement letter\n    'file_surat_keterangan_domisili' // Address proof\n];\n```\n\nYou can't just say \"trust me\" - you need to show evidence for the changes!\n\n## Making Your First Correction Request\n\nLet's help Pak Budi correct his cooperative's data:\n\n### Step 1: Find the Cooperative\n\n```php\n// Look up the cooperative to correct\n$master = MasterTransaction::findExistTransactionForPerbaikan(\n    \"SK-2024-001\",           // Certificate number\n    \"2024-01-15\",           // Certificate date\n    \"KOPERASI MAJU BERSAMA\" // Name\n);\n```\n\nFirst, we need to find the exact cooperative record to correct.\n\n### Step 2: Specify What to Correct\n\n```php\n// List what needs correction\n$corrections = [\n    'pengawas_pengurus' => [\n        ['nama' => 'Ibu Rina', 'no_telp' => '081234567890']\n    ]\n];\n```\n\nWe clearly specify which data needs to be fixed and what the new values should be.\n\n### Step 3: Submit the Request\n\n```php\n// Create the correction request\n$request = new TransaksiPerbaikan();\n$request->data_diperbaiki_list = json_encode($corrections);\n$request->save();\n```\n\nThe corrections are saved as JSON so they can be reviewed before being applied!\n\n## How the Correction Workflow Works\n\nHere's what happens when you submit a correction request:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant R as Request\n    participant V1 as Verifier 1\n    participant V2 as Verifier 2\n    participant D as Database\n    \n    U->>R: Submit correction\n    R->>V1: Review request\n    V1->>V2: Approve & forward\n    V2->>D: Apply changes\n    D->>U: Correction complete!\n```\n\nThe multi-step verification ensures corrections are legitimate and accurate!\n\n### The Review Process\n\nWhen a verifier reviews your request:\n\n```php\n// First verifier reviews\n$verification = new VerifikasiPerbaikan();\n$verification->tahap = 'VERIFIKATOR_1';\n$verification->status = 'DITERIMA'; // Accepted!\n```\n\nEach verifier can accept or reject the request with a reason.\n\n### Handling Rejections\n\nIf a correction is rejected:\n\n```php\n// Rejection with reason\n$verification->status = 'DITOLAK';\n$verification->alasan = 'Missing supporting documents';\n```\n\nYou'll know exactly why it was rejected and what to fix!\n\n## Understanding the Database Structure\n\nCorrections are stored in multiple related tables:\n\n```php\n// Main correction transaction\n$correctionRecord = [\n    'id' => 456,\n    't_koperasi_id' => 123,  // Links to cooperative\n    'data_diperbaiki_list' => '{\"pengawas_pengurus\":[...]}',\n    'status_transaksi_perbaikan' => 'verifikator_1_tunggu'\n];\n```\n\nThe `data_diperbaiki_list` contains all requested changes in JSON format.\n\n## Real Implementation: The Correction Form\n\nThe correction process uses a multi-step form (in `controllers/PerbaikanDataController.php`):\n\n```php\n// Step 1: Identify cooperative\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_KOPERASI;\n```\n\n```php\n// Step 2: Applicant information\n$model->scenario = PerbaikanDataForm::SCENARIO_DATA_PEMOHON;\n```\n\n```php\n// Step 3: Upload documents and specify changes\n$model->scenario = PerbaikanDataForm::SCENARIO_CHECKLIST;\n```\n\nEach step collects different information, making the process manageable!\n\n## Working with Correction Helpers\n\nThe PerbaikanDataHelper (in `components/helper/PerbaikanDataHelper.php`) provides useful utilities:\n\n### Building a Data Snapshot\n\n```php\n// Capture current data before changes\n$snapshot = PerbaikanDataHelper::buildMasterSnapshot(\n    $transaksiKoperasi,\n    $requestedChanges\n);\n```\n\nThis creates a \"before\" picture so you can always see what changed!\n\n### Filtering Valid Corrections\n\n```php\n// Only keep allowed corrections\n$filtered = PerbaikanDataHelper::filterChecklistPerbaikan(\n    $selectedItems,\n    $corrections\n);\n```\n\nThis ensures only permitted types of corrections are processed.\n\n## Integration with Other Systems\n\nPerbaikan Data connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Finds cooperatives to correct\n- [Notaris Integration](04_notaris_integration_.md) - Notaries submit corrections\n- [Data Anggota](03_data_anggota__member_data__.md) - Corrects member information\n\nIt's the safety net that catches and fixes mistakes across the entire system!\n\n## What You've Learned\n\nFantastic work! You now understand how the Perbaikan Data system handles corrections to cooperative data. The system:\n\n- Provides a formal process for requesting data corrections\n- Requires supporting documents for accountability\n- Uses multi-level verification to ensure accuracy\n- Maintains a complete audit trail of all changes\n- Preserves data integrity while allowing necessary updates\n\nThink of it as the \"track changes\" feature in a word processor, but for cooperative data - every correction is documented, reviewed, and approved before being applied!\n\n## Next Steps\n\nNow that you understand how to correct cooperative data after establishment, let's explore how cooperatives define their business activities in [KBLI Business Activity](07_kbli_business_activity_.md). This is where cooperatives specify exactly what kind of business they'll be conducting!\n---\n# Chapter 7: KBLI Business Activity\n\nWelcome back! In the [previous chapter](06_perbaikan_data__data_correction__.md), we learned how the Perbaikan Data system helps fix mistakes in cooperative data. But here's an interesting question - how does the system know what kind of business a cooperative is allowed to do? Can a farming cooperative suddenly start operating as a bank? That's where **KBLI Business Activity** classification comes in!\n\n## Why Do We Need Business Activity Classification?\n\nImagine you're opening a restaurant. You need permits for food service, not for construction work or banking services. The government needs to know exactly what type of business you're running to ensure you follow the right regulations and standards.\n\n**KBLI** (Klasifikasi Baku Lapangan Usaha Indonesia - Indonesian Standard Industrial Classification) is like a giant catalog of every possible business activity in Indonesia. Each activity has a unique code - think of it like a barcode that tells everyone exactly what your cooperative does. A farming cooperative gets farming codes, a savings and loan cooperative gets financial service codes, and so on!\n\n## Your First Use Case: Setting Up Business Activities\n\nLet's say Ibu Sari is establishing \"Koperasi Tani Makmur\" (a farming cooperative) and needs to:\n1. Select that her cooperative will grow rice (KBLI code: 01121)\n2. Also add vegetable farming (KBLI code: 01131)\n3. Make sure she can't accidentally add banking activities (wrong type!)\n\nThe KBLI system ensures cooperatives only select appropriate business activities!\n\n## Key Concepts Made Simple\n\n### 1. KBLI Codes\n\nThink of KBLI codes like ISBN numbers for books - each one uniquely identifies a type of business:\n\n```php\n// Example KBLI codes\n$RICE_FARMING = \"01121\";        // Growing rice\n$SAVINGS_LOAN = \"64141\";        // Conventional savings & loan\n$LABOR_SERVICES = \"52240\";      // Port labor services\n```\n\nEach code tells you exactly what business activity is allowed.\n\n### 2. Business Activity Categories\n\nKBLI codes are organized into categories like a library:\n\n```php\n// Categories are like book sections\n$category = \"A\";  // Agriculture\n$category = \"G\";  // Trade\n$category = \"K\";  // Financial services\n```\n\nThis makes it easy to find related activities!\n\n### 3. Cooperative Type Mapping\n\nNot all KBLI codes are available to all cooperatives:\n\n```php\n// Farming cooperatives can't do banking!\n$farmingCoop = 1;     // Can only select farming codes\n$savingsLoanCoop = 6; // Can only select financial codes\n```\n\nIt's like age restrictions on movies - not everything is appropriate for everyone!\n\n## Adding Business Activities to Your Cooperative\n\nLet's help Ibu Sari add business activities to her farming cooperative:\n\n### Step 1: Find Available KBLI Codes\n\n```php\n// Get KBLI codes for farming cooperatives\n$kbliList = KBLIBakum::find()\n    ->where(['m_jenis_koperasi' => 1]) // Farming type\n    ->all();\n```\n\nThis returns only activities appropriate for farming cooperatives!\n\n### Step 2: Look Up Activity Details\n\n```php\n// Get details about rice farming\n$activity = KBLIBakum::findOne(['kode' => '01121']);\necho $activity->judul;  // \"Rice Farming\"\necho $activity->uraian; // Detailed description\n```\n\nEach code has a title and detailed description of what's allowed.\n\n### Step 3: Save Selected Activities\n\n```php\n// Add business activity to cooperative\n$businessActivity = new AktifitasUsaha();\n$businessActivity->kbli_id = 123; // Rice farming ID\n$businessActivity->t_koperasi_id = 456; // Cooperative ID\n$businessActivity->save();\n```\n\nNow the cooperative is officially registered for rice farming!\n\n## How KBLI Classification Works\n\nHere's what happens when selecting business activities:\n\n```mermaid\nsequenceDiagram\n    participant C as Cooperative\n    participant K as KBLI System\n    participant F as Filter\n    participant DB as Database\n    \n    C->>K: Request activities\n    K->>F: Apply type filter\n    F->>DB: Get matching codes\n    DB->>C: Return allowed activities\n```\n\nThe system filters activities based on cooperative type to ensure compliance!\n\n### The Filtering Process\n\nWhen loading available KBLI codes:\n\n```php\n// System checks cooperative type\n$cooperativeType = 6; // Savings & loan\n$allowedCodes = KBLIBakum::listKodeSimpanPinjam();\n// Returns [64141, 64142] - financial codes only\n```\n\nThis prevents inappropriate business activities from being selected.\n\n### Hidden Activities\n\nSome KBLI codes might be temporarily unavailable:\n\n```php\n// Get list of hidden codes from settings\n$hidden = Setting::getValue('hidden_kbli');\n$hiddenArray = json_decode($hidden);\n// These codes won't appear in searches\n```\n\nThis allows administrators to restrict certain activities when needed.\n\n## Understanding the Database Structure\n\nBusiness activities are stored across multiple tables:\n\n```php\n// KBLI master data\n$kbliMaster = [\n    'id_kbli' => 123,\n    'kode' => '01121',\n    'judul' => 'Rice Farming',\n    'kategori' => 'A'  // Agriculture\n];\n```\n\n```php\n// Cooperative's selected activities\n$selectedActivity = [\n    'id' => 456,\n    't_koperasi_id' => 789,  // Which cooperative\n    'kbli_id' => 123         // Which activity\n];\n```\n\nThese tables link cooperatives to their allowed business activities.\n\n## Real Implementation: The KBLI Models\n\nThe system uses several models to manage KBLI data:\n\n### The Main KBLI Model\n\n```php\n// In models/bakum/KBLIBakum.php\nclass KBLIBakum extends ActiveRecord {\n    // Special codes for specific types\n    const KODE_SIMPAN_PINJAM_KONVENSIONAL = 64141;\n    const KODE_TKBM = 52240;\n}\n```\n\nThis defines special business codes that have unique rules.\n\n### Getting Activity Details\n\n```php\n// Retrieve multiple activities at once\n$activities = MKbli::getAktifitasUsaha([123, 456]);\n// Returns array with code, title, description\n```\n\nPerfect for displaying a cooperative's business portfolio!\n\n### Activity Relationships\n\n```php\n// Link activity to KBLI details\n$activity = AktifitasUsaha::findOne($id);\n$kbliDetails = $activity->getBakumKBLI()->one();\necho $kbliDetails->judul; // Shows activity name\n```\n\nThis makes it easy to get full details about any business activity.\n\n## Special Activity Types\n\nSome business activities have special rules:\n\n### Savings and Loan Activities\n\n```php\n// Special financial codes\n$conventional = KBLIBakum::KODE_SIMPAN_PINJAM_KONVENSIONAL;\n$syariah = KBLIBakum::KODE_SIMPAN_PINJAM_SYARIAH;\n```\n\nThese require additional licensing and oversight!\n\n### Port Labor Services\n\n```php\n// TKBM (port labor) has special requirements\n$tkbmCode = KBLIBakum::KODE_TKBM;\n// Only available in port cities\n```\n\nLocation-specific activities are restricted geographically.\n\n## Integration with Other Systems\n\nKBLI Business Activity connects with:\n- [Master Transaction Management](05_master_transaction_management_.md) - Activities are set during establishment\n- [Perbaikan Data](06_perbaikan_data__data_correction__.md) - Activities can be corrected if needed\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Activities are part of the transaction\n\nIt ensures cooperatives operate within their authorized business scope!\n\n## What You've Learned\n\nExcellent work! You now understand how the KBLI Business Activity system categorizes and manages what cooperatives can do. The system:\n\n- Uses standardized codes to classify every type of business\n- Filters activities based on cooperative type\n- Prevents inappropriate business selections\n- Maintains a detailed catalog of business descriptions\n- Links cooperatives to their authorized activities\n\nThink of it as a menu at a restaurant - vegetarian restaurants only show vegetarian dishes, seafood restaurants focus on fish, and so on. KBLI ensures each cooperative \"serves\" only what they're licensed to provide!\n\n## Next Steps\n\nNow that you understand how cooperatives define their business activities, let's explore how the system manages geographic information in [Wilayah (Regional) Management](08_wilayah__regional__management_.md). This is crucial because location affects what activities are allowed and which government offices oversee the cooperative!\n---\n# Chapter 8: Wilayah (Regional) Management\n\nWelcome back! In the [previous chapter](07_kbli_business_activity_.md), we learned how KBLI codes help classify what business activities cooperatives can perform. But here's an important question - where exactly are these cooperatives located? How does the system know if a cooperative is in Jakarta or Surabaya? That's where **Wilayah (Regional) Management** comes in - it's like the GPS system for your cooperatives!\n\n## Why Do We Need Regional Management?\n\nImagine you're managing a national pizza delivery chain. You need to know exactly where each branch is located - not just \"somewhere in Jakarta\" but the exact province, city, district, and even neighborhood. Why? Because different areas have different regulations, different government offices, and different delivery zones!\n\nThe **Wilayah** system is exactly like that for cooperatives. It organizes Indonesia's entire geography into a neat hierarchy: from provinces down to cities, then districts, and finally villages. It's like a giant address book that knows every corner of Indonesia and can tell you exactly where each cooperative calls home!\n\n## Your First Use Case: Registering Cooperative Location\n\nLet's say Pak Ahmad is establishing \"Koperasi Nelayan Sejahtera\" (a fishermen's cooperative) and needs to:\n1. Select that it's in East Java Province\n2. Narrow down to Surabaya City\n3. Specify Kenjeran District (near the port)\n4. Pick the exact village where the office is located\n\nThe Wilayah system guides him through Indonesia's geography step by step!\n\n## Key Concepts Made Simple\n\n### 1. Geographic Hierarchy\n\nIndonesia is organized like a family tree:\n\n```php\n// The hierarchy levels\n$province = \"Jawa Timur\";      // Top level\n$city = \"Surabaya\";           // Under province\n$district = \"Kenjeran\";        // Under city\n$village = \"Bulak\";            // Under district\n```\n\nThink of it like your home address - you start broad (country) and get more specific (street number)!\n\n### 2. Parent-Child Relationships\n\nEvery location has a parent (except provinces):\n\n```php\n// Each level knows its parent\n$surabaya->parent = \"Jawa Timur\";\n$kenjeran->parent = \"Surabaya\";\n$bulak->parent = \"Kenjeran\";\n```\n\nIt's like Russian nesting dolls - each location fits inside a larger one!\n\n### 3. Location IDs\n\nEvery location has a unique ID number:\n\n```php\n// Unique identifiers\n$jakarta_id = 31;        // DKI Jakarta\n$surabaya_id = 3578;     // Surabaya City\n$kenjeran_id = 357804;   // Kenjeran District\n```\n\nThese IDs are like postal codes - they uniquely identify each location!\n\n## Finding Your Cooperative's Location\n\nLet's help Pak Ahmad register his cooperative's location:\n\n### Step 1: Get All Provinces\n\n```php\n// Start with provinces\n$provinces = Wilayah::getDataProvinsi();\n// Returns all 34 Indonesian provinces\n```\n\nThis gives you the top-level choices - like choosing a country on a website!\n\n### Step 2: Get Cities in the Province\n\n```php\n// User selects East Java (ID: 35)\n$cities = Wilayah::getChildWilayah(35, 'Kabupaten');\n// Returns all cities in East Java\n```\n\nOnce you pick a province, you get all its cities - just like how selecting a country shows its states!\n\n### Step 3: Get Districts in the City\n\n```php\n// User selects Surabaya (ID: 3578)\n$districts = Wilayah::getChildWilayah(3578, 'Kecamatan');\n// Returns all districts in Surabaya\n```\n\nNow we're getting more specific - like zooming in on a map!\n\n### Step 4: Get Villages in the District\n\n```php\n// User selects Kenjeran (ID: 357804)\n$villages = WilayahSABH::find()\n    ->where(['ID_WILAYAH_M' => 357804])\n    ->all();\n// Returns all villages in Kenjeran\n```\n\nFinally, we get to the most specific level - the exact neighborhood!\n\n## How Location Lookup Works\n\nHere's what happens when you search for locations:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant C as Controller\n    participant W as Wilayah\n    participant DB as Database\n    \n    U->>C: Select province\n    C->>W: Get child locations\n    W->>DB: Query by parent\n    DB->>U: Return cities\n```\n\nThe system navigates the geographic hierarchy to find the right locations!\n\n### The AJAX Location Loading\n\nWhen you select a location, the system loads its children dynamically:\n\n```php\n// In WilayahController.php\npublic function actionGetChildWilayah($id, $tipe) {\n    $data = Wilayah::getChildWilayah($id, $tipe);\n    return json_encode($data);\n}\n```\n\nThis loads locations without refreshing the page - like Google Maps zooming in smoothly!\n\n### Handling Different Location Types\n\nThe system treats villages specially:\n\n```php\n// Villages use a different table\nif($tipe == 'Kelurahan') {\n    // Query WilayahSABH table\n    $data = WilayahSABH::find()\n        ->where(['ID_WILAYAH_M' => $parent])\n        ->all();\n}\n```\n\nVillages have more detailed information, so they get their own special storage!\n\n## Understanding the Database Structure\n\nThe geographic data is stored in two main tables:\n\n```php\n// Main location table (WILAYAH)\n$location = [\n    'WILAYAH_ID' => 3578,\n    'NAMA' => 'Surabaya',\n    'PARENT_ID' => 35,  // East Java\n    'TIPE' => 'Kabupaten'\n];\n```\n\n```php\n// Village details (WILAYAH_SABH)\n$village = [\n    'ID_WIL' => 123456,\n    'NM_KELURAHAN' => 'Bulak',\n    'ID_WILAYAH_M' => 357804,  // Parent district\n    'KD_POS' => '60125'        // Postal code\n];\n```\n\nThe two tables work together to map all of Indonesia!\n\n## Real Implementation: The Wilayah Models\n\nThe main model (in `models/Wilayah.php`) handles location queries:\n\n```php\n// Get all provinces\npublic static function getDataProvinsi() {\n    return self::find()\n        ->where(['PARENT_ID' => '0'])  // No parent\n        ->where(['TIPE' => 'Provinsi'])\n        ->all();\n}\n```\n\nProvinces have no parent (PARENT_ID = 0) - they're the top of the tree!\n\n### Getting Location Names\n\n```php\n// Get name by ID\n$provinceName = Wilayah::getNama(31);\necho $provinceName; // \"DKI Jakarta\"\n```\n\nThis is useful when you need to display the location name to users.\n\n### Getting Location Codes\n\n```php\n// Get official code\n$code = Wilayah::getKodeWilayah(3578);\necho $code; // Official Surabaya code\n```\n\nThese codes are used for government reporting and official documents.\n\n## Working with Complete Addresses\n\nThe WilayahOds model provides complete location information:\n\n```php\n// Get full location details\n$fullLocation = WilayahOds::getWilayah('357812034005');\n// Returns complete hierarchy from province to village\n```\n\nThis gives you the entire address chain in one go - super convenient!\n\n## Integration with Other Systems\n\nWilayah Management connects with:\n- [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) - Every cooperative must have a location\n- [Master Transaction Management](05_master_transaction_management_.md) - Search cooperatives by region\n- [KBLI Business Activity](07_kbli_business_activity_.md) - Some activities are location-specific\n\nIt's the geographic backbone that tells us where everything happens!\n\n## What You've Learned\n\nGreat job! You now understand how the Wilayah system maps every cooperative's location in Indonesia. The system:\n\n- Organizes Indonesia's geography in a clear hierarchy\n- Provides easy navigation from provinces to villages\n- Uses parent-child relationships to maintain structure\n- Supports dynamic loading for smooth user experience\n- Stores detailed information for every location level\n\nThink of it as Google Maps specifically designed for Indonesian cooperatives - it knows every province, city, district, and village, making it easy to pinpoint exactly where each cooperative operates!\n\n## Next Steps\n\nNow that you understand how the system manages geographic locations, let's explore how it integrates with Indonesia's civil registration system in [Dukcapil Integration](09_dukcapil_integration_.md). This is where member identities are verified against national databases!\n---\n# Chapter 9: Dukcapil Integration\n\nWelcome back! In the [previous chapter](08_wilayah__regional__management_.md), we learned how the Wilayah system maps every cooperative's location across Indonesia. But here's a crucial question - how do we know if the people managing these cooperatives are who they claim to be? What if someone uses a fake identity? That's where **Dukcapil Integration** comes in - it's like having a security guard who checks everyone's ID at the door!\n\n## Why Do We Need Identity Verification?\n\nImagine you're running a bank. Before letting someone open an account or become a manager, you need to verify they're a real person with a valid ID, right? You can't just take their word for it - you need to check against official government records.\n\n**Dukcapil** (Direktorat Jenderal Kependudukan dan Pencatatan Sipil - Directorate General of Population and Civil Registration) is Indonesia's national population database. It's like a giant, secure filing cabinet that contains verified information about every Indonesian citizen. When someone wants to manage a cooperative, we check their identity against this database to ensure they're legitimate!\n\n## Your First Use Case: Verifying Board Members\n\nLet's say Ibu Rina wants to become the treasurer of \"Koperasi Maju Sejahtera\". The system needs to:\n1. Take her NIK (ID number) and name\n2. Check with Dukcapil if this person really exists\n3. Verify the name matches the NIK\n4. Approve or reject based on the verification\n\nLet's see how Dukcapil Integration makes cooperatives secure!\n\n## Key Concepts Made Simple\n\n### 1. NIK Verification\n\nNIK (Nomor Induk Kependudukan) is like a Social Security Number - unique for each person:\n\n```php\n// Every Indonesian has a unique NIK\n$nik = \"3175011234567890\";  // 16-digit ID number\n$name = \"Rina Susanti\";     // Must match database\n```\n\nThe system checks if this NIK exists and belongs to the claimed person!\n\n### 2. Verification Response\n\nDukcapil gives different responses based on what it finds:\n\n```php\n// Possible verification results\n$MATCH = \"Sesuai (100)\";        // Perfect match!\n$NOT_FOUND = \"NIK tidak terdapat\"; // ID doesn't exist\n$DECEASED = \"telah meninggal\";   // Person has passed away\n```\n\nIt's like a bouncer checking your ID - you either get in or you don't!\n\n### 3. Security Credentials\n\nThe system needs special permission to access Dukcapil:\n\n```php\n// Like a special key to access the database\n$credentials = [\n    'USER_ID' => 'koperasi_system',\n    'PASSWORD' => 'secret_key',\n    'IP_USER' => '192.168.1.1'\n];\n```\n\nNot just anyone can check the national database - you need authorization!\n\n## Verifying Your First Identity\n\nLet's verify Ibu Rina's identity step by step:\n\n### Step 1: Prepare the Verification Request\n\n```php\n// Create verification request\n$helper = new HelperDukcapil([\n    'nik' => '3175011234567890',\n    'nama' => 'Rina Susanti',\n    'id_koperasi' => 123\n]);\n```\n\nWe prepare the person's details for verification.\n\n### Step 2: Send to Dukcapil\n\n```php\n// Send request to national database\n$error = $helper->curlValidDukcapil();\nif ($error !== true) {\n    echo \"Connection problem!\";\n}\n```\n\nThe system connects to Dukcapil's secure server to check the identity.\n\n### Step 3: Process the Response\n\n```php\n// Get verification result\n$response = $helper->response();\nif ($response['status'] == 1) {\n    echo \"Identity verified!\";\n}\n```\n\nDukcapil tells us if the person is legitimate or not!\n\n## How Identity Verification Works\n\nHere's what happens when you verify someone's identity:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant S as System\n    participant H as Helper\n    participant D as Dukcapil\n    participant L as Log\n    \n    U->>S: Submit NIK & Name\n    S->>H: Prepare request\n    H->>D: Verify identity\n    D->>H: Return result\n    H->>L: Record activity\n```\n\nThe system acts as a secure middleman between your cooperative and the national database!\n\n### The Verification Process\n\nWhen checking an identity, the system first prepares secure credentials:\n\n```php\n// Get stored Dukcapil credentials\n$config = Setting::getValue('credential_dukcapil');\n$decode = json_decode($config);\n```\n\nThese credentials are like your passport to access government data - kept very secure!\n\n### Making the API Call\n\nThe system then contacts Dukcapil's server:\n\n```php\n// Set up secure connection\ncurl_setopt($ch, CURLOPT_URL, $this->URL_API);\ncurl_setopt($ch, CURLOPT_TIMEOUT, 10);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n```\n\nIt's like making a secure phone call to the government office - with timeout protection so we don't wait forever!\n\n## Understanding the Response\n\nDukcapil sends back different types of responses that need interpretation:\n\n### Successful Verification\n\n```php\n// Person exists and name matches\n$response = [\n    'status' => 1,  // Success!\n    'data' => []    // No errors\n];\n```\n\nGreen light - this person is legitimate!\n\n### Identity Mismatch\n\n```php\n// Name doesn't match NIK\nif (stripos($value, \"Tidak Sesuai\") !== false) {\n    $data['NAMA_LGKP'] = 'NAMA tidak sesuai';\n}\n```\n\nThe NIK exists but the name is wrong - potential identity theft attempt!\n\n### Special Cases\n\n```php\n// Check for deceased persons\nif ($code == 11) {\n    return 'Data orang yang telah meninggal';\n}\n```\n\nThe system prevents deceased persons from being registered as cooperative managers!\n\n## Logging for Security\n\nEvery verification attempt is logged for security:\n\n```php\n// Record verification attempt\nLogDukcapil::logDcp(\n    $params,        // What was checked\n    $result,        // Dukcapil's response\n    $status,        // Success or failure\n    'VERIFNIK',     // Type of check\n    $time           // How long it took\n);\n```\n\nThis creates an audit trail - like security camera footage of who checked what and when!\n\n## Handling System Availability\n\nSometimes Dukcapil might be unavailable:\n\n### Checking if Verification is Active\n\n```php\n// Is Dukcapil checking enabled?\n$status = HelperDukcapil::CheckIsActiveValidateDukcapil();\nif (!$status) {\n    // Skip verification temporarily\n    return HelperDukcapil::AllowValidation();\n}\n```\n\nAdministrators can temporarily disable verification for maintenance or testing.\n\n### Timeout Protection\n\n```php\n// Don't wait forever for response\nif (curl_errno($ch) == CURLE_OPERATION_TIMEDOUT) {\n    $result = 'Sistem sedang gangguan';\n}\n```\n\nIf Dukcapil doesn't respond within 10 seconds, we inform the user to try again later!\n\n## Integration with Previous Systems\n\nDukcapil Integration works with:\n- [Data Anggota](03_data_anggota__member_data__.md) - Verifies member identities before saving\n- [Notaris Integration](04_notaris_integration_.md) - Notaries must be verified citizens\n- [Master Transaction Management](05_master_transaction_management_.md) - Only verified people can manage cooperatives\n\nIt's the security layer that ensures only real, legitimate people can run cooperatives!\n\n## What You've Learned\n\nOutstanding! You now understand how Dukcapil Integration protects the cooperative system from identity fraud. The system:\n\n- Verifies citizen identities against the national database\n- Validates that names match their NIK numbers\n- Prevents deceased or fake identities from managing cooperatives\n- Logs all verification attempts for security auditing\n- Handles connection issues gracefully\n\nThink of it as having a government official personally verify every person's ID before they can manage a cooperative - but automated and happening in seconds!\n\n## Next Steps\n\nNow that you understand how identities are verified for security, let's explore how the entire API system is protected in [API Authentication & JWT](10_api_authentication___jwt_.md). This is where we'll learn how to keep the whole system secure from unauthorized access!\n\nRelevant Code Snippets (Code itself remains unchanged):\n--- File: 677 # modules/Api/components/AuthHelper.php ---\n<?php\nnamespace app\\modules\\Api\\components;\n\nuse yii\\base\\Component;\nuse app\\models\\Setting;\n\nclass AuthHelper extends Component {\n    private static $hash = 'sha512';\n\n    public static function checkAuth($authKey, $nik) {\n\n        if(!$authKey || !$nik) {\n            return false;\n        }\n\n        $key = Setting::getValue('secret_key');\n        $hashed = hash(self::$hash, $key . $nik);\n        \n        if($hashed != $authKey) {\n            return false;\n        }\n\n        return true;\n    }\n}\n?>\n\n--- File: 679 # modules/Api/components/JWTHelper.php ---\n<?php \nnamespace app\\modules\\Api\\components;\n\nuse yii\\helpers\\Json;\nuse app\\models\\Setting;\n\nclass JWTHelper {\n\n    const SECRET = 'D0coSp4rtan2016';\n    const HASH_ALGO = \"sha256\";\n\n    public static function makeHeader() {\n        $data = [\n            \"alg\" => \"HS256\",\n            \"typ\" => \"JWT\"\n        ];\n\n        return base64_encode(Json::encode($data) );\n    }\n\n    public static function makePayload($payload) {\n        return base64_encode( Json::encode($payload) );\n    }\n\n    public static function makeSignature($header, $payload) {\n        $secretKey = Setting::getValue('jwt_token', self::SECRET);\n        $data = $header . \".\" . $payload;\n        return hash_hmac(self::HASH_ALGO, $data, self::SECRET);\n    }\n\n    public static function validateSignature($header, $payload, $signature) {\n        $checkSign = self::makeSignature($header, $payload);\n        return $checkSign == $signature;\n    }\n\n    public static function getDataPayload($payload) {\n        return base64_decode($payload);\n    }\n\n    public static function getDataHeader($header) {\n        return base64_decode($header);\n    }\n}\n?>\n\n--- File: 687 # modules/Api/models/JWTToken.php ---\n<?php \nnamespace app\\modules\\Api\\models;\n\nuse yii\\base\\Model;\nuse app\\modules\\Api\\components\\JWTHelper;\nuse yii\\helpers\\Json;\nuse yii\\base\\Exception;\n\nclass JWTToken extends Model {\n    public $token,\n           $header,\n           $payload,\n           $signature;\n\n    public function __construct($token = null)\n    {\n        parent::__construct();\n        $this->header = JWTHelper::makeHeader();\n\n        if($token) {\n            $this->mappingToken($token);\n        }\n    }\n\n\n    public function mappingToken($token) {\n        $removeBear = explode(\"Bearer \", $token);\n        $token = $removeBear[count($removeBear) - 1];\n        \n        $part = explode(\".\", $token);\n        $this->header = $part[0];\n        $this->payload = $part[1];\n        $this->signature = $part[2];\n        $this->token = $token;\n    }\n\n    public function validateSignature() {\n        return JWTHelper::validateSignature($this->header, $this->payload, $this->signature);\n    }\n\n    public function checkExpired() {\n        $data = $this->getDataPayload();\n\n        if(!array_key_exists('exp', $data)) {\n            return true;\n        }\n\n        $expired = Date(\"Y-m-d H:i:s\", strtotime($data['exp']));\n        $now = Date(\"Y-m-d H:i:s\");\n        \n        return $now <= $expired;\n    }\n\n    public function getDataPayload() {\n        $data = JWTHelper::getDataPayload($this->payload);\n        $jsonData = Json::decode($data);\n\n        if( !$jsonData ) {\n            throw new Exception(\"Format Payload Tidak Valid\");\n        }\n        return $jsonData;\n    }\n\n    public function generateToken()\n    {\n        $token = $this->header . \".\" . $this->payload . \".\" . $this->signature;\n        return $token;\n    }\n\n    public function setPayload($payload) {\n        $this->payload = JWTHelper::makePayload($payload);\n        $this->signature = JWTHelper::makeSignature($this->header, $this->payload);\n        return $this;\n    }\n}\n?>\n\n--- File: 683 # modules/Api/controllers/AuthController.php ---\n<?php \nnamespace app\\modules\\Api\\controllers;\n\nuse Yii;\nuse yii\\helpers\\Json;\nuse yii\\rest\\Controller;\nuse yii\\filters\\VerbFilter;\nuse app\\components\\LogHelper;\nuse app\\modules\\Api\\models\\JWTToken;\nuse app\\modules\\Api\\components\\TimeHelper;\nuse yii\\base\\Exception;\nuse app\\models\\User;\nuse yii\\helpers\\ArrayHelper;\nuse app\\models\\Setting;\nuse Firebase\\JWT\\JWT;\n\nclass AuthController extends Controller {\n\n    const EXPR_TIME_TOKEN = \"+30 minutes\";\n    private static $hash = 'sha512';\n\n    public function behaviors()\n    {\n        return [\n            'verbs' => [\n                'class' => VerbFilter::className(),\n                'actions' => [\n                    'login-jwt' => ['POST'],\n                ],\n            ],\n        ];\n    }\n\n    public function actionLoginJwt() {\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"GET_JWT_TOKEN\";\n        $headers = Yii::$app->request->headers;\n        $body = Json::encode(Yii::$app->request->bodyParams);\n\n        try {\n            $dataJson = Json::decode($body);\n\n            if( !$dataJson ) {\n                try {\n                    $dataXml = simplexml_load_string(Yii::$app->request->rawBody);\n                    $json = json_encode($dataXml);\n                    $dataJson = json_decode($json, true);\n                } catch (\\Exception $e) {\n                    throw new Exception(\"Format XML Tidak Valid\", 400);\n                }\n            }\n\n            if( !array_key_exists('username', $dataJson)) {\n                throw new Exception(\"Data Username Tidak Ditemukan\", 400);\n            }\n\n            if( !array_key_exists('password', $dataJson)) {\n                throw new Exception(\"Data Password Tidak Ditemukan\", 400);\n            }\n            $username = $dataJson['username'];\n            $password = $dataJson['password'];\n\n            $dataUser = $this->getUserAuth($username, $password);\n\n            if( !$dataUser ) {\n                throw new Exception(\"User Tidak Ditemukan\", 401);\n            }\n\n            $hashKey = Setting::getValue('jwt_key');\n            $tokenId = $this->generate_sign();\n            $issuedAt = time();\n            $notBefore = $issuedAt;\n            $expire = $notBefore + 1800; // adding 60 minutes\n            $serverName = \"AHU-ONLINE\";\n\n            $token = new JWT();\n            $data = [\n                'iat' => $issuedAt,\n                'jti' => $tokenId,\n                'iss' => $serverName,\n                'nbf' => $notBefore,\n                'exp' => $expire,\n                'data' => [\n                    'theOneThatWeGaveId'   => $dataUser->id,\n                    'theOneThatWeGaveName' => $username,\n                ]\n            ];\n\n            $secretKey = base64_encode($hashKey);\n            $algorithm = 'HS256';\n            $token = $token::encode($data, $secretKey, $algorithm);\n        }\n        catch(\\Exception $e) {\n            $res = [\n                'code' => '01',\n                'message' => $e->getMessage(),\n                'status' => $e->getCode(),\n            ];\n            \n            $log = LogHelper::saveLog([\n                'service_uri' => $url,\n                'request' => $body,\n                'response' => $res,\n                'additional_data' => Json::encode( $headers->toArray() ),\n                'is_error' => 1,\n                'type' => $type_api,\n                'execution_time' => TimeHelper::getElapsedTime($start),\n            ]);\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '02',\n            'message' => 'success',\n            'token' => $token,\n            'status' => 200\n        ];\n\n        $log = LogHelper::saveLog([\n            'service_uri' => $url,\n            'request' => $body,\n            'response' => $res,\n            'additional_data' => Json::encode( $headers->toArray() ),\n            'is_error' => 0,\n            'type' => $type_api,\n            'execution_time' => TimeHelper::getElapsedTime($start),\n        ]);\n        \n        return $this->asJson($res);\n    }\n\n    public function actionAuthorization(){\n        $start = microtime(true);\n        $url = Yii::$app->request->absoluteUrl;\n        $type_api = \"GET_AUTH_TOKEN\";\n        $headers = Yii::$app->request->headers;\n        $body = Json::encode(Yii::$app->request->bodyParams);\n\n        try {\n            $dataJson = Json::decode($body);\n\n            if( !$dataJson ) {\n                throw new Exception(\"Format JSON Tidak Valid\");\n            }\n\n            if( !array_key_exists('nomor_transaksi', $dataJson)) {\n                throw new Exception(\"Data nomor_transaksi Tidak Ditemukan\", 400);\n            }\n\n            if( !array_key_exists('secret_key', $dataJson)) {\n                throw new Exception(\"Data secret_key Tidak Ditemukan\", 400);\n            }\n\n\n            $nomor_transaksi = $dataJson['nomor_transaksi'];\n            $secret_key = $dataJson['secret_key'];\n\n            $dataAuth = $this->getUpdateAuth($nomor_transaksi, $secret_key);\n\n            if( !$dataAuth ) {\n                throw new Exception(\"Auth Tidak Berhasil\", 401);\n            }\n\n            $token = $dataAuth;\n        \n        }\n        catch(\\Exception $e) {\n            $res = [\n                'code' => '01',\n                'message' => $e->getMessage(),\n                'status' => $e->getCode(),\n            ];\n            \n            $log = LogHelper::saveLog([\n                'service_uri' => $url,\n                'request' => $body,\n                'response' => $res,\n                'additional_data' => Json::encode( $headers->toArray() ),\n                'is_error' => 1,\n                'type' => $type_api,\n                'execution_time' => TimeHelper::getElapsedTime($start),\n            ]);\n\n            return $this->asJson($res);\n        }\n\n        $res = [\n            'code' => '02',\n            'message' => 'success',\n            'token' => $token,\n            'status' => 200\n        ];\n\n        $log = LogHelper::saveLog([\n            'service_uri' => $url,\n            'request' => $body,\n            'response' => $res,\n            'additional_data' => Json::encode( $headers->toArray() ),\n            'is_error' => 0,\n            'type' => $type_api,\n            'execution_time' => TimeHelper::getElapsedTime($start),\n        ]);\n        \n        return $this->asJson($res);\n    }\n\n    public function getUpdateAuth($nomor_transaksi, $secret_key){\n        $hashed = hash(self::$hash, $secret_key . $nomor_transaksi);\n        return $hashed;\n    }\n\n    public function getUserAuth($username, $password) {\n        // Tambahkan disini jika ada group lain yang diperbolehkan get JWT Token\n        $whitelist_group = [\n            'oss',\n            'ods',\n        ];\n        $user = User::findByUsername($username);\n\n        if( !$user ) {\n            throw new Exception(\"User Tidak Ditemukan\", 404);\n        }\n\n        $cekPass = $user->validatePassword($password);\n\n        if( !$cekPass ) {\n            throw new Exception(\"Username / Password Salah\", 401);\n        }\n\n        $groups = ArrayHelper::getColumn($user->userGroup, 'group_id');\n        \n        foreach($whitelist_group as $whitelist) {\n            if( in_array($whitelist, $groups) ) {\n                return $user;\n            }\n        }\n\n        return false;\n    }\n\n    public static function generate_sign() {\n        $now = time();\n        $setengah_jam = (int)floor($now / 30 / 60);\n        $t = 'candrabeqx' . $setengah_jam . 'docotel';\n        $x = crypt($t, \"$2y$10$\" . substr(md5($t),0,22));\n\n        return $x;\n    }\n\n}\n?>\n\nInstructions for the chapter (Generate content in English unless specified otherwise):\n- Start with a clear heading (e.g., `# Chapter 10: API Authentication & JWT\n`). Use the provided concept name.\n\n- If this is not the first chapter, begin with a brief transition from the previous chapter, referencing it with a proper Markdown link using its name.\n\n- Begin with a high-level motivation explaining what problem this abstraction solves. Start with a central use case as a concrete example. The whole chapter should guide the reader to understand how to solve this use case. Make it very minimal and friendly to beginners.\n\n- If the abstraction is complex, break it down into key concepts. Explain each concept one-by-one in a very beginner-friendly way.\n\n- Explain how to use this abstraction to solve the use case. Give example inputs and outputs for code snippets (if the output isn't values, describe at a high level what will happen).\n\n- Each code block should be BELOW 10 lines! If longer code blocks are needed, break them down into smaller pieces and walk through them one-by-one. Aggresively simplify the code to make it minimal. Use comments to skip non-important implementation details. Each code block should have a beginner friendly explanation right after it.\n\n- Describe the internal implementation to help understand what's under the hood. First provide a non-code or code-light walkthrough on what happens step-by-step when the abstraction is called. It's recommended to use a simple sequenceDiagram with a dummy example - keep it minimal with at most 5 participants to ensure clarity. If participant name has space, use: `participant QP as Query Processing`. .\n\n- Then dive deeper into code for the internal implementation with references to files. Provide example code blocks, but make them similarly simple and beginner-friendly. Explain.\n\n- IMPORTANT: When you need to refer to other core abstractions covered in other chapters, ALWAYS use proper Markdown links like this: [Chapter Title](filename.md). Use the Complete Tutorial Structure above to find the correct filename and the chapter title. Translate the surrounding text.\n\n- Use mermaid diagrams to illustrate complex concepts (```mermaid``` format). .\n\n- Heavily use analogies and examples throughout to help beginners understand.\n\n- End the chapter with a brief conclusion that summarizes what was learned and provides a transition to the next chapter. If there is a next chapter, use a proper Markdown link: [Next Chapter Title](next_chapter_filename).\n\n- Ensure the tone is welcoming and easy for a newcomer to understand.\n\n- Output *only* the Markdown content for this chapter.\n\nNow, directly provide a super beginner-friendly Markdown output (DON'T need ```markdown``` tags):\n": "# Chapter 10: API Authentication & JWT\n\nWelcome back! In the [previous chapter](09_dukcapil_integration_.md), we learned how the Dukcapil Integration verifies people's identities against the national database. But here's a critical question - how do we protect the entire API system from hackers or unauthorized access? What if someone tries to steal cooperative data or make unauthorized changes? That's where **API Authentication & JWT** comes in - it's like having a high-tech security system with multiple locks on your digital doors!\n\n## Why Do We Need API Authentication?\n\nImagine your cooperative system is like a bank vault full of sensitive information. You wouldn't leave the vault door open for anyone to walk in, right? You'd want:\n- A security guard checking IDs at the entrance (Authentication)\n- Special access cards for authorized personnel (JWT tokens)\n- Different levels of access for different people (Authorization)\n- A log of who entered and when (Audit trail)\n\n**API Authentication with JWT** (JSON Web Tokens) is exactly this security system for your cooperative API. It ensures that only authorized applications and users can access your sensitive cooperative data. Without it, anyone could read member information, create fake cooperatives, or cause chaos!\n\n## Your First Use Case: Securing External Access\n\nLet's say a government portal needs to:\n1. Connect to your cooperative system\n2. Verify it has permission to access data\n3. Get a secure \"access pass\" (JWT token)\n4. Use this pass to make API calls safely\n\nLet's see how Authentication & JWT protects your system!\n\n## Key Concepts Made Simple\n\n### 1. JWT Tokens\n\nThink of a JWT token as a temporary security badge:\n\n```php\n// A JWT has three parts\n$header = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\";\n$payload = \"eyJpZCI6MTIzLCJuYW1lIjoiT1NTIn0=\";\n$signature = \"SflKxwRJSMeKKF2QT4fwpMe\";\n```\n\nLike a concert wristband - it proves you paid (authenticated) and lets you in!\n\n### 2. Authentication vs Authorization\n\nThese are different but work together:\n\n```php\n// Authentication: Who are you?\n$username = \"oss_portal\";\n$password = \"secret123\";\n\n// Authorization: What can you do?\n$canRead = true;\n$canWrite = false;\n```\n\nAuthentication is showing your ID; authorization is what rooms you can enter!\n\n### 3. Token Expiration\n\nTokens don't last forever - they expire for security:\n\n```php\n// Tokens expire after 30 minutes\n$expire = time() + 1800; // 1800 seconds = 30 minutes\n```\n\nIt's like a parking ticket - valid for a limited time only!\n\n## Getting Your First JWT Token\n\nLet's help a government portal get authenticated:\n\n### Step 1: Send Login Credentials\n\n```php\n// Prepare login request\n$credentials = [\n    'username' => 'oss_portal',\n    'password' => 'secret_password'\n];\n```\n\nThe external system sends its username and password to prove who it is.\n\n### Step 2: Verify the Credentials\n\n```php\n// System checks if user exists\n$user = User::findByUsername('oss_portal');\n$validPassword = $user->validatePassword('secret_password');\n```\n\nThe system verifies the credentials against its user database.\n\n### Step 3: Generate JWT Token\n\n```php\n// Create token with user info\n$tokenData = [\n    'exp' => time() + 1800,  // Expires in 30 min\n    'data' => ['userId' => 123, 'name' => 'oss_portal']\n];\n```\n\nIf credentials are valid, the system creates a special token with user information!\n\n## How JWT Authentication Works\n\nHere's what happens when an external system requests access:\n\n```mermaid\nsequenceDiagram\n    participant E as External System\n    participant A as Auth Controller\n    participant V as Validator\n    participant J as JWT Generator\n    participant R as Response\n    \n    E->>A: Send credentials\n    A->>V: Check user exists\n    V->>J: Generate token\n    J->>R: Return JWT\n    R->>E: Access granted!\n```\n\nThe system carefully validates credentials before issuing the precious JWT token!\n\n### The Login Process\n\nWhen someone tries to login (in `AuthController.php`):\n\n```php\n// Extract credentials from request\n$dataJson = Json::decode($body);\n$username = $dataJson['username'];\n$password = $dataJson['password'];\n```\n\nFirst, we get the credentials from the API request.\n\n### User Validation\n\n```php\n// Only certain groups can get tokens\n$whitelist_group = ['oss', 'ods'];\nif (in_array($user->group, $whitelist_group)) {\n    return $user; // Authorized!\n}\n```\n\nNot everyone can get API access - only specific user groups are allowed!\n\n## Understanding JWT Structure\n\nA JWT token has three important parts (handled by `JWTHelper.php`):\n\n### The Header\n\n```php\n// Tells what type of token this is\n$header = [\n    \"alg\" => \"HS256\",  // Encryption algorithm\n    \"typ\" => \"JWT\"     // Token type\n];\n```\n\nLike the cover of a passport - identifies what kind of document it is!\n\n### The Payload\n\n```php\n// Contains user data and expiration\n$payload = [\n    'exp' => 1234567890,  // When it expires\n    'data' => ['userId' => 123]  // User info\n];\n```\n\nThe actual \"meat\" of the token - who you are and when access expires!\n\n### The Signature\n\n```php\n// Ensures token hasn't been tampered with\n$signature = hash_hmac(\"sha256\", $data, $secretKey);\n```\n\nLike a wax seal on a letter - proves it's authentic and unmodified!\n\n## Token Validation Process\n\nWhen someone uses a JWT token (in `JWTToken.php`):\n\n### Checking Token Format\n\n```php\n// Split token into its three parts\n$parts = explode(\".\", $token);\n$this->header = $parts[0];\n$this->payload = $parts[1];\n$this->signature = $parts[2];\n```\n\nWe break down the token to examine each part.\n\n### Verifying Signature\n\n```php\n// Make sure token wasn't modified\n$isValid = JWTHelper::validateSignature(\n    $header, $payload, $signature\n);\n```\n\nThis checks if the token is genuine - like checking for counterfeit money!\n\n### Checking Expiration\n\n```php\n// See if token is still valid\n$expired = Date(\"Y-m-d H:i:s\", $data['exp']);\n$now = Date(\"Y-m-d H:i:s\");\nreturn $now <= $expired;  // Still valid?\n```\n\nEven valid tokens expire - ensuring stolen tokens can't be used forever!\n\n## Alternative Authentication Methods\n\nThe system also supports simpler hash-based authentication (in `AuthHelper.php`):\n\n```php\n// Create secure hash from secret + data\n$key = Setting::getValue('secret_key');\n$hashed = hash('sha512', $key . $nik);\n```\n\nThis is like a simpler padlock - still secure but less flexible than JWT!\n\n## Security Best Practices\n\nThe system implements several security measures:\n\n### Secure Token Generation\n\n```php\n// Complex token ID generation\n$tokenId = $this->generate_sign();\n// Uses time-based salting for uniqueness\n```\n\nEach token gets a unique, unpredictable ID - like a lottery number!\n\n### Limited Token Lifetime\n\n```php\n// Tokens expire quickly\n$expire = $notBefore + 1800; // Only 30 minutes\n```\n\nShort-lived tokens reduce risk if one gets stolen!\n\n### Audit Logging\n\n```php\n// Log all authentication attempts\nLogHelper::saveLog([\n    'request' => $body,\n    'response' => $res,\n    'is_error' => $errorFlag\n]);\n```\n\nEvery login attempt is recorded - like security camera footage!\n\n## What You've Learned\n\nCongratulations! You now understand how API Authentication & JWT protects the entire cooperative system. The system:\n\n- Validates user credentials before granting access\n- Issues time-limited JWT tokens as proof of authentication\n- Uses cryptographic signatures to prevent token tampering\n- Restricts API access to authorized user groups only\n- Logs all authentication attempts for security auditing\n- Expires tokens automatically to limit exposure\n\nThink of it as a combination of a bouncer, security badge system, and surveillance cameras all working together to protect your cooperative data from unauthorized access!\n\n## Next Steps\n\nYou've completed the journey through the Koperasi system! From [Transaksi Koperasi](01_transaksi_koperasi__cooperative_transaction__.md) where we started, through identity verification, geographic management, and now API security - you understand how all the pieces work together to create a secure, reliable cooperative management system. \n\nThe JWT authentication you just learned is the final protective layer that ensures only authorized systems can interact with your cooperatives. With this knowledge, you're ready to build and secure your own cooperative applications!"}